/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/font.ts":
/*!*********************!*\
  !*** ./src/font.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TexturePage": () => (/* binding */ TexturePage),
/* harmony export */   "Font": () => (/* binding */ Font)
/* harmony export */ });
/* harmony import */ var _imgui_impl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./imgui_impl */ "./src/imgui_impl.ts");
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index */ "./src/index.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};


var FONT_SPACE = 3;
var TexturePage = /** @class */ (function () {
    function TexturePage(tex_size, font) {
        this.Dirty = false;
        var font_size = font.FontSize;
        this.FontName = font_size + "px " + font.FontName;
        this.Scale = _index__WEBPACK_IMPORTED_MODULE_1__.ImGui_Impl.font_scale;
        this.TextureSize = tex_size;
        this.FontSize = font_size;
        this.SpaceX = font.SpaceX;
        this.FontImageSize = Math.ceil((font_size + FONT_SPACE) * this.Scale);
        this.PixelData = new Uint16Array(tex_size * tex_size);
        this.CharsPerRow = Math.floor(tex_size / this.FontImageSize);
        this.MaxCharCount = this.CharsPerRow * this.CharsPerRow;
        this.Current = 0;
        var gl = _index__WEBPACK_IMPORTED_MODULE_1__.ImGui_Impl.gl;
        this.Texure = new _imgui_impl__WEBPACK_IMPORTED_MODULE_0__.Texture();
        this.Texure._srcType = gl.UNSIGNED_SHORT_4_4_4_4;
        if (this.Scale == _index__WEBPACK_IMPORTED_MODULE_1__.ImGui_Impl.canvas_scale) {
            this.Texure._minFilter = gl.NEAREST;
            this.Texure._magFilter = gl.NEAREST;
        }
        this.Texure.Update(this.PixelData, { width: tex_size, height: tex_size });
    }
    TexturePage.prototype.Destroy = function () {
        this.Texure.Destroy();
    };
    TexturePage.prototype.Create = function (glyph, ctx) {
        var image_size = this.FontImageSize;
        var cur = this.Current;
        this.Current++;
        var ix = cur % this.CharsPerRow;
        var iy = Math.floor(cur / this.CharsPerRow);
        var px = ix * (image_size);
        var py = iy * (image_size);
        var text = String.fromCharCode(glyph.Char);
        glyph.TextureID = this.Texure._texture;
        ctx.save();
        ctx.canvas.width = image_size;
        ctx.canvas.height = image_size;
        ctx.textAlign = 'left';
        ctx.textBaseline = 'top';
        ctx.font = this.FontName;
        ctx.clearRect(0, 0, image_size, image_size);
        ctx.scale(this.Scale, this.Scale);
        ctx.fillText(text, 1, 1);
        //ctx.strokeRect(0,0,image_size-FONT_SPACE, image_size-FONT_SPACE);
        var m = ctx.measureText(text);
        ctx.restore();
        var img_data = ctx.getImageData(0, 0, image_size, image_size);
        var img_data_u32 = new Uint32Array(img_data.data.buffer);
        for (var y = 0; y < image_size; y++) {
            for (var x = 0; x < image_size; x++) {
                this.PixelData[(py + y) * this.TextureSize + px + x] = 0xFFF0 |
                    (((img_data_u32[y * image_size + x] >> 24) & 0xFF) >> 4);
            }
        }
        glyph.X0 = 0;
        //glyph.Y0=m.fontBoundingBoxDescent-this.FontSize;
        glyph.Y0 = m.fontBoundingBoxAscent;
        glyph.X1 = m.width + 2;
        glyph.Y1 = this.FontSize;
        glyph.AdvanceX = (m.width) + (glyph.Char < 256 ? this.SpaceX[0] : this.SpaceX[1]);
        var uv_scale = 1.0 / (this.TextureSize);
        glyph.U0 = (px) * uv_scale;
        glyph.V0 = (py + 2.5 * this.Scale) * uv_scale;
        glyph.U1 = (px + (m.width + 2) * this.Scale) * uv_scale;
        glyph.V1 = glyph.V0 + (this.FontSize * this.Scale) * uv_scale;
        this.Dirty = true;
        return glyph;
    };
    TexturePage.prototype.UpdateTexture = function () {
        this.Dirty = false;
        console.log(this.FontName + " UpdateTexture");
        this.Texure.Update(this.PixelData);
    };
    Object.defineProperty(TexturePage.prototype, "IsAvailable", {
        get: function () { return this.Current < this.MaxCharCount; },
        enumerable: false,
        configurable: true
    });
    return TexturePage;
}());

var Font = /** @class */ (function () {
    function Font() {
        this.texturePage = [];
        this.dirty = false;
        var canvas = document.createElement("canvas");
        canvas.style.backgroundColor = "transparent";
        canvas.style.position = 'absolute';
        canvas.style.top = '0px';
        canvas.style.left = '0px';
        canvas.style.borderWidth = '0';
        canvas.style.borderStyle = 'none';
        canvas.style.pointerEvents = 'none';
        this.canvas = canvas;
        this.ctx = canvas.getContext("2d");
    }
    Font.prototype.Destroy = function () {
        this.texturePage.forEach(function (page) {
            page.Destroy();
        });
        this.texturePage = [];
    };
    Font.prototype.Create = function (glyph, font) {
        var page = null;
        for (var _i = 0, _a = this.texturePage; _i < _a.length; _i++) {
            var page2 = _a[_i];
            if (page2.FontSize == font.FontSize && page2.IsAvailable) {
                page = page2;
                break;
            }
        }
        if (page == null) {
            page = new TexturePage(512, font);
            this.texturePage.push(page);
        }
        this.canvas.width = font.FontSize;
        this.canvas.height = font.FontSize;
        this.dirty = true;
        return page.Create(glyph, this.ctx);
    };
    Font.prototype.UpdateTexture = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (!this.dirty)
                    return [2 /*return*/];
                console.log("Font UpdateTexture begin");
                this.texturePage.forEach(function (page) {
                    if (page.Dirty) {
                        page.UpdateTexture();
                    }
                });
                console.log("Font UpdateTexture end");
                this.dirty = false;
                return [2 /*return*/];
            });
        });
    };
    return Font;
}());



/***/ }),

/***/ "./src/imgui.ts":
/*!**********************!*\
  !*** ./src/imgui.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Bind": () => (/* reexport module object */ _bind_imgui__WEBPACK_IMPORTED_MODULE_0__),
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   "bind": () => (/* binding */ bind),
/* harmony export */   "isMobile": () => (/* binding */ isMobile),
/* harmony export */   "VERSION": () => (/* binding */ IMGUI_VERSION),
/* harmony export */   "IMGUI_VERSION": () => (/* binding */ IMGUI_VERSION),
/* harmony export */   "VERSION_NUM": () => (/* binding */ IMGUI_VERSION_NUM),
/* harmony export */   "IMGUI_VERSION_NUM": () => (/* binding */ IMGUI_VERSION_NUM),
/* harmony export */   "CHECKVERSION": () => (/* binding */ IMGUI_CHECKVERSION),
/* harmony export */   "IMGUI_CHECKVERSION": () => (/* binding */ IMGUI_CHECKVERSION),
/* harmony export */   "IMGUI_HAS_TABLE": () => (/* binding */ IMGUI_HAS_TABLE),
/* harmony export */   "ASSERT": () => (/* binding */ ASSERT),
/* harmony export */   "IM_ASSERT": () => (/* binding */ IM_ASSERT),
/* harmony export */   "ARRAYSIZE": () => (/* binding */ IM_ARRAYSIZE),
/* harmony export */   "IM_ARRAYSIZE": () => (/* binding */ IM_ARRAYSIZE),
/* harmony export */   "StringBuffer": () => (/* binding */ ImStringBuffer),
/* harmony export */   "ImStringBuffer": () => (/* binding */ ImStringBuffer),
/* harmony export */   "WindowFlags": () => (/* binding */ ImGuiWindowFlags),
/* harmony export */   "ImGuiWindowFlags": () => (/* binding */ ImGuiWindowFlags),
/* harmony export */   "InputTextFlags": () => (/* binding */ ImGuiInputTextFlags),
/* harmony export */   "ImGuiInputTextFlags": () => (/* binding */ ImGuiInputTextFlags),
/* harmony export */   "TreeNodeFlags": () => (/* binding */ ImGuiTreeNodeFlags),
/* harmony export */   "ImGuiTreeNodeFlags": () => (/* binding */ ImGuiTreeNodeFlags),
/* harmony export */   "PopupFlags": () => (/* binding */ ImGuiPopupFlags),
/* harmony export */   "ImGuiPopupFlags": () => (/* binding */ ImGuiPopupFlags),
/* harmony export */   "SelectableFlags": () => (/* binding */ ImGuiSelectableFlags),
/* harmony export */   "ImGuiSelectableFlags": () => (/* binding */ ImGuiSelectableFlags),
/* harmony export */   "ComboFlags": () => (/* binding */ ImGuiComboFlags),
/* harmony export */   "ImGuiComboFlags": () => (/* binding */ ImGuiComboFlags),
/* harmony export */   "TabBarFlags": () => (/* binding */ ImGuiTabBarFlags),
/* harmony export */   "ImGuiTabBarFlags": () => (/* binding */ ImGuiTabBarFlags),
/* harmony export */   "TabItemFlags": () => (/* binding */ ImGuiTabItemFlags),
/* harmony export */   "ImGuiTabItemFlags": () => (/* binding */ ImGuiTabItemFlags),
/* harmony export */   "TableFlags": () => (/* binding */ ImGuiTableFlags),
/* harmony export */   "ImGuiTableFlags": () => (/* binding */ ImGuiTableFlags),
/* harmony export */   "TableColumnFlags": () => (/* binding */ ImGuiTableColumnFlags),
/* harmony export */   "ImGuiTableColumnFlags": () => (/* binding */ ImGuiTableColumnFlags),
/* harmony export */   "TableRowFlags": () => (/* binding */ ImGuiTableRowFlags),
/* harmony export */   "ImGuiTableRowFlags": () => (/* binding */ ImGuiTableRowFlags),
/* harmony export */   "TableBgTarget": () => (/* binding */ ImGuiTableBgTarget),
/* harmony export */   "ImGuiTableBgTarget": () => (/* binding */ ImGuiTableBgTarget),
/* harmony export */   "FocusedFlags": () => (/* binding */ ImGuiFocusedFlags),
/* harmony export */   "ImGuiFocusedFlags": () => (/* binding */ ImGuiFocusedFlags),
/* harmony export */   "HoveredFlags": () => (/* binding */ ImGuiHoveredFlags),
/* harmony export */   "ImGuiHoveredFlags": () => (/* binding */ ImGuiHoveredFlags),
/* harmony export */   "DragDropFlags": () => (/* binding */ ImGuiDragDropFlags),
/* harmony export */   "ImGuiDragDropFlags": () => (/* binding */ ImGuiDragDropFlags),
/* harmony export */   "IMGUI_PAYLOAD_TYPE_COLOR_3F": () => (/* binding */ IMGUI_PAYLOAD_TYPE_COLOR_3F),
/* harmony export */   "IMGUI_PAYLOAD_TYPE_COLOR_4F": () => (/* binding */ IMGUI_PAYLOAD_TYPE_COLOR_4F),
/* harmony export */   "DataType": () => (/* binding */ ImGuiDataType),
/* harmony export */   "ImGuiDataType": () => (/* binding */ ImGuiDataType),
/* harmony export */   "Dir": () => (/* binding */ ImGuiDir),
/* harmony export */   "ImGuiDir": () => (/* binding */ ImGuiDir),
/* harmony export */   "SortDirection": () => (/* binding */ ImGuiSortDirection),
/* harmony export */   "ImGuiSortDirection": () => (/* binding */ ImGuiSortDirection),
/* harmony export */   "Key": () => (/* binding */ ImGuiKey),
/* harmony export */   "ImGuiKey": () => (/* binding */ ImGuiKey),
/* harmony export */   "KeyModFlags": () => (/* binding */ ImGuiKeyModFlags),
/* harmony export */   "ImGuiKeyModFlags": () => (/* binding */ ImGuiKeyModFlags),
/* harmony export */   "NavInput": () => (/* binding */ ImGuiNavInput),
/* harmony export */   "ImGuiNavInput": () => (/* binding */ ImGuiNavInput),
/* harmony export */   "ConfigFlags": () => (/* binding */ ImGuiConfigFlags),
/* harmony export */   "ImGuiConfigFlags": () => (/* binding */ ImGuiConfigFlags),
/* harmony export */   "Col": () => (/* binding */ ImGuiCol),
/* harmony export */   "ImGuiCol": () => (/* binding */ ImGuiCol),
/* harmony export */   "StyleVar": () => (/* binding */ ImGuiStyleVar),
/* harmony export */   "ImGuiStyleVar": () => (/* binding */ ImGuiStyleVar),
/* harmony export */   "BackendFlags": () => (/* binding */ ImGuiBackendFlags),
/* harmony export */   "ImGuiBackendFlags": () => (/* binding */ ImGuiBackendFlags),
/* harmony export */   "ButtonFlags": () => (/* binding */ ImGuiButtonFlags),
/* harmony export */   "ImGuiButtonFlags": () => (/* binding */ ImGuiButtonFlags),
/* harmony export */   "ColorEditFlags": () => (/* binding */ ImGuiColorEditFlags),
/* harmony export */   "ImGuiColorEditFlags": () => (/* binding */ ImGuiColorEditFlags),
/* harmony export */   "SliderFlags": () => (/* binding */ ImGuiSliderFlags),
/* harmony export */   "ImGuiSliderFlags": () => (/* binding */ ImGuiSliderFlags),
/* harmony export */   "MouseButton": () => (/* binding */ ImGuiMouseButton),
/* harmony export */   "ImGuiMouseButton": () => (/* binding */ ImGuiMouseButton),
/* harmony export */   "MouseCursor": () => (/* binding */ ImGuiMouseCursor),
/* harmony export */   "ImGuiMouseCursor": () => (/* binding */ ImGuiMouseCursor),
/* harmony export */   "Cond": () => (/* binding */ ImGuiCond),
/* harmony export */   "ImGuiCond": () => (/* binding */ ImGuiCond),
/* harmony export */   "DrawCornerFlags": () => (/* binding */ ImDrawCornerFlags),
/* harmony export */   "ImDrawCornerFlags": () => (/* binding */ ImDrawCornerFlags),
/* harmony export */   "wListFlags": () => (/* binding */ ImDrawListFlags),
/* harmony export */   "ImDrawListFlags": () => (/* binding */ ImDrawListFlags),
/* harmony export */   "Vec2": () => (/* binding */ ImVec2),
/* harmony export */   "ImVec2": () => (/* binding */ ImVec2),
/* harmony export */   "Vec4": () => (/* binding */ ImVec4),
/* harmony export */   "ImVec4": () => (/* binding */ ImVec4),
/* harmony export */   "Vector": () => (/* binding */ ImVector),
/* harmony export */   "ImVector": () => (/* binding */ ImVector),
/* harmony export */   "UNICODE_CODEPOINT_MAX": () => (/* binding */ IM_UNICODE_CODEPOINT_MAX),
/* harmony export */   "IM_UNICODE_CODEPOINT_MAX": () => (/* binding */ IM_UNICODE_CODEPOINT_MAX),
/* harmony export */   "TextFilter": () => (/* binding */ ImGuiTextFilter),
/* harmony export */   "ImGuiTextFilter": () => (/* binding */ ImGuiTextFilter),
/* harmony export */   "TextBuffer": () => (/* binding */ ImGuiTextBuffer),
/* harmony export */   "ImGuiTextBuffer": () => (/* binding */ ImGuiTextBuffer),
/* harmony export */   "ImGuiStorage": () => (/* binding */ ImGuiStorage),
/* harmony export */   "IM_COL32_R_SHIFT": () => (/* binding */ IM_COL32_R_SHIFT),
/* harmony export */   "IM_COL32_G_SHIFT": () => (/* binding */ IM_COL32_G_SHIFT),
/* harmony export */   "IM_COL32_B_SHIFT": () => (/* binding */ IM_COL32_B_SHIFT),
/* harmony export */   "IM_COL32_A_SHIFT": () => (/* binding */ IM_COL32_A_SHIFT),
/* harmony export */   "IM_COL32_A_MASK": () => (/* binding */ IM_COL32_A_MASK),
/* harmony export */   "COL32": () => (/* binding */ IM_COL32),
/* harmony export */   "IM_COL32": () => (/* binding */ IM_COL32),
/* harmony export */   "IM_COL32_WHITE": () => (/* binding */ IM_COL32_WHITE),
/* harmony export */   "COL32_WHITE": () => (/* binding */ IM_COL32_WHITE),
/* harmony export */   "IM_COL32_BLACK": () => (/* binding */ IM_COL32_BLACK),
/* harmony export */   "COL32_BLACK": () => (/* binding */ IM_COL32_BLACK),
/* harmony export */   "IM_COL32_BLACK_TRANS": () => (/* binding */ IM_COL32_BLACK_TRANS),
/* harmony export */   "COL32_BLACK_TRANS": () => (/* binding */ IM_COL32_BLACK_TRANS),
/* harmony export */   "Color": () => (/* binding */ ImColor),
/* harmony export */   "ImColor": () => (/* binding */ ImColor),
/* harmony export */   "InputTextDefaultSize": () => (/* binding */ ImGuiInputTextDefaultSize),
/* harmony export */   "ImGuiInputTextDefaultSize": () => (/* binding */ ImGuiInputTextDefaultSize),
/* harmony export */   "InputTextCallbackData": () => (/* binding */ ImGuiInputTextCallbackData),
/* harmony export */   "ImGuiInputTextCallbackData": () => (/* binding */ ImGuiInputTextCallbackData),
/* harmony export */   "SizeCallbackData": () => (/* binding */ ImGuiSizeCallbackData),
/* harmony export */   "ImGuiSizeCallbackData": () => (/* binding */ ImGuiSizeCallbackData),
/* harmony export */   "TableColumnSortSpecs": () => (/* binding */ ImGuiTableColumnSortSpecs),
/* harmony export */   "ImGuiTableColumnSortSpecs": () => (/* binding */ ImGuiTableColumnSortSpecs),
/* harmony export */   "TableSortSpecs": () => (/* binding */ ImGuiTableSortSpecs),
/* harmony export */   "ImGuiTableSortSpecs": () => (/* binding */ ImGuiTableSortSpecs),
/* harmony export */   "ListClipper": () => (/* binding */ ImGuiListClipper),
/* harmony export */   "ImGuiListClipper": () => (/* binding */ ImGuiListClipper),
/* harmony export */   "IM_DRAWLIST_TEX_LINES_WIDTH_MAX": () => (/* binding */ IM_DRAWLIST_TEX_LINES_WIDTH_MAX),
/* harmony export */   "ImDrawCallback_ResetRenderState": () => (/* binding */ ImDrawCallback_ResetRenderState),
/* harmony export */   "DrawCmd": () => (/* binding */ ImDrawCmd),
/* harmony export */   "ImDrawCmd": () => (/* binding */ ImDrawCmd),
/* harmony export */   "DrawIdxSize": () => (/* binding */ ImDrawIdxSize),
/* harmony export */   "ImDrawIdxSize": () => (/* binding */ ImDrawIdxSize),
/* harmony export */   "DrawVertSize": () => (/* binding */ ImDrawVertSize),
/* harmony export */   "ImDrawVertSize": () => (/* binding */ ImDrawVertSize),
/* harmony export */   "DrawVertPosOffset": () => (/* binding */ ImDrawVertPosOffset),
/* harmony export */   "ImDrawVertPosOffset": () => (/* binding */ ImDrawVertPosOffset),
/* harmony export */   "DrawVertUVOffset": () => (/* binding */ ImDrawVertUVOffset),
/* harmony export */   "ImDrawVertUVOffset": () => (/* binding */ ImDrawVertUVOffset),
/* harmony export */   "DrawVertColOffset": () => (/* binding */ ImDrawVertColOffset),
/* harmony export */   "ImDrawVertColOffset": () => (/* binding */ ImDrawVertColOffset),
/* harmony export */   "DrawVert": () => (/* binding */ ImDrawVert),
/* harmony export */   "ImDrawVert": () => (/* binding */ ImDrawVert),
/* harmony export */   "ImDrawCmdHeader": () => (/* binding */ ImDrawCmdHeader),
/* harmony export */   "ImDrawChannel": () => (/* binding */ ImDrawChannel),
/* harmony export */   "ImDrawListSharedData": () => (/* binding */ ImDrawListSharedData),
/* harmony export */   "DrawList": () => (/* binding */ ImDrawList),
/* harmony export */   "ImDrawList": () => (/* binding */ ImDrawList),
/* harmony export */   "DrawData": () => (/* binding */ ImDrawData),
/* harmony export */   "ImDrawData": () => (/* binding */ ImDrawData),
/* harmony export */   "script_ImFontConfig": () => (/* binding */ script_ImFontConfig),
/* harmony export */   "FontConfig": () => (/* binding */ ImFontConfig),
/* harmony export */   "ImFontConfig": () => (/* binding */ ImFontConfig),
/* harmony export */   "script_ImFontGlyph": () => (/* binding */ script_ImFontGlyph),
/* harmony export */   "FontGlyph": () => (/* binding */ ImFontGlyph),
/* harmony export */   "ImFontGlyph": () => (/* binding */ ImFontGlyph),
/* harmony export */   "ImFontAtlasCustomRect": () => (/* binding */ ImFontAtlasCustomRect),
/* harmony export */   "FontAtlasFlags": () => (/* binding */ ImFontAtlasFlags),
/* harmony export */   "ImFontAtlasFlags": () => (/* binding */ ImFontAtlasFlags),
/* harmony export */   "FontAtlas": () => (/* binding */ ImFontAtlas),
/* harmony export */   "ImFontAtlas": () => (/* binding */ ImFontAtlas),
/* harmony export */   "Font": () => (/* binding */ ImFont),
/* harmony export */   "ImFont": () => (/* binding */ ImFont),
/* harmony export */   "Style": () => (/* binding */ ImGuiStyle),
/* harmony export */   "ImGuiStyle": () => (/* binding */ ImGuiStyle),
/* harmony export */   "IO": () => (/* binding */ ImGuiIO),
/* harmony export */   "ImGuiIO": () => (/* binding */ ImGuiIO),
/* harmony export */   "ImGuiContext": () => (/* binding */ ImGuiContext),
/* harmony export */   "CreateContext": () => (/* binding */ CreateContext),
/* harmony export */   "DestroyContext": () => (/* binding */ DestroyContext),
/* harmony export */   "GetCurrentContext": () => (/* binding */ GetCurrentContext),
/* harmony export */   "SetCurrentContext": () => (/* binding */ SetCurrentContext),
/* harmony export */   "GetIO": () => (/* binding */ GetIO),
/* harmony export */   "GetStyle": () => (/* binding */ GetStyle),
/* harmony export */   "NewFrame": () => (/* binding */ NewFrame),
/* harmony export */   "EndFrame": () => (/* binding */ EndFrame),
/* harmony export */   "Render": () => (/* binding */ Render),
/* harmony export */   "GetDrawData": () => (/* binding */ GetDrawData),
/* harmony export */   "ShowDemoWindow": () => (/* binding */ ShowDemoWindow),
/* harmony export */   "ShowMetricsWindow": () => (/* binding */ ShowMetricsWindow),
/* harmony export */   "ShowAboutWindow": () => (/* binding */ ShowAboutWindow),
/* harmony export */   "ShowStyleEditor": () => (/* binding */ ShowStyleEditor),
/* harmony export */   "ShowStyleSelector": () => (/* binding */ ShowStyleSelector),
/* harmony export */   "ShowFontSelector": () => (/* binding */ ShowFontSelector),
/* harmony export */   "ShowUserGuide": () => (/* binding */ ShowUserGuide),
/* harmony export */   "GetVersion": () => (/* binding */ GetVersion),
/* harmony export */   "StyleColorsDark": () => (/* binding */ StyleColorsDark),
/* harmony export */   "StyleColorsLight": () => (/* binding */ StyleColorsLight),
/* harmony export */   "StyleColorsClassic": () => (/* binding */ StyleColorsClassic),
/* harmony export */   "Begin": () => (/* binding */ Begin),
/* harmony export */   "End": () => (/* binding */ End),
/* harmony export */   "BeginChild": () => (/* binding */ BeginChild),
/* harmony export */   "EndChild": () => (/* binding */ EndChild),
/* harmony export */   "IsWindowAppearing": () => (/* binding */ IsWindowAppearing),
/* harmony export */   "IsWindowCollapsed": () => (/* binding */ IsWindowCollapsed),
/* harmony export */   "IsWindowFocused": () => (/* binding */ IsWindowFocused),
/* harmony export */   "IsWindowHovered": () => (/* binding */ IsWindowHovered),
/* harmony export */   "GetWindowDrawList": () => (/* binding */ GetWindowDrawList),
/* harmony export */   "GetWindowPos": () => (/* binding */ GetWindowPos),
/* harmony export */   "GetWindowSize": () => (/* binding */ GetWindowSize),
/* harmony export */   "GetWindowWidth": () => (/* binding */ GetWindowWidth),
/* harmony export */   "GetWindowHeight": () => (/* binding */ GetWindowHeight),
/* harmony export */   "SetNextWindowPos": () => (/* binding */ SetNextWindowPos),
/* harmony export */   "SetNextWindowSize": () => (/* binding */ SetNextWindowSize),
/* harmony export */   "SetNextWindowSizeConstraints": () => (/* binding */ SetNextWindowSizeConstraints),
/* harmony export */   "SetNextWindowContentSize": () => (/* binding */ SetNextWindowContentSize),
/* harmony export */   "SetNextWindowCollapsed": () => (/* binding */ SetNextWindowCollapsed),
/* harmony export */   "SetNextWindowFocus": () => (/* binding */ SetNextWindowFocus),
/* harmony export */   "SetNextWindowBgAlpha": () => (/* binding */ SetNextWindowBgAlpha),
/* harmony export */   "SetWindowPos": () => (/* binding */ SetWindowPos),
/* harmony export */   "SetWindowSize": () => (/* binding */ SetWindowSize),
/* harmony export */   "SetWindowCollapsed": () => (/* binding */ SetWindowCollapsed),
/* harmony export */   "SetWindowFocus": () => (/* binding */ SetWindowFocus),
/* harmony export */   "SetWindowFontScale": () => (/* binding */ SetWindowFontScale),
/* harmony export */   "GetContentRegionAvail": () => (/* binding */ GetContentRegionAvail),
/* harmony export */   "GetContentRegionMax": () => (/* binding */ GetContentRegionMax),
/* harmony export */   "GetWindowContentRegionMin": () => (/* binding */ GetWindowContentRegionMin),
/* harmony export */   "GetWindowContentRegionMax": () => (/* binding */ GetWindowContentRegionMax),
/* harmony export */   "GetWindowContentRegionWidth": () => (/* binding */ GetWindowContentRegionWidth),
/* harmony export */   "GetScrollX": () => (/* binding */ GetScrollX),
/* harmony export */   "GetScrollY": () => (/* binding */ GetScrollY),
/* harmony export */   "SetScrollX": () => (/* binding */ SetScrollX),
/* harmony export */   "SetScrollY": () => (/* binding */ SetScrollY),
/* harmony export */   "GetScrollMaxX": () => (/* binding */ GetScrollMaxX),
/* harmony export */   "GetScrollMaxY": () => (/* binding */ GetScrollMaxY),
/* harmony export */   "SetScrollHereX": () => (/* binding */ SetScrollHereX),
/* harmony export */   "SetScrollHereY": () => (/* binding */ SetScrollHereY),
/* harmony export */   "SetScrollFromPosX": () => (/* binding */ SetScrollFromPosX),
/* harmony export */   "SetScrollFromPosY": () => (/* binding */ SetScrollFromPosY),
/* harmony export */   "PushFont": () => (/* binding */ PushFont),
/* harmony export */   "PopFont": () => (/* binding */ PopFont),
/* harmony export */   "PushStyleColor": () => (/* binding */ PushStyleColor),
/* harmony export */   "PopStyleColor": () => (/* binding */ PopStyleColor),
/* harmony export */   "PushStyleVar": () => (/* binding */ PushStyleVar),
/* harmony export */   "PopStyleVar": () => (/* binding */ PopStyleVar),
/* harmony export */   "PushAllowKeyboardFocus": () => (/* binding */ PushAllowKeyboardFocus),
/* harmony export */   "PopAllowKeyboardFocus": () => (/* binding */ PopAllowKeyboardFocus),
/* harmony export */   "PushButtonRepeat": () => (/* binding */ PushButtonRepeat),
/* harmony export */   "PopButtonRepeat": () => (/* binding */ PopButtonRepeat),
/* harmony export */   "PushItemWidth": () => (/* binding */ PushItemWidth),
/* harmony export */   "PopItemWidth": () => (/* binding */ PopItemWidth),
/* harmony export */   "SetNextItemWidth": () => (/* binding */ SetNextItemWidth),
/* harmony export */   "CalcItemWidth": () => (/* binding */ CalcItemWidth),
/* harmony export */   "PushTextWrapPos": () => (/* binding */ PushTextWrapPos),
/* harmony export */   "PopTextWrapPos": () => (/* binding */ PopTextWrapPos),
/* harmony export */   "GetFont": () => (/* binding */ GetFont),
/* harmony export */   "GetFontSize": () => (/* binding */ GetFontSize),
/* harmony export */   "GetFontTexUvWhitePixel": () => (/* binding */ GetFontTexUvWhitePixel),
/* harmony export */   "GetColorU32": () => (/* binding */ GetColorU32),
/* harmony export */   "GetStyleColorVec4": () => (/* binding */ GetStyleColorVec4),
/* harmony export */   "Separator": () => (/* binding */ Separator),
/* harmony export */   "SameLine": () => (/* binding */ SameLine),
/* harmony export */   "NewLine": () => (/* binding */ NewLine),
/* harmony export */   "Spacing": () => (/* binding */ Spacing),
/* harmony export */   "Dummy": () => (/* binding */ Dummy),
/* harmony export */   "Indent": () => (/* binding */ Indent),
/* harmony export */   "Unindent": () => (/* binding */ Unindent),
/* harmony export */   "BeginGroup": () => (/* binding */ BeginGroup),
/* harmony export */   "EndGroup": () => (/* binding */ EndGroup),
/* harmony export */   "GetCursorPos": () => (/* binding */ GetCursorPos),
/* harmony export */   "GetCursorPosX": () => (/* binding */ GetCursorPosX),
/* harmony export */   "GetCursorPosY": () => (/* binding */ GetCursorPosY),
/* harmony export */   "SetCursorPos": () => (/* binding */ SetCursorPos),
/* harmony export */   "SetCursorPosX": () => (/* binding */ SetCursorPosX),
/* harmony export */   "SetCursorPosY": () => (/* binding */ SetCursorPosY),
/* harmony export */   "GetCursorStartPos": () => (/* binding */ GetCursorStartPos),
/* harmony export */   "GetCursorScreenPos": () => (/* binding */ GetCursorScreenPos),
/* harmony export */   "SetCursorScreenPos": () => (/* binding */ SetCursorScreenPos),
/* harmony export */   "AlignTextToFramePadding": () => (/* binding */ AlignTextToFramePadding),
/* harmony export */   "GetTextLineHeight": () => (/* binding */ GetTextLineHeight),
/* harmony export */   "GetTextLineHeightWithSpacing": () => (/* binding */ GetTextLineHeightWithSpacing),
/* harmony export */   "GetFrameHeight": () => (/* binding */ GetFrameHeight),
/* harmony export */   "GetFrameHeightWithSpacing": () => (/* binding */ GetFrameHeightWithSpacing),
/* harmony export */   "PushID": () => (/* binding */ PushID),
/* harmony export */   "PopID": () => (/* binding */ PopID),
/* harmony export */   "GetID": () => (/* binding */ GetID),
/* harmony export */   "TextUnformatted": () => (/* binding */ TextUnformatted),
/* harmony export */   "Text": () => (/* binding */ Text),
/* harmony export */   "TextColored": () => (/* binding */ TextColored),
/* harmony export */   "TextDisabled": () => (/* binding */ TextDisabled),
/* harmony export */   "TextWrapped": () => (/* binding */ TextWrapped),
/* harmony export */   "LabelText": () => (/* binding */ LabelText),
/* harmony export */   "BulletText": () => (/* binding */ BulletText),
/* harmony export */   "Button": () => (/* binding */ Button),
/* harmony export */   "SmallButton": () => (/* binding */ SmallButton),
/* harmony export */   "ArrowButton": () => (/* binding */ ArrowButton),
/* harmony export */   "InvisibleButton": () => (/* binding */ InvisibleButton),
/* harmony export */   "Image": () => (/* binding */ Image),
/* harmony export */   "ImageButton": () => (/* binding */ ImageButton),
/* harmony export */   "Checkbox": () => (/* binding */ Checkbox),
/* harmony export */   "CheckboxFlags": () => (/* binding */ CheckboxFlags),
/* harmony export */   "RadioButton": () => (/* binding */ RadioButton),
/* harmony export */   "ProgressBar": () => (/* binding */ ProgressBar),
/* harmony export */   "Bullet": () => (/* binding */ Bullet),
/* harmony export */   "BeginCombo": () => (/* binding */ BeginCombo),
/* harmony export */   "EndCombo": () => (/* binding */ EndCombo),
/* harmony export */   "Combo": () => (/* binding */ Combo),
/* harmony export */   "DragFloat": () => (/* binding */ DragFloat),
/* harmony export */   "DragFloat2": () => (/* binding */ DragFloat2),
/* harmony export */   "DragFloat3": () => (/* binding */ DragFloat3),
/* harmony export */   "DragFloat4": () => (/* binding */ DragFloat4),
/* harmony export */   "DragFloatRange2": () => (/* binding */ DragFloatRange2),
/* harmony export */   "DragInt": () => (/* binding */ DragInt),
/* harmony export */   "DragInt2": () => (/* binding */ DragInt2),
/* harmony export */   "DragInt3": () => (/* binding */ DragInt3),
/* harmony export */   "DragInt4": () => (/* binding */ DragInt4),
/* harmony export */   "DragIntRange2": () => (/* binding */ DragIntRange2),
/* harmony export */   "DragScalar": () => (/* binding */ DragScalar),
/* harmony export */   "SliderFloat": () => (/* binding */ SliderFloat),
/* harmony export */   "SliderFloat2": () => (/* binding */ SliderFloat2),
/* harmony export */   "SliderFloat3": () => (/* binding */ SliderFloat3),
/* harmony export */   "SliderFloat4": () => (/* binding */ SliderFloat4),
/* harmony export */   "SliderAngle": () => (/* binding */ SliderAngle),
/* harmony export */   "SliderAngle3": () => (/* binding */ SliderAngle3),
/* harmony export */   "SliderInt": () => (/* binding */ SliderInt),
/* harmony export */   "SliderInt2": () => (/* binding */ SliderInt2),
/* harmony export */   "SliderInt3": () => (/* binding */ SliderInt3),
/* harmony export */   "SliderInt4": () => (/* binding */ SliderInt4),
/* harmony export */   "SliderScalar": () => (/* binding */ SliderScalar),
/* harmony export */   "VSliderFloat": () => (/* binding */ VSliderFloat),
/* harmony export */   "VSliderInt": () => (/* binding */ VSliderInt),
/* harmony export */   "VSliderScalar": () => (/* binding */ VSliderScalar),
/* harmony export */   "InputText": () => (/* binding */ InputText),
/* harmony export */   "InputTextMultiline": () => (/* binding */ InputTextMultiline),
/* harmony export */   "InputTextWithHint": () => (/* binding */ InputTextWithHint),
/* harmony export */   "InputFloat": () => (/* binding */ InputFloat),
/* harmony export */   "InputFloat2": () => (/* binding */ InputFloat2),
/* harmony export */   "InputFloat3": () => (/* binding */ InputFloat3),
/* harmony export */   "InputFloat4": () => (/* binding */ InputFloat4),
/* harmony export */   "InputInt": () => (/* binding */ InputInt),
/* harmony export */   "InputInt2": () => (/* binding */ InputInt2),
/* harmony export */   "InputInt3": () => (/* binding */ InputInt3),
/* harmony export */   "InputInt4": () => (/* binding */ InputInt4),
/* harmony export */   "InputDouble": () => (/* binding */ InputDouble),
/* harmony export */   "InputScalar": () => (/* binding */ InputScalar),
/* harmony export */   "ColorEdit3": () => (/* binding */ ColorEdit3),
/* harmony export */   "ColorEdit4": () => (/* binding */ ColorEdit4),
/* harmony export */   "ColorPicker3": () => (/* binding */ ColorPicker3),
/* harmony export */   "ColorPicker4": () => (/* binding */ ColorPicker4),
/* harmony export */   "ColorButton": () => (/* binding */ ColorButton),
/* harmony export */   "SetColorEditOptions": () => (/* binding */ SetColorEditOptions),
/* harmony export */   "TreeNode": () => (/* binding */ TreeNode),
/* harmony export */   "TreeNodeEx": () => (/* binding */ TreeNodeEx),
/* harmony export */   "TreePush": () => (/* binding */ TreePush),
/* harmony export */   "TreePop": () => (/* binding */ TreePop),
/* harmony export */   "GetTreeNodeToLabelSpacing": () => (/* binding */ GetTreeNodeToLabelSpacing),
/* harmony export */   "CollapsingHeader": () => (/* binding */ CollapsingHeader),
/* harmony export */   "SetNextItemOpen": () => (/* binding */ SetNextItemOpen),
/* harmony export */   "Selectable": () => (/* binding */ Selectable),
/* harmony export */   "ListBox": () => (/* binding */ ListBox),
/* harmony export */   "ListBoxHeader": () => (/* binding */ ListBoxHeader),
/* harmony export */   "ListBoxFooter": () => (/* binding */ ListBoxFooter),
/* harmony export */   "PlotLines": () => (/* binding */ PlotLines),
/* harmony export */   "PlotHistogram": () => (/* binding */ PlotHistogram),
/* harmony export */   "Value": () => (/* binding */ Value),
/* harmony export */   "BeginMenuBar": () => (/* binding */ BeginMenuBar),
/* harmony export */   "EndMenuBar": () => (/* binding */ EndMenuBar),
/* harmony export */   "BeginMainMenuBar": () => (/* binding */ BeginMainMenuBar),
/* harmony export */   "EndMainMenuBar": () => (/* binding */ EndMainMenuBar),
/* harmony export */   "BeginMenu": () => (/* binding */ BeginMenu),
/* harmony export */   "EndMenu": () => (/* binding */ EndMenu),
/* harmony export */   "MenuItem": () => (/* binding */ MenuItem),
/* harmony export */   "BeginTooltip": () => (/* binding */ BeginTooltip),
/* harmony export */   "EndTooltip": () => (/* binding */ EndTooltip),
/* harmony export */   "SetTooltip": () => (/* binding */ SetTooltip),
/* harmony export */   "BeginPopup": () => (/* binding */ BeginPopup),
/* harmony export */   "BeginPopupModal": () => (/* binding */ BeginPopupModal),
/* harmony export */   "EndPopup": () => (/* binding */ EndPopup),
/* harmony export */   "OpenPopup": () => (/* binding */ OpenPopup),
/* harmony export */   "OpenPopupOnItemClick": () => (/* binding */ OpenPopupOnItemClick),
/* harmony export */   "CloseCurrentPopup": () => (/* binding */ CloseCurrentPopup),
/* harmony export */   "BeginPopupContextItem": () => (/* binding */ BeginPopupContextItem),
/* harmony export */   "BeginPopupContextWindow": () => (/* binding */ BeginPopupContextWindow),
/* harmony export */   "BeginPopupContextVoid": () => (/* binding */ BeginPopupContextVoid),
/* harmony export */   "IsPopupOpen": () => (/* binding */ IsPopupOpen),
/* harmony export */   "BeginTable": () => (/* binding */ BeginTable),
/* harmony export */   "EndTable": () => (/* binding */ EndTable),
/* harmony export */   "TableNextRow": () => (/* binding */ TableNextRow),
/* harmony export */   "TableNextColumn": () => (/* binding */ TableNextColumn),
/* harmony export */   "TableSetColumnIndex": () => (/* binding */ TableSetColumnIndex),
/* harmony export */   "TableSetupColumn": () => (/* binding */ TableSetupColumn),
/* harmony export */   "TableSetupScrollFreeze": () => (/* binding */ TableSetupScrollFreeze),
/* harmony export */   "TableHeadersRow": () => (/* binding */ TableHeadersRow),
/* harmony export */   "TableHeader": () => (/* binding */ TableHeader),
/* harmony export */   "TableGetSortSpecs": () => (/* binding */ TableGetSortSpecs),
/* harmony export */   "TableGetColumnCount": () => (/* binding */ TableGetColumnCount),
/* harmony export */   "TableGetColumnIndex": () => (/* binding */ TableGetColumnIndex),
/* harmony export */   "TableGetRowIndex": () => (/* binding */ TableGetRowIndex),
/* harmony export */   "TableGetColumnName": () => (/* binding */ TableGetColumnName),
/* harmony export */   "TableGetColumnFlags": () => (/* binding */ TableGetColumnFlags),
/* harmony export */   "TableSetBgColor": () => (/* binding */ TableSetBgColor),
/* harmony export */   "Columns": () => (/* binding */ Columns),
/* harmony export */   "NextColumn": () => (/* binding */ NextColumn),
/* harmony export */   "GetColumnIndex": () => (/* binding */ GetColumnIndex),
/* harmony export */   "GetColumnWidth": () => (/* binding */ GetColumnWidth),
/* harmony export */   "SetColumnWidth": () => (/* binding */ SetColumnWidth),
/* harmony export */   "GetColumnOffset": () => (/* binding */ GetColumnOffset),
/* harmony export */   "SetColumnOffset": () => (/* binding */ SetColumnOffset),
/* harmony export */   "GetColumnsCount": () => (/* binding */ GetColumnsCount),
/* harmony export */   "BeginTabBar": () => (/* binding */ BeginTabBar),
/* harmony export */   "EndTabBar": () => (/* binding */ EndTabBar),
/* harmony export */   "BeginTabItem": () => (/* binding */ BeginTabItem),
/* harmony export */   "EndTabItem": () => (/* binding */ EndTabItem),
/* harmony export */   "TabItemButton": () => (/* binding */ TabItemButton),
/* harmony export */   "SetTabItemClosed": () => (/* binding */ SetTabItemClosed),
/* harmony export */   "LogToTTY": () => (/* binding */ LogToTTY),
/* harmony export */   "LogToFile": () => (/* binding */ LogToFile),
/* harmony export */   "LogToClipboard": () => (/* binding */ LogToClipboard),
/* harmony export */   "LogFinish": () => (/* binding */ LogFinish),
/* harmony export */   "LogButtons": () => (/* binding */ LogButtons),
/* harmony export */   "LogText": () => (/* binding */ LogText),
/* harmony export */   "BeginDragDropSource": () => (/* binding */ BeginDragDropSource),
/* harmony export */   "SetDragDropPayload": () => (/* binding */ SetDragDropPayload),
/* harmony export */   "EndDragDropSource": () => (/* binding */ EndDragDropSource),
/* harmony export */   "BeginDragDropTarget": () => (/* binding */ BeginDragDropTarget),
/* harmony export */   "AcceptDragDropPayload": () => (/* binding */ AcceptDragDropPayload),
/* harmony export */   "EndDragDropTarget": () => (/* binding */ EndDragDropTarget),
/* harmony export */   "GetDragDropPayload": () => (/* binding */ GetDragDropPayload),
/* harmony export */   "PushClipRect": () => (/* binding */ PushClipRect),
/* harmony export */   "PopClipRect": () => (/* binding */ PopClipRect),
/* harmony export */   "SetItemDefaultFocus": () => (/* binding */ SetItemDefaultFocus),
/* harmony export */   "SetKeyboardFocusHere": () => (/* binding */ SetKeyboardFocusHere),
/* harmony export */   "IsItemHovered": () => (/* binding */ IsItemHovered),
/* harmony export */   "IsItemActive": () => (/* binding */ IsItemActive),
/* harmony export */   "IsItemFocused": () => (/* binding */ IsItemFocused),
/* harmony export */   "IsItemClicked": () => (/* binding */ IsItemClicked),
/* harmony export */   "IsItemVisible": () => (/* binding */ IsItemVisible),
/* harmony export */   "IsItemEdited": () => (/* binding */ IsItemEdited),
/* harmony export */   "IsItemActivated": () => (/* binding */ IsItemActivated),
/* harmony export */   "IsItemDeactivated": () => (/* binding */ IsItemDeactivated),
/* harmony export */   "IsItemDeactivatedAfterEdit": () => (/* binding */ IsItemDeactivatedAfterEdit),
/* harmony export */   "IsItemToggledOpen": () => (/* binding */ IsItemToggledOpen),
/* harmony export */   "IsAnyItemHovered": () => (/* binding */ IsAnyItemHovered),
/* harmony export */   "IsAnyItemActive": () => (/* binding */ IsAnyItemActive),
/* harmony export */   "IsAnyItemFocused": () => (/* binding */ IsAnyItemFocused),
/* harmony export */   "GetItemRectMin": () => (/* binding */ GetItemRectMin),
/* harmony export */   "GetItemRectMax": () => (/* binding */ GetItemRectMax),
/* harmony export */   "GetItemRectSize": () => (/* binding */ GetItemRectSize),
/* harmony export */   "SetItemAllowOverlap": () => (/* binding */ SetItemAllowOverlap),
/* harmony export */   "IsRectVisible": () => (/* binding */ IsRectVisible),
/* harmony export */   "GetTime": () => (/* binding */ GetTime),
/* harmony export */   "GetFrameCount": () => (/* binding */ GetFrameCount),
/* harmony export */   "GetBackgroundDrawList": () => (/* binding */ GetBackgroundDrawList),
/* harmony export */   "GetForegroundDrawList": () => (/* binding */ GetForegroundDrawList),
/* harmony export */   "GetDrawListSharedData": () => (/* binding */ GetDrawListSharedData),
/* harmony export */   "GetStyleColorName": () => (/* binding */ GetStyleColorName),
/* harmony export */   "CalcListClipping": () => (/* binding */ CalcListClipping),
/* harmony export */   "BeginChildFrame": () => (/* binding */ BeginChildFrame),
/* harmony export */   "EndChildFrame": () => (/* binding */ EndChildFrame),
/* harmony export */   "CalcTextSize": () => (/* binding */ CalcTextSize),
/* harmony export */   "ColorConvertU32ToFloat4": () => (/* binding */ ColorConvertU32ToFloat4),
/* harmony export */   "ColorConvertFloat4ToU32": () => (/* binding */ ColorConvertFloat4ToU32),
/* harmony export */   "ColorConvertRGBtoHSV": () => (/* binding */ ColorConvertRGBtoHSV),
/* harmony export */   "ColorConvertHSVtoRGB": () => (/* binding */ ColorConvertHSVtoRGB),
/* harmony export */   "GetKeyIndex": () => (/* binding */ GetKeyIndex),
/* harmony export */   "IsKeyDown": () => (/* binding */ IsKeyDown),
/* harmony export */   "IsKeyPressed": () => (/* binding */ IsKeyPressed),
/* harmony export */   "IsKeyReleased": () => (/* binding */ IsKeyReleased),
/* harmony export */   "GetKeyPressedAmount": () => (/* binding */ GetKeyPressedAmount),
/* harmony export */   "CaptureKeyboardFromApp": () => (/* binding */ CaptureKeyboardFromApp),
/* harmony export */   "IsMouseDown": () => (/* binding */ IsMouseDown),
/* harmony export */   "IsMouseClicked": () => (/* binding */ IsMouseClicked),
/* harmony export */   "IsMouseDoubleClicked": () => (/* binding */ IsMouseDoubleClicked),
/* harmony export */   "IsMouseReleased": () => (/* binding */ IsMouseReleased),
/* harmony export */   "IsMouseHoveringRect": () => (/* binding */ IsMouseHoveringRect),
/* harmony export */   "IsMousePosValid": () => (/* binding */ IsMousePosValid),
/* harmony export */   "IsAnyMouseDown": () => (/* binding */ IsAnyMouseDown),
/* harmony export */   "GetMousePos": () => (/* binding */ GetMousePos),
/* harmony export */   "GetMousePosOnOpeningCurrentPopup": () => (/* binding */ GetMousePosOnOpeningCurrentPopup),
/* harmony export */   "IsMouseDragging": () => (/* binding */ IsMouseDragging),
/* harmony export */   "GetMouseDragDelta": () => (/* binding */ GetMouseDragDelta),
/* harmony export */   "ResetMouseDragDelta": () => (/* binding */ ResetMouseDragDelta),
/* harmony export */   "GetMouseCursor": () => (/* binding */ GetMouseCursor),
/* harmony export */   "SetMouseCursor": () => (/* binding */ SetMouseCursor),
/* harmony export */   "CaptureMouseFromApp": () => (/* binding */ CaptureMouseFromApp),
/* harmony export */   "GetClipboardText": () => (/* binding */ GetClipboardText),
/* harmony export */   "SetClipboardText": () => (/* binding */ SetClipboardText),
/* harmony export */   "LoadIniSettingsFromDisk": () => (/* binding */ LoadIniSettingsFromDisk),
/* harmony export */   "LoadIniSettingsFromMemory": () => (/* binding */ LoadIniSettingsFromMemory),
/* harmony export */   "SaveIniSettingsToDisk": () => (/* binding */ SaveIniSettingsToDisk),
/* harmony export */   "SaveIniSettingsToMemory": () => (/* binding */ SaveIniSettingsToMemory),
/* harmony export */   "DebugCheckVersionAndDataLayout": () => (/* binding */ DebugCheckVersionAndDataLayout),
/* harmony export */   "SetAllocatorFunctions": () => (/* binding */ SetAllocatorFunctions),
/* harmony export */   "MemAlloc": () => (/* binding */ MemAlloc),
/* harmony export */   "MemFree": () => (/* binding */ MemFree)
/* harmony export */ });
/* harmony import */ var _bind_imgui__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bind-imgui */ "./src/bind-imgui.js");
/* harmony import */ var _bind_imgui__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_bind_imgui__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _input__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./input */ "./src/input.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};



var bind;
var dom_input;
var dom_inputMultiline;
var dom_password;
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(value) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, new Promise(function (resolve) {
                    _bind_imgui__WEBPACK_IMPORTED_MODULE_0___default()(value).then(function (value) {
                        bind = value;
                        resolve();
                    });
                })];
        });
    });
}

function import_Scalar(sca) {
    if (Array.isArray(sca)) {
        return [sca[0]];
    }
    if (typeof sca === "function") {
        return [sca()];
    }
    return [sca.x];
}
function export_Scalar(tuple, sca) {
    if (Array.isArray(sca)) {
        sca[0] = tuple[0];
        return;
    }
    if (typeof sca === "function") {
        sca(tuple[0]);
        return;
    }
    sca.x = tuple[0];
}
function import_Vector2(vec) {
    if (Array.isArray(vec)) {
        return [vec[0], vec[1]];
    }
    return [vec.x, vec.y];
}
function export_Vector2(tuple, vec) {
    if (Array.isArray(vec)) {
        vec[0] = tuple[0];
        vec[1] = tuple[1];
        return;
    }
    vec.x = tuple[0];
    vec.y = tuple[1];
}
function import_Vector3(vec) {
    if (Array.isArray(vec)) {
        return [vec[0], vec[1], vec[2]];
    }
    return [vec.x, vec.y, vec.z];
}
function export_Vector3(tuple, vec) {
    if (Array.isArray(vec)) {
        vec[0] = tuple[0];
        vec[1] = tuple[1];
        vec[2] = tuple[2];
        return;
    }
    vec.x = tuple[0];
    vec.y = tuple[1];
    vec.z = tuple[2];
}
function import_Vector4(vec) {
    if (Array.isArray(vec)) {
        return [vec[0], vec[1], vec[2], vec[3] || 0];
    }
    return [vec.x, vec.y, vec.z, vec.w];
}
function export_Vector4(tuple, vec) {
    if (Array.isArray(vec)) {
        vec[0] = tuple[0];
        vec[1] = tuple[1];
        vec[2] = tuple[2];
        vec[3] = tuple[3];
        return;
    }
    vec.x = tuple[0];
    vec.y = tuple[1];
    vec.z = tuple[2];
    vec.w = tuple[3];
}
function import_Color3(col) {
    if (Array.isArray(col)) {
        return [col[0], col[1], col[2]];
    }
    if ("r" in col) {
        return [col.r, col.g, col.b];
    }
    return [col.x, col.y, col.z];
}
function export_Color3(tuple, col) {
    if (Array.isArray(col)) {
        col[0] = tuple[0];
        col[1] = tuple[1];
        col[2] = tuple[2];
        return;
    }
    if ("r" in col) {
        col.r = tuple[0];
        col.g = tuple[1];
        col.b = tuple[2];
        return;
    }
    col.x = tuple[0];
    col.y = tuple[1];
    col.z = tuple[2];
}
function import_Color4(col) {
    if (Array.isArray(col)) {
        return [col[0], col[1], col[2], col[3]];
    }
    if ("r" in col) {
        return [col.r, col.g, col.b, col.a];
    }
    return [col.x, col.y, col.z, col.w];
}
function export_Color4(tuple, col) {
    if (Array.isArray(col)) {
        col[0] = tuple[0];
        col[1] = tuple[1];
        col[2] = tuple[2];
        col[3] = tuple[3];
        return;
    }
    if ("r" in col) {
        col.r = tuple[0];
        col.g = tuple[1];
        col.b = tuple[2];
        col.a = tuple[3];
        return;
    }
    col.x = tuple[0];
    col.y = tuple[1];
    col.z = tuple[2];
    col.w = tuple[3];
}
var isMobile = {
    Android: function () {
        return navigator.userAgent.match(/Android/i);
    },
    BlackBerry: function () {
        return navigator.userAgent.match(/BlackBerry/i);
    },
    iOS: function () {
        return navigator.userAgent.match(/iPhone|iPad|iPod/i);
    },
    Opera: function () {
        return navigator.userAgent.match(/Opera Mini/i);
    },
    Windows: function () {
        return navigator.userAgent.match(/IEMobile/i) || navigator.userAgent.match(/WPDesktop/i);
    },
    any: function () {
        return (isMobile.Android() || isMobile.BlackBerry() || isMobile.iOS() || isMobile.Opera() || isMobile.Windows());
    },
    isPortrait: function () {
        return window.innerHeight > window.innerWidth;
    },
};
//import * as config from "./imconfig";

var IMGUI_VERSION = "1.80"; // bind.IMGUI_VERSION;

var IMGUI_VERSION_NUM = 18000; // bind.IMGUI_VERSION_NUM;
// #define IMGUI_CHECKVERSION()        ImGui::DebugCheckVersionAndDataLayout(IMGUI_VERSION, sizeof(ImGuiIO), sizeof(ImGuiStyle), sizeof(ImVec2), sizeof(ImVec4), sizeof(ImDrawVert))

function IMGUI_CHECKVERSION() { return DebugCheckVersionAndDataLayout(IMGUI_VERSION, bind.ImGuiIOSize, bind.ImGuiStyleSize, bind.ImVec2Size, bind.ImVec4Size, bind.ImDrawVertSize, bind.ImDrawIdxSize); }
var IMGUI_HAS_TABLE = true;
function ASSERT(c) { if (!c) {
    throw new Error();
} }
function IM_ASSERT(c) { if (!c) {
    throw new Error();
} }

function IM_ARRAYSIZE(_ARR) {
    if (_ARR instanceof ImStringBuffer) {
        return _ARR.size;
    }
    else {
        return _ARR.length;
    }
}

var ImStringBuffer = /** @class */ (function () {
    function ImStringBuffer(size, buffer) {
        if (buffer === void 0) { buffer = ""; }
        this.size = size;
        this.buffer = buffer;
    }
    return ImStringBuffer;
}());

// Flags for ImGui::Begin()

var ImGuiWindowFlags;
(function (ImGuiWindowFlags) {
    ImGuiWindowFlags[ImGuiWindowFlags["None"] = 0] = "None";
    ImGuiWindowFlags[ImGuiWindowFlags["NoTitleBar"] = 1] = "NoTitleBar";
    ImGuiWindowFlags[ImGuiWindowFlags["NoResize"] = 2] = "NoResize";
    ImGuiWindowFlags[ImGuiWindowFlags["NoMove"] = 4] = "NoMove";
    ImGuiWindowFlags[ImGuiWindowFlags["NoScrollbar"] = 8] = "NoScrollbar";
    ImGuiWindowFlags[ImGuiWindowFlags["NoScrollWithMouse"] = 16] = "NoScrollWithMouse";
    ImGuiWindowFlags[ImGuiWindowFlags["NoCollapse"] = 32] = "NoCollapse";
    ImGuiWindowFlags[ImGuiWindowFlags["AlwaysAutoResize"] = 64] = "AlwaysAutoResize";
    ImGuiWindowFlags[ImGuiWindowFlags["NoBackground"] = 128] = "NoBackground";
    ImGuiWindowFlags[ImGuiWindowFlags["NoSavedSettings"] = 256] = "NoSavedSettings";
    ImGuiWindowFlags[ImGuiWindowFlags["NoMouseInputs"] = 512] = "NoMouseInputs";
    ImGuiWindowFlags[ImGuiWindowFlags["MenuBar"] = 1024] = "MenuBar";
    ImGuiWindowFlags[ImGuiWindowFlags["HorizontalScrollbar"] = 2048] = "HorizontalScrollbar";
    ImGuiWindowFlags[ImGuiWindowFlags["NoFocusOnAppearing"] = 4096] = "NoFocusOnAppearing";
    ImGuiWindowFlags[ImGuiWindowFlags["NoBringToFrontOnFocus"] = 8192] = "NoBringToFrontOnFocus";
    ImGuiWindowFlags[ImGuiWindowFlags["AlwaysVerticalScrollbar"] = 16384] = "AlwaysVerticalScrollbar";
    ImGuiWindowFlags[ImGuiWindowFlags["AlwaysHorizontalScrollbar"] = 32768] = "AlwaysHorizontalScrollbar";
    ImGuiWindowFlags[ImGuiWindowFlags["AlwaysUseWindowPadding"] = 65536] = "AlwaysUseWindowPadding";
    ImGuiWindowFlags[ImGuiWindowFlags["NoNavInputs"] = 262144] = "NoNavInputs";
    ImGuiWindowFlags[ImGuiWindowFlags["NoNavFocus"] = 524288] = "NoNavFocus";
    ImGuiWindowFlags[ImGuiWindowFlags["UnsavedDocument"] = 1048576] = "UnsavedDocument";
    ImGuiWindowFlags[ImGuiWindowFlags["NoNav"] = 786432] = "NoNav";
    ImGuiWindowFlags[ImGuiWindowFlags["NoDecoration"] = 43] = "NoDecoration";
    ImGuiWindowFlags[ImGuiWindowFlags["NoInputs"] = 786944] = "NoInputs";
    // [Internal]
    ImGuiWindowFlags[ImGuiWindowFlags["NavFlattened"] = 8388608] = "NavFlattened";
    ImGuiWindowFlags[ImGuiWindowFlags["ChildWindow"] = 16777216] = "ChildWindow";
    ImGuiWindowFlags[ImGuiWindowFlags["Tooltip"] = 33554432] = "Tooltip";
    ImGuiWindowFlags[ImGuiWindowFlags["Popup"] = 67108864] = "Popup";
    ImGuiWindowFlags[ImGuiWindowFlags["Modal"] = 134217728] = "Modal";
    ImGuiWindowFlags[ImGuiWindowFlags["ChildMenu"] = 268435456] = "ChildMenu";
})(ImGuiWindowFlags || (ImGuiWindowFlags = {}));
// Flags for ImGui::InputText()

var ImGuiInputTextFlags;
(function (ImGuiInputTextFlags) {
    ImGuiInputTextFlags[ImGuiInputTextFlags["None"] = 0] = "None";
    ImGuiInputTextFlags[ImGuiInputTextFlags["CharsDecimal"] = 1] = "CharsDecimal";
    ImGuiInputTextFlags[ImGuiInputTextFlags["CharsHexadecimal"] = 2] = "CharsHexadecimal";
    ImGuiInputTextFlags[ImGuiInputTextFlags["CharsUppercase"] = 4] = "CharsUppercase";
    ImGuiInputTextFlags[ImGuiInputTextFlags["CharsNoBlank"] = 8] = "CharsNoBlank";
    ImGuiInputTextFlags[ImGuiInputTextFlags["AutoSelectAll"] = 16] = "AutoSelectAll";
    ImGuiInputTextFlags[ImGuiInputTextFlags["EnterReturnsTrue"] = 32] = "EnterReturnsTrue";
    ImGuiInputTextFlags[ImGuiInputTextFlags["CallbackCompletion"] = 64] = "CallbackCompletion";
    ImGuiInputTextFlags[ImGuiInputTextFlags["CallbackHistory"] = 128] = "CallbackHistory";
    ImGuiInputTextFlags[ImGuiInputTextFlags["CallbackAlways"] = 256] = "CallbackAlways";
    ImGuiInputTextFlags[ImGuiInputTextFlags["CallbackCharFilter"] = 512] = "CallbackCharFilter";
    ImGuiInputTextFlags[ImGuiInputTextFlags["AllowTabInput"] = 1024] = "AllowTabInput";
    ImGuiInputTextFlags[ImGuiInputTextFlags["CtrlEnterForNewLine"] = 2048] = "CtrlEnterForNewLine";
    ImGuiInputTextFlags[ImGuiInputTextFlags["NoHorizontalScroll"] = 4096] = "NoHorizontalScroll";
    ImGuiInputTextFlags[ImGuiInputTextFlags["AlwaysInsertMode"] = 8192] = "AlwaysInsertMode";
    ImGuiInputTextFlags[ImGuiInputTextFlags["ReadOnly"] = 16384] = "ReadOnly";
    ImGuiInputTextFlags[ImGuiInputTextFlags["Password"] = 32768] = "Password";
    ImGuiInputTextFlags[ImGuiInputTextFlags["NoUndoRedo"] = 65536] = "NoUndoRedo";
    ImGuiInputTextFlags[ImGuiInputTextFlags["CharsScientific"] = 131072] = "CharsScientific";
    ImGuiInputTextFlags[ImGuiInputTextFlags["CallbackResize"] = 262144] = "CallbackResize";
    ImGuiInputTextFlags[ImGuiInputTextFlags["CallbackEdit"] = 524288] = "CallbackEdit";
    // [Internal]
    ImGuiInputTextFlags[ImGuiInputTextFlags["Multiline"] = 1048576] = "Multiline";
    ImGuiInputTextFlags[ImGuiInputTextFlags["NoMarkEdited"] = 2097152] = "NoMarkEdited";
})(ImGuiInputTextFlags || (ImGuiInputTextFlags = {}));
// Flags for ImGui::TreeNodeEx(), ImGui::CollapsingHeader*()

var ImGuiTreeNodeFlags;
(function (ImGuiTreeNodeFlags) {
    ImGuiTreeNodeFlags[ImGuiTreeNodeFlags["None"] = 0] = "None";
    ImGuiTreeNodeFlags[ImGuiTreeNodeFlags["Selected"] = 1] = "Selected";
    ImGuiTreeNodeFlags[ImGuiTreeNodeFlags["Framed"] = 2] = "Framed";
    ImGuiTreeNodeFlags[ImGuiTreeNodeFlags["AllowItemOverlap"] = 4] = "AllowItemOverlap";
    ImGuiTreeNodeFlags[ImGuiTreeNodeFlags["NoTreePushOnOpen"] = 8] = "NoTreePushOnOpen";
    ImGuiTreeNodeFlags[ImGuiTreeNodeFlags["NoAutoOpenOnLog"] = 16] = "NoAutoOpenOnLog";
    ImGuiTreeNodeFlags[ImGuiTreeNodeFlags["DefaultOpen"] = 32] = "DefaultOpen";
    ImGuiTreeNodeFlags[ImGuiTreeNodeFlags["OpenOnDoubleClick"] = 64] = "OpenOnDoubleClick";
    ImGuiTreeNodeFlags[ImGuiTreeNodeFlags["OpenOnArrow"] = 128] = "OpenOnArrow";
    ImGuiTreeNodeFlags[ImGuiTreeNodeFlags["Leaf"] = 256] = "Leaf";
    ImGuiTreeNodeFlags[ImGuiTreeNodeFlags["Bullet"] = 512] = "Bullet";
    ImGuiTreeNodeFlags[ImGuiTreeNodeFlags["FramePadding"] = 1024] = "FramePadding";
    ImGuiTreeNodeFlags[ImGuiTreeNodeFlags["SpanAvailWidth"] = 2048] = "SpanAvailWidth";
    ImGuiTreeNodeFlags[ImGuiTreeNodeFlags["SpanFullWidth"] = 4096] = "SpanFullWidth";
    ImGuiTreeNodeFlags[ImGuiTreeNodeFlags["NavLeftJumpsBackHere"] = 8192] = "NavLeftJumpsBackHere";
    ImGuiTreeNodeFlags[ImGuiTreeNodeFlags["CollapsingHeader"] = 26] = "CollapsingHeader";
})(ImGuiTreeNodeFlags || (ImGuiTreeNodeFlags = {}));

var ImGuiPopupFlags;
(function (ImGuiPopupFlags) {
    ImGuiPopupFlags[ImGuiPopupFlags["None"] = 0] = "None";
    ImGuiPopupFlags[ImGuiPopupFlags["MouseButtonLeft"] = 0] = "MouseButtonLeft";
    ImGuiPopupFlags[ImGuiPopupFlags["MouseButtonRight"] = 1] = "MouseButtonRight";
    ImGuiPopupFlags[ImGuiPopupFlags["MouseButtonMiddle"] = 2] = "MouseButtonMiddle";
    ImGuiPopupFlags[ImGuiPopupFlags["MouseButtonMask_"] = 31] = "MouseButtonMask_";
    ImGuiPopupFlags[ImGuiPopupFlags["MouseButtonDefault_"] = 1] = "MouseButtonDefault_";
    ImGuiPopupFlags[ImGuiPopupFlags["NoOpenOverExistingPopup"] = 32] = "NoOpenOverExistingPopup";
    ImGuiPopupFlags[ImGuiPopupFlags["NoOpenOverItems"] = 64] = "NoOpenOverItems";
    ImGuiPopupFlags[ImGuiPopupFlags["AnyPopupId"] = 128] = "AnyPopupId";
    ImGuiPopupFlags[ImGuiPopupFlags["AnyPopupLevel"] = 256] = "AnyPopupLevel";
    ImGuiPopupFlags[ImGuiPopupFlags["AnyPopup"] = 384] = "AnyPopup";
})(ImGuiPopupFlags || (ImGuiPopupFlags = {}));
// Flags for ImGui::Selectable()

var ImGuiSelectableFlags;
(function (ImGuiSelectableFlags) {
    ImGuiSelectableFlags[ImGuiSelectableFlags["None"] = 0] = "None";
    ImGuiSelectableFlags[ImGuiSelectableFlags["DontClosePopups"] = 1] = "DontClosePopups";
    ImGuiSelectableFlags[ImGuiSelectableFlags["SpanAllColumns"] = 2] = "SpanAllColumns";
    ImGuiSelectableFlags[ImGuiSelectableFlags["AllowDoubleClick"] = 4] = "AllowDoubleClick";
    ImGuiSelectableFlags[ImGuiSelectableFlags["Disabled"] = 8] = "Disabled";
    ImGuiSelectableFlags[ImGuiSelectableFlags["AllowItemOverlap"] = 16] = "AllowItemOverlap"; // (WIP) Hit testing to allow subsequent widgets to overlap this one
})(ImGuiSelectableFlags || (ImGuiSelectableFlags = {}));
// Flags for ImGui::BeginCombo()

var ImGuiComboFlags;
(function (ImGuiComboFlags) {
    ImGuiComboFlags[ImGuiComboFlags["None"] = 0] = "None";
    ImGuiComboFlags[ImGuiComboFlags["PopupAlignLeft"] = 1] = "PopupAlignLeft";
    ImGuiComboFlags[ImGuiComboFlags["HeightSmall"] = 2] = "HeightSmall";
    ImGuiComboFlags[ImGuiComboFlags["HeightRegular"] = 4] = "HeightRegular";
    ImGuiComboFlags[ImGuiComboFlags["HeightLarge"] = 8] = "HeightLarge";
    ImGuiComboFlags[ImGuiComboFlags["HeightLargest"] = 16] = "HeightLargest";
    ImGuiComboFlags[ImGuiComboFlags["NoArrowButton"] = 32] = "NoArrowButton";
    ImGuiComboFlags[ImGuiComboFlags["NoPreview"] = 64] = "NoPreview";
    ImGuiComboFlags[ImGuiComboFlags["HeightMask_"] = 30] = "HeightMask_";
})(ImGuiComboFlags || (ImGuiComboFlags = {}));
// Flags for ImGui::BeginTabBar()

var ImGuiTabBarFlags;
(function (ImGuiTabBarFlags) {
    ImGuiTabBarFlags[ImGuiTabBarFlags["None"] = 0] = "None";
    ImGuiTabBarFlags[ImGuiTabBarFlags["Reorderable"] = 1] = "Reorderable";
    ImGuiTabBarFlags[ImGuiTabBarFlags["AutoSelectNewTabs"] = 2] = "AutoSelectNewTabs";
    ImGuiTabBarFlags[ImGuiTabBarFlags["TabListPopupButton"] = 4] = "TabListPopupButton";
    ImGuiTabBarFlags[ImGuiTabBarFlags["NoCloseWithMiddleMouseButton"] = 8] = "NoCloseWithMiddleMouseButton";
    ImGuiTabBarFlags[ImGuiTabBarFlags["NoTabListScrollingButtons"] = 16] = "NoTabListScrollingButtons";
    ImGuiTabBarFlags[ImGuiTabBarFlags["NoTooltip"] = 32] = "NoTooltip";
    ImGuiTabBarFlags[ImGuiTabBarFlags["FittingPolicyResizeDown"] = 64] = "FittingPolicyResizeDown";
    ImGuiTabBarFlags[ImGuiTabBarFlags["FittingPolicyScroll"] = 128] = "FittingPolicyScroll";
    ImGuiTabBarFlags[ImGuiTabBarFlags["FittingPolicyMask_"] = 192] = "FittingPolicyMask_";
    ImGuiTabBarFlags[ImGuiTabBarFlags["FittingPolicyDefault_"] = 64] = "FittingPolicyDefault_";
})(ImGuiTabBarFlags || (ImGuiTabBarFlags = {}));
;
// Flags for ImGui::BeginTabItem()

var ImGuiTabItemFlags;
(function (ImGuiTabItemFlags) {
    ImGuiTabItemFlags[ImGuiTabItemFlags["None"] = 0] = "None";
    ImGuiTabItemFlags[ImGuiTabItemFlags["UnsavedDocument"] = 1] = "UnsavedDocument";
    ImGuiTabItemFlags[ImGuiTabItemFlags["SetSelected"] = 2] = "SetSelected";
    ImGuiTabItemFlags[ImGuiTabItemFlags["NoCloseWithMiddleMouseButton"] = 4] = "NoCloseWithMiddleMouseButton";
    ImGuiTabItemFlags[ImGuiTabItemFlags["NoPushId"] = 8] = "NoPushId";
    ImGuiTabItemFlags[ImGuiTabItemFlags["NoTooltip"] = 16] = "NoTooltip";
    ImGuiTabItemFlags[ImGuiTabItemFlags["NoReorder"] = 32] = "NoReorder";
    ImGuiTabItemFlags[ImGuiTabItemFlags["Leading"] = 64] = "Leading";
    ImGuiTabItemFlags[ImGuiTabItemFlags["Trailing"] = 128] = "Trailing"; // Enforce the tab position to the right of the tab bar (before the scrolling buttons)
})(ImGuiTabItemFlags || (ImGuiTabItemFlags = {}));

var ImGuiTableFlags;
(function (ImGuiTableFlags) {
    // Features
    ImGuiTableFlags[ImGuiTableFlags["None"] = 0] = "None";
    ImGuiTableFlags[ImGuiTableFlags["Resizable"] = 1] = "Resizable";
    ImGuiTableFlags[ImGuiTableFlags["Reorderable"] = 2] = "Reorderable";
    ImGuiTableFlags[ImGuiTableFlags["Hideable"] = 4] = "Hideable";
    ImGuiTableFlags[ImGuiTableFlags["Sortable"] = 8] = "Sortable";
    ImGuiTableFlags[ImGuiTableFlags["NoSavedSettings"] = 16] = "NoSavedSettings";
    ImGuiTableFlags[ImGuiTableFlags["ContextMenuInBody"] = 32] = "ContextMenuInBody";
    // Decorations
    ImGuiTableFlags[ImGuiTableFlags["RowBg"] = 64] = "RowBg";
    ImGuiTableFlags[ImGuiTableFlags["BordersInnerH"] = 128] = "BordersInnerH";
    ImGuiTableFlags[ImGuiTableFlags["BordersOuterH"] = 256] = "BordersOuterH";
    ImGuiTableFlags[ImGuiTableFlags["BordersInnerV"] = 512] = "BordersInnerV";
    ImGuiTableFlags[ImGuiTableFlags["BordersOuterV"] = 1024] = "BordersOuterV";
    ImGuiTableFlags[ImGuiTableFlags["BordersH"] = 384] = "BordersH";
    ImGuiTableFlags[ImGuiTableFlags["BordersV"] = 1536] = "BordersV";
    ImGuiTableFlags[ImGuiTableFlags["BordersInner"] = 640] = "BordersInner";
    ImGuiTableFlags[ImGuiTableFlags["BordersOuter"] = 1280] = "BordersOuter";
    ImGuiTableFlags[ImGuiTableFlags["Borders"] = 1920] = "Borders";
    ImGuiTableFlags[ImGuiTableFlags["NoBordersInBody"] = 2048] = "NoBordersInBody";
    ImGuiTableFlags[ImGuiTableFlags["NoBordersInBodyUntilResize"] = 4096] = "NoBordersInBodyUntilResize";
    // Sizing Policy (read above for defaults)
    ImGuiTableFlags[ImGuiTableFlags["SizingFixedFit"] = 8192] = "SizingFixedFit";
    ImGuiTableFlags[ImGuiTableFlags["SizingFixedSame"] = 16384] = "SizingFixedSame";
    ImGuiTableFlags[ImGuiTableFlags["SizingStretchProp"] = 24576] = "SizingStretchProp";
    ImGuiTableFlags[ImGuiTableFlags["SizingStretchSame"] = 32768] = "SizingStretchSame";
    // Sizing Extra Options
    ImGuiTableFlags[ImGuiTableFlags["NoHostExtendX"] = 65536] = "NoHostExtendX";
    ImGuiTableFlags[ImGuiTableFlags["NoHostExtendY"] = 131072] = "NoHostExtendY";
    ImGuiTableFlags[ImGuiTableFlags["NoKeepColumnsVisible"] = 262144] = "NoKeepColumnsVisible";
    ImGuiTableFlags[ImGuiTableFlags["PreciseWidths"] = 524288] = "PreciseWidths";
    // Clipping
    ImGuiTableFlags[ImGuiTableFlags["NoClip"] = 1048576] = "NoClip";
    // Padding
    ImGuiTableFlags[ImGuiTableFlags["PadOuterX"] = 2097152] = "PadOuterX";
    ImGuiTableFlags[ImGuiTableFlags["NoPadOuterX"] = 4194304] = "NoPadOuterX";
    ImGuiTableFlags[ImGuiTableFlags["NoPadInnerX"] = 8388608] = "NoPadInnerX";
    // Scrolling
    ImGuiTableFlags[ImGuiTableFlags["ScrollX"] = 16777216] = "ScrollX";
    ImGuiTableFlags[ImGuiTableFlags["ScrollY"] = 33554432] = "ScrollY";
    // Sorting
    ImGuiTableFlags[ImGuiTableFlags["SortMulti"] = 67108864] = "SortMulti";
    ImGuiTableFlags[ImGuiTableFlags["SortTristate"] = 134217728] = "SortTristate";
    // [Internal] Combinations and masks
    ImGuiTableFlags[ImGuiTableFlags["SizingMask_"] = 57344] = "SizingMask_";
})(ImGuiTableFlags || (ImGuiTableFlags = {}));
// Flags for ImGui::TableSetupColumn()

var ImGuiTableColumnFlags;
(function (ImGuiTableColumnFlags) {
    // Input configuration flags
    ImGuiTableColumnFlags[ImGuiTableColumnFlags["None"] = 0] = "None";
    ImGuiTableColumnFlags[ImGuiTableColumnFlags["DefaultHide"] = 1] = "DefaultHide";
    ImGuiTableColumnFlags[ImGuiTableColumnFlags["DefaultSort"] = 2] = "DefaultSort";
    ImGuiTableColumnFlags[ImGuiTableColumnFlags["WidthStretch"] = 4] = "WidthStretch";
    ImGuiTableColumnFlags[ImGuiTableColumnFlags["WidthFixed"] = 8] = "WidthFixed";
    ImGuiTableColumnFlags[ImGuiTableColumnFlags["NoResize"] = 16] = "NoResize";
    ImGuiTableColumnFlags[ImGuiTableColumnFlags["NoReorder"] = 32] = "NoReorder";
    ImGuiTableColumnFlags[ImGuiTableColumnFlags["NoHide"] = 64] = "NoHide";
    ImGuiTableColumnFlags[ImGuiTableColumnFlags["NoClip"] = 128] = "NoClip";
    ImGuiTableColumnFlags[ImGuiTableColumnFlags["NoSort"] = 256] = "NoSort";
    ImGuiTableColumnFlags[ImGuiTableColumnFlags["NoSortAscending"] = 512] = "NoSortAscending";
    ImGuiTableColumnFlags[ImGuiTableColumnFlags["NoSortDescending"] = 1024] = "NoSortDescending";
    ImGuiTableColumnFlags[ImGuiTableColumnFlags["NoHeaderWidth"] = 2048] = "NoHeaderWidth";
    ImGuiTableColumnFlags[ImGuiTableColumnFlags["PreferSortAscending"] = 4096] = "PreferSortAscending";
    ImGuiTableColumnFlags[ImGuiTableColumnFlags["PreferSortDescending"] = 8192] = "PreferSortDescending";
    ImGuiTableColumnFlags[ImGuiTableColumnFlags["IndentEnable"] = 16384] = "IndentEnable";
    ImGuiTableColumnFlags[ImGuiTableColumnFlags["IndentDisable"] = 32768] = "IndentDisable";
    // Output status flags, read-only via TableGetColumnFlags()
    ImGuiTableColumnFlags[ImGuiTableColumnFlags["IsEnabled"] = 1048576] = "IsEnabled";
    ImGuiTableColumnFlags[ImGuiTableColumnFlags["IsVisible"] = 2097152] = "IsVisible";
    ImGuiTableColumnFlags[ImGuiTableColumnFlags["IsSorted"] = 4194304] = "IsSorted";
    ImGuiTableColumnFlags[ImGuiTableColumnFlags["IsHovered"] = 8388608] = "IsHovered";
    // [Internal] Combinations and masks
    ImGuiTableColumnFlags[ImGuiTableColumnFlags["WidthMask_"] = 12] = "WidthMask_";
    ImGuiTableColumnFlags[ImGuiTableColumnFlags["IndentMask_"] = 49152] = "IndentMask_";
    ImGuiTableColumnFlags[ImGuiTableColumnFlags["StatusMask_"] = 15728640] = "StatusMask_";
    ImGuiTableColumnFlags[ImGuiTableColumnFlags["NoDirectResize_"] = 1073741824] = "NoDirectResize_"; // [Internal] Disable user resizing this column directly (it may however we resized indirectly from its left edge)
})(ImGuiTableColumnFlags || (ImGuiTableColumnFlags = {}));
// Flags for ImGui::TableNextRow()

var ImGuiTableRowFlags;
(function (ImGuiTableRowFlags) {
    ImGuiTableRowFlags[ImGuiTableRowFlags["None"] = 0] = "None";
    ImGuiTableRowFlags[ImGuiTableRowFlags["Headers"] = 1] = "Headers"; // Identify header row (set default background color + width of its contents accounted different for auto column width)
})(ImGuiTableRowFlags || (ImGuiTableRowFlags = {}));
// Enum for ImGui::TableSetBgColor()
// Background colors are rendering in 3 layers:
//  - Layer 0: draw with RowBg0 color if set, otherwise draw with ColumnBg0 if set.
//  - Layer 1: draw with RowBg1 color if set, otherwise draw with ColumnBg1 if set.
//  - Layer 2: draw with CellBg color if set.
// The purpose of the two row/columns layers is to let you decide if a background color changes should override or blend with the existing color.
// When using ImGuiTableFlags_RowBg on the table, each row has the RowBg0 color automatically set for odd/even rows.
// If you set the color of RowBg0 target, your color will override the existing RowBg0 color.
// If you set the color of RowBg1 or ColumnBg1 target, your color will blend over the RowBg0 color.

var ImGuiTableBgTarget;
(function (ImGuiTableBgTarget) {
    ImGuiTableBgTarget[ImGuiTableBgTarget["None"] = 0] = "None";
    ImGuiTableBgTarget[ImGuiTableBgTarget["RowBg0"] = 1] = "RowBg0";
    ImGuiTableBgTarget[ImGuiTableBgTarget["RowBg1"] = 2] = "RowBg1";
    ImGuiTableBgTarget[ImGuiTableBgTarget["CellBg"] = 3] = "CellBg"; // Set cell background color (top-most color)
})(ImGuiTableBgTarget || (ImGuiTableBgTarget = {}));
// Flags for ImGui::IsWindowFocused()

var ImGuiFocusedFlags;
(function (ImGuiFocusedFlags) {
    ImGuiFocusedFlags[ImGuiFocusedFlags["None"] = 0] = "None";
    ImGuiFocusedFlags[ImGuiFocusedFlags["ChildWindows"] = 1] = "ChildWindows";
    ImGuiFocusedFlags[ImGuiFocusedFlags["RootWindow"] = 2] = "RootWindow";
    ImGuiFocusedFlags[ImGuiFocusedFlags["AnyWindow"] = 4] = "AnyWindow";
    ImGuiFocusedFlags[ImGuiFocusedFlags["RootAndChildWindows"] = 3] = "RootAndChildWindows";
})(ImGuiFocusedFlags || (ImGuiFocusedFlags = {}));
// Flags for ImGui::IsItemHovered(), ImGui::IsWindowHovered()

var ImGuiHoveredFlags;
(function (ImGuiHoveredFlags) {
    ImGuiHoveredFlags[ImGuiHoveredFlags["None"] = 0] = "None";
    ImGuiHoveredFlags[ImGuiHoveredFlags["ChildWindows"] = 1] = "ChildWindows";
    ImGuiHoveredFlags[ImGuiHoveredFlags["RootWindow"] = 2] = "RootWindow";
    ImGuiHoveredFlags[ImGuiHoveredFlags["AnyWindow"] = 4] = "AnyWindow";
    ImGuiHoveredFlags[ImGuiHoveredFlags["AllowWhenBlockedByPopup"] = 8] = "AllowWhenBlockedByPopup";
    //AllowWhenBlockedByModal     = 1 << 4,   // Return true even if a modal popup window is normally blocking access to this item/window. FIXME-TODO: Unavailable yet.
    ImGuiHoveredFlags[ImGuiHoveredFlags["AllowWhenBlockedByActiveItem"] = 32] = "AllowWhenBlockedByActiveItem";
    ImGuiHoveredFlags[ImGuiHoveredFlags["AllowWhenOverlapped"] = 64] = "AllowWhenOverlapped";
    ImGuiHoveredFlags[ImGuiHoveredFlags["AllowWhenDisabled"] = 128] = "AllowWhenDisabled";
    ImGuiHoveredFlags[ImGuiHoveredFlags["RectOnly"] = 104] = "RectOnly";
    ImGuiHoveredFlags[ImGuiHoveredFlags["RootAndChildWindows"] = 3] = "RootAndChildWindows";
})(ImGuiHoveredFlags || (ImGuiHoveredFlags = {}));
// Flags for ImGui::BeginDragDropSource(), ImGui::AcceptDragDropPayload()

var ImGuiDragDropFlags;
(function (ImGuiDragDropFlags) {
    // BeginDragDropSource() flags
    ImGuiDragDropFlags[ImGuiDragDropFlags["None"] = 0] = "None";
    ImGuiDragDropFlags[ImGuiDragDropFlags["SourceNoPreviewTooltip"] = 1] = "SourceNoPreviewTooltip";
    ImGuiDragDropFlags[ImGuiDragDropFlags["SourceNoDisableHover"] = 2] = "SourceNoDisableHover";
    ImGuiDragDropFlags[ImGuiDragDropFlags["SourceNoHoldToOpenOthers"] = 4] = "SourceNoHoldToOpenOthers";
    ImGuiDragDropFlags[ImGuiDragDropFlags["SourceAllowNullID"] = 8] = "SourceAllowNullID";
    ImGuiDragDropFlags[ImGuiDragDropFlags["SourceExtern"] = 16] = "SourceExtern";
    ImGuiDragDropFlags[ImGuiDragDropFlags["SourceAutoExpirePayload"] = 32] = "SourceAutoExpirePayload";
    // AcceptDragDropPayload() flags
    ImGuiDragDropFlags[ImGuiDragDropFlags["AcceptBeforeDelivery"] = 1024] = "AcceptBeforeDelivery";
    ImGuiDragDropFlags[ImGuiDragDropFlags["AcceptNoDrawDefaultRect"] = 2048] = "AcceptNoDrawDefaultRect";
    ImGuiDragDropFlags[ImGuiDragDropFlags["AcceptNoPreviewTooltip"] = 4096] = "AcceptNoPreviewTooltip";
    ImGuiDragDropFlags[ImGuiDragDropFlags["AcceptPeekOnly"] = 3072] = "AcceptPeekOnly";
})(ImGuiDragDropFlags || (ImGuiDragDropFlags = {}));
// Standard Drag and Drop payload types. You can define you own payload types using 12-characters long strings. Types starting with '_' are defined by Dear ImGui.
var IMGUI_PAYLOAD_TYPE_COLOR_3F = "_COL3F"; // float[3]     // Standard type for colors, without alpha. User code may use this type.
var IMGUI_PAYLOAD_TYPE_COLOR_4F = "_COL4F"; // float[4]     // Standard type for colors. User code may use this type.
// A primary data type

var ImGuiDataType;
(function (ImGuiDataType) {
    ImGuiDataType[ImGuiDataType["S8"] = 0] = "S8";
    ImGuiDataType[ImGuiDataType["U8"] = 1] = "U8";
    ImGuiDataType[ImGuiDataType["S16"] = 2] = "S16";
    ImGuiDataType[ImGuiDataType["U16"] = 3] = "U16";
    ImGuiDataType[ImGuiDataType["S32"] = 4] = "S32";
    ImGuiDataType[ImGuiDataType["U32"] = 5] = "U32";
    ImGuiDataType[ImGuiDataType["S64"] = 6] = "S64";
    ImGuiDataType[ImGuiDataType["U64"] = 7] = "U64";
    ImGuiDataType[ImGuiDataType["Float"] = 8] = "Float";
    ImGuiDataType[ImGuiDataType["Double"] = 9] = "Double";
    ImGuiDataType[ImGuiDataType["COUNT"] = 10] = "COUNT";
})(ImGuiDataType || (ImGuiDataType = {}));
// A cardinal direction

var ImGuiDir;
(function (ImGuiDir) {
    ImGuiDir[ImGuiDir["None"] = -1] = "None";
    ImGuiDir[ImGuiDir["Left"] = 0] = "Left";
    ImGuiDir[ImGuiDir["Right"] = 1] = "Right";
    ImGuiDir[ImGuiDir["Up"] = 2] = "Up";
    ImGuiDir[ImGuiDir["Down"] = 3] = "Down";
    ImGuiDir[ImGuiDir["COUNT"] = 4] = "COUNT";
})(ImGuiDir || (ImGuiDir = {}));
// A sorting direction

var ImGuiSortDirection;
(function (ImGuiSortDirection) {
    ImGuiSortDirection[ImGuiSortDirection["None"] = 0] = "None";
    ImGuiSortDirection[ImGuiSortDirection["Ascending"] = 1] = "Ascending";
    ImGuiSortDirection[ImGuiSortDirection["Descending"] = 2] = "Descending"; // Descending = 9->0, Z->A etc.
})(ImGuiSortDirection || (ImGuiSortDirection = {}));
// User fill ImGuiIO.KeyMap[] array with indices into the ImGuiIO.KeysDown[512] array

var ImGuiKey;
(function (ImGuiKey) {
    ImGuiKey[ImGuiKey["Tab"] = 0] = "Tab";
    ImGuiKey[ImGuiKey["LeftArrow"] = 1] = "LeftArrow";
    ImGuiKey[ImGuiKey["RightArrow"] = 2] = "RightArrow";
    ImGuiKey[ImGuiKey["UpArrow"] = 3] = "UpArrow";
    ImGuiKey[ImGuiKey["DownArrow"] = 4] = "DownArrow";
    ImGuiKey[ImGuiKey["PageUp"] = 5] = "PageUp";
    ImGuiKey[ImGuiKey["PageDown"] = 6] = "PageDown";
    ImGuiKey[ImGuiKey["Home"] = 7] = "Home";
    ImGuiKey[ImGuiKey["End"] = 8] = "End";
    ImGuiKey[ImGuiKey["Insert"] = 9] = "Insert";
    ImGuiKey[ImGuiKey["Delete"] = 10] = "Delete";
    ImGuiKey[ImGuiKey["Backspace"] = 11] = "Backspace";
    ImGuiKey[ImGuiKey["Space"] = 12] = "Space";
    ImGuiKey[ImGuiKey["Enter"] = 13] = "Enter";
    ImGuiKey[ImGuiKey["Escape"] = 14] = "Escape";
    ImGuiKey[ImGuiKey["KeyPadEnter"] = 15] = "KeyPadEnter";
    ImGuiKey[ImGuiKey["A"] = 16] = "A";
    ImGuiKey[ImGuiKey["C"] = 17] = "C";
    ImGuiKey[ImGuiKey["V"] = 18] = "V";
    ImGuiKey[ImGuiKey["X"] = 19] = "X";
    ImGuiKey[ImGuiKey["Y"] = 20] = "Y";
    ImGuiKey[ImGuiKey["Z"] = 21] = "Z";
    ImGuiKey[ImGuiKey["COUNT"] = 22] = "COUNT";
})(ImGuiKey || (ImGuiKey = {}));
// To test io.KeyMods (which is a combination of individual fields io.KeyCtrl, io.KeyShift, io.KeyAlt set by user/backend)

var ImGuiKeyModFlags;
(function (ImGuiKeyModFlags) {
    ImGuiKeyModFlags[ImGuiKeyModFlags["None"] = 0] = "None";
    ImGuiKeyModFlags[ImGuiKeyModFlags["Ctrl"] = 1] = "Ctrl";
    ImGuiKeyModFlags[ImGuiKeyModFlags["Shift"] = 2] = "Shift";
    ImGuiKeyModFlags[ImGuiKeyModFlags["Alt"] = 4] = "Alt";
    ImGuiKeyModFlags[ImGuiKeyModFlags["Super"] = 8] = "Super";
})(ImGuiKeyModFlags || (ImGuiKeyModFlags = {}));
// [BETA] Gamepad/Keyboard directional navigation
// Keyboard: Set io.ConfigFlags |= EnableKeyboard to enable. NewFrame() will automatically fill io.NavInputs[] based on your io.KeyDown[] + io.KeyMap[] arrays.
// Gamepad:  Set io.ConfigFlags |= EnableGamepad to enable. Fill the io.NavInputs[] fields before calling NewFrame(). Note that io.NavInputs[] is cleared by EndFrame().
// Read instructions in imgui.cpp for more details.

var ImGuiNavInput;
(function (ImGuiNavInput) {
    // Gamepad Mapping
    ImGuiNavInput[ImGuiNavInput["Activate"] = 0] = "Activate";
    ImGuiNavInput[ImGuiNavInput["Cancel"] = 1] = "Cancel";
    ImGuiNavInput[ImGuiNavInput["Input"] = 2] = "Input";
    ImGuiNavInput[ImGuiNavInput["Menu"] = 3] = "Menu";
    ImGuiNavInput[ImGuiNavInput["DpadLeft"] = 4] = "DpadLeft";
    ImGuiNavInput[ImGuiNavInput["DpadRight"] = 5] = "DpadRight";
    ImGuiNavInput[ImGuiNavInput["DpadUp"] = 6] = "DpadUp";
    ImGuiNavInput[ImGuiNavInput["DpadDown"] = 7] = "DpadDown";
    ImGuiNavInput[ImGuiNavInput["LStickLeft"] = 8] = "LStickLeft";
    ImGuiNavInput[ImGuiNavInput["LStickRight"] = 9] = "LStickRight";
    ImGuiNavInput[ImGuiNavInput["LStickUp"] = 10] = "LStickUp";
    ImGuiNavInput[ImGuiNavInput["LStickDown"] = 11] = "LStickDown";
    ImGuiNavInput[ImGuiNavInput["FocusPrev"] = 12] = "FocusPrev";
    ImGuiNavInput[ImGuiNavInput["FocusNext"] = 13] = "FocusNext";
    ImGuiNavInput[ImGuiNavInput["TweakSlow"] = 14] = "TweakSlow";
    ImGuiNavInput[ImGuiNavInput["TweakFast"] = 15] = "TweakFast";
    // [Internal] Don't use directly! This is used internally to differentiate keyboard from gamepad inputs for behaviors that require to differentiate them.
    // Keyboard behavior that have no corresponding gamepad mapping (e.g. CTRL+TAB) may be directly reading from io.KeyDown[] instead of io.NavInputs[].
    ImGuiNavInput[ImGuiNavInput["KeyMenu_"] = 16] = "KeyMenu_";
    ImGuiNavInput[ImGuiNavInput["KeyLeft_"] = 17] = "KeyLeft_";
    ImGuiNavInput[ImGuiNavInput["KeyRight_"] = 18] = "KeyRight_";
    ImGuiNavInput[ImGuiNavInput["KeyUp_"] = 19] = "KeyUp_";
    ImGuiNavInput[ImGuiNavInput["KeyDown_"] = 20] = "KeyDown_";
    ImGuiNavInput[ImGuiNavInput["COUNT"] = 21] = "COUNT";
    ImGuiNavInput[ImGuiNavInput["InternalStart_"] = 16] = "InternalStart_";
})(ImGuiNavInput || (ImGuiNavInput = {}));
// [BETA] Gamepad/Keyboard directional navigation flags, stored in io.ConfigFlags

var ImGuiConfigFlags;
(function (ImGuiConfigFlags) {
    ImGuiConfigFlags[ImGuiConfigFlags["None"] = 0] = "None";
    ImGuiConfigFlags[ImGuiConfigFlags["NavEnableKeyboard"] = 1] = "NavEnableKeyboard";
    ImGuiConfigFlags[ImGuiConfigFlags["NavEnableGamepad"] = 2] = "NavEnableGamepad";
    ImGuiConfigFlags[ImGuiConfigFlags["NavEnableSetMousePos"] = 4] = "NavEnableSetMousePos";
    ImGuiConfigFlags[ImGuiConfigFlags["NavNoCaptureKeyboard"] = 8] = "NavNoCaptureKeyboard";
    ImGuiConfigFlags[ImGuiConfigFlags["NoMouse"] = 16] = "NoMouse";
    ImGuiConfigFlags[ImGuiConfigFlags["NoMouseCursorChange"] = 32] = "NoMouseCursorChange";
    ImGuiConfigFlags[ImGuiConfigFlags["IsSRGB"] = 1048576] = "IsSRGB";
    ImGuiConfigFlags[ImGuiConfigFlags["IsTouchScreen"] = 2097152] = "IsTouchScreen"; // Application is using a touch screen instead of a mouse.
})(ImGuiConfigFlags || (ImGuiConfigFlags = {}));
// Enumeration for PushStyleColor() / PopStyleColor()

var ImGuiCol;
(function (ImGuiCol) {
    ImGuiCol[ImGuiCol["Text"] = 0] = "Text";
    ImGuiCol[ImGuiCol["TextDisabled"] = 1] = "TextDisabled";
    ImGuiCol[ImGuiCol["WindowBg"] = 2] = "WindowBg";
    ImGuiCol[ImGuiCol["ChildBg"] = 3] = "ChildBg";
    ImGuiCol[ImGuiCol["PopupBg"] = 4] = "PopupBg";
    ImGuiCol[ImGuiCol["Border"] = 5] = "Border";
    ImGuiCol[ImGuiCol["BorderShadow"] = 6] = "BorderShadow";
    ImGuiCol[ImGuiCol["FrameBg"] = 7] = "FrameBg";
    ImGuiCol[ImGuiCol["FrameBgHovered"] = 8] = "FrameBgHovered";
    ImGuiCol[ImGuiCol["FrameBgActive"] = 9] = "FrameBgActive";
    ImGuiCol[ImGuiCol["TitleBg"] = 10] = "TitleBg";
    ImGuiCol[ImGuiCol["TitleBgActive"] = 11] = "TitleBgActive";
    ImGuiCol[ImGuiCol["TitleBgCollapsed"] = 12] = "TitleBgCollapsed";
    ImGuiCol[ImGuiCol["MenuBarBg"] = 13] = "MenuBarBg";
    ImGuiCol[ImGuiCol["ScrollbarBg"] = 14] = "ScrollbarBg";
    ImGuiCol[ImGuiCol["ScrollbarGrab"] = 15] = "ScrollbarGrab";
    ImGuiCol[ImGuiCol["ScrollbarGrabHovered"] = 16] = "ScrollbarGrabHovered";
    ImGuiCol[ImGuiCol["ScrollbarGrabActive"] = 17] = "ScrollbarGrabActive";
    ImGuiCol[ImGuiCol["CheckMark"] = 18] = "CheckMark";
    ImGuiCol[ImGuiCol["SliderGrab"] = 19] = "SliderGrab";
    ImGuiCol[ImGuiCol["SliderGrabActive"] = 20] = "SliderGrabActive";
    ImGuiCol[ImGuiCol["Button"] = 21] = "Button";
    ImGuiCol[ImGuiCol["ButtonHovered"] = 22] = "ButtonHovered";
    ImGuiCol[ImGuiCol["ButtonActive"] = 23] = "ButtonActive";
    ImGuiCol[ImGuiCol["Header"] = 24] = "Header";
    ImGuiCol[ImGuiCol["HeaderHovered"] = 25] = "HeaderHovered";
    ImGuiCol[ImGuiCol["HeaderActive"] = 26] = "HeaderActive";
    ImGuiCol[ImGuiCol["Separator"] = 27] = "Separator";
    ImGuiCol[ImGuiCol["SeparatorHovered"] = 28] = "SeparatorHovered";
    ImGuiCol[ImGuiCol["SeparatorActive"] = 29] = "SeparatorActive";
    ImGuiCol[ImGuiCol["ResizeGrip"] = 30] = "ResizeGrip";
    ImGuiCol[ImGuiCol["ResizeGripHovered"] = 31] = "ResizeGripHovered";
    ImGuiCol[ImGuiCol["ResizeGripActive"] = 32] = "ResizeGripActive";
    ImGuiCol[ImGuiCol["Tab"] = 33] = "Tab";
    ImGuiCol[ImGuiCol["TabHovered"] = 34] = "TabHovered";
    ImGuiCol[ImGuiCol["TabActive"] = 35] = "TabActive";
    ImGuiCol[ImGuiCol["TabUnfocused"] = 36] = "TabUnfocused";
    ImGuiCol[ImGuiCol["TabUnfocusedActive"] = 37] = "TabUnfocusedActive";
    ImGuiCol[ImGuiCol["PlotLines"] = 38] = "PlotLines";
    ImGuiCol[ImGuiCol["PlotLinesHovered"] = 39] = "PlotLinesHovered";
    ImGuiCol[ImGuiCol["PlotHistogram"] = 40] = "PlotHistogram";
    ImGuiCol[ImGuiCol["PlotHistogramHovered"] = 41] = "PlotHistogramHovered";
    ImGuiCol[ImGuiCol["TableHeaderBg"] = 42] = "TableHeaderBg";
    ImGuiCol[ImGuiCol["TableBorderStrong"] = 43] = "TableBorderStrong";
    ImGuiCol[ImGuiCol["TableBorderLight"] = 44] = "TableBorderLight";
    ImGuiCol[ImGuiCol["TableRowBg"] = 45] = "TableRowBg";
    ImGuiCol[ImGuiCol["TableRowBgAlt"] = 46] = "TableRowBgAlt";
    ImGuiCol[ImGuiCol["TextSelectedBg"] = 47] = "TextSelectedBg";
    ImGuiCol[ImGuiCol["DragDropTarget"] = 48] = "DragDropTarget";
    ImGuiCol[ImGuiCol["NavHighlight"] = 49] = "NavHighlight";
    ImGuiCol[ImGuiCol["NavWindowingHighlight"] = 50] = "NavWindowingHighlight";
    ImGuiCol[ImGuiCol["NavWindowingDimBg"] = 51] = "NavWindowingDimBg";
    ImGuiCol[ImGuiCol["ModalWindowDimBg"] = 52] = "ModalWindowDimBg";
    ImGuiCol[ImGuiCol["COUNT"] = 53] = "COUNT";
})(ImGuiCol || (ImGuiCol = {}));
// Enumeration for PushStyleVar() / PopStyleVar() to temporarily modify the ImGuiStyle structure.
// NB: the enum only refers to fields of ImGuiStyle which makes sense to be pushed/popped inside UI code. During initialization, feel free to just poke into ImGuiStyle directly.
// NB: if changing this enum, you need to update the associated internal table GStyleVarInfo[] accordingly. This is where we link enum values to members offset/type.

var ImGuiStyleVar;
(function (ImGuiStyleVar) {
    // Enum name --------------------- // Member in ImGuiStyle structure (see ImGuiStyle for descriptions)
    ImGuiStyleVar[ImGuiStyleVar["Alpha"] = 0] = "Alpha";
    ImGuiStyleVar[ImGuiStyleVar["WindowPadding"] = 1] = "WindowPadding";
    ImGuiStyleVar[ImGuiStyleVar["WindowRounding"] = 2] = "WindowRounding";
    ImGuiStyleVar[ImGuiStyleVar["WindowBorderSize"] = 3] = "WindowBorderSize";
    ImGuiStyleVar[ImGuiStyleVar["WindowMinSize"] = 4] = "WindowMinSize";
    ImGuiStyleVar[ImGuiStyleVar["WindowTitleAlign"] = 5] = "WindowTitleAlign";
    ImGuiStyleVar[ImGuiStyleVar["ChildRounding"] = 6] = "ChildRounding";
    ImGuiStyleVar[ImGuiStyleVar["ChildBorderSize"] = 7] = "ChildBorderSize";
    ImGuiStyleVar[ImGuiStyleVar["PopupRounding"] = 8] = "PopupRounding";
    ImGuiStyleVar[ImGuiStyleVar["PopupBorderSize"] = 9] = "PopupBorderSize";
    ImGuiStyleVar[ImGuiStyleVar["FramePadding"] = 10] = "FramePadding";
    ImGuiStyleVar[ImGuiStyleVar["FrameRounding"] = 11] = "FrameRounding";
    ImGuiStyleVar[ImGuiStyleVar["FrameBorderSize"] = 12] = "FrameBorderSize";
    ImGuiStyleVar[ImGuiStyleVar["ItemSpacing"] = 13] = "ItemSpacing";
    ImGuiStyleVar[ImGuiStyleVar["ItemInnerSpacing"] = 14] = "ItemInnerSpacing";
    ImGuiStyleVar[ImGuiStyleVar["IndentSpacing"] = 15] = "IndentSpacing";
    ImGuiStyleVar[ImGuiStyleVar["CellPadding"] = 16] = "CellPadding";
    ImGuiStyleVar[ImGuiStyleVar["ScrollbarSize"] = 17] = "ScrollbarSize";
    ImGuiStyleVar[ImGuiStyleVar["ScrollbarRounding"] = 18] = "ScrollbarRounding";
    ImGuiStyleVar[ImGuiStyleVar["GrabMinSize"] = 19] = "GrabMinSize";
    ImGuiStyleVar[ImGuiStyleVar["GrabRounding"] = 20] = "GrabRounding";
    ImGuiStyleVar[ImGuiStyleVar["TabRounding"] = 21] = "TabRounding";
    ImGuiStyleVar[ImGuiStyleVar["ButtonTextAlign"] = 22] = "ButtonTextAlign";
    ImGuiStyleVar[ImGuiStyleVar["SelectableTextAlign"] = 23] = "SelectableTextAlign";
    ImGuiStyleVar[ImGuiStyleVar["COUNT"] = 24] = "COUNT";
})(ImGuiStyleVar || (ImGuiStyleVar = {}));
// Back-end capabilities flags stored in io.BackendFlags. Set by imgui_impl_xxx or custom back-end.

var ImGuiBackendFlags;
(function (ImGuiBackendFlags) {
    ImGuiBackendFlags[ImGuiBackendFlags["None"] = 0] = "None";
    ImGuiBackendFlags[ImGuiBackendFlags["HasGamepad"] = 1] = "HasGamepad";
    ImGuiBackendFlags[ImGuiBackendFlags["HasMouseCursors"] = 2] = "HasMouseCursors";
    ImGuiBackendFlags[ImGuiBackendFlags["HasSetMousePos"] = 4] = "HasSetMousePos";
    ImGuiBackendFlags[ImGuiBackendFlags["RendererHasVtxOffset"] = 8] = "RendererHasVtxOffset";
})(ImGuiBackendFlags || (ImGuiBackendFlags = {}));
// Flags for InvisibleButton() [extended in imgui_internal.h]

var ImGuiButtonFlags;
(function (ImGuiButtonFlags) {
    ImGuiButtonFlags[ImGuiButtonFlags["None"] = 0] = "None";
    ImGuiButtonFlags[ImGuiButtonFlags["MouseButtonLeft"] = 1] = "MouseButtonLeft";
    ImGuiButtonFlags[ImGuiButtonFlags["MouseButtonRight"] = 2] = "MouseButtonRight";
    ImGuiButtonFlags[ImGuiButtonFlags["MouseButtonMiddle"] = 4] = "MouseButtonMiddle";
    // [Internal]
    ImGuiButtonFlags[ImGuiButtonFlags["MouseButtonMask_"] = 7] = "MouseButtonMask_";
    ImGuiButtonFlags[ImGuiButtonFlags["MouseButtonDefault_"] = 1] = "MouseButtonDefault_";
})(ImGuiButtonFlags || (ImGuiButtonFlags = {}));
// Enumeration for ColorEdit3() / ColorEdit4() / ColorPicker3() / ColorPicker4() / ColorButton()

var ImGuiColorEditFlags;
(function (ImGuiColorEditFlags) {
    ImGuiColorEditFlags[ImGuiColorEditFlags["None"] = 0] = "None";
    ImGuiColorEditFlags[ImGuiColorEditFlags["NoAlpha"] = 2] = "NoAlpha";
    ImGuiColorEditFlags[ImGuiColorEditFlags["NoPicker"] = 4] = "NoPicker";
    ImGuiColorEditFlags[ImGuiColorEditFlags["NoOptions"] = 8] = "NoOptions";
    ImGuiColorEditFlags[ImGuiColorEditFlags["NoSmallPreview"] = 16] = "NoSmallPreview";
    ImGuiColorEditFlags[ImGuiColorEditFlags["NoInputs"] = 32] = "NoInputs";
    ImGuiColorEditFlags[ImGuiColorEditFlags["NoTooltip"] = 64] = "NoTooltip";
    ImGuiColorEditFlags[ImGuiColorEditFlags["NoLabel"] = 128] = "NoLabel";
    ImGuiColorEditFlags[ImGuiColorEditFlags["NoSidePreview"] = 256] = "NoSidePreview";
    ImGuiColorEditFlags[ImGuiColorEditFlags["NoDragDrop"] = 512] = "NoDragDrop";
    ImGuiColorEditFlags[ImGuiColorEditFlags["NoBorder"] = 1024] = "NoBorder";
    // User Options (right-click on widget to change some of them). You can set application defaults using SetColorEditOptions(). The idea is that you probably don't want to override them in most of your calls, let the user choose and/or call SetColorEditOptions() during startup.
    ImGuiColorEditFlags[ImGuiColorEditFlags["AlphaBar"] = 65536] = "AlphaBar";
    ImGuiColorEditFlags[ImGuiColorEditFlags["AlphaPreview"] = 131072] = "AlphaPreview";
    ImGuiColorEditFlags[ImGuiColorEditFlags["AlphaPreviewHalf"] = 262144] = "AlphaPreviewHalf";
    ImGuiColorEditFlags[ImGuiColorEditFlags["HDR"] = 524288] = "HDR";
    ImGuiColorEditFlags[ImGuiColorEditFlags["DisplayRGB"] = 1048576] = "DisplayRGB";
    ImGuiColorEditFlags[ImGuiColorEditFlags["DisplayHSV"] = 2097152] = "DisplayHSV";
    ImGuiColorEditFlags[ImGuiColorEditFlags["DisplayHex"] = 4194304] = "DisplayHex";
    ImGuiColorEditFlags[ImGuiColorEditFlags["Uint8"] = 8388608] = "Uint8";
    ImGuiColorEditFlags[ImGuiColorEditFlags["Float"] = 16777216] = "Float";
    ImGuiColorEditFlags[ImGuiColorEditFlags["PickerHueBar"] = 33554432] = "PickerHueBar";
    ImGuiColorEditFlags[ImGuiColorEditFlags["PickerHueWheel"] = 67108864] = "PickerHueWheel";
    ImGuiColorEditFlags[ImGuiColorEditFlags["InputRGB"] = 134217728] = "InputRGB";
    ImGuiColorEditFlags[ImGuiColorEditFlags["InputHSV"] = 268435456] = "InputHSV";
    // Defaults Options. You can set application defaults using SetColorEditOptions(). The intent is that you probably don't want to
    // override them in most of your calls. Let the user choose via the option menu and/or call SetColorEditOptions() once during startup.
    ImGuiColorEditFlags[ImGuiColorEditFlags["_OptionsDefault"] = 177209344] = "_OptionsDefault";
    // [Internal] Masks
    ImGuiColorEditFlags[ImGuiColorEditFlags["_DisplayMask"] = 7340032] = "_DisplayMask";
    ImGuiColorEditFlags[ImGuiColorEditFlags["_DataTypeMask"] = 25165824] = "_DataTypeMask";
    ImGuiColorEditFlags[ImGuiColorEditFlags["_PickerMask"] = 100663296] = "_PickerMask";
    ImGuiColorEditFlags[ImGuiColorEditFlags["_InputMask"] = 402653184] = "_InputMask";
})(ImGuiColorEditFlags || (ImGuiColorEditFlags = {}));
// Flags for DragFloat(), DragInt(), SliderFloat(), SliderInt() etc.
// We use the same sets of flags for DragXXX() and SliderXXX() functions as the features are the same and it makes it easier to swap them.

var ImGuiSliderFlags;
(function (ImGuiSliderFlags) {
    ImGuiSliderFlags[ImGuiSliderFlags["None"] = 0] = "None";
    ImGuiSliderFlags[ImGuiSliderFlags["AlwaysClamp"] = 16] = "AlwaysClamp";
    ImGuiSliderFlags[ImGuiSliderFlags["Logarithmic"] = 32] = "Logarithmic";
    ImGuiSliderFlags[ImGuiSliderFlags["NoRoundToFormat"] = 64] = "NoRoundToFormat";
    ImGuiSliderFlags[ImGuiSliderFlags["NoInput"] = 128] = "NoInput";
    ImGuiSliderFlags[ImGuiSliderFlags["InvalidMask_"] = 1879048207] = "InvalidMask_"; // [Internal] We treat using those bits as being potentially a 'float power' argument from the previous API that has got miscast to this enum, and will trigger an assert if needed.
})(ImGuiSliderFlags || (ImGuiSliderFlags = {}));
// Identify a mouse button.
// Those values are guaranteed to be stable and we frequently use 0/1 directly. Named enums provided for convenience.

var ImGuiMouseButton;
(function (ImGuiMouseButton) {
    ImGuiMouseButton[ImGuiMouseButton["Left"] = 0] = "Left";
    ImGuiMouseButton[ImGuiMouseButton["Right"] = 1] = "Right";
    ImGuiMouseButton[ImGuiMouseButton["Middle"] = 2] = "Middle";
    ImGuiMouseButton[ImGuiMouseButton["COUNT"] = 5] = "COUNT";
})(ImGuiMouseButton || (ImGuiMouseButton = {}));
// Enumeration for GetMouseCursor()

var ImGuiMouseCursor;
(function (ImGuiMouseCursor) {
    ImGuiMouseCursor[ImGuiMouseCursor["None"] = -1] = "None";
    ImGuiMouseCursor[ImGuiMouseCursor["Arrow"] = 0] = "Arrow";
    ImGuiMouseCursor[ImGuiMouseCursor["TextInput"] = 1] = "TextInput";
    ImGuiMouseCursor[ImGuiMouseCursor["ResizeAll"] = 2] = "ResizeAll";
    ImGuiMouseCursor[ImGuiMouseCursor["ResizeNS"] = 3] = "ResizeNS";
    ImGuiMouseCursor[ImGuiMouseCursor["ResizeEW"] = 4] = "ResizeEW";
    ImGuiMouseCursor[ImGuiMouseCursor["ResizeNESW"] = 5] = "ResizeNESW";
    ImGuiMouseCursor[ImGuiMouseCursor["ResizeNWSE"] = 6] = "ResizeNWSE";
    ImGuiMouseCursor[ImGuiMouseCursor["Hand"] = 7] = "Hand";
    ImGuiMouseCursor[ImGuiMouseCursor["NotAllowed"] = 8] = "NotAllowed";
    ImGuiMouseCursor[ImGuiMouseCursor["COUNT"] = 9] = "COUNT";
})(ImGuiMouseCursor || (ImGuiMouseCursor = {}));
// Condition for ImGui::SetWindow***(), SetNextWindow***(), SetNextTreeNode***() functions
// All those functions treat 0 as a shortcut to Always. From the point of view of the user use this as an enum (don't combine multiple values into flags).

var ImGuiCond;
(function (ImGuiCond) {
    ImGuiCond[ImGuiCond["None"] = 0] = "None";
    ImGuiCond[ImGuiCond["Always"] = 1] = "Always";
    ImGuiCond[ImGuiCond["Once"] = 2] = "Once";
    ImGuiCond[ImGuiCond["FirstUseEver"] = 4] = "FirstUseEver";
    ImGuiCond[ImGuiCond["Appearing"] = 8] = "Appearing";
})(ImGuiCond || (ImGuiCond = {}));

var ImDrawCornerFlags;
(function (ImDrawCornerFlags) {
    ImDrawCornerFlags[ImDrawCornerFlags["None"] = 0] = "None";
    ImDrawCornerFlags[ImDrawCornerFlags["TopLeft"] = 1] = "TopLeft";
    ImDrawCornerFlags[ImDrawCornerFlags["TopRight"] = 2] = "TopRight";
    ImDrawCornerFlags[ImDrawCornerFlags["BotLeft"] = 4] = "BotLeft";
    ImDrawCornerFlags[ImDrawCornerFlags["BotRight"] = 8] = "BotRight";
    ImDrawCornerFlags[ImDrawCornerFlags["Top"] = 3] = "Top";
    ImDrawCornerFlags[ImDrawCornerFlags["Bot"] = 12] = "Bot";
    ImDrawCornerFlags[ImDrawCornerFlags["Left"] = 5] = "Left";
    ImDrawCornerFlags[ImDrawCornerFlags["Right"] = 10] = "Right";
    ImDrawCornerFlags[ImDrawCornerFlags["All"] = 15] = "All";
})(ImDrawCornerFlags || (ImDrawCornerFlags = {}));

var ImDrawListFlags;
(function (ImDrawListFlags) {
    ImDrawListFlags[ImDrawListFlags["None"] = 0] = "None";
    ImDrawListFlags[ImDrawListFlags["AntiAliasedLines"] = 1] = "AntiAliasedLines";
    ImDrawListFlags[ImDrawListFlags["AntiAliasedLinesUseTex"] = 2] = "AntiAliasedLinesUseTex";
    ImDrawListFlags[ImDrawListFlags["AntiAliasedFill"] = 4] = "AntiAliasedFill";
    ImDrawListFlags[ImDrawListFlags["AllowVtxOffset"] = 8] = "AllowVtxOffset"; // Can emit 'VtxOffset > 0' to allow large meshes. Set when 'ImGuiBackendFlags_RendererHasVtxOffset' is enabled.
})(ImDrawListFlags || (ImDrawListFlags = {}));

var ImVec2 = /** @class */ (function () {
    function ImVec2(x, y) {
        if (x === void 0) { x = 0.0; }
        if (y === void 0) { y = 0.0; }
        this.x = x;
        this.y = y;
    }
    ImVec2.prototype.Set = function (x, y) {
        this.x = x;
        this.y = y;
        return this;
    };
    ImVec2.prototype.Copy = function (other) {
        this.x = other.x;
        this.y = other.y;
        return this;
    };
    ImVec2.prototype.Equals = function (other) {
        if (this.x !== other.x) {
            return false;
        }
        if (this.y !== other.y) {
            return false;
        }
        return true;
    };
    ImVec2.ZERO = new ImVec2(0.0, 0.0);
    ImVec2.UNIT = new ImVec2(1.0, 1.0);
    ImVec2.UNIT_X = new ImVec2(1.0, 0.0);
    ImVec2.UNIT_Y = new ImVec2(0.0, 1.0);
    return ImVec2;
}());


var ImVec4 = /** @class */ (function () {
    function ImVec4(x, y, z, w) {
        if (x === void 0) { x = 0.0; }
        if (y === void 0) { y = 0.0; }
        if (z === void 0) { z = 0.0; }
        if (w === void 0) { w = 1.0; }
        this.x = x;
        this.y = y;
        this.z = z;
        this.w = w;
    }
    ImVec4.prototype.Set = function (x, y, z, w) {
        this.x = x;
        this.y = y;
        this.z = z;
        this.w = w;
        return this;
    };
    ImVec4.prototype.Copy = function (other) {
        this.x = other.x;
        this.y = other.y;
        this.z = other.z;
        this.w = other.w;
        return this;
    };
    ImVec4.prototype.Equals = function (other) {
        if (this.x !== other.x) {
            return false;
        }
        if (this.y !== other.y) {
            return false;
        }
        if (this.z !== other.z) {
            return false;
        }
        if (this.w !== other.w) {
            return false;
        }
        return true;
    };
    ImVec4.ZERO = new ImVec4(0.0, 0.0, 0.0, 0.0);
    ImVec4.UNIT = new ImVec4(1.0, 1.0, 1.0, 1.0);
    ImVec4.UNIT_X = new ImVec4(1.0, 0.0, 0.0, 0.0);
    ImVec4.UNIT_Y = new ImVec4(0.0, 1.0, 0.0, 0.0);
    ImVec4.UNIT_Z = new ImVec4(0.0, 0.0, 1.0, 0.0);
    ImVec4.UNIT_W = new ImVec4(0.0, 0.0, 0.0, 1.0);
    ImVec4.BLACK = new ImVec4(0.0, 0.0, 0.0, 1.0);
    ImVec4.WHITE = new ImVec4(1.0, 1.0, 1.0, 1.0);
    return ImVec4;
}());

//-----------------------------------------------------------------------------
// Helpers
//-----------------------------------------------------------------------------
// Lightweight std::vector<> like class to avoid dragging dependencies (also: windows implementation of STL with debug enabled is absurdly slow, so let's bypass it so our code runs fast in debug).
// Our implementation does NOT call C++ constructors/destructors. This is intentional and we do not require it. Do not use this class as a straight std::vector replacement in your code!

var ImVector = /** @class */ (function (_super) {
    __extends(ImVector, _super);
    function ImVector() {
        var _this_1 = _super !== null && _super.apply(this, arguments) || this;
        _this_1.Data = _this_1;
        return _this_1;
        // public:
        // int                         Size;
        // int                         Capacity;
        // T*                          Data;
        // typedef T                   value_type;
        // typedef value_type*         iterator;
        // typedef const value_type*   const_iterator;
        // inline ImVector()           { Size = Capacity = 0; Data = NULL; }
        // inline ~ImVector()          { if (Data) ImGui::MemFree(Data); }
        // inline bool                 empty() const                   { return Size == 0; }
        // inline int                  size() const                    { return Size; }
        // inline int                  capacity() const                { return Capacity; }
        // inline value_type&          operator[](int i)               { IM_ASSERT(i < Size); return Data[i]; }
        // inline const value_type&    operator[](int i) const         { IM_ASSERT(i < Size); return Data[i]; }
        // inline void                 clear()                         { if (Data) { Size = Capacity = 0; ImGui::MemFree(Data); Data = NULL; } }
        // inline iterator             begin()                         { return Data; }
        // inline const_iterator       begin() const                   { return Data; }
        // inline iterator             end()                           { return Data + Size; }
        // inline const_iterator       end() const                     { return Data + Size; }
        // inline value_type&          front()                         { IM_ASSERT(Size > 0); return Data[0]; }
        // inline const value_type&    front() const                   { IM_ASSERT(Size > 0); return Data[0]; }
        // inline value_type&          back()                          { IM_ASSERT(Size > 0); return Data[Size - 1]; }
        // inline const value_type&    back() const                    { IM_ASSERT(Size > 0); return Data[Size - 1]; }
        // inline void                 swap(ImVector<T>& rhs)          { int rhs_size = rhs.Size; rhs.Size = Size; Size = rhs_size; int rhs_cap = rhs.Capacity; rhs.Capacity = Capacity; Capacity = rhs_cap; value_type* rhs_data = rhs.Data; rhs.Data = Data; Data = rhs_data; }
        // inline int                  _grow_capacity(int size) const  { int new_capacity = Capacity ? (Capacity + Capacity/2) : 8; return new_capacity > size ? new_capacity : size; }
        // inline void                 resize(int new_size)            { if (new_size > Capacity) reserve(_grow_capacity(new_size)); Size = new_size; }
        // inline void                 resize(int new_size, const T& v){ if (new_size > Capacity) reserve(_grow_capacity(new_size)); if (new_size > Size) for (int n = Size; n < new_size; n++) Data[n] = v; Size = new_size; }
        // inline void                 reserve(int new_capacity)
        // {
        //     if (new_capacity <= Capacity)
        //         return;
        //     T* new_data = (value_type*)ImGui::MemAlloc((size_t)new_capacity * sizeof(T));
        //     if (Data)
        //         memcpy(new_data, Data, (size_t)Size * sizeof(T));
        //     ImGui::MemFree(Data);
        //     Data = new_data;
        //     Capacity = new_capacity;
        // }
        // inline void                 push_back(const value_type& v)  { if (Size == Capacity) reserve(_grow_capacity(Size + 1)); Data[Size++] = v; }
        // inline void                 pop_back()                      { IM_ASSERT(Size > 0); Size--; }
        // inline void                 push_front(const value_type& v) { if (Size == 0) push_back(v); else insert(Data, v); }
        // inline iterator             erase(const_iterator it)                        { IM_ASSERT(it >= Data && it < Data+Size); const ptrdiff_t off = it - Data; memmove(Data + off, Data + off + 1, ((size_t)Size - (size_t)off - 1) * sizeof(value_type)); Size--; return Data + off; }
        // inline iterator             erase(const_iterator it, const_iterator it_last){ IM_ASSERT(it >= Data && it < Data+Size && it_last > it && it_last <= Data+Size); const ptrdiff_t count = it_last - it; const ptrdiff_t off = it - Data; memmove(Data + off, Data + off + count, ((size_t)Size - (size_t)off - count) * sizeof(value_type)); Size -= (int)count; return Data + off; }
        // inline iterator             erase_unsorted(const_iterator it)               { IM_ASSERT(it >= Data && it < Data+Size);  const ptrdiff_t off = it - Data; if (it < Data+Size-1) memcpy(Data + off, Data + Size - 1, sizeof(value_type)); Size--; return Data + off; }
        // inline iterator             insert(const_iterator it, const value_type& v)  { IM_ASSERT(it >= Data && it <= Data+Size); const ptrdiff_t off = it - Data; if (Size == Capacity) reserve(_grow_capacity(Size + 1)); if (off < (int)Size) memmove(Data + off + 1, Data + off, ((size_t)Size - (size_t)off) * sizeof(value_type)); Data[off] = v; Size++; return Data + off; }
        // inline bool                 contains(const value_type& v) const             { const T* data = Data;  const T* data_end = Data + Size; while (data < data_end) if (*data++ == v) return true; return false; }
    }
    Object.defineProperty(ImVector.prototype, "Size", {
        get: function () { return this.length; },
        enumerable: false,
        configurable: true
    });
    ImVector.prototype.empty = function () { return this.length === 0; };
    ImVector.prototype.clear = function () { this.length = 0; };
    ImVector.prototype.pop_back = function () { return this.pop(); };
    ImVector.prototype.push_back = function (value) { this.push(value); };
    ImVector.prototype.front = function () { IM_ASSERT(this.Size > 0); return this.Data[0]; };
    ImVector.prototype.back = function () { IM_ASSERT(this.Size > 0); return this.Data[this.Size - 1]; };
    ImVector.prototype.size = function () { return this.Size; };
    ImVector.prototype.resize = function (new_size, v) {
        if (v) {
            for (var index = this.length; index < new_size; ++index) {
                this[index] = v(index);
            }
        }
        else {
            this.length = new_size;
        }
    };
    ImVector.prototype.contains = function (value) {
        return this.includes(value);
    };
    ImVector.prototype.find_erase_unsorted = function (value) {
        var index = this.indexOf(value);
        if (index !== -1) {
            this.splice(index, 1);
        }
    };
    return ImVector;
}(Array));

// Helper: Unicode defines
// #define IM_UNICODE_CODEPOINT_INVALID 0xFFFD     // Invalid Unicode code point (standard value).
// #ifdef IMGUI_USE_WCHAR32
// #define IM_UNICODE_CODEPOINT_MAX     0x10FFFF   // Maximum Unicode code point supported by this build.
// #else
// #define IM_UNICODE_CODEPOINT_MAX     0xFFFF     // Maximum Unicode code point supported by this build.
// #endif

var IM_UNICODE_CODEPOINT_MAX = 0xFFFF; // Maximum Unicode code point supported by this build.
// Helper: Parse and apply text filters. In format "aaaaa[,bbbb][,ccccc]"

var ImGuiTextFilter = /** @class */ (function () {
    // IMGUI_API           ImGuiTextFilter(const char* default_filter = "");
    function ImGuiTextFilter(default_filter) {
        if (default_filter === void 0) { default_filter = ""; }
        // [Internal]
        // struct TextRange
        // {
        //     const char* b;
        //     const char* e;
        //     TextRange() { b = e = NULL; }
        //     TextRange(const char* _b, const char* _e) { b = _b; e = _e; }
        //     const char* begin() const { return b; }
        //     const char* end() const { return e; }
        //     bool empty() const { return b == e; }
        //     char front() const { return *b; }
        //     static bool is_blank(char c) { return c == ' ' || c == '\t'; }
        //     void trim_blanks() { while (b < e && is_blank(*b)) b++; while (e > b && is_blank(*(e-1))) e--; }
        //     IMGUI_API void split(char separator, ImVector<TextRange>& out);
        // };
        // char                InputBuf[256];
        this.InputBuf = new ImStringBuffer(256);
        // ImVector<TextRange> Filters;
        // int                 CountGrep;
        this.CountGrep = 0;
        if (default_filter) {
            // ImStrncpy(InputBuf, default_filter, IM_ARRAYSIZE(InputBuf));
            this.InputBuf.buffer = default_filter;
            this.Build();
        }
        else {
            // InputBuf[0] = 0;
            this.InputBuf.buffer = "";
            this.CountGrep = 0;
        }
    }
    // IMGUI_API bool      Draw(const char* label = "Filter (inc,-exc)", float width = 0.0f);    // Helper calling InputText+Build
    ImGuiTextFilter.prototype.Draw = function (label, width) {
        if (label === void 0) { label = "Filter (inc,-exc)"; }
        if (width === void 0) { width = 0.0; }
        if (width !== 0.0)
            bind.PushItemWidth(width);
        var value_changed = InputText(label, this.InputBuf, IM_ARRAYSIZE(this.InputBuf));
        if (width !== 0.0)
            bind.PopItemWidth();
        if (value_changed)
            this.Build();
        return value_changed;
    };
    // IMGUI_API bool      PassFilter(const char* text, const char* text_end = NULL) const;
    ImGuiTextFilter.prototype.PassFilter = function (text, text_end) {
        // if (Filters.empty())
        //     return true;
        if (text_end === void 0) { text_end = null; }
        // if (text == NULL)
        //     text = "";
        // for (int i = 0; i != Filters.Size; i++)
        // {
        //     const TextRange& f = Filters[i];
        //     if (f.empty())
        //         continue;
        //     if (f.front() == '-')
        //     {
        //         // Subtract
        //         if (ImStristr(text, text_end, f.begin()+1, f.end()) != NULL)
        //             return false;
        //     }
        //     else
        //     {
        //         // Grep
        //         if (ImStristr(text, text_end, f.begin(), f.end()) != NULL)
        //             return true;
        //     }
        // }
        // Implicit * grep
        if (this.CountGrep === 0)
            return true;
        return false;
    };
    // IMGUI_API void      Build();
    ImGuiTextFilter.prototype.Build = function () {
        // Filters.resize(0);
        // TextRange input_range(InputBuf, InputBuf+strlen(InputBuf));
        // input_range.split(',', Filters);
        this.CountGrep = 0;
        // for (int i = 0; i != Filters.Size; i++)
        // {
        //     Filters[i].trim_blanks();
        //     if (Filters[i].empty())
        //         continue;
        //     if (Filters[i].front() != '-')
        //         CountGrep += 1;
        // }
    };
    // void                Clear() { InputBuf[0] = 0; Build(); }
    ImGuiTextFilter.prototype.Clear = function () { this.InputBuf.buffer = ""; this.Build(); };
    // bool                IsActive() const { return !Filters.empty(); }
    ImGuiTextFilter.prototype.IsActive = function () { return false; };
    return ImGuiTextFilter;
}());

// Helper: Text buffer for logging/accumulating text

var ImGuiTextBuffer = /** @class */ (function () {
    function ImGuiTextBuffer() {
        // ImVector<char>      Buf;
        this.Buf = "";
        // ImGuiTextBuffer()   { Buf.push_back(0); }
        // inline char         operator[](int i) { return Buf.Data[i]; }
        // const char*         begin() const { return &Buf.front(); }
        // const char*         end() const { return &Buf.back(); }      // Buf is zero-terminated, so end() will point on the zero-terminator
        // int                 size() const { return Buf.Size - 1; }
        // bool                empty() { return Buf.Size <= 1; }
        // void                clear() { Buf.clear(); Buf.push_back(0); }
        // void                reserve(int capacity) { Buf.reserve(capacity); }
        // const char*         c_str() const { return Buf.Data; }
        // IMGUI_API void      appendf(const char* fmt, ...) IM_FMTARGS(2);
        // IMGUI_API void      appendfv(const char* fmt, va_list args) IM_FMTLIST(2);
    }
    ImGuiTextBuffer.prototype.begin = function () { return this.Buf; };
    ImGuiTextBuffer.prototype.size = function () { return this.Buf.length; };
    ImGuiTextBuffer.prototype.clear = function () { this.Buf = ""; };
    ImGuiTextBuffer.prototype.append = function (text) { this.Buf += text; };
    return ImGuiTextBuffer;
}());

// Helper: Simple Key->value storage
// Typically you don't have to worry about this since a storage is held within each Window.
// We use it to e.g. store collapse state for a tree (Int 0/1), store color edit options.
// This is optimized for efficient reading (dichotomy into a contiguous buffer), rare writing (typically tied to user interactions)
// You can use it as custom user storage for temporary values. Declare your own storage if, for example:
// - You want to manipulate the open/close state of a particular sub-tree in your interface (tree node uses Int 0/1 to store their state).
// - You want to store custom debug data easily without adding or editing structures in your code (probably not efficient, but convenient)
// Types are NOT stored, so it is up to you to make sure your Key don't collide with different types.
var ImGuiStorage = /** @class */ (function () {
    function ImGuiStorage() {
    }
    return ImGuiStorage;
}());

// Helpers macros to generate 32-bits encoded colors
var IM_COL32_R_SHIFT = 0;
var IM_COL32_G_SHIFT = 8;
var IM_COL32_B_SHIFT = 16;
var IM_COL32_A_SHIFT = 24;
var IM_COL32_A_MASK = 0xFF000000;

function IM_COL32(R, G, B, A) {
    if (A === void 0) { A = 255; }
    return ((A << IM_COL32_A_SHIFT) | (B << IM_COL32_B_SHIFT) | (G << IM_COL32_G_SHIFT) | (R << IM_COL32_R_SHIFT)) >>> 0;
}
var IM_COL32_WHITE = IM_COL32(255, 255, 255, 255);
 // Opaque white = 0xFFFFFFFF
var IM_COL32_BLACK = IM_COL32(0, 0, 0, 255);
 // Opaque black
var IM_COL32_BLACK_TRANS = IM_COL32(0, 0, 0, 0);
 // Transparent black = 0x00000000
// ImColor() helper to implicity converts colors to either ImU32 (packed 4x1 byte) or ImVec4 (4x1 float)
// Prefer using IM_COL32() macros if you want a guaranteed compile-time ImU32 for usage with ImDrawList API.
// **Avoid storing ImColor! Store either u32 of ImVec4. This is not a full-featured color class. MAY OBSOLETE.
// **None of the ImGui API are using ImColor directly but you can use it as a convenience to pass colors in either ImU32 or ImVec4 formats. Explicitly cast to ImU32 or ImVec4 if needed.

var ImColor = /** @class */ (function () {
    function ImColor(r, g, b, a) {
        if (r === void 0) { r = 0.0; }
        if (g === void 0) { g = 0.0; }
        if (b === void 0) { b = 0.0; }
        if (a === void 0) { a = 1.0; }
        // ImVec4              Value;
        this.Value = new ImVec4();
        if (typeof (r) === "number") {
            if (r > 255 && g === 0.0 && b === 0.0 && a === 1.0) {
                this.Value.x = Math.max(0.0, Math.min(1.0, ((r >> IM_COL32_R_SHIFT) & 0xFF) / 255));
                this.Value.y = Math.max(0.0, Math.min(1.0, ((r >> IM_COL32_G_SHIFT) & 0xFF) / 255));
                this.Value.z = Math.max(0.0, Math.min(1.0, ((r >> IM_COL32_B_SHIFT) & 0xFF) / 255));
                this.Value.w = Math.max(0.0, Math.min(1.0, ((r >> IM_COL32_A_SHIFT) & 0xFF) / 255));
            }
            else if (r <= 1.0 && g <= 1.0 && b <= 1.0 && a <= 1.0) {
                this.Value.x = Math.max(0.0, r);
                this.Value.y = Math.max(0.0, g);
                this.Value.z = Math.max(0.0, b);
                this.Value.w = Math.max(0.0, a);
            }
            else {
                this.Value.x = Math.max(0.0, Math.min(1.0, r / 255));
                this.Value.y = Math.max(0.0, Math.min(1.0, g / 255));
                this.Value.z = Math.max(0.0, Math.min(1.0, b / 255));
                if (a <= 1.0) {
                    this.Value.w = Math.max(0.0, a);
                }
                else {
                    this.Value.w = Math.max(0.0, Math.min(1.0, a / 255));
                }
            }
        }
        else {
            this.Value.Copy(r);
        }
    }
    // inline operator ImU32() const                                   { return ImGui::ColorConvertFloat4ToU32(Value); }
    ImColor.prototype.toImU32 = function () { return ColorConvertFloat4ToU32(this.Value); };
    // inline operator ImVec4() const                                  { return Value; }
    ImColor.prototype.toImVec4 = function () { return this.Value; };
    // FIXME-OBSOLETE: May need to obsolete/cleanup those helpers.
    // inline void    SetHSV(float h, float s, float v, float a = 1.0f){ ImGui::ColorConvertHSVtoRGB(h, s, v, Value.x, Value.y, Value.z); Value.w = a; }
    ImColor.prototype.SetHSV = function (h, s, v, a) {
        if (a === void 0) { a = 1.0; }
        var ref_r = [this.Value.x];
        var ref_g = [this.Value.y];
        var ref_b = [this.Value.z];
        ColorConvertHSVtoRGB(h, s, v, ref_r, ref_g, ref_b);
        this.Value.x = ref_r[0];
        this.Value.y = ref_g[0];
        this.Value.z = ref_b[0];
        this.Value.w = a;
    };
    // static ImColor HSV(float h, float s, float v, float a = 1.0f)   { float r,g,b; ImGui::ColorConvertHSVtoRGB(h, s, v, r, g, b); return ImColor(r,g,b,a); }
    ImColor.HSV = function (h, s, v, a) {
        if (a === void 0) { a = 1.0; }
        var color = new ImColor();
        color.SetHSV(h, s, v, a);
        return color;
    };
    return ImColor;
}());


var ImGuiInputTextDefaultSize = 128;
// Shared state of InputText(), passed to callback when a ImGuiInputTextFlags_Callback* flag is used and the corresponding callback is triggered.

var ImGuiInputTextCallbackData = /** @class */ (function () {
    function ImGuiInputTextCallbackData(native, UserData) {
        if (UserData === void 0) { UserData = null; }
        this.native = native;
        this.UserData = UserData;
    }
    Object.defineProperty(ImGuiInputTextCallbackData.prototype, "EventFlag", {
        // ImGuiInputTextFlags EventFlag;      // One of ImGuiInputTextFlags_Callback* // Read-only
        get: function () { return this.native.EventFlag; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiInputTextCallbackData.prototype, "Flags", {
        // ImGuiInputTextFlags Flags;          // What user passed to InputText()      // Read-only
        get: function () { return this.native.Flags; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiInputTextCallbackData.prototype, "EventChar", {
        // void*               UserData;       // What user passed to InputText()      // Read-only
        // public get UserData(): any { return this.native.UserData; }
        // CharFilter event:
        // ImWchar             EventChar;      // Character input                      // Read-write (replace character or set to zero)
        get: function () { return this.native.EventChar; },
        set: function (value) { this.native.EventChar = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiInputTextCallbackData.prototype, "EventKey", {
        // Completion,History,Always events:
        // If you modify the buffer contents make sure you update 'BufTextLen' and set 'BufDirty' to true.
        // ImGuiKey            EventKey;       // Key pressed (Up/Down/TAB)            // Read-only
        get: function () { return this.native.EventKey; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiInputTextCallbackData.prototype, "Buf", {
        // char*               Buf;            // Current text buffer                  // Read-write (pointed data only, can't replace the actual pointer)
        get: function () { return this.native.Buf; },
        set: function (value) { this.native.Buf = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiInputTextCallbackData.prototype, "BufTextLen", {
        // int                 BufTextLen;     // Current text length in bytes         // Read-write
        get: function () { return this.native.BufTextLen; },
        set: function (value) { this.native.BufTextLen = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiInputTextCallbackData.prototype, "BufSize", {
        // int                 BufSize;        // Maximum text length in bytes         // Read-only
        get: function () { return this.native.BufSize; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiInputTextCallbackData.prototype, "BufDirty", {
        // bool                BufDirty;       // Set if you modify Buf/BufTextLen!!   // Write
        set: function (value) { this.native.BufDirty = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiInputTextCallbackData.prototype, "CursorPos", {
        // int                 CursorPos;      //                                      // Read-write
        get: function () { return this.native.CursorPos; },
        set: function (value) { this.native.CursorPos = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiInputTextCallbackData.prototype, "SelectionStart", {
        // int                 SelectionStart; //                                      // Read-write (== to SelectionEnd when no selection)
        get: function () { return this.native.SelectionStart; },
        set: function (value) { this.native.SelectionStart = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiInputTextCallbackData.prototype, "SelectionEnd", {
        // int                 SelectionEnd;   //                                      // Read-write
        get: function () { return this.native.SelectionEnd; },
        set: function (value) { this.native.SelectionEnd = value; },
        enumerable: false,
        configurable: true
    });
    // NB: Helper functions for text manipulation. Calling those function loses selection.
    // IMGUI_API void    DeleteChars(int pos, int bytes_count);
    ImGuiInputTextCallbackData.prototype.DeleteChars = function (pos, bytes_count) { return this.native.DeleteChars(pos, bytes_count); };
    // IMGUI_API void    InsertChars(int pos, const char* text, const char* text_end = NULL);
    ImGuiInputTextCallbackData.prototype.InsertChars = function (pos, text, text_end) {
        if (text_end === void 0) { text_end = null; }
        return this.native.InsertChars(pos, text_end !== null ? text.substring(0, text_end) : text);
    };
    // void                SelectAll()             { SelectionStart = 0; SelectionEnd = BufTextLen; }
    ImGuiInputTextCallbackData.prototype.SelectAll = function () { this.native.SelectAll(); };
    // void                ClearSelection()        { SelectionStart = SelectionEnd = BufTextLen; }
    ImGuiInputTextCallbackData.prototype.ClearSelection = function () { this.native.ClearSelection(); };
    // bool              HasSelection() const { return SelectionStart != SelectionEnd; }
    ImGuiInputTextCallbackData.prototype.HasSelection = function () { return this.native.HasSelection(); };
    return ImGuiInputTextCallbackData;
}());

// Resizing callback data to apply custom constraint. As enabled by SetNextWindowSizeConstraints(). Callback is called during the next Begin().
// NB: For basic min/max size constraint on each axis you don't need to use the callback! The SetNextWindowSizeConstraints() parameters are enough.

var ImGuiSizeCallbackData = /** @class */ (function () {
    function ImGuiSizeCallbackData(native, UserData) {
        this.native = native;
        this.UserData = UserData;
    }
    Object.defineProperty(ImGuiSizeCallbackData.prototype, "Pos", {
        get: function () { return this.native.Pos; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiSizeCallbackData.prototype, "CurrentSize", {
        get: function () { return this.native.CurrentSize; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiSizeCallbackData.prototype, "DesiredSize", {
        get: function () { return this.native.DesiredSize; },
        enumerable: false,
        configurable: true
    });
    return ImGuiSizeCallbackData;
}());

// Sorting specification for one column of a table (sizeof == 12 bytes)

var ImGuiTableColumnSortSpecs = /** @class */ (function () {
    function ImGuiTableColumnSortSpecs(native) {
        this.native = native;
    }
    Object.defineProperty(ImGuiTableColumnSortSpecs.prototype, "ColumnUserID", {
        get: function () { return this.native.ColumnUserID; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiTableColumnSortSpecs.prototype, "ColumnIndex", {
        get: function () { return this.native.ColumnIndex; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiTableColumnSortSpecs.prototype, "SortOrder", {
        get: function () { return this.native.SortOrder; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiTableColumnSortSpecs.prototype, "SortDirection", {
        get: function () { return this.native.SortDirection; },
        enumerable: false,
        configurable: true
    });
    return ImGuiTableColumnSortSpecs;
}());

// Sorting specifications for a table (often handling sort specs for a single column, occasionally more)
// Obtained by calling TableGetSortSpecs().
// When 'SpecsDirty == true' you can sort your data. It will be true with sorting specs have changed since last call, or the first time.
// Make sure to set 'SpecsDirty = false' after sorting, else you may wastefully sort your data every frame!

var ImGuiTableSortSpecs = /** @class */ (function () {
    function ImGuiTableSortSpecs(native) {
        var _this_1 = this;
        this.native = native;
        this._Specs = Array.from({ length: this.SpecsCount }).map(function (_, i) {
            return new ImGuiTableColumnSortSpecs(_this_1.native.GetSpec(i));
        });
    }
    Object.defineProperty(ImGuiTableSortSpecs.prototype, "Specs", {
        get: function () { return this._Specs; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiTableSortSpecs.prototype, "SpecsCount", {
        get: function () { return this.native.SpecsCount; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiTableSortSpecs.prototype, "SpecsDirty", {
        get: function () { return this.native.SpecsDirty; },
        set: function (value) { this.native.SpecsDirty = value; },
        enumerable: false,
        configurable: true
    });
    return ImGuiTableSortSpecs;
}());


var ImGuiListClipper = /** @class */ (function () {
    function ImGuiListClipper() {
        this._native = null;
    }
    Object.defineProperty(ImGuiListClipper.prototype, "native", {
        get: function () {
            return this._native || (this._native = new bind.ImGuiListClipper());
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiListClipper.prototype, "DisplayStart", {
        get: function () { return this.native.DisplayStart; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiListClipper.prototype, "DisplayEnd", {
        get: function () { return this.native.DisplayEnd; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiListClipper.prototype, "ItemsCount", {
        get: function () { return this.native.ItemsCount; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiListClipper.prototype, "StepNo", {
        get: function () { return this.native.StepNo; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiListClipper.prototype, "ItemsFrozen", {
        get: function () { return this.native.ItemsFrozen; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiListClipper.prototype, "ItemsHeight", {
        get: function () { return this.native.ItemsHeight; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiListClipper.prototype, "StartPosY", {
        get: function () { return this.native.StartPosY; },
        enumerable: false,
        configurable: true
    });
    // items_count:  Use -1 to ignore (you can call Begin later). Use INT_MAX if you don't know how many items you have (in which case the cursor won't be advanced in the final step).
    // items_height: Use -1.0f to be calculated automatically on first step. Otherwise pass in the distance between your items, typically GetTextLineHeightWithSpacing() or GetFrameHeightWithSpacing().
    // If you don't specify an items_height, you NEED to call Step(). If you specify items_height you may call the old Begin()/End() api directly, but prefer calling Step().
    // ImGuiListClipper(int items_count = -1, float items_height = -1.0f)  { Begin(items_count, items_height); } // NB: Begin() initialize every fields (as we allow user to call Begin/End multiple times on a same instance if they want).
    // ~ImGuiListClipper()                                                 { IM_ASSERT(ItemsCount == -1); }      // Assert if user forgot to call End() or Step() until false.
    ImGuiListClipper.prototype.delete = function () {
        if (this._native !== null) {
            this._native.delete();
            this._native = null;
        }
    };
    // IMGUI_API void Begin(int items_count, float items_height = -1.0f);  // Automatically called by constructor if you passed 'items_count' or by Step() in Step 1.
    ImGuiListClipper.prototype.Begin = function (items_count, items_height) {
        if (items_height === void 0) { items_height = -1.0; }
        this.native.Begin(items_count, items_height);
    };
    // IMGUI_API void End();                                               // Automatically called on the last call of Step() that returns false.
    ImGuiListClipper.prototype.End = function () {
        this.native.End();
        this.delete();
    };
    // IMGUI_API bool Step();                                              // Call until it returns false. The DisplayStart/DisplayEnd fields will be set and you can process/draw those items.
    ImGuiListClipper.prototype.Step = function () {
        var busy = this.native.Step();
        if (!busy) {
            this.delete();
        }
        return busy;
    };
    return ImGuiListClipper;
}());

//-----------------------------------------------------------------------------
// Draw List
// Hold a series of drawing commands. The user provides a renderer for ImDrawData which essentially contains an array of ImDrawList.
//-----------------------------------------------------------------------------
// The maximum line width to bake anti-aliased textures for. Build atlas with ImFontAtlasFlags_NoBakedLines to disable baking.
var IM_DRAWLIST_TEX_LINES_WIDTH_MAX = 63;
// Special Draw callback value to request renderer back-end to reset the graphics/render state.
// The renderer back-end needs to handle this special value, otherwise it will crash trying to call a function at this address.
// This is useful for example if you submitted callbacks which you know have altered the render state and you want it to be restored.
// It is not done by default because they are many perfectly useful way of altering render state for imgui contents (e.g. changing shader/blending settings before an Image call).
var ImDrawCallback_ResetRenderState = -1;
// Typically, 1 command = 1 GPU draw call (unless command is a callback)
// Pre 1.71 back-ends will typically ignore the VtxOffset/IdxOffset fields. When 'io.BackendFlags & ImGuiBackendFlags_RendererHasVtxOffset'
// is enabled, those fields allow us to render meshes larger than 64K vertices while keeping 16-bits indices.

var ImDrawCmd = /** @class */ (function () {
    function ImDrawCmd(native) {
        this.native = native;
        // ImDrawCallback  UserCallback;           // If != NULL, call the function instead of rendering the vertices. clip_rect and texture_id will be set normally.
        this.UserCallback = null; // TODO
        // void*           UserCallbackData;       // The draw callback code can access this.
        this.UserCallbackData = null; // TODO
    }
    Object.defineProperty(ImDrawCmd.prototype, "ElemCount", {
        // unsigned int    ElemCount;              // Number of indices (multiple of 3) to be rendered as triangles. Vertices are stored in the callee ImDrawList's vtx_buffer[] array, indices in idx_buffer[].
        get: function () { return this.native.ElemCount; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImDrawCmd.prototype, "ClipRect", {
        // ImVec4          ClipRect;               // Clipping rectangle (x1, y1, x2, y2)
        get: function () { return this.native.ClipRect; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImDrawCmd.prototype, "TextureId", {
        // ImTextureID     TextureId;              // User-provided texture ID. Set by user in ImfontAtlas::SetTexID() for fonts or passed to Image*() functions. Ignore if never using images or multiple fonts atlas.
        get: function () {
            return ImGuiContext.getTexture(this.native.TextureId);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImDrawCmd.prototype, "VtxOffset", {
        // unsigned int    VtxOffset;              // Start offset in vertex buffer. Pre-1.71 or without ImGuiBackendFlags_RendererHasVtxOffset: always 0. With ImGuiBackendFlags_RendererHasVtxOffset: may be >0 to support meshes larger than 64K vertices with 16-bits indices.
        get: function () { return this.native.VtxOffset; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImDrawCmd.prototype, "IdxOffset", {
        // unsigned int    IdxOffset;              // Start offset in index buffer. Always equal to sum of ElemCount drawn so far.
        get: function () { return this.native.IdxOffset; },
        enumerable: false,
        configurable: true
    });
    return ImDrawCmd;
}());

// Vertex index
// (to allow large meshes with 16-bits indices: set 'io.BackendFlags |= ImGuiBackendFlags_RendererHasVtxOffset' and handle ImDrawCmd::VtxOffset in the renderer back-end)
// (to use 32-bits indices: override with '#define ImDrawIdx unsigned int' in imconfig.h)
// #ifndef ImDrawIdx
// typedef unsigned short ImDrawIdx;
// #endif

var ImDrawIdxSize = 2; // bind.ImDrawIdxSize;
// Vertex layout
// #ifndef IMGUI_OVERRIDE_DRAWVERT_STRUCT_LAYOUT

var ImDrawVertSize = 20; // bind.ImDrawVertSize;

var ImDrawVertPosOffset = 0; // bind.ImDrawVertPosOffset;

var ImDrawVertUVOffset = 8; // bind.ImDrawVertUVOffset;

var ImDrawVertColOffset = 16; // bind.ImDrawVertColOffset;

var ImDrawVert = /** @class */ (function () {
    function ImDrawVert(buffer, byteOffset) {
        if (byteOffset === void 0) { byteOffset = 0; }
        this.pos = new Float32Array(buffer, byteOffset + bind.ImDrawVertPosOffset, 2);
        this.uv = new Float32Array(buffer, byteOffset + bind.ImDrawVertUVOffset, 2);
        this.col = new Uint32Array(buffer, byteOffset + bind.ImDrawVertColOffset, 1);
    }
    return ImDrawVert;
}());

// #else
// You can override the vertex format layout by defining IMGUI_OVERRIDE_DRAWVERT_STRUCT_LAYOUT in imconfig.h
// The code expect ImVec2 pos (8 bytes), ImVec2 uv (8 bytes), ImU32 col (4 bytes), but you can re-order them or add other fields as needed to simplify integration in your engine.
// The type has to be described within the macro (you can either declare the struct or use a typedef)
// NOTE: IMGUI DOESN'T CLEAR THE STRUCTURE AND DOESN'T CALL A CONSTRUCTOR SO ANY CUSTOM FIELD WILL BE UNINITIALIZED. IF YOU ADD EXTRA FIELDS (SUCH AS A 'Z' COORDINATES) YOU WILL NEED TO CLEAR THEM DURING RENDER OR TO IGNORE THEM.
// IMGUI_OVERRIDE_DRAWVERT_STRUCT_LAYOUT;
// #endif
// [Internal] For use by ImDrawList
var ImDrawCmdHeader = /** @class */ (function () {
    function ImDrawCmdHeader() {
    }
    return ImDrawCmdHeader;
}());

// Draw channels are used by the Columns API to "split" the render list into different channels while building, so items of each column can be batched together.
// You can also use them to simulate drawing layers and submit primitives in a different order than how they will be rendered.
var ImDrawChannel = /** @class */ (function () {
    function ImDrawChannel() {
    }
    return ImDrawChannel;
}());

var ImDrawListSharedData = /** @class */ (function () {
    function ImDrawListSharedData(native) {
        this.native = native;
    }
    return ImDrawListSharedData;
}());

// Draw command list
// This is the low-level list of polygons that ImGui functions are filling. At the end of the frame, all command lists are passed to your ImGuiIO::RenderDrawListFn function for rendering.
// Each ImGui window contains its own ImDrawList. You can use ImGui::GetWindowDrawList() to access the current window draw list and draw custom primitives.
// You can interleave normal ImGui:: calls and adding primitives to the current draw list.
// All positions are generally in pixel coordinates (top-left at (0,0), bottom-right at io.DisplaySize), however you are totally free to apply whatever transformation matrix to want to the data (if you apply such transformation you'll want to apply it to ClipRect as well)
// Important: Primitives are always added to the list and not culled (culling is done at higher-level by ImGui:: functions), if you use this API a lot consider coarse culling your drawn objects.

var ImDrawList = /** @class */ (function () {
    function ImDrawList(native) {
        this.native = native;
    }
    ImDrawList.prototype.IterateDrawCmds = function (callback) {
        this.native.IterateDrawCmds(function (draw_cmd, ElemStart) {
            callback(new ImDrawCmd(draw_cmd), ElemStart);
        });
    };
    Object.defineProperty(ImDrawList.prototype, "IdxBuffer", {
        // This is what you have to render
        // ImVector<ImDrawCmd>     CmdBuffer;          // Draw commands. Typically 1 command = 1 GPU draw call, unless the command is a callback.
        // ImVector<ImDrawIdx>     IdxBuffer;          // Index buffer. Each command consume ImDrawCmd::ElemCount of those
        get: function () { return this.native.IdxBuffer; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImDrawList.prototype, "VtxBuffer", {
        // ImVector<ImDrawVert>    VtxBuffer;          // Vertex buffer.
        get: function () { return this.native.VtxBuffer; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImDrawList.prototype, "Flags", {
        // ImDrawListFlags         Flags;              // Flags, you may poke into these to adjust anti-aliasing settings per-primitive.
        get: function () { return this.native.Flags; },
        set: function (value) { this.native.Flags = value; },
        enumerable: false,
        configurable: true
    });
    // [Internal, used while building lists]
    // unsigned int            _VtxCurrentIdx;     // [Internal] == VtxBuffer.Size
    // const ImDrawListSharedData* _Data;          // Pointer to shared draw data (you can use ImGui::GetDrawListSharedData() to get the one from current ImGui context)
    // const char*             _OwnerName;         // Pointer to owner window's name for debugging
    // ImDrawVert*             _VtxWritePtr;       // [Internal] point within VtxBuffer.Data after each add command (to avoid using the ImVector<> operators too much)
    // ImDrawIdx*              _IdxWritePtr;       // [Internal] point within IdxBuffer.Data after each add command (to avoid using the ImVector<> operators too much)
    // ImVector<ImVec4>        _ClipRectStack;     // [Internal]
    // ImVector<ImTextureID>   _TextureIdStack;    // [Internal]
    // ImVector<ImVec2>        _Path;              // [Internal] current path building
    // int                     _ChannelsCurrent;   // [Internal] current channel number (0)
    // int                     _ChannelsCount;     // [Internal] number of active channels (1+)
    // ImVector<ImDrawChannel> _Channels;          // [Internal] draw channels for columns API (not resized down so _ChannelsCount may be smaller than _Channels.Size)
    // ImDrawList(const ImDrawListSharedData* shared_data) { _Data = shared_data; _OwnerName = NULL; Clear(); }
    // ~ImDrawList() { ClearFreeMemory(); }
    // IMGUI_API void  PushClipRect(ImVec2 clip_rect_min, ImVec2 clip_rect_max, bool intersect_with_current_clip_rect = false);  // Render-level scissoring. This is passed down to your render function but not used for CPU-side coarse clipping. Prefer using higher-level ImGui::PushClipRect() to affect logic (hit-testing and widget culling)
    ImDrawList.prototype.PushClipRect = function (clip_rect_min, clip_rect_max, intersect_with_current_clip_rect) {
        if (intersect_with_current_clip_rect === void 0) { intersect_with_current_clip_rect = false; }
        this.native.PushClipRect(clip_rect_min, clip_rect_max, intersect_with_current_clip_rect);
    };
    // IMGUI_API void  PushClipRectFullScreen();
    ImDrawList.prototype.PushClipRectFullScreen = function () { this.native.PushClipRectFullScreen(); };
    // IMGUI_API void  PopClipRect();
    ImDrawList.prototype.PopClipRect = function () { this.native.PopClipRect(); };
    // IMGUI_API void  PushTextureID(ImTextureID texture_id);
    ImDrawList.prototype.PushTextureID = function (texture_id) {
        this.native.PushTextureID(ImGuiContext.setTexture(texture_id));
    };
    // IMGUI_API void  PopTextureID();
    ImDrawList.prototype.PopTextureID = function () { this.native.PopTextureID(); };
    // inline ImVec2   GetClipRectMin() const { const ImVec4& cr = _ClipRectStack.back(); return ImVec2(cr.x, cr.y); }
    ImDrawList.prototype.GetClipRectMin = function (out) {
        if (out === void 0) { out = new ImVec2(); }
        return this.native.GetClipRectMin(out);
    };
    // inline ImVec2   GetClipRectMax() const { const ImVec4& cr = _ClipRectStack.back(); return ImVec2(cr.z, cr.w); }
    ImDrawList.prototype.GetClipRectMax = function (out) {
        if (out === void 0) { out = new ImVec2(); }
        return this.native.GetClipRectMax(out);
    };
    // Primitives
    // IMGUI_API void  AddLine(const ImVec2& a, const ImVec2& b, ImU32 col, float thickness = 1.0f);
    ImDrawList.prototype.AddLine = function (a, b, col, thickness) {
        if (thickness === void 0) { thickness = 1.0; }
        this.native.AddLine(a, b, col, thickness);
    };
    // IMGUI_API void  AddRect(const ImVec2& a, const ImVec2& b, ImU32 col, float rounding = 0.0f, int rounding_corners_flags = ImDrawCornerFlags_All, float thickness = 1.0f);   // a: upper-left, b: lower-right, rounding_corners_flags: 4-bits corresponding to which corner to round
    ImDrawList.prototype.AddRect = function (a, b, col, rounding, rounding_corners_flags, thickness) {
        if (rounding === void 0) { rounding = 0.0; }
        if (rounding_corners_flags === void 0) { rounding_corners_flags = ImDrawCornerFlags.All; }
        if (thickness === void 0) { thickness = 1.0; }
        this.native.AddRect(a, b, col, rounding, rounding_corners_flags, thickness);
    };
    // IMGUI_API void  AddRectFilled(const ImVec2& a, const ImVec2& b, ImU32 col, float rounding = 0.0f, int rounding_corners_flags = ImDrawCornerFlags_All);                     // a: upper-left, b: lower-right
    ImDrawList.prototype.AddRectFilled = function (a, b, col, rounding, rounding_corners_flags) {
        if (rounding === void 0) { rounding = 0.0; }
        if (rounding_corners_flags === void 0) { rounding_corners_flags = ImDrawCornerFlags.All; }
        this.native.AddRectFilled(a, b, col, rounding, rounding_corners_flags);
    };
    // IMGUI_API void  AddRectFilledMultiColor(const ImVec2& a, const ImVec2& b, ImU32 col_upr_left, ImU32 col_upr_right, ImU32 col_bot_right, ImU32 col_bot_left);
    ImDrawList.prototype.AddRectFilledMultiColor = function (a, b, col_upr_left, col_upr_right, col_bot_right, col_bot_left) {
        this.native.AddRectFilledMultiColor(a, b, col_upr_left, col_upr_right, col_bot_right, col_bot_left);
    };
    // IMGUI_API void  AddQuad(const ImVec2& a, const ImVec2& b, const ImVec2& c, const ImVec2& d, ImU32 col, float thickness = 1.0f);
    ImDrawList.prototype.AddQuad = function (a, b, c, d, col, thickness) {
        if (thickness === void 0) { thickness = 1.0; }
        this.native.AddQuad(a, b, c, d, col, thickness);
    };
    // IMGUI_API void  AddQuadFilled(const ImVec2& a, const ImVec2& b, const ImVec2& c, const ImVec2& d, ImU32 col);
    ImDrawList.prototype.AddQuadFilled = function (a, b, c, d, col) {
        this.native.AddQuadFilled(a, b, c, d, col);
    };
    // IMGUI_API void  AddTriangle(const ImVec2& a, const ImVec2& b, const ImVec2& c, ImU32 col, float thickness = 1.0f);
    ImDrawList.prototype.AddTriangle = function (a, b, c, col, thickness) {
        if (thickness === void 0) { thickness = 1.0; }
        this.native.AddTriangle(a, b, c, col, thickness);
    };
    // IMGUI_API void  AddTriangleFilled(const ImVec2& a, const ImVec2& b, const ImVec2& c, ImU32 col);
    ImDrawList.prototype.AddTriangleFilled = function (a, b, c, col) {
        this.native.AddTriangleFilled(a, b, c, col);
    };
    // IMGUI_API void  AddCircle(const ImVec2& centre, float radius, ImU32 col, int num_segments = 12, float thickness = 1.0f);
    ImDrawList.prototype.AddCircle = function (centre, radius, col, num_segments, thickness) {
        if (num_segments === void 0) { num_segments = 12; }
        if (thickness === void 0) { thickness = 1.0; }
        this.native.AddCircle(centre, radius, col, num_segments, thickness);
    };
    // IMGUI_API void  AddCircleFilled(const ImVec2& centre, float radius, ImU32 col, int num_segments = 12);
    ImDrawList.prototype.AddCircleFilled = function (centre, radius, col, num_segments) {
        if (num_segments === void 0) { num_segments = 12; }
        this.native.AddCircleFilled(centre, radius, col, num_segments);
    };
    // IMGUI_API void  AddNgon(const ImVec2& center, float radius, ImU32 col, int num_segments, float thickness = 1.0f);
    ImDrawList.prototype.AddNgon = function (centre, radius, col, num_segments, thickness) {
        if (thickness === void 0) { thickness = 1.0; }
        this.native.AddNgon(centre, radius, col, num_segments, thickness);
    };
    // IMGUI_API void  AddNgonFilled(const ImVec2& center, float radius, ImU32 col, int num_segments);
    ImDrawList.prototype.AddNgonFilled = function (centre, radius, col, num_segments) {
        this.native.AddNgonFilled(centre, radius, col, num_segments);
    };
    ImDrawList.prototype.AddText = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (args[0] instanceof ImFont) {
            var font = args[0];
            var font_size = args[1];
            var pos = args[2];
            var col = args[3];
            var text_begin = args[4];
            var text_end = args[5] || null;
            var wrap_width = args[6] = 0.0;
            var cpu_fine_clip_rect = args[7] || null;
            this.native.AddText_B(font.native, font_size, pos, col, text_end !== null ? text_begin.substring(0, text_end) : text_begin, wrap_width, cpu_fine_clip_rect);
        }
        else {
            var pos = args[0];
            var col = args[1];
            var text_begin = args[2];
            var text_end = args[3] || null;
            this.native.AddText_A(pos, col, text_end !== null ? text_begin.substring(0, text_end) : text_begin);
        }
    };
    // IMGUI_API void  AddPolyline(const ImVec2* points, const int num_points, ImU32 col, bool closed, float thickness);
    ImDrawList.prototype.AddPolyline = function (points, num_points, col, closed, thickness) {
        this.native.AddPolyline(points, num_points, col, closed, thickness);
    };
    // IMGUI_API void  AddConvexPolyFilled(const ImVec2* points, const int num_points, ImU32 col);
    ImDrawList.prototype.AddConvexPolyFilled = function (points, num_points, col) {
        this.native.AddConvexPolyFilled(points, num_points, col);
    };
    // IMGUI_API void  AddBezierCubic(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, const ImVec2& p4, ImU32 col, float thickness, int num_segments = 0); // Cubic Bezier (4 control points)
    ImDrawList.prototype.AddBezierCubic = function (p1, p2, p3, p4, col, thickness, num_segments) {
        if (thickness === void 0) { thickness = 1.0; }
        if (num_segments === void 0) { num_segments = 0; }
        this.native.AddBezierCubic(p1, p2, p3, p4, col, thickness, num_segments);
    };
    // IMGUI_API void  AddBezierQuadratic(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, ImU32 col, float thickness, int num_segments = 0);               // Quadratic Bezier (3 control points)
    ImDrawList.prototype.AddBezierQuadratic = function (p1, p2, p3, col, thickness, num_segments) {
        if (thickness === void 0) { thickness = 1.0; }
        if (num_segments === void 0) { num_segments = 0; }
        this.native.AddBezierQuadratic(p1, p2, p3, col, thickness, num_segments);
    };
    // IMGUI_API void  AddImage(ImTextureID user_texture_id, const ImVec2& a, const ImVec2& b, const ImVec2& uv_a = ImVec2(0,0), const ImVec2& uv_b = ImVec2(1,1), ImU32 col = 0xFFFFFFFF);
    ImDrawList.prototype.AddImage = function (user_texture_id, a, b, uv_a, uv_b, col) {
        if (uv_a === void 0) { uv_a = ImVec2.ZERO; }
        if (uv_b === void 0) { uv_b = ImVec2.UNIT; }
        if (col === void 0) { col = 0xFFFFFFFF; }
        this.native.AddImage(ImGuiContext.setTexture(user_texture_id), a, b, uv_a, uv_b, col);
    };
    // IMGUI_API void  AddImageQuad(ImTextureID user_texture_id, const ImVec2& a, const ImVec2& b, const ImVec2& c, const ImVec2& d, const ImVec2& uv_a = ImVec2(0,0), const ImVec2& uv_b = ImVec2(1,0), const ImVec2& uv_c = ImVec2(1,1), const ImVec2& uv_d = ImVec2(0,1), ImU32 col = 0xFFFFFFFF);
    ImDrawList.prototype.AddImageQuad = function (user_texture_id, a, b, c, d, uv_a, uv_b, uv_c, uv_d, col) {
        if (uv_a === void 0) { uv_a = ImVec2.ZERO; }
        if (uv_b === void 0) { uv_b = ImVec2.UNIT_X; }
        if (uv_c === void 0) { uv_c = ImVec2.UNIT; }
        if (uv_d === void 0) { uv_d = ImVec2.UNIT_Y; }
        if (col === void 0) { col = 0xFFFFFFFF; }
        this.native.AddImageQuad(ImGuiContext.setTexture(user_texture_id), a, b, c, d, uv_a, uv_b, uv_c, uv_d, col);
    };
    // IMGUI_API void  AddImageRounded(ImTextureID user_texture_id, const ImVec2& a, const ImVec2& b, const ImVec2& uv_a, const ImVec2& uv_b, ImU32 col, float rounding, int rounding_corners = ImDrawCornerFlags_All);
    ImDrawList.prototype.AddImageRounded = function (user_texture_id, a, b, uv_a, uv_b, col, rounding, rounding_corners) {
        if (rounding_corners === void 0) { rounding_corners = ImDrawCornerFlags.All; }
        this.native.AddImageRounded(ImGuiContext.setTexture(user_texture_id), a, b, uv_a, uv_b, col, rounding, rounding_corners);
    };
    // Stateful path API, add points then finish with PathFill() or PathStroke()
    // inline    void  PathClear()                                                 { _Path.resize(0); }
    ImDrawList.prototype.PathClear = function () { this.native.PathClear(); };
    // inline    void  PathLineTo(const ImVec2& pos)                               { _Path.push_back(pos); }
    ImDrawList.prototype.PathLineTo = function (pos) { this.native.PathLineTo(pos); };
    // inline    void  PathLineToMergeDuplicate(const ImVec2& pos)                 { if (_Path.Size == 0 || memcmp(&_Path[_Path.Size-1], &pos, 8) != 0) _Path.push_back(pos); }
    ImDrawList.prototype.PathLineToMergeDuplicate = function (pos) { this.native.PathLineToMergeDuplicate(pos); };
    // inline    void  PathFillConvex(ImU32 col)                                   { AddConvexPolyFilled(_Path.Data, _Path.Size, col); PathClear(); }
    ImDrawList.prototype.PathFillConvex = function (col) { this.native.PathFillConvex(col); };
    // inline    void  PathStroke(ImU32 col, bool closed, float thickness = 1.0f)  { AddPolyline(_Path.Data, _Path.Size, col, closed, thickness); PathClear(); }
    ImDrawList.prototype.PathStroke = function (col, closed, thickness) {
        if (thickness === void 0) { thickness = 1.0; }
        this.native.PathStroke(col, closed, thickness);
    };
    // IMGUI_API void  PathArcTo(const ImVec2& centre, float radius, float a_min, float a_max, int num_segments = 10);
    ImDrawList.prototype.PathArcTo = function (centre, radius, a_min, a_max, num_segments) {
        if (num_segments === void 0) { num_segments = 10; }
        this.native.PathArcTo(centre, radius, a_min, a_max, num_segments);
    };
    // IMGUI_API void  PathArcToFast(const ImVec2& centre, float radius, int a_min_of_12, int a_max_of_12);                                // Use precomputed angles for a 12 steps circle
    ImDrawList.prototype.PathArcToFast = function (centre, radius, a_min_of_12, a_max_of_12) { this.native.PathArcToFast(centre, radius, a_min_of_12, a_max_of_12); };
    // IMGUI_API void  PathBezierCubicCurveTo(const ImVec2& p2, const ImVec2& p3, const ImVec2& p4, int num_segments = 0);  // Cubic Bezier (4 control points)
    ImDrawList.prototype.PathBezierCubicCurveTo = function (p2, p3, p4, num_segments) {
        if (num_segments === void 0) { num_segments = 0; }
        this.native.PathBezierCubicCurveTo(p2, p3, p4, num_segments);
    };
    // IMGUI_API void  PathBezierQuadraticCurveTo(const ImVec2& p2, const ImVec2& p3, int num_segments = 0);                // Quadratic Bezier (3 control points)
    ImDrawList.prototype.PathBezierQuadraticCurveTo = function (p2, p3, num_segments) {
        if (num_segments === void 0) { num_segments = 0; }
        this.native.PathBezierQuadraticCurveTo(p2, p3, num_segments);
    };
    // IMGUI_API void  PathRect(const ImVec2& rect_min, const ImVec2& rect_max, float rounding = 0.0f, int rounding_corners_flags = ImDrawCornerFlags_All);
    ImDrawList.prototype.PathRect = function (rect_min, rect_max, rounding, rounding_corners_flags) {
        if (rounding === void 0) { rounding = 0.0; }
        if (rounding_corners_flags === void 0) { rounding_corners_flags = ImDrawCornerFlags.All; }
        this.native.PathRect(rect_min, rect_max, rounding, rounding_corners_flags);
    };
    // Channels
    // - Use to simulate layers. By switching channels to can render out-of-order (e.g. submit foreground primitives before background primitives)
    // - Use to minimize draw calls (e.g. if going back-and-forth between multiple non-overlapping clipping rectangles, prefer to append into separate channels then merge at the end)
    // IMGUI_API void  ChannelsSplit(int channels_count);
    ImDrawList.prototype.ChannelsSplit = function (channels_count) { this.native.ChannelsSplit(channels_count); };
    // IMGUI_API void  ChannelsMerge();
    ImDrawList.prototype.ChannelsMerge = function () { this.native.ChannelsMerge(); };
    // IMGUI_API void  ChannelsSetCurrent(int channel_index);
    ImDrawList.prototype.ChannelsSetCurrent = function (channel_index) { this.native.ChannelsSetCurrent(channel_index); };
    // Advanced
    // IMGUI_API void  AddCallback(ImDrawCallback callback, void* callback_data);  // Your rendering function must check for 'UserCallback' in ImDrawCmd and call the function instead of rendering triangles.
    ImDrawList.prototype.AddCallback = function (callback, callback_data) {
        var _callback = function (parent_list, draw_cmd) {
            callback(new ImDrawList(parent_list), new ImDrawCmd(draw_cmd));
        };
        this.native.AddCallback(_callback, callback_data);
    };
    // IMGUI_API void  AddDrawCmd();                                               // This is useful if you need to forcefully create a new draw call (to allow for dependent rendering / blending). Otherwise primitives are merged into the same draw-call as much as possible
    ImDrawList.prototype.AddDrawCmd = function () { this.native.AddDrawCmd(); };
    // Internal helpers
    // NB: all primitives needs to be reserved via PrimReserve() beforehand!
    // IMGUI_API void  PrimReserve(int idx_count, int vtx_count);
    ImDrawList.prototype.PrimReserve = function (idx_count, vtx_count) { this.native.PrimReserve(idx_count, vtx_count); };
    // IMGUI_API void  PrimUnreserve(int idx_count, int vtx_count);
    ImDrawList.prototype.PrimUnreserve = function (idx_count, vtx_count) { this.native.PrimUnreserve(idx_count, vtx_count); };
    // IMGUI_API void  PrimRect(const ImVec2& a, const ImVec2& b, ImU32 col);      // Axis aligned rectangle (composed of two triangles)
    ImDrawList.prototype.PrimRect = function (a, b, col) { this.native.PrimRect(a, b, col); };
    // IMGUI_API void  PrimRectUV(const ImVec2& a, const ImVec2& b, const ImVec2& uv_a, const ImVec2& uv_b, ImU32 col);
    ImDrawList.prototype.PrimRectUV = function (a, b, uv_a, uv_b, col) { this.native.PrimRectUV(a, b, uv_a, uv_b, col); };
    // IMGUI_API void  PrimQuadUV(const ImVec2& a, const ImVec2& b, const ImVec2& c, const ImVec2& d, const ImVec2& uv_a, const ImVec2& uv_b, const ImVec2& uv_c, const ImVec2& uv_d, ImU32 col);
    ImDrawList.prototype.PrimQuadUV = function (a, b, c, d, uv_a, uv_b, uv_c, uv_d, col) { this.native.PrimQuadUV(a, b, c, d, uv_a, uv_b, uv_c, uv_d, col); };
    // inline    void  PrimWriteVtx(const ImVec2& pos, const ImVec2& uv, ImU32 col){ _VtxWritePtr->pos = pos; _VtxWritePtr->uv = uv; _VtxWritePtr->col = col; _VtxWritePtr++; _VtxCurrentIdx++; }
    ImDrawList.prototype.PrimWriteVtx = function (pos, uv, col) { this.native.PrimWriteVtx(pos, uv, col); };
    // inline    void  PrimWriteIdx(ImDrawIdx idx)                                 { *_IdxWritePtr = idx; _IdxWritePtr++; }
    ImDrawList.prototype.PrimWriteIdx = function (idx) { this.native.PrimWriteIdx(idx); };
    // inline    void  PrimVtx(const ImVec2& pos, const ImVec2& uv, ImU32 col)     { PrimWriteIdx((ImDrawIdx)_VtxCurrentIdx); PrimWriteVtx(pos, uv, col); }
    ImDrawList.prototype.PrimVtx = function (pos, uv, col) { this.native.PrimVtx(pos, uv, col); };
    return ImDrawList;
}());

// All draw data to render an ImGui frame

var ImDrawData = /** @class */ (function () {
    function ImDrawData(native) {
        this.native = native;
    }
    ImDrawData.prototype.IterateDrawLists = function (callback) {
        this.native.IterateDrawLists(function (draw_list) {
            callback(new ImDrawList(draw_list));
        });
    };
    Object.defineProperty(ImDrawData.prototype, "Valid", {
        // bool            Valid;                  // Only valid after Render() is called and before the next NewFrame() is called.
        get: function () { return this.native.Valid; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImDrawData.prototype, "CmdListsCount", {
        // ImDrawList**    CmdLists;
        // int             CmdListsCount;
        get: function () { return this.native.CmdListsCount; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImDrawData.prototype, "TotalIdxCount", {
        // int             TotalIdxCount;          // For convenience, sum of all cmd_lists idx_buffer.Size
        get: function () { return this.native.TotalIdxCount; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImDrawData.prototype, "TotalVtxCount", {
        // int             TotalVtxCount;          // For convenience, sum of all cmd_lists vtx_buffer.Size
        get: function () { return this.native.TotalVtxCount; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImDrawData.prototype, "DisplayPos", {
        // ImVec2          DisplayPos;             // Upper-left position of the viewport to render (== upper-left of the orthogonal projection matrix to use)
        get: function () { return this.native.DisplayPos; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImDrawData.prototype, "DisplaySize", {
        // ImVec2          DisplaySize;            // Size of the viewport to render (== io.DisplaySize for the main viewport) (DisplayPos + DisplaySize == lower-right of the orthogonal projection matrix to use)
        get: function () { return this.native.DisplaySize; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImDrawData.prototype, "FramebufferScale", {
        // ImVec2          FramebufferScale;       // Amount of pixels for each unit of DisplaySize. Based on io.DisplayFramebufferScale. Generally (1,1) on normal display, (2,2) on OSX with Retina display.
        get: function () { return this.native.FramebufferScale; },
        enumerable: false,
        configurable: true
    });
    // Functions
    // ImDrawData() { Valid = false; CmdLists = NULL; CmdListsCount = TotalVtxCount = TotalIdxCount = 0; }
    // IMGUI_API void DeIndexAllBuffers();               // For backward compatibility or convenience: convert all buffers from indexed to de-indexed, in case you cannot render indexed. Note: this is slow and most likely a waste of resources. Always prefer indexed rendering!
    ImDrawData.prototype.DeIndexAllBuffers = function () { this.native.DeIndexAllBuffers(); };
    // IMGUI_API void ScaleClipRects(const ImVec2& fb_scale);  // Helper to scale the ClipRect field of each ImDrawCmd. Use if your final output buffer is at a different scale than ImGui expects, or if there is a difference between your window resolution and framebuffer resolution.
    ImDrawData.prototype.ScaleClipRects = function (fb_scale) {
        this.native.ScaleClipRects(fb_scale);
    };
    return ImDrawData;
}());

var script_ImFontConfig = /** @class */ (function () {
    function script_ImFontConfig() {
        // void*           FontData;                   //          // TTF/OTF data
        // int             FontDataSize;               //          // TTF/OTF data size
        this.FontData = null;
        // bool            FontDataOwnedByAtlas;       // true     // TTF/OTF data ownership taken by the container ImFontAtlas (will delete memory itself).
        this.FontDataOwnedByAtlas = true;
        // int             FontNo;                     // 0        // Index of font within TTF/OTF file
        this.FontNo = 0;
        // float           SizePixels;                 //          // Size in pixels for rasterizer.
        this.SizePixels = 0;
        // int             OversampleH, OversampleV;   // 3, 1     // Rasterize at higher quality for sub-pixel positioning. We don't use sub-pixel positions on the Y axis.
        this.OversampleH = 3;
        this.OversampleV = 1;
        // bool            PixelSnapH;                 // false    // Align every glyph to pixel boundary. Useful e.g. if you are merging a non-pixel aligned font with the default font. If enabled, you can set OversampleH/V to 1.
        this.PixelSnapH = false;
        // ImVec2          GlyphExtraSpacing;          // 0, 0     // Extra spacing (in pixels) between glyphs. Only X axis is supported for now.
        this.GlyphExtraSpacing = new ImVec2(0, 0);
        // ImVec2          GlyphOffset;                // 0, 0     // Offset all glyphs from this font input.
        this.GlyphOffset = new ImVec2(0, 0);
        // const ImWchar*  GlyphRanges;                // NULL     // Pointer to a user-provided list of Unicode range (2 value per range, values are inclusive, zero-terminated list). THE ARRAY DATA NEEDS TO PERSIST AS LONG AS THE FONT IS ALIVE.
        this.GlyphRanges = null;
        // float           GlyphMinAdvanceX;           // 0        // Minimum AdvanceX for glyphs, set Min to align font icons, set both Min/Max to enforce mono-space font
        this.GlyphMinAdvanceX = 0;
        // float           GlyphMaxAdvanceX;           // FLT_MAX  // Maximum AdvanceX for glyphs
        this.GlyphMaxAdvanceX = Number.MAX_VALUE;
        // bool            MergeMode;                  // false    // Merge into previous ImFont, so you can combine multiple inputs font into one ImFont (e.g. ASCII font + icons + Japanese glyphs). You may want to use GlyphOffset.y when merge font of different heights.
        this.MergeMode = false;
        // unsigned int    RasterizerFlags;            // 0x00     // Settings for custom font rasterizer (e.g. ImGuiFreeType). Leave as zero if you aren't using one.
        this.RasterizerFlags = 0;
        // float           RasterizerMultiply;         // 1.0f     // Brighten (>1.0f) or darken (<1.0f) font output. Brightening small fonts may be a good workaround to make them more readable.
        this.RasterizerMultiply = 1.0;
        // ImWchar         EllipsisChar;           // -1       // Explicitly specify unicode codepoint of ellipsis character. When fonts are being merged first specified ellipsis will be used.
        this.EllipsisChar = -1;
        // [Internal]
        // char            Name[32];                               // Name (strictly to ease debugging)
        this.Name = "";
        // ImFont*         DstFont;
        this.DstFont = null;
        // IMGUI_API ImFontConfig();
    }
    return script_ImFontConfig;
}());


var ImFontConfig = /** @class */ (function () {
    function ImFontConfig(internal) {
        if (internal === void 0) { internal = new script_ImFontConfig(); }
        this.internal = internal;
    }
    Object.defineProperty(ImFontConfig.prototype, "FontData", {
        // void*           FontData;                   //          // TTF/OTF data
        // int             FontDataSize;               //          // TTF/OTF data size
        get: function () { return this.internal.FontData; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImFontConfig.prototype, "FontDataOwnedByAtlas", {
        // bool            FontDataOwnedByAtlas;       // true     // TTF/OTF data ownership taken by the container ImFontAtlas (will delete memory itself).
        get: function () { return this.internal.FontDataOwnedByAtlas; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImFontConfig.prototype, "FontNo", {
        // int             FontNo;                     // 0        // Index of font within TTF/OTF file
        get: function () { return this.internal.FontNo; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImFontConfig.prototype, "SizePixels", {
        // float           SizePixels;                 //          // Size in pixels for rasterizer.
        get: function () { return this.internal.SizePixels; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImFontConfig.prototype, "OversampleH", {
        // int             OversampleH, OversampleV;   // 3, 1     // Rasterize at higher quality for sub-pixel positioning. We don't use sub-pixel positions on the Y axis.
        get: function () { return this.internal.OversampleH; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImFontConfig.prototype, "OversampleV", {
        get: function () { return this.internal.OversampleV; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImFontConfig.prototype, "PixelSnapH", {
        // bool            PixelSnapH;                 // false    // Align every glyph to pixel boundary. Useful e.g. if you are merging a non-pixel aligned font with the default font. If enabled, you can set OversampleH/V to 1.
        get: function () { return this.internal.PixelSnapH; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImFontConfig.prototype, "GlyphExtraSpacing", {
        // ImVec2          GlyphExtraSpacing;          // 0, 0     // Extra spacing (in pixels) between glyphs. Only X axis is supported for now.
        get: function () { return this.internal.GlyphExtraSpacing; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImFontConfig.prototype, "GlyphOffset", {
        // ImVec2          GlyphOffset;                // 0, 0     // Offset all glyphs from this font input.
        get: function () { return this.internal.GlyphOffset; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImFontConfig.prototype, "GlyphRanges", {
        // const ImWchar*  GlyphRanges;                // NULL     // Pointer to a user-provided list of Unicode range (2 value per range, values are inclusive, zero-terminated list). THE ARRAY DATA NEEDS TO PERSIST AS LONG AS THE FONT IS ALIVE.
        get: function () { return this.internal.GlyphRanges; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImFontConfig.prototype, "GlyphMinAdvanceX", {
        // float           GlyphMinAdvanceX;           // 0        // Minimum AdvanceX for glyphs, set Min to align font icons, set both Min/Max to enforce mono-space font
        get: function () { return this.internal.GlyphMinAdvanceX; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImFontConfig.prototype, "GlyphMaxAdvanceX", {
        // float           GlyphMaxAdvanceX;           // FLT_MAX  // Maximum AdvanceX for glyphs
        get: function () { return this.internal.GlyphMaxAdvanceX; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImFontConfig.prototype, "MergeMode", {
        // bool            MergeMode;                  // false    // Merge into previous ImFont, so you can combine multiple inputs font into one ImFont (e.g. ASCII font + icons + Japanese glyphs). You may want to use GlyphOffset.y when merge font of different heights.
        get: function () { return this.internal.MergeMode; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImFontConfig.prototype, "RasterizerFlags", {
        // unsigned int    RasterizerFlags;            // 0x00     // Settings for custom font rasterizer (e.g. ImGuiFreeType). Leave as zero if you aren't using one.
        get: function () { return this.internal.RasterizerFlags; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImFontConfig.prototype, "RasterizerMultiply", {
        // float           RasterizerMultiply;         // 1.0f     // Brighten (>1.0f) or darken (<1.0f) font output. Brightening small fonts may be a good workaround to make them more readable.
        get: function () { return this.internal.RasterizerMultiply; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImFontConfig.prototype, "Name", {
        // [Internal]
        // char            Name[32];                               // Name (strictly to ease debugging)
        get: function () { return this.internal.Name; },
        set: function (value) { this.internal.Name = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImFontConfig.prototype, "DstFont", {
        // ImFont*         DstFont;
        get: function () {
            var font = this.internal.DstFont;
            return font && new ImFont(font);
        },
        enumerable: false,
        configurable: true
    });
    return ImFontConfig;
}());

// struct ImFontGlyph
var script_ImFontGlyph = /** @class */ (function () {
    function script_ImFontGlyph() {
        // unsigned int    Codepoint : 31;     // 0x0000..0xFFFF
        this.Codepoint = 0;
        // unsigned int    Visible : 1;        // Flag to allow early out when rendering
        this.Visible = false;
        // float           AdvanceX;           // Distance to next character (= data from font + ImFontConfig::GlyphExtraSpacing.x baked in)
        this.AdvanceX = 0.0;
        // float           X0, Y0, X1, Y1;     // Glyph corners
        this.X0 = 0.0;
        this.Y0 = 0.0;
        this.X1 = 1.0;
        this.Y1 = 1.0;
        // float           U0, V0, U1, V1;     // Texture coordinates
        this.U0 = 0.0;
        this.V0 = 0.0;
        this.U1 = 1.0;
        this.V1 = 1.0;
        this.TexID = null;
        this.Char = 0;
    }
    return script_ImFontGlyph;
}());


var ImFontGlyph = /** @class */ (function () {
    function ImFontGlyph(internal) {
        if (internal === void 0) { internal = new script_ImFontGlyph(); }
        this.internal = internal;
    }
    Object.defineProperty(ImFontGlyph.prototype, "Codepoint", {
        // unsigned int    Codepoint : 31;     // 0x0000..0xFFFF
        get: function () { return this.internal.Codepoint; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImFontGlyph.prototype, "Visible", {
        // unsigned int    Visible : 1;        // Flag to allow early out when rendering
        get: function () { return this.internal.Visible; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImFontGlyph.prototype, "AdvanceX", {
        // float           AdvanceX;           // Distance to next character (= data from font + ImFontConfig::GlyphExtraSpacing.x baked in)
        get: function () { return this.internal.AdvanceX; },
        set: function (v) { this.internal.AdvanceX = v; },
        enumerable: false,
        configurable: true
    });
    ;
    Object.defineProperty(ImFontGlyph.prototype, "X0", {
        // float           X0, Y0, X1, Y1;     // Glyph corners
        get: function () { return this.internal.X0; },
        set: function (v) { this.internal.X0 = v; },
        enumerable: false,
        configurable: true
    });
    ;
    Object.defineProperty(ImFontGlyph.prototype, "Y0", {
        get: function () { return this.internal.Y0; },
        set: function (v) { this.internal.Y0 = v; },
        enumerable: false,
        configurable: true
    });
    ;
    Object.defineProperty(ImFontGlyph.prototype, "X1", {
        get: function () { return this.internal.X1; },
        set: function (v) { this.internal.X1 = v; },
        enumerable: false,
        configurable: true
    });
    ;
    Object.defineProperty(ImFontGlyph.prototype, "Y1", {
        get: function () { return this.internal.Y1; },
        set: function (v) { this.internal.Y1 = v; },
        enumerable: false,
        configurable: true
    });
    ;
    Object.defineProperty(ImFontGlyph.prototype, "U0", {
        // float           U0, V0, U1, V1;     // Texture coordinates
        get: function () { return this.internal.U0; },
        set: function (v) { this.internal.U0 = v; },
        enumerable: false,
        configurable: true
    });
    ;
    Object.defineProperty(ImFontGlyph.prototype, "V0", {
        get: function () { return this.internal.V0; },
        set: function (v) { this.internal.V0 = v; },
        enumerable: false,
        configurable: true
    });
    ;
    Object.defineProperty(ImFontGlyph.prototype, "U1", {
        get: function () { return this.internal.U1; },
        set: function (v) { this.internal.U1 = v; },
        enumerable: false,
        configurable: true
    });
    ;
    Object.defineProperty(ImFontGlyph.prototype, "V1", {
        get: function () { return this.internal.V1; },
        set: function (v) { this.internal.V1 = v; },
        enumerable: false,
        configurable: true
    });
    ;
    Object.defineProperty(ImFontGlyph.prototype, "TexID", {
        get: function () { return this.internal.TexID; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImFontGlyph.prototype, "TextureID", {
        get: function () { return ImGuiContext.getTexture(this.internal.TexID); },
        set: function (v) { this.internal.TexID = ImGuiContext.setTexture(v); },
        enumerable: false,
        configurable: true
    });
    ;
    Object.defineProperty(ImFontGlyph.prototype, "Char", {
        get: function () { return this.internal.Char; },
        enumerable: false,
        configurable: true
    });
    ;
    return ImFontGlyph;
}());

// See ImFontAtlas::AddCustomRectXXX functions.
var ImFontAtlasCustomRect = /** @class */ (function () {
    function ImFontAtlasCustomRect() {
    }
    return ImFontAtlasCustomRect;
}());


var ImFontAtlasFlags;
(function (ImFontAtlasFlags) {
    ImFontAtlasFlags[ImFontAtlasFlags["None"] = 0] = "None";
    ImFontAtlasFlags[ImFontAtlasFlags["NoPowerOfTwoHeight"] = 1] = "NoPowerOfTwoHeight";
    ImFontAtlasFlags[ImFontAtlasFlags["NoMouseCursors"] = 2] = "NoMouseCursors";
    ImFontAtlasFlags[ImFontAtlasFlags["NoBakedLines"] = 4] = "NoBakedLines";
})(ImFontAtlasFlags || (ImFontAtlasFlags = {}));
// Load and rasterize multiple TTF/OTF fonts into a same texture.
// Sharing a texture for multiple fonts allows us to reduce the number of draw calls during rendering.
// We also add custom graphic data into the texture that serves for ImGui.
//  1. (Optional) Call AddFont*** functions. If you don't call any, the default font will be loaded for you.
//  2. Call GetTexDataAsAlpha8() or GetTexDataAsRGBA32() to build and retrieve pixels data.
//  3. Upload the pixels data into a texture within your graphics system.
//  4. Call SetTexID(my_tex_id); and pass the pointer/identifier to your texture. This value will be passed back to you during rendering to identify the texture.
// IMPORTANT: If you pass a 'glyph_ranges' array to AddFont*** functions, you need to make sure that your array persist up until the ImFont is build (when calling GetTextData*** or Build()). We only copy the pointer, not the data.

var ImFontAtlas = /** @class */ (function () {
    function ImFontAtlas(native) {
        this.native = native;
        this._Fonts = null;
    }
    // IMGUI_API ImFontAtlas();
    // IMGUI_API ~ImFontAtlas();
    // IMGUI_API ImFont*           AddFont(const ImFontConfig* font_cfg);
    // IMGUI_API ImFont*           AddFontDefault(const ImFontConfig* font_cfg = NULL);
    ImFontAtlas.prototype.AddFontDefault = function (font_cfg) {
        if (font_cfg === void 0) { font_cfg = null; }
        return new ImFont(this.native.AddFontDefault(font_cfg));
    };
    // IMGUI_API ImFont*           AddFontFromFileTTF(const char* filename, float size_pixels, const ImFontConfig* font_cfg = NULL, const ImWchar* glyph_ranges = NULL);
    // IMGUI_API ImFont*           AddFontFromMemoryTTF(void* font_data, int font_size, float size_pixels, const ImFontConfig* font_cfg = NULL, const ImWchar* glyph_ranges = NULL); // Note: Transfer ownership of 'ttf_data' to ImFontAtlas! Will be deleted after Build(). Set font_cfg->FontDataOwnedByAtlas to false to keep ownership.
    ImFontAtlas.prototype.AddFontFromMemoryTTF = function (data, size_pixels, font_cfg, glyph_ranges) {
        if (font_cfg === void 0) { font_cfg = null; }
        if (glyph_ranges === void 0) { glyph_ranges = null; }
        return new ImFont(this.native.AddFontFromMemoryTTF(new Uint8Array(data), size_pixels, font_cfg && font_cfg.internal, glyph_ranges));
    };
    // IMGUI_API ImFont*           AddFontFromMemoryCompressedTTF(const void* compressed_font_data, int compressed_font_size, float size_pixels, const ImFontConfig* font_cfg = NULL, const ImWchar* glyph_ranges = NULL); // 'compressed_font_data' still owned by caller. Compress with binary_to_compressed_c.cpp.
    // IMGUI_API ImFont*           AddFontFromMemoryCompressedBase85TTF(const char* compressed_font_data_base85, float size_pixels, const ImFontConfig* font_cfg = NULL, const ImWchar* glyph_ranges = NULL);              // 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.
    // IMGUI_API void              ClearTexData();             // Clear the CPU-side texture data. Saves RAM once the texture has been copied to graphics memory.
    ImFontAtlas.prototype.ClearTexData = function () { this.native.ClearTexData(); };
    // IMGUI_API void              ClearInputData();           // Clear the input TTF data (inc sizes, glyph ranges)
    ImFontAtlas.prototype.ClearInputData = function () { this.native.ClearInputData(); };
    // IMGUI_API void              ClearFonts();               // Clear the ImGui-side font data (glyphs storage, UV coordinates)
    ImFontAtlas.prototype.ClearFonts = function () { this.native.ClearFonts(); };
    // IMGUI_API void              Clear();                    // Clear all
    ImFontAtlas.prototype.Clear = function () { this.native.Clear(); };
    // Build atlas, retrieve pixel data.
    // User is in charge of copying the pixels into graphics memory (e.g. create a texture with your engine). Then store your texture handle with SetTexID().
    // RGBA32 format is provided for convenience and compatibility, but note that unless you use CustomRect to draw color data, the RGB pixels emitted from Fonts will all be white (~75% of waste).
    // Pitch = Width * BytesPerPixels
    // IMGUI_API bool              Build();                    // Build pixels data. This is called automatically for you by the GetTexData*** functions.
    ImFontAtlas.prototype.Build = function () { return this.native.Build(); };
    // IMGUI_API bool              IsBuilt()                   { return Fonts.Size > 0 && (TexPixelsAlpha8 != NULL || TexPixelsRGBA32 != NULL); }
    ImFontAtlas.prototype.IsBuilt = function () { return this.native.IsBuilt(); };
    // IMGUI_API void              GetTexDataAsAlpha8(unsigned char** out_pixels, int* out_width, int* out_height, int* out_bytes_per_pixel = NULL);  // 1 byte per-pixel
    ImFontAtlas.prototype.GetTexDataAsAlpha8 = function () {
        return this.native.GetTexDataAsAlpha8();
    };
    // IMGUI_API void              GetTexDataAsRGBA32(unsigned char** out_pixels, int* out_width, int* out_height, int* out_bytes_per_pixel = NULL);  // 4 bytes-per-pixel
    ImFontAtlas.prototype.GetTexDataAsRGBA32 = function () {
        return this.native.GetTexDataAsRGBA32();
    };
    // void                        SetTexID(ImTextureID id)    { TexID = id; }
    ImFontAtlas.prototype.SetTexID = function (id) { this.TexID = id; };
    //-------------------------------------------
    // Glyph Ranges
    //-------------------------------------------
    // Helpers to retrieve list of common Unicode ranges (2 value per range, values are inclusive, zero-terminated list)
    // NB: Make sure that your string are UTF-8 and NOT in your local code page. In C++11, you can create UTF-8 string literal using the u8"Hello world" syntax. See FAQ for details.
    // IMGUI_API const ImWchar*    GetGlyphRangesDefault();    // Basic Latin, Extended Latin
    ImFontAtlas.prototype.GetGlyphRangesDefault = function () { return this.native.GetGlyphRangesDefault(); };
    // IMGUI_API const ImWchar*    GetGlyphRangesKorean();     // Default + Korean characters
    ImFontAtlas.prototype.GetGlyphRangesKorean = function () { return this.native.GetGlyphRangesKorean(); };
    // IMGUI_API const ImWchar*    GetGlyphRangesJapanese();   // Default + Hiragana, Katakana, Half-Width, Selection of 1946 Ideographs
    ImFontAtlas.prototype.GetGlyphRangesJapanese = function () { return this.native.GetGlyphRangesJapanese(); };
    // IMGUI_API const ImWchar*    GetGlyphRangesChineseFull();            // Default + Half-Width + Japanese Hiragana/Katakana + full set of about 21000 CJK Unified Ideographs
    ImFontAtlas.prototype.GetGlyphRangesChineseFull = function () { return this.native.GetGlyphRangesChineseFull(); };
    // IMGUI_API const ImWchar*    GetGlyphRangesChineseSimplifiedCommon();// Default + Half-Width + Japanese Hiragana/Katakana + set of 2500 CJK Unified Ideographs for common simplified Chinese
    ImFontAtlas.prototype.GetGlyphRangesChineseSimplifiedCommon = function () { return this.native.GetGlyphRangesChineseSimplifiedCommon(); };
    // IMGUI_API const ImWchar*    GetGlyphRangesCyrillic();   // Default + about 400 Cyrillic characters
    ImFontAtlas.prototype.GetGlyphRangesCyrillic = function () { return this.native.GetGlyphRangesCyrillic(); };
    // IMGUI_API const ImWchar*    GetGlyphRangesThai();       // Default + Thai characters
    ImFontAtlas.prototype.GetGlyphRangesThai = function () { return this.native.GetGlyphRangesThai(); };
    // IMGUI_API const ImWchar*    GetGlyphRangesVietnamese();       // Default + Vietnamese characters
    ImFontAtlas.prototype.GetGlyphRangesVietnamese = function () { return this.native.GetGlyphRangesVietnamese(); };
    Object.defineProperty(ImFontAtlas.prototype, "Locked", {
        // Helpers to build glyph ranges from text data. Feed your application strings/characters to it then call BuildRanges().
        // struct GlyphRangesBuilder
        // {
        //     ImVector<unsigned char> UsedChars;  // Store 1-bit per Unicode code point (0=unused, 1=used)
        //     GlyphRangesBuilder()                { UsedChars.resize(0x10000 / 8); memset(UsedChars.Data, 0, 0x10000 / 8); }
        //     bool           GetBit(int n) const  { return (UsedChars[n >> 3] & (1 << (n & 7))) != 0; }
        //     void           SetBit(int n)        { UsedChars[n >> 3] |= 1 << (n & 7); }  // Set bit 'c' in the array
        //     void           AddChar(ImWchar c)   { SetBit(c); }                          // Add character
        //     IMGUI_API void AddText(const char* text, const char* text_end = NULL);      // Add string (each character of the UTF-8 string are added)
        //     IMGUI_API void AddRanges(const ImWchar* ranges);                            // Add ranges, e.g. builder.AddRanges(ImFontAtlas::GetGlyphRangesDefault) to force add all of ASCII/Latin+Ext
        //     IMGUI_API void BuildRanges(ImVector<ImWchar>* out_ranges);                  // Output new ranges
        // };
        //-------------------------------------------
        // Custom Rectangles/Glyphs API
        //-------------------------------------------
        // You can request arbitrary rectangles to be packed into the atlas, for your own purposes. After calling Build(), you can query the rectangle position and render your pixels.
        // You can also request your rectangles to be mapped as font glyph (given a font + Unicode point), so you can render e.g. custom colorful icons and use them as regular glyphs.
        // struct CustomRect
        // {
        //     unsigned int    ID;             // Input    // User ID. Use <0x10000 to map into a font glyph, >=0x10000 for other/internal/custom texture data.
        //     unsigned short  Width, Height;  // Input    // Desired rectangle dimension
        //     unsigned short  X, Y;           // Output   // Packed position in Atlas
        //     float           GlyphAdvanceX;  // Input    // For custom font glyphs only (ID<0x10000): glyph xadvance
        //     ImVec2          GlyphOffset;    // Input    // For custom font glyphs only (ID<0x10000): glyph display offset
        //     ImFont*         Font;           // Input    // For custom font glyphs only (ID<0x10000): target font
        //     CustomRect()            { ID = 0xFFFFFFFF; Width = Height = 0; X = Y = 0xFFFF; GlyphAdvanceX = 0.0f; GlyphOffset = ImVec2(0,0); Font = NULL; }
        //     bool IsPacked() const   { return X != 0xFFFF; }
        // };
        // IMGUI_API int       AddCustomRectRegular(unsigned int id, int width, int height);                                                                   // Id needs to be >= 0x10000. Id >= 0x80000000 are reserved for ImGui and ImDrawList
        // IMGUI_API int       AddCustomRectFontGlyph(ImFont* font, ImWchar id, int width, int height, float advance_x, const ImVec2& offset = ImVec2(0,0));   // Id needs to be < 0x10000 to register a rectangle to map into a specific font.
        // IMGUI_API void      CalcCustomRectUV(const CustomRect* rect, ImVec2* out_uv_min, ImVec2* out_uv_max);
        // const CustomRect*   GetCustomRectByIndex(int index) const { if (index < 0) return NULL; return &CustomRects[index]; }
        //-------------------------------------------
        // Members
        //-------------------------------------------
        // bool                        Locked;             // Marked as Locked by ImGui::NewFrame() so attempt to modify the atlas will assert.
        get: function () { return this.native.Locked; },
        set: function (value) { this.native.Locked = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImFontAtlas.prototype, "Flags", {
        // ImFontAtlasFlags            Flags;              // Build flags (see ImFontAtlasFlags_)
        get: function () { return this.native.Flags; },
        set: function (value) { this.native.Flags = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImFontAtlas.prototype, "TexID", {
        // ImTextureID                 TexID;              // User data to refer to the texture once it has been uploaded to user's graphic systems. It is passed back to you during rendering via the ImDrawCmd structure.
        get: function () {
            return ImGuiContext.getTexture(this.native.TexID);
        },
        set: function (value) {
            this.native.TexID = ImGuiContext.setTexture(value);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImFontAtlas.prototype, "TexDesiredWidth", {
        // int                         TexDesiredWidth;    // Texture width desired by user before Build(). Must be a power-of-two. If have many glyphs your graphics API have texture size restrictions you may want to increase texture width to decrease height.
        get: function () { return this.native.TexDesiredWidth; },
        set: function (value) { this.native.TexDesiredWidth = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImFontAtlas.prototype, "TexGlyphPadding", {
        // int                         TexGlyphPadding;    // Padding between glyphs within texture in pixels. Defaults to 1.
        get: function () { return this.native.TexGlyphPadding; },
        set: function (value) { this.native.TexGlyphPadding = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImFontAtlas.prototype, "TexWidth", {
        // [Internal]
        // NB: Access texture data via GetTexData*() calls! Which will setup a default font for you.
        // unsigned char*              TexPixelsAlpha8;    // 1 component per pixel, each component is unsigned 8-bit. Total size = TexWidth * TexHeight
        // unsigned int*               TexPixelsRGBA32;    // 4 component per pixel, each component is unsigned 8-bit. Total size = TexWidth * TexHeight * 4
        // int                         TexWidth;           // Texture width calculated during Build().
        get: function () { return this.native.TexWidth; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImFontAtlas.prototype, "TexHeight", {
        // int                         TexHeight;          // Texture height calculated during Build().
        get: function () { return this.native.TexHeight; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImFontAtlas.prototype, "TexUvScale", {
        // ImVec2                      TexUvScale;         // = (1.0f/TexWidth, 1.0f/TexHeight)
        get: function () { return this.native.TexUvScale; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImFontAtlas.prototype, "TexUvWhitePixel", {
        // ImVec2                      TexUvWhitePixel;    // Texture coordinates to a white pixel
        get: function () { return this.native.TexUvWhitePixel; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImFontAtlas.prototype, "Fonts_", {
        // ImVector<ImFont*>           Fonts;              // Hold all the fonts returned by AddFont*. Fonts[0] is the default font upon calling ImGui::NewFrame(), use ImGui::PushFont()/PopFont() to change the current font.
        get: function () {
            var fonts = new ImVector();
            this.native.IterateFonts(function (font) {
                fonts.push(new ImFont(font));
            });
            return fonts;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImFontAtlas.prototype, "Fonts", {
        get: function () {
            if (this._Fonts == null) {
                this._Fonts = this.Fonts_;
            }
            return this._Fonts;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImFontAtlas.prototype, "CurrentFont", {
        // ImVector<CustomRect>        CustomRects;        // Rectangles for packing custom texture data into the atlas.
        // ImVector<ImFontConfig>      ConfigData;         // Internal data
        // int                         CustomRectIds[1];   // Identifiers of custom texture rectangle used by ImFontAtlas/ImDrawList
        get: function () {
            return new ImFont(this.native.CurrentFont);
        },
        enumerable: false,
        configurable: true
    });
    return ImFontAtlas;
}());

// Font runtime data and rendering
// ImFontAtlas automatically loads a default embedded font for you when you call GetTexDataAsAlpha8() or GetTexDataAsRGBA32().

var ImFont = /** @class */ (function () {
    function ImFont(native) {
        this.native = native;
    }
    Object.defineProperty(ImFont.prototype, "FontName", {
        // Members: Hot ~62/78 bytes
        // float                       FontSize;           // <user set>   // Height of characters, set during loading (don't change after loading)
        get: function () { return this.native.FontName; },
        set: function (v) { this.native.FontName = v; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImFont.prototype, "FontSize", {
        get: function () { return this.native.FontSize; },
        set: function (v) { this.native.FontSize = v; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImFont.prototype, "SpaceX", {
        get: function () { return [this.native.SpaceX0, this.native.SpaceX1]; },
        set: function (v) { this.native.SpaceX0 = v[0]; this.native.SpaceX1 = v[1]; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImFont.prototype, "Scale", {
        // float                       Scale;              // = 1.f        // Base font scale, multiplied by the per-window font scale which you can adjust with SetFontScale()
        get: function () { return this.native.Scale; },
        set: function (value) { this.native.Scale = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImFont.prototype, "Glyphs", {
        // ImVector<ImFontGlyph>       Glyphs;             //              // All glyphs.
        get: function () {
            var glyphs = new ImVector();
            this.native.IterateGlyphs(function (glyph) {
                glyphs.push(new ImFontGlyph(glyph)); // TODO: wrap native
            });
            return glyphs;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImFont.prototype, "FallbackGlyph", {
        // ImVector<float>             IndexAdvanceX;      //              // Sparse. Glyphs->AdvanceX in a directly indexable way (more cache-friendly, for CalcTextSize functions which are often bottleneck in large UI).
        // get IndexAdvanceX(): any { return this.native.IndexAdvanceX; }
        // ImVector<unsigned short>    IndexLookup;        //              // Sparse. Index glyphs by Unicode code-point.
        // get IndexLookup(): any { return this.native.IndexLookup; }
        // const ImFontGlyph*          FallbackGlyph;      // == FindGlyph(FontFallbackChar)
        get: function () {
            var glyph = this.native.FallbackGlyph;
            return glyph && new ImFontGlyph(glyph);
        },
        set: function (value) {
            this.native.FallbackGlyph = value && value.internal;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImFont.prototype, "FallbackAdvanceX", {
        // float                       FallbackAdvanceX;   // == FallbackGlyph->AdvanceX
        get: function () { return this.native.FallbackAdvanceX; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImFont.prototype, "FallbackChar", {
        // ImWchar                     FallbackChar;       // = '?'        // Replacement glyph if one isn't found. Only set via SetFallbackChar()
        get: function () { return this.native.FallbackChar; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImFont.prototype, "EllipsisChar", {
        // ImWchar                     EllipsisChar;       // 2     // out // = -1       // Character used for ellipsis rendering.
        get: function () { return this.native.EllipsisChar; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImFont.prototype, "ConfigDataCount", {
        // Members: Cold ~18/26 bytes
        // short                       ConfigDataCount;    // ~ 1          // Number of ImFontConfig involved in creating this font. Bigger than 1 when merging multiple font sources into one ImFont.
        get: function () { return this.native.ConfigDataCount; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImFont.prototype, "ConfigData", {
        // ImFontConfig*               ConfigData;         //              // Pointer within ContainerAtlas->ConfigData
        get: function () {
            return new ImFontConfig(this.native.ConfigData);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImFont.prototype, "ContainerAtlas", {
        // ImFontAtlas*                ContainerAtlas;     //              // What we has been loaded into
        get: function () { return null; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImFont.prototype, "Ascent", {
        // float                       Ascent, Descent;    //              // Ascent: distance from top to bottom of e.g. 'A' [0..FontSize]
        get: function () { return this.native.Ascent; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImFont.prototype, "Descent", {
        get: function () { return this.native.Descent; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImFont.prototype, "MetricsTotalSurface", {
        // int                         MetricsTotalSurface;//              // Total surface in pixels to get an idea of the font rasterization/texture cost (not exact, we approximate the cost of padding between glyphs)
        get: function () { return this.native.MetricsTotalSurface; },
        enumerable: false,
        configurable: true
    });
    // Methods
    // IMGUI_API ImFont();
    // IMGUI_API ~ImFont();
    // IMGUI_API void              ClearOutputData();
    ImFont.prototype.ClearOutputData = function () { return this.native.ClearOutputData(); };
    // IMGUI_API void              BuildLookupTable();
    ImFont.prototype.BuildLookupTable = function () { return this.native.BuildLookupTable(); };
    // IMGUI_API const ImFontGlyph*FindGlyph(ImWchar c) const;
    ImFont.prototype.FindGlyph = function (c) {
        var glyph = this.native.FindGlyph(c);
        return glyph && new ImFontGlyph(glyph);
    };
    // IMGUI_API const ImFontGlyph*FindGlyphNoFallback(ImWchar c) const;
    ImFont.prototype.FindGlyphNoFallback = function (c) {
        var glyph = this.native.FindGlyphNoFallback(c);
        return glyph && new ImFontGlyph(glyph);
    };
    // IMGUI_API void              SetFallbackChar(ImWchar c);
    ImFont.prototype.SetFallbackChar = function (c) { return this.native.SetFallbackChar(c); };
    // float                       GetCharAdvance(ImWchar c) const     { return ((int)c < IndexAdvanceX.Size) ? IndexAdvanceX[(int)c] : FallbackAdvanceX; }
    ImFont.prototype.GetCharAdvance = function (c) { return this.native.GetCharAdvance(c); };
    // bool                        IsLoaded() const                    { return ContainerAtlas != NULL; }
    ImFont.prototype.IsLoaded = function () { return this.native.IsLoaded(); };
    // const char*                 GetDebugName() const                { return ConfigData ? ConfigData->Name : "<unknown>"; }
    ImFont.prototype.GetDebugName = function () { return this.native.GetDebugName(); };
    // 'max_width' stops rendering after a certain width (could be turned into a 2d size). FLT_MAX to disable.
    // 'wrap_width' enable automatic word-wrapping across multiple lines to fit into given width. 0.0f to disable.
    // IMGUI_API ImVec2            CalcTextSizeA(float size, float max_width, float wrap_width, const char* text_begin, const char* text_end = NULL, const char** remaining = NULL) const; // utf8
    ImFont.prototype.CalcTextSizeA = function (size, max_width, wrap_width, text_begin, text_end, remaining) {
        if (text_end === void 0) { text_end = null; }
        if (remaining === void 0) { remaining = null; }
        return this.native.CalcTextSizeA(size, max_width, wrap_width, text_end !== null ? text_begin.substring(0, text_end) : text_begin, remaining, new ImVec2());
    };
    // IMGUI_API const char*       CalcWordWrapPositionA(float scale, const char* text, const char* text_end, float wrap_width) const;
    ImFont.prototype.CalcWordWrapPositionA = function (scale, text, text_end, wrap_width) {
        if (text_end === void 0) { text_end = null; }
        return this.native.CalcWordWrapPositionA(scale, text_end !== null ? text.substring(0, text_end) : text, wrap_width);
    };
    // IMGUI_API void              RenderChar(ImDrawList* draw_list, float size, ImVec2 pos, ImU32 col, unsigned short c) const;
    ImFont.prototype.RenderChar = function (draw_list, size, pos, col, c) {
        this.native.RenderChar(draw_list.native, size, pos, col, c);
    };
    // IMGUI_API void              RenderText(ImDrawList* draw_list, float size, ImVec2 pos, ImU32 col, const ImVec4& clip_rect, const char* text_begin, const char* text_end, float wrap_width = 0.0f, bool cpu_fine_clip = false) const;
    ImFont.prototype.RenderText = function (draw_list, size, pos, col, clip_rect, text_begin, text_end, wrap_width, cpu_fine_clip) {
        if (text_end === void 0) { text_end = null; }
        if (wrap_width === void 0) { wrap_width = 0.0; }
        if (cpu_fine_clip === void 0) { cpu_fine_clip = false; }
    };
    // [Internal]
    // IMGUI_API void              GrowIndex(int new_size);
    // IMGUI_API void              AddGlyph(ImWchar c, float x0, float y0, float x1, float y1, float u0, float v0, float u1, float v1, float advance_x);
    // IMGUI_API void              AddRemapChar(ImWchar dst, ImWchar src, bool overwrite_dst = true); // Makes 'dst' character/glyph points to 'src' character/glyph. Currently needs to be called AFTER fonts have been built.
    // #ifndef IMGUI_DISABLE_OBSOLETE_FUNCTIONS
    // typedef ImFontGlyph Glyph; // OBSOLETE 1.52+
    // #endif
    // IMGUI_API bool              IsGlyphRangeUnused(unsigned int c_begin, unsigned int c_last);
    ImFont.prototype.IsGlyphRangeUnused = function (c_begin, c_last) { return false; }; // TODO
    Object.defineProperty(ImFont.prototype, "GlyphToCreate", {
        get: function () {
            var glyph = this.native.GlyphToCreate();
            return glyph ? new ImFontGlyph(glyph) : null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImFont.prototype, "IterateGlyphToCreate", {
        get: function () {
            var glyphs = [];
            this.native.IterateGlyphToCreate(function (glyph) {
                glyphs.push(new ImFontGlyph(glyph));
            });
            return glyphs;
        },
        enumerable: false,
        configurable: true
    });
    ImFont.prototype.GlyphCreated = function (glyph) {
        this.native.GlyphCreated(glyph.internal);
    };
    ImFont.prototype.ClearGlyphCreated = function () {
        this.native.ClearGlyphCreated();
    };
    return ImFont;
}());

// a script version of Bind.ImGuiStyle with matching interface
var script_ImGuiStyle = /** @class */ (function () {
    function script_ImGuiStyle() {
        this.Alpha = 1.0;
        this.WindowPadding = new ImVec2(8, 8);
        this.WindowRounding = 7.0;
        this.WindowBorderSize = 0.0;
        this.WindowMinSize = new ImVec2(32, 32);
        this.WindowTitleAlign = new ImVec2(0.0, 0.5);
        this.WindowMenuButtonPosition = ImGuiDir.Left;
        this.ChildRounding = 0.0;
        this.ChildBorderSize = 1.0;
        this.PopupRounding = 0.0;
        this.PopupBorderSize = 1.0;
        this.FramePadding = new ImVec2(4, 3);
        this.FrameRounding = 0.0;
        this.FrameBorderSize = 0.0;
        this.ItemSpacing = new ImVec2(8, 4);
        this.ItemInnerSpacing = new ImVec2(4, 4);
        this.CellPadding = new ImVec2(4, 2);
        this.TouchExtraPadding = new ImVec2(0, 0);
        this.IndentSpacing = 21.0;
        this.ColumnsMinSpacing = 6.0;
        this.ScrollbarSize = 16.0;
        this.ScrollbarRounding = 9.0;
        this.GrabMinSize = 10.0;
        this.GrabRounding = 0.0;
        this.LogSliderDeadzone = 4.0;
        this.TabRounding = 0.0;
        this.TabBorderSize = 0.0;
        this.TabMinWidthForCloseButton = 0.0;
        this.ColorButtonPosition = ImGuiDir.Right;
        this.ButtonTextAlign = new ImVec2(0.5, 0.5);
        this.SelectableTextAlign = new ImVec2(0.0, 0.0);
        this.DisplayWindowPadding = new ImVec2(22, 22);
        this.DisplaySafeAreaPadding = new ImVec2(4, 4);
        this.MouseCursorScale = 1;
        this.AntiAliasedLines = true;
        this.AntiAliasedLinesUseTex = true;
        this.AntiAliasedFill = true;
        this.CurveTessellationTol = 1.25;
        this.CircleSegmentMaxError = 1.60;
        this.Colors = [];
        for (var i = 0; i < ImGuiCol.COUNT; ++i) {
            this.Colors[i] = new ImVec4();
        }
        var _this = new ImGuiStyle(this);
        var native = new bind.ImGuiStyle();
        var _that = new ImGuiStyle(native);
        _that.Copy(_this);
        bind.StyleColorsClassic(native);
        _this.Copy(_that);
        native.delete();
    }
    script_ImGuiStyle.prototype._getAt_Colors = function (index) { return this.Colors[index]; };
    script_ImGuiStyle.prototype._setAt_Colors = function (index, color) { this.Colors[index].Copy(color); return true; };
    script_ImGuiStyle.prototype.ScaleAllSizes = function (scale_factor) {
        var _this = new ImGuiStyle(this);
        var native = new bind.ImGuiStyle();
        var _that = new ImGuiStyle(native);
        _that.Copy(_this);
        native.ScaleAllSizes(scale_factor);
        _this.Copy(_that);
        native.delete();
    };
    return script_ImGuiStyle;
}());

var ImGuiStyle = /** @class */ (function () {
    function ImGuiStyle(internal) {
        var _this_1 = this;
        if (internal === void 0) { internal = new script_ImGuiStyle(); }
        this.internal = internal;
        this.Colors = new Proxy([], {
            get: function (target, key) {
                if (key === "length") {
                    return ImGuiCol.COUNT;
                }
                return _this_1.internal._getAt_Colors(Number(key));
            },
            set: function (target, key, value) {
                return _this_1.internal._setAt_Colors(Number(key), value);
            },
        });
    }
    Object.defineProperty(ImGuiStyle.prototype, "Alpha", {
        get: function () { return this.internal.Alpha; },
        set: function (value) { this.internal.Alpha = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiStyle.prototype, "WindowPadding", {
        get: function () { return this.internal.WindowPadding; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiStyle.prototype, "WindowRounding", {
        get: function () { return this.internal.WindowRounding; },
        set: function (value) { this.internal.WindowRounding = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiStyle.prototype, "WindowBorderSize", {
        get: function () { return this.internal.WindowBorderSize; },
        set: function (value) { this.internal.WindowBorderSize = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiStyle.prototype, "WindowMinSize", {
        get: function () { return this.internal.WindowMinSize; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiStyle.prototype, "WindowTitleAlign", {
        get: function () { return this.internal.WindowTitleAlign; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiStyle.prototype, "WindowMenuButtonPosition", {
        get: function () { return this.internal.WindowMenuButtonPosition; },
        set: function (value) { this.internal.WindowMenuButtonPosition = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiStyle.prototype, "ChildRounding", {
        get: function () { return this.internal.ChildRounding; },
        set: function (value) { this.internal.ChildRounding = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiStyle.prototype, "ChildBorderSize", {
        get: function () { return this.internal.ChildBorderSize; },
        set: function (value) { this.internal.ChildBorderSize = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiStyle.prototype, "PopupRounding", {
        get: function () { return this.internal.PopupRounding; },
        set: function (value) { this.internal.PopupRounding = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiStyle.prototype, "PopupBorderSize", {
        get: function () { return this.internal.PopupBorderSize; },
        set: function (value) { this.internal.PopupBorderSize = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiStyle.prototype, "FramePadding", {
        get: function () { return this.internal.FramePadding; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiStyle.prototype, "FrameRounding", {
        get: function () { return this.internal.FrameRounding; },
        set: function (value) { this.internal.FrameRounding = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiStyle.prototype, "FrameBorderSize", {
        get: function () { return this.internal.FrameBorderSize; },
        set: function (value) { this.internal.FrameBorderSize = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiStyle.prototype, "ItemSpacing", {
        get: function () { return this.internal.ItemSpacing; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiStyle.prototype, "ItemInnerSpacing", {
        get: function () { return this.internal.ItemInnerSpacing; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiStyle.prototype, "CellPadding", {
        get: function () { return this.internal.CellPadding; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiStyle.prototype, "TouchExtraPadding", {
        get: function () { return this.internal.TouchExtraPadding; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiStyle.prototype, "IndentSpacing", {
        get: function () { return this.internal.IndentSpacing; },
        set: function (value) { this.internal.IndentSpacing = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiStyle.prototype, "ColumnsMinSpacing", {
        get: function () { return this.internal.ColumnsMinSpacing; },
        set: function (value) { this.internal.ColumnsMinSpacing = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiStyle.prototype, "ScrollbarSize", {
        get: function () { return this.internal.ScrollbarSize; },
        set: function (value) { this.internal.ScrollbarSize = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiStyle.prototype, "ScrollbarRounding", {
        get: function () { return this.internal.ScrollbarRounding; },
        set: function (value) { this.internal.ScrollbarRounding = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiStyle.prototype, "GrabMinSize", {
        get: function () { return this.internal.GrabMinSize; },
        set: function (value) { this.internal.GrabMinSize = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiStyle.prototype, "GrabRounding", {
        get: function () { return this.internal.GrabRounding; },
        set: function (value) { this.internal.GrabRounding = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiStyle.prototype, "LogSliderDeadzone", {
        get: function () { return this.internal.LogSliderDeadzone; },
        set: function (value) { this.internal.LogSliderDeadzone = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiStyle.prototype, "TabRounding", {
        get: function () { return this.internal.TabRounding; },
        set: function (value) { this.internal.TabRounding = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiStyle.prototype, "TabBorderSize", {
        get: function () { return this.internal.TabBorderSize; },
        set: function (value) { this.internal.TabBorderSize = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiStyle.prototype, "TabMinWidthForCloseButton", {
        get: function () { return this.internal.TabMinWidthForCloseButton; },
        set: function (value) { this.internal.TabMinWidthForCloseButton = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiStyle.prototype, "ColorButtonPosition", {
        get: function () { return this.internal.ColorButtonPosition; },
        set: function (value) { this.internal.ColorButtonPosition = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiStyle.prototype, "ButtonTextAlign", {
        get: function () { return this.internal.ButtonTextAlign; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiStyle.prototype, "SelectableTextAlign", {
        get: function () { return this.internal.SelectableTextAlign; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiStyle.prototype, "DisplayWindowPadding", {
        get: function () { return this.internal.DisplayWindowPadding; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiStyle.prototype, "DisplaySafeAreaPadding", {
        get: function () { return this.internal.DisplaySafeAreaPadding; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiStyle.prototype, "MouseCursorScale", {
        get: function () { return this.internal.MouseCursorScale; },
        set: function (value) { this.internal.MouseCursorScale = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiStyle.prototype, "AntiAliasedLines", {
        get: function () { return this.internal.AntiAliasedLines; },
        set: function (value) { this.internal.AntiAliasedLines = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiStyle.prototype, "AntiAliasedLinesUseTex", {
        get: function () { return this.internal.AntiAliasedLinesUseTex; },
        set: function (value) { this.internal.AntiAliasedLinesUseTex = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiStyle.prototype, "AntiAliasedFill", {
        get: function () { return this.internal.AntiAliasedFill; },
        set: function (value) { this.internal.AntiAliasedFill = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiStyle.prototype, "CurveTessellationTol", {
        get: function () { return this.internal.CurveTessellationTol; },
        set: function (value) { this.internal.CurveTessellationTol = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiStyle.prototype, "CircleSegmentMaxError", {
        get: function () { return this.internal.CircleSegmentMaxError; },
        set: function (value) { this.internal.CircleSegmentMaxError = value; },
        enumerable: false,
        configurable: true
    });
    ImGuiStyle.prototype.Copy = function (other) {
        this.Alpha = other.Alpha;
        this.WindowPadding.Copy(other.WindowPadding);
        this.WindowRounding = other.WindowRounding;
        this.WindowBorderSize = other.WindowBorderSize;
        this.WindowMinSize.Copy(other.WindowMinSize);
        this.WindowTitleAlign.Copy(other.WindowTitleAlign);
        this.WindowMenuButtonPosition = other.WindowMenuButtonPosition;
        this.ChildRounding = other.ChildRounding;
        this.ChildBorderSize = other.ChildBorderSize;
        this.PopupRounding = other.PopupRounding;
        this.PopupBorderSize = other.PopupBorderSize;
        this.FramePadding.Copy(other.FramePadding);
        this.FrameRounding = other.FrameRounding;
        this.FrameBorderSize = other.FrameBorderSize;
        this.ItemSpacing.Copy(other.ItemSpacing);
        this.ItemInnerSpacing.Copy(other.ItemInnerSpacing);
        this.CellPadding.Copy(other.CellPadding);
        this.TouchExtraPadding.Copy(other.TouchExtraPadding);
        this.IndentSpacing = other.IndentSpacing;
        this.ColumnsMinSpacing = other.ColumnsMinSpacing;
        this.ScrollbarSize = other.ScrollbarSize;
        this.ScrollbarRounding = other.ScrollbarRounding;
        this.GrabMinSize = other.GrabMinSize;
        this.GrabRounding = other.GrabRounding;
        this.LogSliderDeadzone = other.LogSliderDeadzone;
        this.TabRounding = other.TabRounding;
        this.TabBorderSize = other.TabBorderSize;
        this.TabMinWidthForCloseButton = other.TabMinWidthForCloseButton;
        this.ColorButtonPosition = other.ColorButtonPosition;
        this.ButtonTextAlign.Copy(other.ButtonTextAlign);
        this.DisplayWindowPadding.Copy(other.DisplayWindowPadding);
        this.DisplaySafeAreaPadding.Copy(other.DisplaySafeAreaPadding);
        this.MouseCursorScale = other.MouseCursorScale;
        this.AntiAliasedLines = other.AntiAliasedLines;
        this.AntiAliasedLinesUseTex = other.AntiAliasedLinesUseTex;
        this.AntiAliasedFill = other.AntiAliasedFill;
        this.CurveTessellationTol = other.CurveTessellationTol;
        this.CircleSegmentMaxError = other.CircleSegmentMaxError;
        for (var i = 0; i < ImGuiCol.COUNT; ++i) {
            this.Colors[i].Copy(other.Colors[i]);
        }
        return this;
    };
    ImGuiStyle.prototype.ScaleAllSizes = function (scale_factor) { this.internal.ScaleAllSizes(scale_factor); };
    return ImGuiStyle;
}());

// This is where your app communicate with Dear ImGui. Access via ImGui::GetIO().
// Read 'Programmer guide' section in .cpp file for general usage.

var ImGuiIO = /** @class */ (function () {
    function ImGuiIO(native) {
        var _this_1 = this;
        this.native = native;
        // int           KeyMap[ImGuiKey_COUNT];   // <unset>              // Map of indices into the KeysDown[512] entries array
        this.KeyMap = new Proxy([], {
            get: function (target, key) {
                if (key === "length") {
                    return ImGuiKey.COUNT;
                }
                return _this_1.native._getAt_KeyMap(Number(key));
            },
            set: function (target, key, value) {
                return _this_1.native._setAt_KeyMap(Number(key), value);
            },
        });
        // bool        MouseDown[5];               // Mouse buttons: left, right, middle + extras. ImGui itself mostly only uses left button (BeginPopupContext** are using right button). Others buttons allows us to track if the mouse is being used by your application + available to user as a convenience via IsMouse** API.
        this.MouseDown = new Proxy([], {
            get: function (target, key) {
                if (key === "length") {
                    return 5;
                }
                return _this_1.native._getAt_MouseDown(Number(key));
            },
            set: function (target, key, value) {
                return _this_1.native._setAt_MouseDown(Number(key), value);
            },
        });
        // bool        KeysDown[512];              // Keyboard keys that are pressed (in whatever storage order you naturally have access to keyboard data)
        this.KeysDown = new Proxy([], {
            get: function (target, key) {
                if (key === "length") {
                    return 512;
                }
                return _this_1.native._getAt_KeysDown(Number(key));
            },
            set: function (target, key, value) {
                return _this_1.native._setAt_KeysDown(Number(key), value);
            },
        });
        // float       NavInputs[ImGuiNavInput_COUNT]; // Gamepad inputs (keyboard keys will be auto-mapped and be written here by ImGui::NewFrame)
        this.NavInputs = new Proxy([], {
            get: function (target, key) {
                if (key === "length") {
                    return ImGuiNavInput.COUNT;
                }
                return _this_1.native._getAt_NavInputs(Number(key));
            },
            set: function (target, key, value) {
                return _this_1.native._setAt_NavInputs(Number(key), value);
            },
        });
        //------------------------------------------------------------------
        // [Internal] ImGui will maintain those fields. Forward compatibility not guaranteed!
        //------------------------------------------------------------------
        // ImGuiKeyModFlags KeyMods;                   // Key mods flags (same as io.KeyCtrl/KeyShift/KeyAlt/KeySuper but merged into flags), updated by NewFrame()
        // ImVec2      MousePosPrev;               // Previous mouse position temporary storage (nb: not for public use, set to MousePos in NewFrame())
        // ImVec2      MouseClickedPos[5];         // Position at time of clicking
        this.MouseClickedPos = new Proxy([], {
            get: function (target, key) {
                if (key === "length") {
                    return 5;
                }
                return _this_1.native._getAt_MouseClickedPos(Number(key));
            },
        });
        // float       MouseClickedTime[5];        // Time of last click (used to figure out double-click)
        // bool        MouseClicked[5];            // Mouse button went from !Down to Down
        // bool        MouseDoubleClicked[5];      // Has mouse button been double-clicked?
        // bool        MouseReleased[5];           // Mouse button went from Down to !Down
        // bool        MouseDownOwned[5];          // Track if button was clicked inside a window. We don't request mouse capture from the application if click started outside ImGui bounds.
        // float       MouseDownDuration[5];       // Duration the mouse button has been down (0.0f == just clicked)
        this.MouseDownDuration = new Proxy([], {
            get: function (target, key) {
                if (key === "length") {
                    return 5;
                }
                return _this_1.native._getAt_MouseDownDuration(Number(key));
            },
        });
        // float       MouseDownDurationPrev[5];   // Previous time the mouse button has been down
        // ImVec2      MouseDragMaxDistanceAbs[5]; // Maximum distance, absolute, on each axis, of how much mouse has traveled from the clicking point
        // float       MouseDragMaxDistanceSqr[5]; // Squared maximum distance of how much mouse has traveled from the clicking point
        // float       KeysDownDuration[512];      // Duration the keyboard key has been down (0.0f == just pressed)
        this.KeysDownDuration = new Proxy([], {
            get: function (target, key) {
                if (key === "length") {
                    return 512;
                }
                return _this_1.native._getAt_KeysDownDuration(Number(key));
            },
        });
        // float       KeysDownDurationPrev[512];  // Previous duration the key has been down
        // float       NavInputsDownDuration[ImGuiNavInput_COUNT];
        this.NavInputsDownDuration = new Proxy([], {
            get: function (target, key) {
                if (key === "length") {
                    return ImGuiNavInput.COUNT;
                }
                return _this_1.native._getAt_NavInputsDownDuration(Number(key));
            },
        });
    }
    Object.defineProperty(ImGuiIO.prototype, "ConfigFlags", {
        //------------------------------------------------------------------
        // Settings (fill once)                 // Default value:
        //------------------------------------------------------------------
        // ImGuiConfigFlags   ConfigFlags;         // = 0                  // See ImGuiConfigFlags_ enum. Set by user/application. Gamepad/keyboard navigation options, etc.
        get: function () { return this.native.ConfigFlags; },
        set: function (value) { this.native.ConfigFlags = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiIO.prototype, "BackendFlags", {
        // ImGuiBackendFlags  BackendFlags;        // = 0                  // Set ImGuiBackendFlags_ enum. Set by imgui_impl_xxx files or custom back-end to communicate features supported by the back-end.
        get: function () { return this.native.BackendFlags; },
        set: function (value) { this.native.BackendFlags = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiIO.prototype, "DisplaySize", {
        // ImVec2        DisplaySize;              // <unset>              // Display size, in pixels. For clamping windows positions.
        get: function () { return this.native.DisplaySize; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiIO.prototype, "DeltaTime", {
        // float         DeltaTime;                // = 1.0f/60.0f         // Time elapsed since last frame, in seconds.
        get: function () { return this.native.DeltaTime; },
        set: function (value) { this.native.DeltaTime = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiIO.prototype, "IniSavingRate", {
        // float         IniSavingRate;            // = 5.0f               // Maximum time between saving positions/sizes to .ini file, in seconds.
        get: function () { return this.native.IniSavingRate; },
        set: function (value) { this.native.IniSavingRate = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiIO.prototype, "IniFilename", {
        // const char*   IniFilename;              // = "imgui.ini"        // Path to .ini file. NULL to disable .ini saving.
        get: function () { return this.native.IniFilename; },
        set: function (value) { this.native.IniFilename = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiIO.prototype, "LogFilename", {
        // const char*   LogFilename;              // = "imgui_log.txt"    // Path to .log file (default parameter to ImGui::LogToFile when no file is specified).
        get: function () { return this.native.LogFilename; },
        set: function (value) { this.native.LogFilename = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiIO.prototype, "MouseDoubleClickTime", {
        // float         MouseDoubleClickTime;     // = 0.30f              // Time for a double-click, in seconds.
        get: function () { return this.native.MouseDoubleClickTime; },
        set: function (value) { this.native.MouseDoubleClickTime = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiIO.prototype, "MouseDoubleClickMaxDist", {
        // float         MouseDoubleClickMaxDist;  // = 6.0f               // Distance threshold to stay in to validate a double-click, in pixels.
        get: function () { return this.native.MouseDoubleClickMaxDist; },
        set: function (value) { this.native.MouseDoubleClickMaxDist = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiIO.prototype, "MouseDragThreshold", {
        // float         MouseDragThreshold;       // = 6.0f               // Distance threshold before considering we are dragging
        get: function () { return this.native.MouseDragThreshold; },
        set: function (value) { this.native.MouseDragThreshold = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiIO.prototype, "KeyRepeatDelay", {
        // float         KeyRepeatDelay;           // = 0.250f             // When holding a key/button, time before it starts repeating, in seconds (for buttons in Repeat mode, etc.).
        get: function () { return this.native.KeyRepeatDelay; },
        set: function (value) { this.native.KeyRepeatDelay = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiIO.prototype, "KeyRepeatRate", {
        // float         KeyRepeatRate;            // = 0.050f             // When holding a key/button, rate at which it repeats, in seconds.
        get: function () { return this.native.KeyRepeatRate; },
        set: function (value) { this.native.KeyRepeatRate = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiIO.prototype, "UserData", {
        // void*         UserData;                 // = NULL               // Store your own data for retrieval by callbacks.
        get: function () { return this.native.UserData; },
        set: function (value) { this.native.UserData = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiIO.prototype, "Fonts", {
        // ImFontAtlas*  Fonts;                    // <auto>               // Load and assemble one or more fonts into a single tightly packed texture. Output to Fonts array.
        get: function () { return new ImFontAtlas(this.native.Fonts); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiIO.prototype, "FontGlobalScale", {
        // float         FontGlobalScale;          // = 1.0f               // Global scale all fonts
        get: function () { return this.native.FontGlobalScale; },
        set: function (value) { this.native.FontGlobalScale = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiIO.prototype, "FontAllowUserScaling", {
        // bool          FontAllowUserScaling;     // = false              // Allow user scaling text of individual window with CTRL+Wheel.
        get: function () { return this.native.FontAllowUserScaling; },
        set: function (value) { this.native.FontAllowUserScaling = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiIO.prototype, "FontDefault", {
        // ImFont*       FontDefault;              // = NULL               // Font to use on NewFrame(). Use NULL to uses Fonts->Fonts[0].
        get: function () {
            var font = this.native.FontDefault;
            return (font === null) ? null : new ImFont(font);
        },
        set: function (value) {
            this.native.FontDefault = value && value.native;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiIO.prototype, "DisplayFramebufferScale", {
        // ImVec2        DisplayFramebufferScale;  // = (1.0f,1.0f)        // For retina display or other situations where window coordinates are different from framebuffer coordinates. User storage only, presently not used by ImGui.
        get: function () { return this.native.DisplayFramebufferScale; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiIO.prototype, "ConfigMacOSXBehaviors", {
        // Miscellaneous configuration options
        // bool          OptMacOSXBehaviors;       // = defined(__APPLE__) // OS X style: Text editing cursor movement using Alt instead of Ctrl, Shortcuts using Cmd/Super instead of Ctrl, Line/Text Start and End using Cmd+Arrows instead of Home/End, Double click selects by word instead of selecting whole text, Multi-selection in lists uses Cmd/Super instead of Ctrl
        get: function () { return this.native.ConfigMacOSXBehaviors; },
        set: function (value) { this.native.ConfigMacOSXBehaviors = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiIO.prototype, "ConfigInputTextCursorBlink", {
        // bool          ConfigInputTextCursorBlink;   // = true               // Enable blinking cursor, for users who consider it annoying.
        get: function () { return this.native.ConfigInputTextCursorBlink; },
        set: function (value) { this.native.ConfigInputTextCursorBlink = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiIO.prototype, "ConfigDragClickToInputText", {
        // bool        ConfigDragClickToInputText;     // = false          // [BETA] Enable turning DragXXX widgets into text input with a simple mouse click-release (without moving). Not desirable on devices without a keyboard.
        get: function () { return this.native.ConfigDragClickToInputText; },
        set: function (value) { this.native.ConfigDragClickToInputText = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiIO.prototype, "ConfigWindowsResizeFromEdges", {
        // bool          ConfigWindowsResizeFromEdges; // = false          // [BETA] Enable resizing of windows from their edges and from the lower-left corner. This requires (io.BackendFlags & ImGuiBackendFlags_HasMouseCursors) because it needs mouse cursor feedback. (This used to be the ImGuiWindowFlags_ResizeFromAnySide flag)
        get: function () { return this.native.ConfigWindowsResizeFromEdges; },
        set: function (value) { this.native.ConfigWindowsResizeFromEdges = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiIO.prototype, "ConfigWindowsMoveFromTitleBarOnly", {
        // bool        ConfigWindowsMoveFromTitleBarOnly;// = false        // [BETA] Set to true to only allow moving windows when clicked+dragged from the title bar. Windows without a title bar are not affected.
        get: function () { return this.native.ConfigWindowsMoveFromTitleBarOnly; },
        set: function (value) { this.native.ConfigWindowsMoveFromTitleBarOnly = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiIO.prototype, "ConfigMemoryCompactTimer", {
        // float       ConfigMemoryCompactTimer;       // = 60.0f          // Timer (in seconds) to free transient windows/tables memory buffers when unused. Set to -1.0f to disable.
        get: function () { return this.native.ConfigMemoryCompactTimer; },
        set: function (value) { this.native.ConfigMemoryCompactTimer = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiIO.prototype, "BackendPlatformName", {
        //------------------------------------------------------------------
        // Settings (User Functions)
        //------------------------------------------------------------------
        // Optional: Platform/Renderer back-end name (informational only! will be displayed in About Window) + User data for back-end/wrappers to store their own stuff.
        // const char* BackendPlatformName;            // = NULL
        get: function () { return this.native.BackendPlatformName; },
        set: function (value) { this.native.BackendPlatformName = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiIO.prototype, "BackendRendererName", {
        // const char* BackendRendererName;            // = NULL
        get: function () { return this.native.BackendRendererName; },
        set: function (value) { this.native.BackendRendererName = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiIO.prototype, "BackendPlatformUserData", {
        // void*       BackendPlatformUserData;        // = NULL
        get: function () { return this.native.BackendPlatformUserData; },
        set: function (value) { this.native.BackendPlatformUserData = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiIO.prototype, "BackendRendererUserData", {
        // void*       BackendRendererUserData;        // = NULL
        get: function () { return this.native.BackendRendererUserData; },
        set: function (value) { this.native.BackendRendererUserData = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiIO.prototype, "BackendLanguageUserData", {
        // void*       BackendLanguageUserData;        // = NULL
        get: function () { return this.native.BackendLanguageUserData; },
        set: function (value) { this.native.BackendLanguageUserData = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiIO.prototype, "GetClipboardTextFn", {
        // Optional: access OS clipboard
        // (default to use native Win32 clipboard on Windows, otherwise uses a private clipboard. Override to access OS clipboard on other architectures)
        // const char* (*GetClipboardTextFn)(void* user_data);
        get: function () { return this.native.GetClipboardTextFn; },
        set: function (value) { this.native.GetClipboardTextFn = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiIO.prototype, "SetClipboardTextFn", {
        // void        (*SetClipboardTextFn)(void* user_data, const char* text);
        get: function () { return this.native.SetClipboardTextFn; },
        set: function (value) { this.native.SetClipboardTextFn = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiIO.prototype, "ClipboardUserData", {
        // void*       ClipboardUserData;
        get: function () { return this.native.ClipboardUserData; },
        set: function (value) { this.native.ClipboardUserData = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiIO.prototype, "MousePos", {
        // Optional: override memory allocations. MemFreeFn() may be called with a NULL pointer.
        // (default to posix malloc/free)
        // void*       (*MemAllocFn)(size_t sz);
        // void        (*MemFreeFn)(void* ptr);
        // Optional: notify OS Input Method Editor of the screen position of your cursor for text input position (e.g. when using Japanese/Chinese IME in Windows)
        // (default to use native imm32 api on Windows)
        // void        (*ImeSetInputScreenPosFn)(int x, int y);
        // void*       ImeWindowHandle;            // (Windows) Set this to your HWND to get automatic IME cursor positioning.
        //------------------------------------------------------------------
        // Input - Fill before calling NewFrame()
        //------------------------------------------------------------------
        // ImVec2      MousePos;                   // Mouse position, in pixels. Set to ImVec2(-FLT_MAX,-FLT_MAX) if mouse is unavailable (on another screen, etc.)
        get: function () { return this.native.MousePos; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiIO.prototype, "MouseWheel", {
        // float       MouseWheel;                 // Mouse wheel: 1 unit scrolls about 5 lines text.
        get: function () { return this.native.MouseWheel; },
        set: function (value) { this.native.MouseWheel = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiIO.prototype, "MouseWheelH", {
        // float       MouseWheelH;                    // Mouse wheel (Horizontal). Most users don't have a mouse with an horizontal wheel, may not be filled by all back-ends.
        get: function () { return this.native.MouseWheelH; },
        set: function (value) { this.native.MouseWheelH = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiIO.prototype, "MouseDrawCursor", {
        // bool        MouseDrawCursor;            // Request ImGui to draw a mouse cursor for you (if you are on a platform without a mouse cursor).
        get: function () { return this.native.MouseDrawCursor; },
        set: function (value) { this.native.MouseDrawCursor = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiIO.prototype, "KeyCtrl", {
        // bool        KeyCtrl;                    // Keyboard modifier pressed: Control
        get: function () { return this.native.KeyCtrl; },
        set: function (value) { this.native.KeyCtrl = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiIO.prototype, "KeyShift", {
        // bool        KeyShift;                   // Keyboard modifier pressed: Shift
        get: function () { return this.native.KeyShift; },
        set: function (value) { this.native.KeyShift = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiIO.prototype, "KeyAlt", {
        // bool        KeyAlt;                     // Keyboard modifier pressed: Alt
        get: function () { return this.native.KeyAlt; },
        set: function (value) { this.native.KeyAlt = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiIO.prototype, "KeySuper", {
        // bool        KeySuper;                   // Keyboard modifier pressed: Cmd/Super/Windows
        get: function () { return this.native.KeySuper; },
        set: function (value) { this.native.KeySuper = value; },
        enumerable: false,
        configurable: true
    });
    // Functions
    // IMGUI_API void AddInputCharacter(ImWchar c);                        // Add new character into InputCharacters[]
    ImGuiIO.prototype.AddInputCharacter = function (c) { this.native.AddInputCharacter(c); };
    // IMGUI_API void  AddInputCharacterUTF16(ImWchar16 c);        // Queue new character input from an UTF-16 character, it can be a surrogate
    ImGuiIO.prototype.AddInputCharacterUTF16 = function (c) { this.native.AddInputCharacterUTF16(c); };
    // IMGUI_API void AddInputCharactersUTF8(const char* utf8_chars);      // Add new characters into InputCharacters[] from an UTF-8 string
    ImGuiIO.prototype.AddInputCharactersUTF8 = function (utf8_chars) { this.native.AddInputCharactersUTF8(utf8_chars); };
    // inline void    ClearInputCharacters() { InputCharacters[0] = 0; }   // Clear the text input buffer manually
    ImGuiIO.prototype.ClearInputCharacters = function () { this.native.ClearInputCharacters(); };
    Object.defineProperty(ImGuiIO.prototype, "WantCaptureMouse", {
        //------------------------------------------------------------------
        // Output - Retrieve after calling NewFrame()
        //------------------------------------------------------------------
        // bool        WantCaptureMouse;           // When io.WantCaptureMouse is true, do not dispatch mouse input data to your main application. This is set by ImGui when it wants to use your mouse (e.g. unclicked mouse is hovering a window, or a widget is active).
        get: function () { return this.native.WantCaptureMouse; },
        set: function (value) { this.native.WantCaptureMouse = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiIO.prototype, "WantCaptureKeyboard", {
        // bool        WantCaptureKeyboard;        // When io.WantCaptureKeyboard is true, do not dispatch keyboard input data to your main application. This is set by ImGui when it wants to use your keyboard inputs.
        get: function () { return this.native.WantCaptureKeyboard; },
        set: function (value) { this.native.WantCaptureKeyboard = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiIO.prototype, "WantTextInput", {
        // bool        WantTextInput;              // Mobile/console: when io.WantTextInput is true, you may display an on-screen keyboard. This is set by ImGui when it wants textual keyboard input to happen (e.g. when a InputText widget is active).
        get: function () { return this.native.WantTextInput; },
        set: function (value) { this.native.WantTextInput = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiIO.prototype, "WantSetMousePos", {
        // bool        WantSetMousePos;              // [BETA-NAV] MousePos has been altered, back-end should reposition mouse on next frame. Set only when 'NavMovesMouse=true'.
        get: function () { return this.native.WantSetMousePos; },
        set: function (value) { this.native.WantSetMousePos = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiIO.prototype, "WantSaveIniSettings", {
        // bool        WantSaveIniSettings;        // When manual .ini load/save is active (io.IniFilename == NULL), this will be set to notify your application that you can call SaveIniSettingsToMemory() and save yourself. IMPORTANT: You need to clear io.WantSaveIniSettings yourself.
        get: function () { return this.native.WantSaveIniSettings; },
        set: function (value) { this.native.WantSaveIniSettings = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiIO.prototype, "NavActive", {
        // bool        NavActive;                  // Directional navigation is currently allowed (will handle ImGuiKey_NavXXX events) = a window is focused and it doesn't use the ImGuiWindowFlags_NoNavInputs flag.
        get: function () { return this.native.NavActive; },
        set: function (value) { this.native.NavActive = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiIO.prototype, "NavVisible", {
        // bool        NavVisible;                 // Directional navigation is visible and allowed (will handle ImGuiKey_NavXXX events).
        get: function () { return this.native.NavVisible; },
        set: function (value) { this.native.NavVisible = value; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiIO.prototype, "Framerate", {
        // float       Framerate;                  // Application framerate estimation, in frame per second. Solely for convenience. Rolling average estimation based on IO.DeltaTime over 120 frames
        get: function () { return this.native.Framerate; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiIO.prototype, "MetricsRenderVertices", {
        // int         MetricsRenderVertices;      // Vertices output during last call to Render()
        get: function () { return this.native.MetricsRenderVertices; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiIO.prototype, "MetricsRenderIndices", {
        // int         MetricsRenderIndices;       // Indices output during last call to Render() = number of triangles * 3
        get: function () { return this.native.MetricsRenderIndices; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiIO.prototype, "MetricsRenderWindows", {
        // int         MetricsRenderWindows;       // Number of visible windows
        get: function () { return this.native.MetricsRenderWindows; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiIO.prototype, "MetricsActiveWindows", {
        // int         MetricsActiveWindows;       // Number of visible root windows (exclude child windows)
        get: function () { return this.native.MetricsActiveWindows; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiIO.prototype, "MetricsActiveAllocations", {
        // int         MetricsActiveAllocations;   // Number of active allocations, updated by MemAlloc/MemFree based on current context. May be off if you have multiple imgui contexts.
        get: function () { return this.native.MetricsActiveAllocations; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImGuiIO.prototype, "MouseDelta", {
        // ImVec2      MouseDelta;                 // Mouse delta. Note that this is zero if either current or previous position are invalid (-FLT_MAX,-FLT_MAX), so a disappearing/reappearing mouse won't have a huge delta.
        get: function () { return this.native.MouseDelta; },
        enumerable: false,
        configurable: true
    });
    return ImGuiIO;
}());

// Context creation and access
// Each context create its own ImFontAtlas by default. You may instance one yourself and pass it to CreateContext() to share a font atlas between imgui contexts.
// None of those functions is reliant on the current context.
// IMGUI_API ImGuiContext* CreateContext(ImFontAtlas* shared_font_atlas = NULL);
// IMGUI_API void          DestroyContext(ImGuiContext* ctx = NULL);   // NULL = destroy current context
// IMGUI_API ImGuiContext* GetCurrentContext();
// IMGUI_API void          SetCurrentContext(ImGuiContext* ctx);
var ImGuiContext = /** @class */ (function () {
    function ImGuiContext(native) {
        this.native = native;
    }
    ImGuiContext.getTexture = function (index) {
        if (ImGuiContext.current_ctx === null) {
            throw new Error();
        }
        return ImGuiContext.current_ctx._getTexture(index);
    };
    ImGuiContext.setTexture = function (texture) {
        if (ImGuiContext.current_ctx === null) {
            throw new Error();
        }
        return ImGuiContext.current_ctx._setTexture(texture);
    };
    ImGuiContext.prototype._getTexture = function (index) {
        return ImGuiContext.textures[index] || null;
    };
    ImGuiContext.prototype._setTexture = function (texture) {
        var index = ImGuiContext.textures.indexOf(texture);
        if (index === -1) {
            for (var i = 0; i < ImGuiContext.textures.length; ++i) {
                if (ImGuiContext.textures[i] === null) {
                    ImGuiContext.textures[i] = texture;
                    return i;
                }
            }
            index = ImGuiContext.textures.length;
            ImGuiContext.textures.push(texture);
        }
        return index;
    };
    ImGuiContext.current_ctx = null;
    ImGuiContext.textures = [];
    return ImGuiContext;
}());

function CreateContext(shared_font_atlas) {
    if (shared_font_atlas === void 0) { shared_font_atlas = null; }
    var ctx = new ImGuiContext(bind.CreateContext(shared_font_atlas !== null ? shared_font_atlas.native : null));
    if (ImGuiContext.current_ctx === null) {
        ImGuiContext.current_ctx = ctx;
    }
    return ctx;
}
function DestroyContext(ctx) {
    if (ctx === void 0) { ctx = null; }
    if (ctx === null) {
        ctx = ImGuiContext.current_ctx;
        ImGuiContext.current_ctx = null;
    }
    bind.DestroyContext((ctx === null) ? null : ctx.native);
}
function GetCurrentContext() {
    // const ctx_native: Bind.ImGuiContext | null = bind.GetCurrentContext();
    return ImGuiContext.current_ctx;
}
function SetCurrentContext(ctx) {
    bind.SetCurrentContext((ctx === null) ? null : ctx.native);
    ImGuiContext.current_ctx = ctx;
}
// Main
// IMGUI_API ImGuiIO&      GetIO();                                    // access the IO structure (mouse/keyboard/gamepad inputs, time, various configuration options/flags)
// IMGUI_API ImGuiStyle&   GetStyle();                                 // access the Style structure (colors, sizes). Always use PushStyleCol(), PushStyleVar() to modify style mid-frame!
// IMGUI_API void          NewFrame();                                 // start a new Dear ImGui frame, you can submit any command from this point until Render()/EndFrame().
// IMGUI_API void          EndFrame();                                 // ends the Dear ImGui frame. automatically called by Render(). If you don't need to render data (skipping rendering) you may call EndFrame() without Render()... but you'll have wasted CPU already! If you don't need to render, better to not create any windows and not call NewFrame() at all!
// IMGUI_API void          Render();                                   // ends the Dear ImGui frame, finalize the draw data. You can then get call GetDrawData().
// IMGUI_API ImDrawData*   GetDrawData();                              // valid after Render() and until the next call to NewFrame(). this is what you have to render.
function GetIO() { return new ImGuiIO(bind.GetIO()); }
function GetStyle() { return new ImGuiStyle(bind.GetStyle()); }
function NewFrame() { bind.NewFrame(); }
function EndFrame() { bind.EndFrame(); }
function Render() { bind.Render(); }
function GetDrawData() {
    var draw_data = bind.GetDrawData();
    return (draw_data === null) ? null : new ImDrawData(draw_data);
}
// Demo, Debug, Information
// IMGUI_API void          ShowDemoWindow(bool* p_open = NULL);        // create Demo window. demonstrate most ImGui features. call this to learn about the library! try to make it always available in your application!
// IMGUI_API void          ShowMetricsWindow(bool* p_open = NULL);     // create Metrics/Debugger window. display Dear ImGui internals: windows, draw commands, various internal state, etc.
// IMGUI_API void          ShowAboutWindow(bool* p_open = NULL);       // create About window. display Dear ImGui version, credits and build/system information.
// IMGUI_API void          ShowStyleEditor(ImGuiStyle* ref = NULL);    // add style editor block (not a window). you can pass in a reference ImGuiStyle structure to compare to, revert to and save to (else it uses the default style)
// IMGUI_API bool          ShowStyleSelector(const char* label);       // add style selector block (not a window), essentially a combo listing the default styles.
// IMGUI_API void          ShowFontSelector(const char* label);        // add font selector block (not a window), essentially a combo listing the loaded fonts.
// IMGUI_API void          ShowUserGuide();                            // add basic help/info block (not a window): how to manipulate ImGui as a end-user (mouse/keyboard controls).
// IMGUI_API const char*   GetVersion();                               // get the compiled version string e.g. "1.80 WIP" (essentially the value for IMGUI_VERSION from the compiled version of imgui.cpp)
function ShowDemoWindow(p_open) {
    if (p_open === void 0) { p_open = null; }
    bind.ShowDemoWindow(p_open);
}
function ShowMetricsWindow(p_open) {
    if (p_open === void 0) { p_open = null; }
    if (p_open === null) {
        bind.ShowMetricsWindow(null);
    }
    else if (Array.isArray(p_open)) {
        bind.ShowMetricsWindow(p_open);
    }
    else {
        var ref_open = [p_open()];
        bind.ShowMetricsWindow(ref_open);
        p_open(ref_open[0]);
    }
}
function ShowAboutWindow(p_open) {
    if (p_open === void 0) { p_open = null; }
    if (p_open === null) {
        bind.ShowAboutWindow(null);
    }
    else if (Array.isArray(p_open)) {
        bind.ShowAboutWindow(p_open);
    }
    else {
        var ref_open = [p_open()];
        bind.ShowAboutWindow(ref_open);
        p_open(ref_open[0]);
    }
}
function ShowStyleEditor(ref) {
    if (ref === void 0) { ref = null; }
    if (ref === null) {
        bind.ShowStyleEditor(null);
    }
    else if (ref.internal instanceof bind.ImGuiStyle) {
        bind.ShowStyleEditor(ref.internal);
    }
    else {
        var native = new bind.ImGuiStyle();
        var wrap = new ImGuiStyle(native);
        wrap.Copy(ref);
        bind.ShowStyleEditor(native);
        ref.Copy(wrap);
        native.delete();
    }
}
function ShowStyleSelector(label) { return bind.ShowStyleSelector(label); }
function ShowFontSelector(label) { bind.ShowFontSelector(label); }
function ShowUserGuide() { bind.ShowUserGuide(); }
function GetVersion() { return bind.GetVersion(); }
// Styles
// IMGUI_API void          StyleColorsDark(ImGuiStyle* dst = NULL);    // new, recommended style (default)
// IMGUI_API void          StyleColorsLight(ImGuiStyle* dst = NULL);   // best used with borders and a custom, thicker font
// IMGUI_API void          StyleColorsClassic(ImGuiStyle* dst = NULL); // classic imgui style
function StyleColorsDark(dst) {
    if (dst === void 0) { dst = null; }
    if (dst === null) {
        bind.StyleColorsDark(null);
    }
    else if (dst.internal instanceof bind.ImGuiStyle) {
        bind.StyleColorsDark(dst.internal);
    }
    else {
        var native = new bind.ImGuiStyle();
        var wrap = new ImGuiStyle(native);
        wrap.Copy(dst);
        bind.StyleColorsDark(native);
        dst.Copy(wrap);
        native.delete();
    }
}
function StyleColorsLight(dst) {
    if (dst === void 0) { dst = null; }
    if (dst === null) {
        bind.StyleColorsLight(null);
    }
    else if (dst.internal instanceof bind.ImGuiStyle) {
        bind.StyleColorsLight(dst.internal);
    }
    else {
        var native = new bind.ImGuiStyle();
        var wrap = new ImGuiStyle(native);
        wrap.Copy(dst);
        bind.StyleColorsLight(native);
        dst.Copy(wrap);
        native.delete();
    }
}
function StyleColorsClassic(dst) {
    if (dst === void 0) { dst = null; }
    if (dst === null) {
        bind.StyleColorsClassic(null);
    }
    else if (dst.internal instanceof bind.ImGuiStyle) {
        bind.StyleColorsClassic(dst.internal);
    }
    else {
        var native = new bind.ImGuiStyle();
        var wrap = new ImGuiStyle(native);
        wrap.Copy(dst);
        bind.StyleColorsClassic(native);
        dst.Copy(wrap);
        native.delete();
    }
}
// Windows
// - Begin() = push window to the stack and start appending to it. End() = pop window from the stack.
// - Passing 'bool* p_open != NULL' shows a window-closing widget in the upper-right corner of the window,
//   which clicking will set the boolean to false when clicked.
// - You may append multiple times to the same window during the same frame by calling Begin()/End() pairs multiple times.
//   Some information such as 'flags' or 'p_open' will only be considered by the first call to Begin().
// - Begin() return false to indicate the window is collapsed or fully clipped, so you may early out and omit submitting
//   anything to the window. Always call a matching End() for each Begin() call, regardless of its return value!
//   [Important: due to legacy reason, this is inconsistent with most other functions such as BeginMenu/EndMenu,
//    BeginPopup/EndPopup, etc. where the EndXXX call should only be called if the corresponding BeginXXX function
//    returned true. Begin and BeginChild are the only odd ones out. Will be fixed in a future update.]
// - Note that the bottom of window stack always contains a window called "Debug".
// IMGUI_API bool          Begin(const char* name, bool* p_open = NULL, ImGuiWindowFlags flags = 0);
// IMGUI_API void          End();
function Begin(name, open, flags) {
    if (open === void 0) { open = null; }
    if (flags === void 0) { flags = 0; }
    if (open === null) {
        return bind.Begin(name, null, flags);
    }
    else if (Array.isArray(open)) {
        return bind.Begin(name, open, flags);
    }
    else {
        var ref_open = [open()];
        var opened = bind.Begin(name, ref_open, flags);
        open(ref_open[0]);
        return opened;
    }
}
function End() { bind.End(); }
// Child Windows
// - Use child windows to begin into a self-contained independent scrolling/clipping regions within a host window. Child windows can embed their own child.
// - For each independent axis of 'size': ==0.0f: use remaining host window size / >0.0f: fixed size / <0.0f: use remaining window size minus abs(size) / Each axis can use a different mode, e.g. ImVec2(0,400).
// - BeginChild() returns false to indicate the window is collapsed or fully clipped, so you may early out and omit submitting anything to the window.
//   Always call a matching EndChild() for each BeginChild() call, regardless of its return value.
//   [Important: due to legacy reason, this is inconsistent with most other functions such as BeginMenu/EndMenu,
//    BeginPopup/EndPopup, etc. where the EndXXX call should only be called if the corresponding BeginXXX function
//    returned true. Begin and BeginChild are the only odd ones out. Will be fixed in a future update.]
// IMGUI_API bool          BeginChild(const char* str_id, const ImVec2& size = ImVec2(0, 0), bool border = false, ImGuiWindowFlags flags = 0);
// IMGUI_API bool          BeginChild(ImGuiID id, const ImVec2& size = ImVec2(0, 0), bool border = false, ImGuiWindowFlags flags = 0);
// IMGUI_API void          EndChild();
function BeginChild(id, size, border, flags) {
    if (size === void 0) { size = ImVec2.ZERO; }
    if (border === void 0) { border = false; }
    if (flags === void 0) { flags = 0; }
    return bind.BeginChild(id, size, border, flags);
}
function EndChild() { bind.EndChild(); }
// Windows Utilities
// - 'current window' = the window we are appending into while inside a Begin()/End() block. 'next window' = next window we will Begin() into.
// IMGUI_API bool          IsWindowAppearing();
// IMGUI_API bool          IsWindowCollapsed();
// IMGUI_API bool          IsWindowFocused(ImGuiFocusedFlags flags=0); // is current window focused? or its root/child, depending on flags. see flags for options.
// IMGUI_API bool          IsWindowHovered(ImGuiHoveredFlags flags=0); // is current window hovered (and typically: not blocked by a popup/modal)? see flags for options. NB: If you are trying to check whether your mouse should be dispatched to imgui or to your app, you should use the 'io.WantCaptureMouse' boolean for that! Please read the FAQ!
// IMGUI_API ImDrawList*   GetWindowDrawList();                        // get draw list associated to the current window, to append your own drawing primitives
// IMGUI_API ImVec2        GetWindowPos();                             // get current window position in screen space (useful if you want to do your own drawing via the DrawList API)
// IMGUI_API ImVec2        GetWindowSize();                            // get current window size
// IMGUI_API float         GetWindowWidth();                           // get current window width (shortcut for GetWindowSize().x)
// IMGUI_API float         GetWindowHeight();                          // get current window height (shortcut for GetWindowSize().y)
function IsWindowAppearing() { return bind.IsWindowAppearing(); }
function IsWindowCollapsed() { return bind.IsWindowCollapsed(); }
function IsWindowFocused(flags) {
    if (flags === void 0) { flags = 0; }
    return bind.IsWindowFocused(flags);
}
function IsWindowHovered(flags) {
    if (flags === void 0) { flags = 0; }
    return bind.IsWindowHovered(flags);
}
function GetWindowDrawList() { return new ImDrawList(bind.GetWindowDrawList()); }
function GetWindowPos(out) {
    if (out === void 0) { out = new ImVec2(); }
    return bind.GetWindowPos(out);
}
function GetWindowSize(out) {
    if (out === void 0) { out = new ImVec2(); }
    return bind.GetWindowSize(out);
}
function GetWindowWidth() { return bind.GetWindowWidth(); }
function GetWindowHeight() { return bind.GetWindowHeight(); }
// Prefer using SetNextXXX functions (before Begin) rather that SetXXX functions (after Begin).
// IMGUI_API void          SetNextWindowPos(const ImVec2& pos, ImGuiCond cond = 0, const ImVec2& pivot = ImVec2(0, 0)); // set next window position. call before Begin(). use pivot=(0.5f,0.5f) to center on given point, etc.
// IMGUI_API void          SetNextWindowSize(const ImVec2& size, ImGuiCond cond = 0);                  // set next window size. set axis to 0.0f to force an auto-fit on this axis. call before Begin()
// IMGUI_API void          SetNextWindowSizeConstraints(const ImVec2& size_min, const ImVec2& size_max, ImGuiSizeCallback custom_callback = NULL, void* custom_callback_data = NULL); // set next window size limits. use -1,-1 on either X/Y axis to preserve the current size. Sizes will be rounded down. Use callback to apply non-trivial programmatic constraints.
// IMGUI_API void          SetNextWindowContentSize(const ImVec2& size);                               // set next window content size (~ scrollable client area, which enforce the range of scrollbars). Not including window decorations (title bar, menu bar, etc.) nor WindowPadding. set an axis to 0.0f to leave it automatic. call before Begin()
// IMGUI_API void          SetNextWindowCollapsed(bool collapsed, ImGuiCond cond = 0);                 // set next window collapsed state. call before Begin()
// IMGUI_API void          SetNextWindowFocus();                                                       // set next window to be focused / top-most. call before Begin()
// IMGUI_API void          SetNextWindowBgAlpha(float alpha);                                          // set next window background color alpha. helper to easily override the Alpha component of ImGuiCol_WindowBg/ChildBg/PopupBg. you may also use ImGuiWindowFlags_NoBackground.
// IMGUI_API void          SetWindowPos(const ImVec2& pos, ImGuiCond cond = 0);                        // (not recommended) set current window position - call within Begin()/End(). prefer using SetNextWindowPos(), as this may incur tearing and side-effects.
// IMGUI_API void          SetWindowSize(const ImVec2& size, ImGuiCond cond = 0);                      // (not recommended) set current window size - call within Begin()/End(). set to ImVec2(0, 0) to force an auto-fit. prefer using SetNextWindowSize(), as this may incur tearing and minor side-effects.
// IMGUI_API void          SetWindowCollapsed(bool collapsed, ImGuiCond cond = 0);                     // (not recommended) set current window collapsed state. prefer using SetNextWindowCollapsed().
// IMGUI_API void          SetWindowFocus();                                                           // (not recommended) set current window to be focused / top-most. prefer using SetNextWindowFocus().
// IMGUI_API void          SetWindowFontScale(float scale);                                            // set font scale. Adjust IO.FontGlobalScale if you want to scale all windows. This is an old API! For correct scaling, prefer to reload font + rebuild ImFontAtlas + call style.ScaleAllSizes().
// IMGUI_API void          SetWindowPos(const char* name, const ImVec2& pos, ImGuiCond cond = 0);      // set named window position.
// IMGUI_API void          SetWindowSize(const char* name, const ImVec2& size, ImGuiCond cond = 0);    // set named window size. set axis to 0.0f to force an auto-fit on this axis.
// IMGUI_API void          SetWindowCollapsed(const char* name, bool collapsed, ImGuiCond cond = 0);   // set named window collapsed state
// IMGUI_API void          SetWindowFocus(const char* name);                                           // set named window to be focused / top-most. use NULL to remove focus.
function SetNextWindowPos(pos, cond, pivot) {
    if (cond === void 0) { cond = 0; }
    if (pivot === void 0) { pivot = ImVec2.ZERO; }
    bind.SetNextWindowPos(pos, cond, pivot);
}
function SetNextWindowSize(pos, cond) {
    if (cond === void 0) { cond = 0; }
    bind.SetNextWindowSize(pos, cond);
}
function SetNextWindowSizeConstraints(size_min, size_max, custom_callback, custom_callback_data) {
    if (custom_callback === void 0) { custom_callback = null; }
    if (custom_callback_data === void 0) { custom_callback_data = null; }
    if (custom_callback) {
        bind.SetNextWindowSizeConstraints(size_min, size_max, function (data) {
            custom_callback(new ImGuiSizeCallbackData(data, custom_callback_data));
        }, null);
    }
    else {
        bind.SetNextWindowSizeConstraints(size_min, size_max, null, null);
    }
}
function SetNextWindowContentSize(size) { bind.SetNextWindowContentSize(size); }
function SetNextWindowCollapsed(collapsed, cond) {
    if (cond === void 0) { cond = 0; }
    bind.SetNextWindowCollapsed(collapsed, cond);
}
function SetNextWindowFocus() { bind.SetNextWindowFocus(); }
function SetNextWindowBgAlpha(alpha) { bind.SetNextWindowBgAlpha(alpha); }
function SetWindowPos(name_or_pos, pos_or_cond, cond) {
    if (pos_or_cond === void 0) { pos_or_cond = 0; }
    if (cond === void 0) { cond = 0; }
    if (typeof (name_or_pos) === "string") {
        bind.SetWindowNamePos(name_or_pos, pos_or_cond, cond);
        return;
    }
    else {
        bind.SetWindowPos(name_or_pos, pos_or_cond);
    }
}
function SetWindowSize(name_or_size, size_or_cond, cond) {
    if (size_or_cond === void 0) { size_or_cond = 0; }
    if (cond === void 0) { cond = 0; }
    if (typeof (name_or_size) === "string") {
        bind.SetWindowNamePos(name_or_size, size_or_cond, cond);
    }
    else {
        bind.SetWindowSize(name_or_size, size_or_cond);
    }
}
function SetWindowCollapsed(name_or_collapsed, collapsed_or_cond, cond) {
    if (collapsed_or_cond === void 0) { collapsed_or_cond = 0; }
    if (cond === void 0) { cond = 0; }
    if (typeof (name_or_collapsed) === "string") {
        bind.SetWindowNameCollapsed(name_or_collapsed, collapsed_or_cond, cond);
    }
    else {
        bind.SetWindowCollapsed(name_or_collapsed, collapsed_or_cond);
    }
}
function SetWindowFocus(name) {
    if (typeof (name) === "string") {
        bind.SetWindowNameFocus(name);
    }
    else {
        bind.SetWindowFocus();
    }
}
function SetWindowFontScale(scale) { bind.SetWindowFontScale(scale); }
// Content region
// - Retrieve available space from a given point. GetContentRegionAvail() is frequently useful.
// - Those functions are bound to be redesigned (they are confusing, incomplete and the Min/Max return values are in local window coordinates which increases confusion)
// IMGUI_API ImVec2        GetContentRegionAvail();                                        // == GetContentRegionMax() - GetCursorPos()
// IMGUI_API ImVec2        GetContentRegionMax();                                          // current content boundaries (typically window boundaries including scrolling, or current column boundaries), in windows coordinates
// IMGUI_API ImVec2        GetWindowContentRegionMin();                                    // content boundaries min (roughly (0,0)-Scroll), in window coordinates
// IMGUI_API ImVec2        GetWindowContentRegionMax();                                    // content boundaries max (roughly (0,0)+Size-Scroll) where Size can be override with SetNextWindowContentSize(), in window coordinates
// IMGUI_API float         GetWindowContentRegionWidth();                                  //
function GetContentRegionAvail(out) {
    if (out === void 0) { out = new ImVec2(); }
    return bind.GetContentRegionAvail(out);
}
function GetContentRegionMax(out) {
    if (out === void 0) { out = new ImVec2(); }
    return bind.GetContentRegionMax(out);
}
function GetWindowContentRegionMin(out) {
    if (out === void 0) { out = new ImVec2(); }
    return bind.GetWindowContentRegionMin(out);
}
function GetWindowContentRegionMax(out) {
    if (out === void 0) { out = new ImVec2(); }
    return bind.GetWindowContentRegionMax(out);
}
function GetWindowContentRegionWidth() { return bind.GetWindowContentRegionWidth(); }
// Windows Scrolling
// IMGUI_API float         GetScrollX();                                                   // get scrolling amount [0 .. GetScrollMaxX()]
// IMGUI_API float         GetScrollY();                                                   // get scrolling amount [0 .. GetScrollMaxY()]
// IMGUI_API void          SetScrollX(float scroll_x);                                     // set scrolling amount [0 .. GetScrollMaxX()]
// IMGUI_API void          SetScrollY(float scroll_y);                                     // set scrolling amount [0 .. GetScrollMaxY()]
// IMGUI_API float         GetScrollMaxX();                                                // get maximum scrolling amount ~~ ContentSize.x - WindowSize.x - DecorationsSize.x
// IMGUI_API float         GetScrollMaxY();                                                // get maximum scrolling amount ~~ ContentSize.y - WindowSize.y - DecorationsSize.y
// IMGUI_API void          SetScrollHereX(float center_x_ratio = 0.5f);                    // adjust scrolling amount to make current cursor position visible. center_x_ratio=0.0: left, 0.5: center, 1.0: right. When using to make a "default/current item" visible, consider using SetItemDefaultFocus() instead.
// IMGUI_API void          SetScrollHereY(float center_y_ratio = 0.5f);                    // adjust scrolling amount to make current cursor position visible. center_y_ratio=0.0: top, 0.5: center, 1.0: bottom. When using to make a "default/current item" visible, consider using SetItemDefaultFocus() instead.
// IMGUI_API void          SetScrollFromPosX(float local_x, float center_x_ratio = 0.5f);  // adjust scrolling amount to make given position visible. Generally GetCursorStartPos() + offset to compute a valid position.
// IMGUI_API void          SetScrollFromPosY(float local_y, float center_y_ratio = 0.5f);  // adjust scrolling amount to make given position visible. Generally GetCursorStartPos() + offset to compute a valid position.
function GetScrollX() { return bind.GetScrollX(); }
function GetScrollY() { return bind.GetScrollY(); }
function SetScrollX(scroll_x) { bind.SetScrollX(scroll_x); }
function SetScrollY(scroll_y) { bind.SetScrollY(scroll_y); }
function GetScrollMaxX() { return bind.GetScrollMaxX(); }
function GetScrollMaxY() { return bind.GetScrollMaxY(); }
function SetScrollHereX(center_x_ratio) {
    if (center_x_ratio === void 0) { center_x_ratio = 0.5; }
    bind.SetScrollHereX(center_x_ratio);
}
function SetScrollHereY(center_y_ratio) {
    if (center_y_ratio === void 0) { center_y_ratio = 0.5; }
    bind.SetScrollHereY(center_y_ratio);
}
function SetScrollFromPosX(pos_x, center_x_ratio) {
    if (center_x_ratio === void 0) { center_x_ratio = 0.5; }
    bind.SetScrollFromPosX(pos_x, center_x_ratio);
}
function SetScrollFromPosY(pos_y, center_y_ratio) {
    if (center_y_ratio === void 0) { center_y_ratio = 0.5; }
    bind.SetScrollFromPosY(pos_y, center_y_ratio);
}
// Parameters stacks (shared)
// IMGUI_API void          PushFont(ImFont* font);                                         // use NULL as a shortcut to push default font
// IMGUI_API void          PopFont();
// IMGUI_API void          PushStyleColor(ImGuiCol idx, ImU32 col);                        // modify a style color. always use this if you modify the style after NewFrame().
// IMGUI_API void          PushStyleColor(ImGuiCol idx, const ImVec4& col);
// IMGUI_API void          PopStyleColor(int count = 1);
// IMGUI_API void          PushStyleVar(ImGuiStyleVar idx, float val);                     // modify a style float variable. always use this if you modify the style after NewFrame().
// IMGUI_API void          PushStyleVar(ImGuiStyleVar idx, const ImVec2& val);             // modify a style ImVec2 variable. always use this if you modify the style after NewFrame().
// IMGUI_API void          PopStyleVar(int count = 1);
// IMGUI_API void          PushAllowKeyboardFocus(bool allow_keyboard_focus);              // allow focusing using TAB/Shift-TAB, enabled by default but you can disable it for certain widgets
// IMGUI_API void          PopAllowKeyboardFocus();
// IMGUI_API void          PushButtonRepeat(bool repeat);                                  // in 'repeat' mode, Button*() functions return repeated true in a typematic manner (using io.KeyRepeatDelay/io.KeyRepeatRate setting). Note that you can call IsItemActive() after any Button() to tell if the button is held in the current frame.
// IMGUI_API void          PopButtonRepeat();
function PushFont(font) { bind.PushFont(font ? font.native : null); }
function PopFont() { bind.PopFont(); }
function PushStyleColor(idx, col) {
    if (col instanceof ImColor) {
        bind.PushStyleColor(idx, col.Value);
    }
    else {
        bind.PushStyleColor(idx, col);
    }
}
function PopStyleColor(count) {
    if (count === void 0) { count = 1; }
    bind.PopStyleColor(count);
}
function PushStyleVar(idx, val) { bind.PushStyleVar(idx, val); }
function PopStyleVar(count) {
    if (count === void 0) { count = 1; }
    bind.PopStyleVar(count);
}
function PushAllowKeyboardFocus(allow_keyboard_focus) { bind.PushAllowKeyboardFocus(allow_keyboard_focus); }
function PopAllowKeyboardFocus() { bind.PopAllowKeyboardFocus(); }
function PushButtonRepeat(repeat) { bind.PushButtonRepeat(repeat); }
function PopButtonRepeat() { bind.PopButtonRepeat(); }
// Parameters stacks (current window)
// IMGUI_API void          PushItemWidth(float item_width);                                // push width of items for common large "item+label" widgets. >0.0f: width in pixels, <0.0f align xx pixels to the right of window (so -FLT_MIN always align width to the right side). 0.0f = default to ~2/3 of windows width,
// IMGUI_API void          PopItemWidth();
// IMGUI_API void          SetNextItemWidth(float item_width);                             // set width of the _next_ common large "item+label" widget. >0.0f: width in pixels, <0.0f align xx pixels to the right of window (so -FLT_MIN always align width to the right side)
// IMGUI_API float         CalcItemWidth();                                                // width of item given pushed settings and current cursor position. NOT necessarily the width of last item unlike most 'Item' functions.
// IMGUI_API void          PushTextWrapPos(float wrap_local_pos_x = 0.0f);                 // push word-wrapping position for Text*() commands. < 0.0f: no wrapping; 0.0f: wrap to end of window (or column); > 0.0f: wrap at 'wrap_pos_x' position in window local space
// IMGUI_API void          PopTextWrapPos();
function PushItemWidth(item_width) { bind.PushItemWidth(item_width); }
function PopItemWidth() { bind.PopItemWidth(); }
function SetNextItemWidth(item_width) { bind.SetNextItemWidth(item_width); } // set width of the _next_ common large "item+label" widget. >0.0f: width in pixels, <0.0f align xx pixels to the right of window (so -1.0f always align width to the right side)
function CalcItemWidth() { return bind.CalcItemWidth(); }
function PushTextWrapPos(wrap_pos_x) {
    if (wrap_pos_x === void 0) { wrap_pos_x = 0.0; }
    bind.PushTextWrapPos(wrap_pos_x);
}
function PopTextWrapPos() { bind.PopTextWrapPos(); }
// Style read access
// IMGUI_API ImFont*       GetFont();                                                      // get current font
// IMGUI_API float         GetFontSize();                                                  // get current font size (= height in pixels) of current font with current scale applied
// IMGUI_API ImVec2        GetFontTexUvWhitePixel();                                       // get UV coordinate for a while pixel, useful to draw custom shapes via the ImDrawList API
// IMGUI_API ImU32         GetColorU32(ImGuiCol idx, float alpha_mul = 1.0f);              // retrieve given style color with style alpha applied and optional extra alpha multiplier, packed as a 32-bit value suitable for ImDrawList
// IMGUI_API ImU32         GetColorU32(const ImVec4& col);                                 // retrieve given color with style alpha applied, packed as a 32-bit value suitable for ImDrawList
// IMGUI_API ImU32         GetColorU32(ImU32 col);                                         // retrieve given color with style alpha applied, packed as a 32-bit value suitable for ImDrawList
// IMGUI_API const ImVec4& GetStyleColorVec4(ImGuiCol idx);                                // retrieve style color as stored in ImGuiStyle structure. use to feed back into PushStyleColor(), otherwise use GetColorU32() to get style color with style alpha baked in.
function GetFont() { return new ImFont(bind.GetFont()); }
function GetFontSize() { return bind.GetFontSize(); }
function GetFontTexUvWhitePixel(out) {
    if (out === void 0) { out = new ImVec2(); }
    return bind.GetFontTexUvWhitePixel(out);
}
function GetColorU32() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    if (args.length === 1) {
        if (typeof (args[0]) === "number") {
            if (0 <= args[0] && args[0] < ImGuiCol.COUNT) {
                var idx = args[0];
                return bind.GetColorU32_A(idx, 1.0);
            }
            else {
                var col = args[0];
                return bind.GetColorU32_C(col);
            }
        }
        else {
            var col = args[0];
            return bind.GetColorU32_B(col);
        }
    }
    else {
        var idx = args[0];
        var alpha_mul = args[1];
        return bind.GetColorU32_A(idx, alpha_mul);
    }
}
function GetStyleColorVec4(idx) { return bind.GetStyleColorVec4(idx); }
// Cursor / Layout
// - By "cursor" we mean the current output position.
// - The typical widget behavior is to output themselves at the current cursor position, then move the cursor one line down.
// - You can call SameLine() between widgets to undo the last carriage return and output at the right of the preceding widget.
// - Attention! We currently have inconsistencies between window-local and absolute positions we will aim to fix with future API:
//    Window-local coordinates:   SameLine(), GetCursorPos(), SetCursorPos(), GetCursorStartPos(), GetContentRegionMax(), GetWindowContentRegion*(), PushTextWrapPos()
//    Absolute coordinate:        GetCursorScreenPos(), SetCursorScreenPos(), all ImDrawList:: functions.
// IMGUI_API void          Separator();                                                    // separator, generally horizontal. inside a menu bar or in horizontal layout mode, this becomes a vertical separator.
// IMGUI_API void          SameLine(float offset_from_start_x=0.0f, float spacing=-1.0f);  // call between widgets or groups to layout them horizontally. X position given in window coordinates.
// IMGUI_API void          NewLine();                                                      // undo a SameLine() or force a new line when in an horizontal-layout context.
// IMGUI_API void          Spacing();                                                      // add vertical spacing.
// IMGUI_API void          Dummy(const ImVec2& size);                                      // add a dummy item of given size. unlike InvisibleButton(), Dummy() won't take the mouse click or be navigable into.
// IMGUI_API void          Indent(float indent_w = 0.0f);                                  // move content position toward the right, by indent_w, or style.IndentSpacing if indent_w <= 0
// IMGUI_API void          Unindent(float indent_w = 0.0f);                                // move content position back to the left, by indent_w, or style.IndentSpacing if indent_w <= 0
// IMGUI_API void          BeginGroup();                                                   // lock horizontal starting position
// IMGUI_API void          EndGroup();                                                     // unlock horizontal starting position + capture the whole group bounding box into one "item" (so you can use IsItemHovered() or layout primitives such as SameLine() on whole group, etc.)
// IMGUI_API ImVec2        GetCursorPos();                                                 // cursor position in window coordinates (relative to window position)
// IMGUI_API float         GetCursorPosX();                                                //   (some functions are using window-relative coordinates, such as: GetCursorPos, GetCursorStartPos, GetContentRegionMax, GetWindowContentRegion* etc.
// IMGUI_API float         GetCursorPosY();                                                //    other functions such as GetCursorScreenPos or everything in ImDrawList::
// IMGUI_API void          SetCursorPos(const ImVec2& local_pos);                          //    are using the main, absolute coordinate system.
// IMGUI_API void          SetCursorPosX(float local_x);                                   //    GetWindowPos() + GetCursorPos() == GetCursorScreenPos() etc.)
// IMGUI_API void          SetCursorPosY(float local_y);                                   //
// IMGUI_API ImVec2        GetCursorStartPos();                                            // initial cursor position in window coordinates
// IMGUI_API ImVec2        GetCursorScreenPos();                                           // cursor position in absolute screen coordinates [0..io.DisplaySize] (useful to work with ImDrawList API)
// IMGUI_API void          SetCursorScreenPos(const ImVec2& pos);                          // cursor position in absolute screen coordinates [0..io.DisplaySize]
// IMGUI_API void          AlignTextToFramePadding();                                      // vertically align upcoming text baseline to FramePadding.y so that it will align properly to regularly framed items (call if you have text on a line before a framed item)
// IMGUI_API float         GetTextLineHeight();                                            // ~ FontSize
// IMGUI_API float         GetTextLineHeightWithSpacing();                                 // ~ FontSize + style.ItemSpacing.y (distance in pixels between 2 consecutive lines of text)
// IMGUI_API float         GetFrameHeight();                                               // ~ FontSize + style.FramePadding.y * 2
// IMGUI_API float         GetFrameHeightWithSpacing();                                    // ~ FontSize + style.FramePadding.y * 2 + style.ItemSpacing.y (distance in pixels between 2 consecutive lines of framed widgets)
function Separator() { bind.Separator(); }
function SameLine(pos_x, spacing_w) {
    if (pos_x === void 0) { pos_x = 0.0; }
    if (spacing_w === void 0) { spacing_w = -1.0; }
    bind.SameLine(pos_x, spacing_w);
}
function NewLine() { bind.NewLine(); }
function Spacing() { bind.Spacing(); }
function Dummy(size) { bind.Dummy(size); }
function Indent(indent_w) {
    if (indent_w === void 0) { indent_w = 0.0; }
    bind.Indent(indent_w);
}
function Unindent(indent_w) {
    if (indent_w === void 0) { indent_w = 0.0; }
    bind.Unindent(indent_w);
}
function BeginGroup() { bind.BeginGroup(); }
function EndGroup() { bind.EndGroup(); }
function GetCursorPos(out) {
    if (out === void 0) { out = new ImVec2(); }
    return bind.GetCursorPos(out);
}
function GetCursorPosX() { return bind.GetCursorPosX(); }
function GetCursorPosY() { return bind.GetCursorPosY(); }
function SetCursorPos(local_pos) { bind.SetCursorPos(local_pos); }
function SetCursorPosX(x) { bind.SetCursorPosX(x); }
function SetCursorPosY(y) { bind.SetCursorPosY(y); }
function GetCursorStartPos(out) {
    if (out === void 0) { out = new ImVec2(); }
    return bind.GetCursorStartPos(out);
}
function GetCursorScreenPos(out) {
    if (out === void 0) { out = new ImVec2(); }
    return bind.GetCursorScreenPos(out);
}
function SetCursorScreenPos(pos) { bind.SetCursorScreenPos(pos); }
function AlignTextToFramePadding() { bind.AlignTextToFramePadding(); }
function GetTextLineHeight() { return bind.GetTextLineHeight(); }
function GetTextLineHeightWithSpacing() { return bind.GetTextLineHeightWithSpacing(); }
function GetFrameHeight() { return bind.GetFrameHeight(); }
function GetFrameHeightWithSpacing() { return bind.GetFrameHeightWithSpacing(); }
// ID stack/scopes
// - Read the FAQ for more details about how ID are handled in dear imgui. If you are creating widgets in a loop you most
//   likely want to push a unique identifier (e.g. object pointer, loop index) to uniquely differentiate them.
// - The resulting ID are hashes of the entire stack.
// - You can also use the "Label##foobar" syntax within widget label to distinguish them from each others.
// - In this header file we use the "label"/"name" terminology to denote a string that will be displayed and used as an ID,
//   whereas "str_id" denote a string that is only used as an ID and not normally displayed.
// IMGUI_API void          PushID(const char* str_id);                                     // push string into the ID stack (will hash string).
// IMGUI_API void          PushID(const char* str_id_begin, const char* str_id_end);       // push string into the ID stack (will hash string).
// IMGUI_API void          PushID(const void* ptr_id);                                     // push pointer into the ID stack (will hash pointer).
// IMGUI_API void          PushID(int int_id);                                             // push integer into the ID stack (will hash integer).
// IMGUI_API void          PopID();                                                        // pop from the ID stack.
// IMGUI_API ImGuiID       GetID(const char* str_id);                                      // calculate unique ID (hash of whole ID stack + given parameter). e.g. if you want to query into ImGuiStorage yourself
// IMGUI_API ImGuiID       GetID(const char* str_id_begin, const char* str_id_end);
// IMGUI_API ImGuiID       GetID(const void* ptr_id);
function PushID(id) { bind.PushID(id); }
function PopID() { bind.PopID(); }
function GetID(id) { return bind.GetID(id); }
// Widgets: Text
// IMGUI_API void          TextUnformatted(const char* text, const char* text_end = NULL); // raw text without formatting. Roughly equivalent to Text("%s", text) but: A) doesn't require null terminated string if 'text_end' is specified, B) it's faster, no memory copy is done, no buffer size limits, recommended for long chunks of text.
// IMGUI_API void          Text(const char* fmt, ...)                                      IM_FMTARGS(1); // formatted text
// IMGUI_API void          TextV(const char* fmt, va_list args)                            IM_FMTLIST(1);
// IMGUI_API void          TextColored(const ImVec4& col, const char* fmt, ...)            IM_FMTARGS(2); // shortcut for PushStyleColor(ImGuiCol_Text, col); Text(fmt, ...); PopStyleColor();
// IMGUI_API void          TextColoredV(const ImVec4& col, const char* fmt, va_list args)  IM_FMTLIST(2);
// IMGUI_API void          TextDisabled(const char* fmt, ...)                              IM_FMTARGS(1); // shortcut for PushStyleColor(ImGuiCol_Text, style.Colors[ImGuiCol_TextDisabled]); Text(fmt, ...); PopStyleColor();
// IMGUI_API void          TextDisabledV(const char* fmt, va_list args)                    IM_FMTLIST(1);
// IMGUI_API void          TextWrapped(const char* fmt, ...)                               IM_FMTARGS(1); // shortcut for PushTextWrapPos(0.0f); Text(fmt, ...); PopTextWrapPos();. Note that this won't work on an auto-resizing window if there's no other widgets to extend the window width, yoy may need to set a size using SetNextWindowSize().
// IMGUI_API void          TextWrappedV(const char* fmt, va_list args)                     IM_FMTLIST(1);
// IMGUI_API void          LabelText(const char* label, const char* fmt, ...)              IM_FMTARGS(2); // display text+label aligned the same way as value+label widgets
// IMGUI_API void          LabelTextV(const char* label, const char* fmt, va_list args)    IM_FMTLIST(2);
// IMGUI_API void          BulletText(const char* fmt, ...)                                IM_FMTARGS(1); // shortcut for Bullet()+Text()
// IMGUI_API void          BulletTextV(const char* fmt, va_list args)                      IM_FMTLIST(1);
function TextUnformatted(text, text_end) {
    if (text_end === void 0) { text_end = null; }
    bind.TextUnformatted(text_end !== null ? text.substring(0, text_end) : text);
}
function Text(text) { bind.Text(text); }
function TextColored(col, text) { bind.TextColored((col instanceof ImColor) ? col.Value : col, text); }
function TextDisabled(text) { bind.TextDisabled(text); }
function TextWrapped(text) { bind.TextWrapped(text); }
function LabelText(label, text) { bind.LabelText(label, text); }
function BulletText(text) { bind.BulletText(text); }
// Widgets: Main
// - Most widgets return true when the value has been changed or when pressed/selected
// - You may also use one of the many IsItemXXX functions (e.g. IsItemActive, IsItemHovered, etc.) to query widget state.
// IMGUI_API bool          Button(const char* label, const ImVec2& size = ImVec2(0, 0));   // button
// IMGUI_API bool          SmallButton(const char* label);                                 // button with FramePadding=(0,0) to easily embed within text
// IMGUI_API bool          InvisibleButton(const char* str_id, const ImVec2& size, ImGuiButtonFlags flags = 0); // flexible button behavior without the visuals, frequently useful to build custom behaviors using the public api (along with IsItemActive, IsItemHovered, etc.)
// IMGUI_API bool          ArrowButton(const char* str_id, ImGuiDir dir);                  // square button with an arrow shape
// IMGUI_API void          Image(ImTextureID user_texture_id, const ImVec2& size, const ImVec2& uv0 = ImVec2(0, 0), const ImVec2& uv1 = ImVec2(1,1), const ImVec4& tint_col = ImVec4(1,1,1,1), const ImVec4& border_col = ImVec4(0,0,0,0));
// IMGUI_API bool          ImageButton(ImTextureID user_texture_id, const ImVec2& size, const ImVec2& uv0 = ImVec2(0, 0),  const ImVec2& uv1 = ImVec2(1,1), int frame_padding = -1, const ImVec4& bg_col = ImVec4(0,0,0,0), const ImVec4& tint_col = ImVec4(1,1,1,1));    // <0 frame_padding uses default frame padding settings. 0 for no padding
// IMGUI_API bool          Checkbox(const char* label, bool* v);
// IMGUI_API bool          CheckboxFlags(const char* label, int* flags, int flags_value);
// IMGUI_API bool          CheckboxFlags(const char* label, unsigned int* flags, unsigned int flags_value);
// IMGUI_API bool          RadioButton(const char* label, bool active);                    // use with e.g. if (RadioButton("one", my_value==1)) { my_value = 1; }
// IMGUI_API bool          RadioButton(const char* label, int* v, int v_button);           // shortcut to handle the above pattern when value is an integer
// IMGUI_API void          ProgressBar(float fraction, const ImVec2& size_arg = ImVec2(-FLT_MIN, 0), const char* overlay = NULL);
// IMGUI_API void          Bullet();                                                       // draw a small circle + keep the cursor on the same line. advance cursor x position by GetTreeNodeToLabelSpacing(), same distance that TreeNode() uses
function Button(label, size) {
    if (size === void 0) { size = ImVec2.ZERO; }
    return bind.Button(label, size);
}
function SmallButton(label) { return bind.SmallButton(label); }
function ArrowButton(str_id, dir) { return bind.ArrowButton(str_id, dir); }
function InvisibleButton(str_id, size, flags) {
    if (flags === void 0) { flags = 0; }
    return bind.InvisibleButton(str_id, size, flags);
}
function Image(user_texture_id, size, uv0, uv1, tint_col, border_col) {
    if (uv0 === void 0) { uv0 = ImVec2.ZERO; }
    if (uv1 === void 0) { uv1 = ImVec2.UNIT; }
    if (tint_col === void 0) { tint_col = ImVec4.WHITE; }
    if (border_col === void 0) { border_col = ImVec4.ZERO; }
    bind.Image(ImGuiContext.setTexture(user_texture_id), size, uv0, uv1, tint_col, border_col);
}
function ImageButton(user_texture_id, size, uv0, uv1, frame_padding, bg_col, tint_col) {
    if (size === void 0) { size = new ImVec2(Number.MIN_SAFE_INTEGER, 0); }
    if (uv0 === void 0) { uv0 = ImVec2.ZERO; }
    if (uv1 === void 0) { uv1 = ImVec2.UNIT; }
    if (frame_padding === void 0) { frame_padding = -1; }
    if (bg_col === void 0) { bg_col = ImVec4.ZERO; }
    if (tint_col === void 0) { tint_col = ImVec4.WHITE; }
    return bind.ImageButton(ImGuiContext.setTexture(user_texture_id), size, uv0, uv1, frame_padding, bg_col, tint_col);
}
function Checkbox(label, v) {
    if (Array.isArray(v)) {
        return bind.Checkbox(label, v);
    }
    else {
        var ref_v = [v()];
        var ret = bind.Checkbox(label, ref_v);
        v(ref_v[0]);
        return ret;
    }
}
function CheckboxFlags(label, flags, flags_value) {
    if (Array.isArray(flags)) {
        return bind.CheckboxFlags(label, flags, flags_value);
    }
    else {
        var ref_flags = [flags()];
        var ret = bind.CheckboxFlags(label, ref_flags, flags_value);
        flags(ref_flags[0]);
        return ret;
    }
}
function RadioButton(label) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        args[_i - 1] = arguments[_i];
    }
    if (typeof (args[0]) === "boolean") {
        var active = args[0];
        return bind.RadioButton_A(label, active);
    }
    else {
        var v = args[0];
        var v_button = args[1];
        var _v = Array.isArray(v) ? v : [v()];
        var ret = bind.RadioButton_B(label, _v, v_button);
        if (!Array.isArray(v)) {
            v(_v[0]);
        }
        return ret;
    }
}
function ProgressBar(fraction, size_arg, overlay) {
    if (size_arg === void 0) { size_arg = new ImVec2(-1, 0); }
    if (overlay === void 0) { overlay = null; }
    bind.ProgressBar(fraction, size_arg, overlay);
}
function Bullet() { bind.Bullet(); }
// Widgets: Combo Box
// - The BeginCombo()/EndCombo() api allows you to manage your contents and selection state however you want it, by creating e.g. Selectable() items.
// - The old Combo() api are helpers over BeginCombo()/EndCombo() which are kept available for convenience purpose.
// IMGUI_API bool          BeginCombo(const char* label, const char* preview_value, ImGuiComboFlags flags = 0);
// IMGUI_API void          EndCombo(); // only call EndCombo() if BeginCombo() returns true!
// IMGUI_API bool          Combo(const char* label, int* current_item, const char* const items[], int items_count, int popup_max_height_in_items = -1);
// IMGUI_API bool          Combo(const char* label, int* current_item, const char* items_separated_by_zeros, int popup_max_height_in_items = -1);      // Separate items with \0 within a string, end item-list with \0\0. e.g. "One\0Two\0Three\0"
// IMGUI_API bool          Combo(const char* label, int* current_item, bool(*items_getter)(void* data, int idx, const char** out_text), void* data, int items_count, int popup_max_height_in_items = -1);
function BeginCombo(label, preview_value, flags) {
    if (preview_value === void 0) { preview_value = null; }
    if (flags === void 0) { flags = 0; }
    return bind.BeginCombo(label, preview_value, flags);
}
function EndCombo() { bind.EndCombo(); }
function Combo(label, current_item) {
    var args = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        args[_i - 2] = arguments[_i];
    }
    var ret = false;
    var _current_item = Array.isArray(current_item) ? current_item : [current_item()];
    if (Array.isArray(args[0])) {
        var items_1 = args[0];
        var items_count = typeof (args[1]) === "number" ? args[1] : items_1.length;
        var popup_max_height_in_items = typeof (args[2]) === "number" ? args[2] : -1;
        var items_getter = function (data, idx, out_text) { out_text[0] = items_1[idx]; return true; };
        ret = bind.Combo(label, _current_item, items_getter, null, items_count, popup_max_height_in_items);
    }
    else if (typeof (args[0]) === "string") {
        var items_separated_by_zeros = args[0];
        var popup_max_height_in_items = typeof (args[1]) === "number" ? args[1] : -1;
        var items_2 = items_separated_by_zeros.replace(/^\0+|\0+$/g, "").split("\0");
        var items_count = items_2.length;
        var items_getter = function (data, idx, out_text) { out_text[0] = items_2[idx]; return true; };
        ret = bind.Combo(label, _current_item, items_getter, null, items_count, popup_max_height_in_items);
    }
    else {
        var items_getter = args[0];
        var data = args[1];
        var items_count = args[2];
        var popup_max_height_in_items = typeof (args[3]) === "number" ? args[3] : -1;
        ret = bind.Combo(label, _current_item, items_getter, data, items_count, popup_max_height_in_items);
    }
    if (!Array.isArray(current_item)) {
        current_item(_current_item[0]);
    }
    return ret;
}
// Widgets: Drag Sliders
// - CTRL+Click on any drag box to turn them into an input box. Manually input values aren't clamped and can go off-bounds.
// - For all the Float2/Float3/Float4/Int2/Int3/Int4 versions of every functions, note that a 'float v[X]' function argument is the same as 'float* v', the array syntax is just a way to document the number of elements that are expected to be accessible. You can pass address of your first element out of a contiguous set, e.g. &myvector.x
// - Adjust format string to decorate the value with a prefix, a suffix, or adapt the editing and display precision e.g. "%.3f" -> 1.234; "%5.2f secs" -> 01.23 secs; "Biscuit: %.0f" -> Biscuit: 1; etc.
// - Format string may also be set to NULL or use the default format ("%f" or "%d").
// - Speed are per-pixel of mouse movement (v_speed=0.2f: mouse needs to move by 5 pixels to increase value by 1). For gamepad/keyboard navigation, minimum speed is Max(v_speed, minimum_step_at_given_precision).
// - Use v_min < v_max to clamp edits to given limits. Note that CTRL+Click manual input can override those limits.
// - Use v_max = FLT_MAX / INT_MAX etc to avoid clamping to a maximum, same with v_min = -FLT_MAX / INT_MIN to avoid clamping to a minimum.
// - We use the same sets of flags for DragXXX() and SliderXXX() functions as the features are the same and it makes it easier to swap them.
// - Legacy: Pre-1.78 there are DragXXX() function signatures that takes a final `float power=1.0f' argument instead of the `ImGuiSliderFlags flags=0' argument.
//   If you get a warning converting a float to ImGuiSliderFlags, read https://github.com/ocornut/imgui/issues/3361
// IMGUI_API bool          DragFloat(const char* label, float* v, float v_speed = 1.0f, float v_min = 0.0f, float v_max = 0.0f, const char* format = "%.3f", ImGuiSliderFlags flags = 0);     // If v_min >= v_max we have no bound
// IMGUI_API bool          DragFloat2(const char* label, float v[2], float v_speed = 1.0f, float v_min = 0.0f, float v_max = 0.0f, const char* format = "%.3f", ImGuiSliderFlags flags = 0);
// IMGUI_API bool          DragFloat3(const char* label, float v[3], float v_speed = 1.0f, float v_min = 0.0f, float v_max = 0.0f, const char* format = "%.3f", ImGuiSliderFlags flags = 0);
// IMGUI_API bool          DragFloat4(const char* label, float v[4], float v_speed = 1.0f, float v_min = 0.0f, float v_max = 0.0f, const char* format = "%.3f", ImGuiSliderFlags flags = 0);
// IMGUI_API bool          DragFloatRange2(const char* label, float* v_current_min, float* v_current_max, float v_speed = 1.0f, float v_min = 0.0f, float v_max = 0.0f, const char* format = "%.3f", const char* format_max = NULL, ImGuiSliderFlags flags = 0);
// IMGUI_API bool          DragInt(const char* label, int* v, float v_speed = 1.0f, int v_min = 0, int v_max = 0, const char* format = "%d", ImGuiSliderFlags flags = 0);  // If v_min >= v_max we have no bound
// IMGUI_API bool          DragInt2(const char* label, int v[2], float v_speed = 1.0f, int v_min = 0, int v_max = 0, const char* format = "%d", ImGuiSliderFlags flags = 0);
// IMGUI_API bool          DragInt3(const char* label, int v[3], float v_speed = 1.0f, int v_min = 0, int v_max = 0, const char* format = "%d", ImGuiSliderFlags flags = 0);
// IMGUI_API bool          DragInt4(const char* label, int v[4], float v_speed = 1.0f, int v_min = 0, int v_max = 0, const char* format = "%d", ImGuiSliderFlags flags = 0);
// IMGUI_API bool          DragIntRange2(const char* label, int* v_current_min, int* v_current_max, float v_speed = 1.0f, int v_min = 0, int v_max = 0, const char* format = "%d", const char* format_max = NULL, ImGuiSliderFlags flags = 0);
// IMGUI_API bool          DragScalar(const char* label, ImGuiDataType data_type, void* p_data, float v_speed, const void* p_min = NULL, const void* p_max = NULL, const char* format = NULL, ImGuiSliderFlags flags = 0);
// IMGUI_API bool          DragScalarN(const char* label, ImGuiDataType data_type, void* p_data, int components, float v_speed, const void* p_min = NULL, const void* p_max = NULL, const char* format = NULL, ImGuiSliderFlags flags = 0);
function DragFloat(label, v, v_speed, v_min, v_max, display_format, flags) {
    if (v_speed === void 0) { v_speed = 1.0; }
    if (v_min === void 0) { v_min = 0.0; }
    if (v_max === void 0) { v_max = 0.0; }
    if (display_format === void 0) { display_format = "%.3f"; }
    if (flags === void 0) { flags = 0; }
    var _v = import_Scalar(v);
    var ret = bind.DragFloat(label, _v, v_speed, v_min, v_max, display_format, flags);
    export_Scalar(_v, v);
    return ret;
}
function DragFloat2(label, v, v_speed, v_min, v_max, display_format, flags) {
    if (v_speed === void 0) { v_speed = 1.0; }
    if (v_min === void 0) { v_min = 0.0; }
    if (v_max === void 0) { v_max = 0.0; }
    if (display_format === void 0) { display_format = "%.3f"; }
    if (flags === void 0) { flags = 0; }
    var _v = import_Vector2(v);
    var ret = bind.DragFloat2(label, _v, v_speed, v_min, v_max, display_format, flags);
    export_Vector2(_v, v);
    return ret;
}
function DragFloat3(label, v, v_speed, v_min, v_max, display_format, flags) {
    if (v_speed === void 0) { v_speed = 1.0; }
    if (v_min === void 0) { v_min = 0.0; }
    if (v_max === void 0) { v_max = 0.0; }
    if (display_format === void 0) { display_format = "%.3f"; }
    if (flags === void 0) { flags = 0; }
    var _v = import_Vector3(v);
    var ret = bind.DragFloat3(label, _v, v_speed, v_min, v_max, display_format, flags);
    export_Vector3(_v, v);
    return ret;
}
function DragFloat4(label, v, v_speed, v_min, v_max, display_format, flags) {
    if (v_speed === void 0) { v_speed = 1.0; }
    if (v_min === void 0) { v_min = 0.0; }
    if (v_max === void 0) { v_max = 0.0; }
    if (display_format === void 0) { display_format = "%.3f"; }
    if (flags === void 0) { flags = 0; }
    var _v = import_Vector4(v);
    var ret = bind.DragFloat4(label, _v, v_speed, v_min, v_max, display_format, flags);
    export_Vector4(_v, v);
    return ret;
}
function DragFloatRange2(label, v_current_min, v_current_max, v_speed, v_min, v_max, display_format, display_format_max, flags) {
    if (v_speed === void 0) { v_speed = 1.0; }
    if (v_min === void 0) { v_min = 0.0; }
    if (v_max === void 0) { v_max = 0.0; }
    if (display_format === void 0) { display_format = "%.3f"; }
    if (display_format_max === void 0) { display_format_max = null; }
    if (flags === void 0) { flags = 0; }
    var _v_current_min = import_Scalar(v_current_min);
    var _v_current_max = import_Scalar(v_current_max);
    var ret = bind.DragFloatRange2(label, _v_current_min, _v_current_max, v_speed, v_min, v_max, display_format, display_format_max, flags);
    export_Scalar(_v_current_min, v_current_min);
    export_Scalar(_v_current_max, v_current_max);
    return ret;
}
function DragInt(label, v, v_speed, v_min, v_max, format, flags) {
    if (v_speed === void 0) { v_speed = 1.0; }
    if (v_min === void 0) { v_min = 0; }
    if (v_max === void 0) { v_max = 0; }
    if (format === void 0) { format = "%d"; }
    if (flags === void 0) { flags = 0; }
    var _v = import_Scalar(v);
    var ret = bind.DragInt(label, _v, v_speed, v_min, v_max, format, flags);
    export_Scalar(_v, v);
    return ret;
}
function DragInt2(label, v, v_speed, v_min, v_max, format, flags) {
    if (v_speed === void 0) { v_speed = 1.0; }
    if (v_min === void 0) { v_min = 0; }
    if (v_max === void 0) { v_max = 0; }
    if (format === void 0) { format = "%d"; }
    if (flags === void 0) { flags = 0; }
    var _v = import_Vector2(v);
    var ret = bind.DragInt2(label, _v, v_speed, v_min, v_max, format, flags);
    export_Vector2(_v, v);
    return ret;
}
function DragInt3(label, v, v_speed, v_min, v_max, format, flags) {
    if (v_speed === void 0) { v_speed = 1.0; }
    if (v_min === void 0) { v_min = 0; }
    if (v_max === void 0) { v_max = 0; }
    if (format === void 0) { format = "%d"; }
    if (flags === void 0) { flags = 0; }
    var _v = import_Vector3(v);
    var ret = bind.DragInt3(label, _v, v_speed, v_min, v_max, format, flags);
    export_Vector3(_v, v);
    return ret;
}
function DragInt4(label, v, v_speed, v_min, v_max, format, flags) {
    if (v_speed === void 0) { v_speed = 1.0; }
    if (v_min === void 0) { v_min = 0; }
    if (v_max === void 0) { v_max = 0; }
    if (format === void 0) { format = "%d"; }
    if (flags === void 0) { flags = 0; }
    var _v = import_Vector4(v);
    var ret = bind.DragInt4(label, _v, v_speed, v_min, v_max, format, flags);
    export_Vector4(_v, v);
    return ret;
}
function DragIntRange2(label, v_current_min, v_current_max, v_speed, v_min, v_max, format, format_max, flags) {
    if (v_speed === void 0) { v_speed = 1.0; }
    if (v_min === void 0) { v_min = 0; }
    if (v_max === void 0) { v_max = 0; }
    if (format === void 0) { format = "%d"; }
    if (format_max === void 0) { format_max = null; }
    if (flags === void 0) { flags = 0; }
    var _v_current_min = import_Scalar(v_current_min);
    var _v_current_max = import_Scalar(v_current_max);
    var ret = bind.DragIntRange2(label, _v_current_min, _v_current_max, v_speed, v_min, v_max, format, format_max, flags);
    export_Scalar(_v_current_min, v_current_min);
    export_Scalar(_v_current_max, v_current_max);
    return ret;
}
function DragScalar(label, v, v_speed, v_min, v_max, format, flags) {
    if (v_min === void 0) { v_min = null; }
    if (v_max === void 0) { v_max = null; }
    if (format === void 0) { format = null; }
    if (flags === void 0) { flags = 0; }
    if (v instanceof Int8Array) {
        return bind.DragScalar(label, ImGuiDataType.S8, v, v_speed, v_min, v_max, format, flags);
    }
    if (v instanceof Uint8Array) {
        return bind.DragScalar(label, ImGuiDataType.U8, v, v_speed, v_min, v_max, format, flags);
    }
    if (v instanceof Int16Array) {
        return bind.DragScalar(label, ImGuiDataType.S16, v, v_speed, v_min, v_max, format, flags);
    }
    if (v instanceof Uint16Array) {
        return bind.DragScalar(label, ImGuiDataType.U16, v, v_speed, v_min, v_max, format, flags);
    }
    if (v instanceof Int32Array) {
        return bind.DragScalar(label, ImGuiDataType.S32, v, v_speed, v_min, v_max, format, flags);
    }
    if (v instanceof Uint32Array) {
        return bind.DragScalar(label, ImGuiDataType.U32, v, v_speed, v_min, v_max, format, flags);
    }
    // if (v instanceof Int64Array) { return bind.DragScalar(label, ImGuiDataType.S64, v, v_speed, v_min, v_max, format, flags); }
    // if (v instanceof Uint64Array) { return bind.DragScalar(label, ImGuiDataType.U64, v, v_speed, v_min, v_max, format, flags); }
    if (v instanceof Float32Array) {
        return bind.DragScalar(label, ImGuiDataType.Float, v, v_speed, v_min, v_max, format, flags);
    }
    if (v instanceof Float64Array) {
        return bind.DragScalar(label, ImGuiDataType.Double, v, v_speed, v_min, v_max, format, flags);
    }
    throw new Error();
}
// Widgets: Regular Sliders
// - CTRL+Click on any slider to turn them into an input box. Manually input values aren't clamped and can go off-bounds.
// - Adjust format string to decorate the value with a prefix, a suffix, or adapt the editing and display precision e.g. "%.3f" -> 1.234; "%5.2f secs" -> 01.23 secs; "Biscuit: %.0f" -> Biscuit: 1; etc.
// - Format string may also be set to NULL or use the default format ("%f" or "%d").
// - Legacy: Pre-1.78 there are SliderXXX() function signatures that takes a final `float power=1.0f' argument instead of the `ImGuiSliderFlags flags=0' argument.
//   If you get a warning converting a float to ImGuiSliderFlags, read https://github.com/ocornut/imgui/issues/3361
// IMGUI_API bool          SliderFloat(const char* label, float* v, float v_min, float v_max, const char* format = "%.3f", ImGuiSliderFlags flags = 0);     // adjust format to decorate the value with a prefix or a suffix for in-slider labels or unit display.
// IMGUI_API bool          SliderFloat2(const char* label, float v[2], float v_min, float v_max, const char* format = "%.3f", ImGuiSliderFlags flags = 0);
// IMGUI_API bool          SliderFloat3(const char* label, float v[3], float v_min, float v_max, const char* format = "%.3f", ImGuiSliderFlags flags = 0);
// IMGUI_API bool          SliderFloat4(const char* label, float v[4], float v_min, float v_max, const char* format = "%.3f", ImGuiSliderFlags flags = 0);
// IMGUI_API bool          SliderAngle(const char* label, float* v_rad, float v_degrees_min = -360.0f, float v_degrees_max = +360.0f, const char* format = "%.0f deg", ImGuiSliderFlags flags = 0);
// IMGUI_API bool          SliderInt(const char* label, int* v, int v_min, int v_max, const char* format = "%d", ImGuiSliderFlags flags = 0);
// IMGUI_API bool          SliderInt2(const char* label, int v[2], int v_min, int v_max, const char* format = "%d", ImGuiSliderFlags flags = 0);
// IMGUI_API bool          SliderInt3(const char* label, int v[3], int v_min, int v_max, const char* format = "%d", ImGuiSliderFlags flags = 0);
// IMGUI_API bool          SliderInt4(const char* label, int v[4], int v_min, int v_max, const char* format = "%d", ImGuiSliderFlags flags = 0);
// IMGUI_API bool          SliderScalar(const char* label, ImGuiDataType data_type, void* p_data, const void* p_min, const void* p_max, const char* format = NULL, ImGuiSliderFlags flags = 0);
// IMGUI_API bool          SliderScalarN(const char* label, ImGuiDataType data_type, void* p_data, int components, const void* p_min, const void* p_max, const char* format = NULL, ImGuiSliderFlags flags = 0);
// IMGUI_API bool          VSliderFloat(const char* label, const ImVec2& size, float* v, float v_min, float v_max, const char* format = "%.3f", ImGuiSliderFlags flags = 0);
// IMGUI_API bool          VSliderInt(const char* label, const ImVec2& size, int* v, int v_min, int v_max, const char* format = "%d", ImGuiSliderFlags flags = 0);
// IMGUI_API bool          VSliderScalar(const char* label, const ImVec2& size, ImGuiDataType data_type, void* p_data, const void* p_min, const void* p_max, const char* format = NULL, ImGuiSliderFlags flags = 0);
function SliderFloat(label, v, v_min, v_max, format, flags) {
    if (format === void 0) { format = "%.3f"; }
    if (flags === void 0) { flags = 0; }
    var _v = import_Scalar(v);
    var ret = bind.SliderFloat(label, _v, v_min, v_max, format, flags);
    export_Scalar(_v, v);
    return ret;
}
function SliderFloat2(label, v, v_min, v_max, format, flags) {
    if (format === void 0) { format = "%.3f"; }
    if (flags === void 0) { flags = 0; }
    var _v = import_Vector2(v);
    var ret = bind.SliderFloat2(label, _v, v_min, v_max, format, flags);
    export_Vector2(_v, v);
    return ret;
}
function SliderFloat3(label, v, v_min, v_max, format, flags) {
    if (format === void 0) { format = "%.3f"; }
    if (flags === void 0) { flags = 0; }
    var _v = import_Vector3(v);
    var ret = bind.SliderFloat3(label, _v, v_min, v_max, format, flags);
    export_Vector3(_v, v);
    return ret;
}
function SliderFloat4(label, v, v_min, v_max, format, flags) {
    if (format === void 0) { format = "%.3f"; }
    if (flags === void 0) { flags = 0; }
    var _v = import_Vector4(v);
    var ret = bind.SliderFloat4(label, _v, v_min, v_max, format, flags);
    export_Vector4(_v, v);
    return ret;
}
function SliderAngle(label, v_rad, v_degrees_min, v_degrees_max, format, flags) {
    if (v_degrees_min === void 0) { v_degrees_min = -360.0; }
    if (v_degrees_max === void 0) { v_degrees_max = +360.0; }
    if (format === void 0) { format = "%.0f deg"; }
    if (flags === void 0) { flags = 0; }
    var _v_rad = import_Scalar(v_rad);
    var ret = bind.SliderAngle(label, _v_rad, v_degrees_min, v_degrees_max, format, flags);
    export_Scalar(_v_rad, v_rad);
    return ret;
}
function SliderAngle3(label, v_rad, v_degrees_min, v_degrees_max, format, flags) {
    if (v_degrees_min === void 0) { v_degrees_min = -360.0; }
    if (v_degrees_max === void 0) { v_degrees_max = +360.0; }
    if (format === void 0) { format = "%.0f deg"; }
    if (flags === void 0) { flags = 0; }
    var _v_rad = import_Vector3(v_rad);
    _v_rad[0] = Math.floor(_v_rad[0] * 180 / Math.PI);
    _v_rad[1] = Math.floor(_v_rad[1] * 180 / Math.PI);
    _v_rad[2] = Math.floor(_v_rad[2] * 180 / Math.PI);
    var ret = bind.SliderInt3(label, _v_rad, v_degrees_min, v_degrees_max, format, flags);
    _v_rad[0] = _v_rad[0] * Math.PI / 180;
    _v_rad[1] = _v_rad[1] * Math.PI / 180;
    _v_rad[2] = _v_rad[2] * Math.PI / 180;
    export_Vector3(_v_rad, v_rad);
    return ret;
}
function SliderInt(label, v, v_min, v_max, format, flags) {
    if (format === void 0) { format = "%d"; }
    if (flags === void 0) { flags = 0; }
    var _v = import_Scalar(v);
    var ret = bind.SliderInt(label, _v, v_min, v_max, format, flags);
    export_Scalar(_v, v);
    return ret;
}
function SliderInt2(label, v, v_min, v_max, format, flags) {
    if (format === void 0) { format = "%d"; }
    if (flags === void 0) { flags = 0; }
    var _v = import_Vector2(v);
    var ret = bind.SliderInt2(label, _v, v_min, v_max, format, flags);
    export_Vector2(_v, v);
    return ret;
}
function SliderInt3(label, v, v_min, v_max, format, flags) {
    if (format === void 0) { format = "%d"; }
    if (flags === void 0) { flags = 0; }
    var _v = import_Vector3(v);
    var ret = bind.SliderInt3(label, _v, v_min, v_max, format, flags);
    export_Vector3(_v, v);
    return ret;
}
function SliderInt4(label, v, v_min, v_max, format, flags) {
    if (format === void 0) { format = "%d"; }
    if (flags === void 0) { flags = 0; }
    var _v = import_Vector4(v);
    var ret = bind.SliderInt4(label, _v, v_min, v_max, format, flags);
    export_Vector4(_v, v);
    return ret;
}
function SliderScalar(label, v, v_min, v_max, format, flags) {
    if (format === void 0) { format = null; }
    if (flags === void 0) { flags = 0; }
    if (v instanceof Int8Array) {
        return bind.SliderScalar(label, ImGuiDataType.S8, v, v_min, v_max, format, flags);
    }
    if (v instanceof Uint8Array) {
        return bind.SliderScalar(label, ImGuiDataType.U8, v, v_min, v_max, format, flags);
    }
    if (v instanceof Int16Array) {
        return bind.SliderScalar(label, ImGuiDataType.S16, v, v_min, v_max, format, flags);
    }
    if (v instanceof Uint16Array) {
        return bind.SliderScalar(label, ImGuiDataType.U16, v, v_min, v_max, format, flags);
    }
    if (v instanceof Int32Array) {
        return bind.SliderScalar(label, ImGuiDataType.S32, v, v_min, v_max, format, flags);
    }
    if (v instanceof Uint32Array) {
        return bind.SliderScalar(label, ImGuiDataType.U32, v, v_min, v_max, format, flags);
    }
    // if (v instanceof Int64Array) { return bind.SliderScalar(label, ImGuiDataType.S64, v, v_min, v_max, format, flags); }
    // if (v instanceof Uint64Array) { return bind.SliderScalar(label, ImGuiDataType.U64, v, v_min, v_max, format, flags); }
    if (v instanceof Float32Array) {
        return bind.SliderScalar(label, ImGuiDataType.Float, v, v_min, v_max, format, flags);
    }
    if (v instanceof Float64Array) {
        return bind.SliderScalar(label, ImGuiDataType.Double, v, v_min, v_max, format, flags);
    }
    throw new Error();
}
function VSliderFloat(label, size, v, v_min, v_max, format, flags) {
    if (format === void 0) { format = "%.3f"; }
    if (flags === void 0) { flags = 0; }
    var _v = import_Scalar(v);
    var ret = bind.VSliderFloat(label, size, _v, v_min, v_max, format, flags);
    export_Scalar(_v, v);
    return ret;
}
function VSliderInt(label, size, v, v_min, v_max, format, flags) {
    if (format === void 0) { format = "%d"; }
    if (flags === void 0) { flags = 0; }
    var _v = import_Scalar(v);
    var ret = bind.VSliderInt(label, size, _v, v_min, v_max, format, flags);
    export_Scalar(_v, v);
    return ret;
}
function VSliderScalar(label, size, data_type, v, v_min, v_max, format, flags) {
    if (format === void 0) { format = null; }
    if (flags === void 0) { flags = 0; }
    if (v instanceof Int8Array) {
        return bind.VSliderScalar(label, size, ImGuiDataType.S8, v, v_min, v_max, format, flags);
    }
    if (v instanceof Uint8Array) {
        return bind.VSliderScalar(label, size, ImGuiDataType.U8, v, v_min, v_max, format, flags);
    }
    if (v instanceof Int16Array) {
        return bind.VSliderScalar(label, size, ImGuiDataType.S16, v, v_min, v_max, format, flags);
    }
    if (v instanceof Uint16Array) {
        return bind.VSliderScalar(label, size, ImGuiDataType.U16, v, v_min, v_max, format, flags);
    }
    if (v instanceof Int32Array) {
        return bind.VSliderScalar(label, size, ImGuiDataType.S32, v, v_min, v_max, format, flags);
    }
    if (v instanceof Uint32Array) {
        return bind.VSliderScalar(label, size, ImGuiDataType.U32, v, v_min, v_max, format, flags);
    }
    // if (v instanceof Int64Array) { return bind.VSliderScalar(label, size, ImGuiDataType.S64, v, v_min, v_max, format, flags); }
    // if (v instanceof Uint64Array) { return bind.VSliderScalar(label, size, ImGuiDataType.U64, v, v_min, v_max, format, flags); }
    if (v instanceof Float32Array) {
        return bind.VSliderScalar(label, size, ImGuiDataType.Float, v, v_min, v_max, format, flags);
    }
    if (v instanceof Float64Array) {
        return bind.VSliderScalar(label, size, ImGuiDataType.Double, v, v_min, v_max, format, flags);
    }
    throw new Error();
}
// Widgets: Input with Keyboard
// - If you want to use InputText() with std::string or any custom dynamic string type, see misc/cpp/imgui_stdlib.h and comments in imgui_demo.cpp.
// - Most of the ImGuiInputTextFlags flags are only useful for InputText() and not for InputFloatX, InputIntX, InputDouble etc.
// IMGUI_API bool          InputText(const char* label, char* buf, size_t buf_size, ImGuiInputTextFlags flags = 0, ImGuiInputTextCallback callback = NULL, void* user_data = NULL);
// IMGUI_API bool          InputTextMultiline(const char* label, char* buf, size_t buf_size, const ImVec2& size = ImVec2(0, 0), ImGuiInputTextFlags flags = 0, ImGuiInputTextCallback callback = NULL, void* user_data = NULL);
// IMGUI_API bool          InputTextWithHint(const char* label, const char* hint, char* buf, size_t buf_size, ImGuiInputTextFlags flags = 0, ImGuiInputTextCallback callback = NULL, void* user_data = NULL);
// IMGUI_API bool          InputFloat(const char* label, float* v, float step = 0.0f, float step_fast = 0.0f, const char* format = "%.3f", ImGuiInputTextFlags flags = 0);
// IMGUI_API bool          InputFloat2(const char* label, float v[2], const char* format = "%.3f", ImGuiInputTextFlags flags = 0);
// IMGUI_API bool          InputFloat3(const char* label, float v[3], const char* format = "%.3f", ImGuiInputTextFlags flags = 0);
// IMGUI_API bool          InputFloat4(const char* label, float v[4], const char* format = "%.3f", ImGuiInputTextFlags flags = 0);
// IMGUI_API bool          InputInt(const char* label, int* v, int step = 1, int step_fast = 100, ImGuiInputTextFlags flags = 0);
// IMGUI_API bool          InputInt2(const char* label, int v[2], ImGuiInputTextFlags flags = 0);
// IMGUI_API bool          InputInt3(const char* label, int v[3], ImGuiInputTextFlags flags = 0);
// IMGUI_API bool          InputInt4(const char* label, int v[4], ImGuiInputTextFlags flags = 0);
// IMGUI_API bool          InputDouble(const char* label, double* v, double step = 0.0, double step_fast = 0.0, const char* format = "%.6f", ImGuiInputTextFlags flags = 0);
// IMGUI_API bool          InputScalar(const char* label, ImGuiDataType data_type, void* p_data, const void* p_step = NULL, const void* p_step_fast = NULL, const char* format = NULL, ImGuiInputTextFlags flags = 0);
// IMGUI_API bool          InputScalarN(const char* label, ImGuiDataType data_type, void* p_data, int components, const void* p_step = NULL, const void* p_step_fast = NULL, const char* format = NULL, ImGuiInputTextFlags flags = 0);
function InputText(label, buf, buf_size, flags, callback, user_data) {
    if (buf_size === void 0) { buf_size = buf instanceof ImStringBuffer ? buf.size : ImGuiInputTextDefaultSize; }
    if (flags === void 0) { flags = 0; }
    if (callback === void 0) { callback = null; }
    if (user_data === void 0) { user_data = null; }
    var ret = false;
    var screenPos = GetCursorScreenPos();
    var text;
    var _callback = callback && (function (data) { return callback(new ImGuiInputTextCallbackData(data, user_data)); }) || null;
    if (Array.isArray(buf)) {
        return bind.InputText(label, buf, buf_size, flags, _callback, null);
    }
    else if (buf instanceof ImStringBuffer) {
        var ref_buf = [buf.buffer];
        var _buf_size = Math.min(buf_size, buf.size);
        text = buf.buffer;
        ret = bind.InputText(label, ref_buf, _buf_size, flags, _callback, null);
        //buf.buffer = ref_buf[0];
    }
    else {
        var ref_buf = [buf()];
        text = buf();
        ret = bind.InputText(label, ref_buf, buf_size + 1, flags, _callback, null);
        //buf(ref_buf[0]);
    }
    if (isMobile.any() || true) {
        var inp = null;
        if (IsItemClicked()) {
            if (flags & ImGuiInputTextFlags.Password) {
                if (!dom_password) {
                    dom_password = new _input__WEBPACK_IMPORTED_MODULE_1__.Input(_input__WEBPACK_IMPORTED_MODULE_1__.EType.ePassword);
                }
                inp = dom_password;
            }
            else {
                if (!dom_input) {
                    dom_input = new _input__WEBPACK_IMPORTED_MODULE_1__.Input(_input__WEBPACK_IMPORTED_MODULE_1__.EType.eInput);
                }
                inp = dom_input;
            }
            inp.setText(text, GetID(label), GetIO().Fonts.CurrentFont);
        }
        inp = flags & ImGuiInputTextFlags.Password ? dom_password : dom_input;
        if (inp && inp.isMe(GetID(label))) {
            var size = GetItemRectSize();
            size.x = CalcItemWidth();
            inp.setRect(screenPos.x, screenPos.y, size.x, size.y);
            if (Array.isArray(buf)) {
            }
            else if (buf instanceof ImStringBuffer) {
                buf.buffer = inp.Text;
            }
            else {
                buf(inp.Text);
            }
        }
    }
    return ret;
}
function InputTextMultiline(label, buf, buf_size, size, flags, callback, user_data) {
    if (buf_size === void 0) { buf_size = buf instanceof ImStringBuffer ? buf.size : ImGuiInputTextDefaultSize; }
    if (size === void 0) { size = ImVec2.ZERO; }
    if (flags === void 0) { flags = 0; }
    if (callback === void 0) { callback = null; }
    if (user_data === void 0) { user_data = null; }
    var ret = false;
    var screenPos = GetCursorScreenPos();
    var text;
    var _callback = callback && (function (data) { return callback(new ImGuiInputTextCallbackData(data, user_data)); }) || null;
    if (Array.isArray(buf)) {
        return bind.InputTextMultiline(label, buf, buf_size, size, flags, _callback, null);
    }
    else if (buf instanceof ImStringBuffer) {
        var ref_buf = [buf.buffer];
        var _buf_size = Math.min(buf_size, buf.size);
        text = buf.buffer;
        ret = bind.InputTextMultiline(label, ref_buf, _buf_size, size, flags, _callback, null);
        //buf.buffer = ref_buf[0];
    }
    else {
        var ref_buf = [buf()];
        text = buf();
        ret = bind.InputTextMultiline(label, ref_buf, buf_size, size, flags, _callback, null);
        //buf(ref_buf[0]);        
    }
    if (isMobile.any() || true) {
        if (IsItemClicked()) {
            if (!dom_inputMultiline) {
                dom_inputMultiline = new _input__WEBPACK_IMPORTED_MODULE_1__.Input(_input__WEBPACK_IMPORTED_MODULE_1__.EType.eMultiLine);
            }
            dom_inputMultiline.setText(text, GetID(label), GetIO().Fonts.CurrentFont);
        }
        if (dom_inputMultiline && dom_inputMultiline.isMe(GetID(label))) {
            var size_1 = GetItemRectSize();
            size_1.x = CalcItemWidth();
            dom_inputMultiline.setRect(screenPos.x, screenPos.y, size_1.x, size_1.y);
            if (Array.isArray(buf)) {
            }
            else if (buf instanceof ImStringBuffer) {
                buf.buffer = dom_inputMultiline.Text;
            }
            else {
                buf(dom_inputMultiline.Text);
            }
        }
    }
    return ret;
}
function InputTextWithHint(label, hint, buf, buf_size, flags, callback, user_data) {
    if (buf_size === void 0) { buf_size = buf instanceof ImStringBuffer ? buf.size : ImGuiInputTextDefaultSize; }
    if (flags === void 0) { flags = 0; }
    if (callback === void 0) { callback = null; }
    if (user_data === void 0) { user_data = null; }
    var ret = false;
    var screenPos = GetCursorScreenPos();
    var text;
    var _callback = callback && (function (data) { return callback(new ImGuiInputTextCallbackData(data, user_data)); }) || null;
    if (Array.isArray(buf)) {
        return bind.InputTextWithHint(label, hint, buf, buf_size, flags, _callback, null);
    }
    else if (buf instanceof ImStringBuffer) {
        var ref_buf = [buf.buffer];
        var _buf_size = Math.min(buf_size, buf.size);
        text = buf.buffer;
        ret = bind.InputTextWithHint(label, hint, ref_buf, _buf_size, flags, _callback, null);
        //buf.buffer = ref_buf[0];
    }
    else {
        var ref_buf = [buf()];
        text = buf();
        ret = bind.InputTextWithHint(label, hint, ref_buf, buf_size, flags, _callback, null);
        //buf(ref_buf[0]);
    }
    if (isMobile.any() || true) {
        var inp = null;
        if (IsItemClicked()) {
            if (flags & ImGuiInputTextFlags.Password) {
                if (!dom_password) {
                    dom_password = new _input__WEBPACK_IMPORTED_MODULE_1__.Input(_input__WEBPACK_IMPORTED_MODULE_1__.EType.ePassword);
                }
                inp = dom_password;
            }
            else {
                if (!dom_input) {
                    dom_input = new _input__WEBPACK_IMPORTED_MODULE_1__.Input(_input__WEBPACK_IMPORTED_MODULE_1__.EType.eInput);
                }
                inp = dom_input;
            }
            inp.setText(text, GetID(label), GetIO().Fonts.CurrentFont);
        }
        inp = flags & ImGuiInputTextFlags.Password ? dom_password : dom_input;
        if (inp && inp.isMe(GetID(label))) {
            var size = GetItemRectSize();
            size.x = CalcItemWidth();
            inp.setRect(screenPos.x, screenPos.y, size.x, size.y);
            if (Array.isArray(buf)) {
            }
            else if (buf instanceof ImStringBuffer) {
                buf.buffer = inp.Text;
            }
            else {
                buf(inp.Text);
            }
        }
    }
    return ret;
}
function InputFloat(label, v, step, step_fast, format, flags) {
    if (step === void 0) { step = 0.0; }
    if (step_fast === void 0) { step_fast = 0.0; }
    if (format === void 0) { format = "%.3f"; }
    if (flags === void 0) { flags = 0; }
    var _v = import_Scalar(v);
    var ret = bind.InputFloat(label, _v, step, step_fast, format, flags);
    export_Scalar(_v, v);
    return ret;
}
function InputFloat2(label, v, format, flags) {
    if (format === void 0) { format = "%.3f"; }
    if (flags === void 0) { flags = 0; }
    var _v = import_Vector2(v);
    var ret = bind.InputFloat2(label, _v, format, flags);
    export_Vector2(_v, v);
    return ret;
}
function InputFloat3(label, v, format, flags) {
    if (format === void 0) { format = "%.3f"; }
    if (flags === void 0) { flags = 0; }
    var _v = import_Vector3(v);
    var ret = bind.InputFloat3(label, _v, format, flags);
    export_Vector3(_v, v);
    return ret;
}
function InputFloat4(label, v, format, flags) {
    if (format === void 0) { format = "%.3f"; }
    if (flags === void 0) { flags = 0; }
    var _v = import_Vector4(v);
    var ret = bind.InputFloat4(label, _v, format, flags);
    export_Vector4(_v, v);
    return ret;
}
function InputInt(label, v, step, step_fast, flags) {
    if (step === void 0) { step = 1; }
    if (step_fast === void 0) { step_fast = 100; }
    if (flags === void 0) { flags = 0; }
    var _v = import_Scalar(v);
    var ret = bind.InputInt(label, _v, step, step_fast, flags);
    export_Scalar(_v, v);
    return ret;
}
function InputInt2(label, v, flags) {
    if (flags === void 0) { flags = 0; }
    var _v = import_Vector2(v);
    var ret = bind.InputInt2(label, _v, flags);
    export_Vector2(_v, v);
    return ret;
}
function InputInt3(label, v, flags) {
    if (flags === void 0) { flags = 0; }
    var _v = import_Vector3(v);
    var ret = bind.InputInt3(label, _v, flags);
    export_Vector3(_v, v);
    return ret;
}
function InputInt4(label, v, flags) {
    if (flags === void 0) { flags = 0; }
    var _v = import_Vector4(v);
    var ret = bind.InputInt4(label, _v, flags);
    export_Vector4(_v, v);
    return ret;
}
function InputDouble(label, v, step, step_fast, format, flags) {
    if (step === void 0) { step = 0.0; }
    if (step_fast === void 0) { step_fast = 0.0; }
    if (format === void 0) { format = "%.6f"; }
    if (flags === void 0) { flags = 0; }
    var _v = import_Scalar(v);
    var ret = bind.InputDouble(label, _v, step, step_fast, format, flags);
    export_Scalar(_v, v);
    return ret;
}
function InputScalar(label, v, step, step_fast, format, flags) {
    if (step === void 0) { step = null; }
    if (step_fast === void 0) { step_fast = null; }
    if (format === void 0) { format = null; }
    if (flags === void 0) { flags = 0; }
    if (v instanceof Int8Array) {
        return bind.InputScalar(label, ImGuiDataType.S8, v, step, step_fast, format, flags);
    }
    if (v instanceof Uint8Array) {
        return bind.InputScalar(label, ImGuiDataType.U8, v, step, step_fast, format, flags);
    }
    if (v instanceof Int16Array) {
        return bind.InputScalar(label, ImGuiDataType.S16, v, step, step_fast, format, flags);
    }
    if (v instanceof Uint16Array) {
        return bind.InputScalar(label, ImGuiDataType.U16, v, step, step_fast, format, flags);
    }
    if (v instanceof Int32Array) {
        return bind.InputScalar(label, ImGuiDataType.S32, v, step, step_fast, format, flags);
    }
    if (v instanceof Uint32Array) {
        return bind.InputScalar(label, ImGuiDataType.U32, v, step, step_fast, format, flags);
    }
    // if (v instanceof Int64Array) { return bind.InputScalar(label, ImGuiDataType.S64, v, step, step_fast, format, flags); }
    // if (v instanceof Uint64Array) { return bind.InputScalar(label, ImGuiDataType.U64, v, step, step_fast, format, flags); }
    if (v instanceof Float32Array) {
        return bind.InputScalar(label, ImGuiDataType.Float, v, step, step_fast, format, flags);
    }
    if (v instanceof Float64Array) {
        return bind.InputScalar(label, ImGuiDataType.Double, v, step, step_fast, format, flags);
    }
    throw new Error();
}
// Widgets: Color Editor/Picker (tip: the ColorEdit* functions have a little color square that can be left-clicked to open a picker, and right-clicked to open an option menu.)
// - Note that in C++ a 'float v[X]' function argument is the _same_ as 'float* v', the array syntax is just a way to document the number of elements that are expected to be accessible.
// - You can pass the address of a first float element out of a contiguous structure, e.g. &myvector.x
// IMGUI_API bool          ColorEdit3(const char* label, float col[3], ImGuiColorEditFlags flags = 0);
// IMGUI_API bool          ColorEdit4(const char* label, float col[4], ImGuiColorEditFlags flags = 0);
// IMGUI_API bool          ColorPicker3(const char* label, float col[3], ImGuiColorEditFlags flags = 0);
// IMGUI_API bool          ColorPicker4(const char* label, float col[4], ImGuiColorEditFlags flags = 0, const float* ref_col = NULL);
// IMGUI_API bool          ColorButton(const char* desc_id, const ImVec4& col, ImGuiColorEditFlags flags = 0, ImVec2 size = ImVec2(0, 0)); // display a color square/button, hover for details, return true when pressed.
// IMGUI_API void          SetColorEditOptions(ImGuiColorEditFlags flags);                     // initialize current options (generally on application startup) if you want to select a default format, picker type, etc. User will be able to change many settings, unless you pass the _NoOptions flag to your calls.
function ColorEdit3(label, col, flags) {
    if (flags === void 0) { flags = 0; }
    var _col = import_Color3(col);
    var ret = bind.ColorEdit3(label, _col, flags);
    export_Color3(_col, col);
    return ret;
}
function ColorEdit4(label, col, flags) {
    if (flags === void 0) { flags = 0; }
    var _col = import_Color4(col);
    var ret = bind.ColorEdit4(label, _col, flags);
    export_Color4(_col, col);
    return ret;
}
function ColorPicker3(label, col, flags) {
    if (flags === void 0) { flags = 0; }
    var _col = import_Color3(col);
    var ret = bind.ColorPicker3(label, _col, flags);
    export_Color3(_col, col);
    return ret;
}
function ColorPicker4(label, col, flags, ref_col) {
    if (flags === void 0) { flags = 0; }
    if (ref_col === void 0) { ref_col = null; }
    var _col = import_Color4(col);
    var _ref_col = ref_col ? import_Color4(ref_col) : null;
    var ret = bind.ColorPicker4(label, _col, flags, _ref_col);
    export_Color4(_col, col);
    if (_ref_col && ref_col) {
        export_Color4(_ref_col, ref_col);
    }
    return ret;
}
function ColorButton(desc_id, col, flags, size) {
    if (flags === void 0) { flags = 0; }
    if (size === void 0) { size = ImVec2.ZERO; }
    return bind.ColorButton(desc_id, col, flags, size);
}
function SetColorEditOptions(flags) {
    bind.SetColorEditOptions(flags);
}
function TreeNode() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    if (typeof (args[0]) === "string") {
        if (args.length === 1) {
            var label = args[0];
            return bind.TreeNode_A(label);
        }
        else {
            var str_id = args[0];
            var fmt = args[1];
            return bind.TreeNode_B(str_id, fmt);
        }
    }
    else {
        var ptr_id = args[0];
        var fmt = args[1];
        return bind.TreeNode_C(ptr_id, fmt);
    }
}
function TreeNodeEx() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    if (typeof (args[0]) === "string") {
        if (args.length < 3) {
            var label = args[0];
            var flags = args[1] || 0;
            return bind.TreeNodeEx_A(label, flags);
        }
        else {
            var str_id = args[0];
            var flags = args[1];
            var fmt = args[2];
            return bind.TreeNodeEx_B(str_id, flags, fmt);
        }
    }
    else {
        var ptr_id = args[0];
        var flags = args[1];
        var fmt = args[2];
        return bind.TreeNodeEx_C(ptr_id, flags, fmt);
    }
}
function TreePush() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    if (typeof (args[0]) === "string") {
        var str_id = args[0];
        bind.TreePush_A(str_id);
    }
    else {
        var ptr_id = args[0];
        bind.TreePush_B(ptr_id);
    }
}
function TreePop() { bind.TreePop(); }
function GetTreeNodeToLabelSpacing() { return bind.GetTreeNodeToLabelSpacing(); }
function CollapsingHeader(label) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        args[_i - 1] = arguments[_i];
    }
    if (args.length === 0) {
        return bind.CollapsingHeader_A(label, 0);
    }
    else {
        if (typeof (args[0]) === "number") {
            var flags = args[0];
            return bind.CollapsingHeader_A(label, flags);
        }
        else {
            var p_open = args[0];
            var flags = args[1] || 0;
            var ref_open = Array.isArray(p_open) ? p_open : [p_open()];
            var ret = bind.CollapsingHeader_B(label, ref_open, flags);
            if (!Array.isArray(p_open)) {
                p_open(ref_open[0]);
            }
            return ret;
        }
    }
}
function SetNextItemOpen(is_open, cond) {
    if (cond === void 0) { cond = 0; }
    bind.SetNextItemOpen(is_open, cond);
}
function Selectable(label) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        args[_i - 1] = arguments[_i];
    }
    if (args.length === 0) {
        return bind.Selectable_A(label, false, 0, ImVec2.ZERO);
    }
    else {
        if (typeof (args[0]) === "boolean") {
            var selected = args[0];
            var flags = args[1] || 0;
            var size = args[2] || ImVec2.ZERO;
            return bind.Selectable_A(label, selected, flags, size);
        }
        else {
            var p_selected = args[0];
            var flags = args[1] || 0;
            var size = args[2] || ImVec2.ZERO;
            var ref_selected = Array.isArray(p_selected) ? p_selected : [p_selected()];
            var ret = bind.Selectable_B(label, ref_selected, flags, size);
            if (!Array.isArray(p_selected)) {
                p_selected(ref_selected[0]);
            }
            return ret;
        }
    }
}
function ListBox(label, current_item) {
    var args = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        args[_i - 2] = arguments[_i];
    }
    var ret = false;
    var _current_item = Array.isArray(current_item) ? current_item : [current_item()];
    if (Array.isArray(args[0])) {
        var items = args[0];
        var items_count = typeof (args[1]) === "number" ? args[1] : items.length;
        var height_in_items = typeof (args[2]) === "number" ? args[2] : -1;
        ret = bind.ListBox_A(label, _current_item, items, items_count, height_in_items);
    }
    else {
        var items_getter = args[0];
        var data = args[1];
        var items_count = args[2];
        var height_in_items = typeof (args[3]) === "number" ? args[3] : -1;
        ret = bind.ListBox_B(label, _current_item, items_getter, data, items_count, height_in_items);
    }
    if (!Array.isArray(current_item)) {
        current_item(_current_item[0]);
    }
    return ret;
}
function ListBoxHeader(label) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        args[_i - 1] = arguments[_i];
    }
    if (typeof (args[0]) === "object") {
        var size = args[0];
        return bind.ListBoxHeader_A(label, size);
    }
    else {
        var items_count = args[0];
        var height_in_items = typeof (args[1]) === "number" ? args[1] : -1;
        return bind.ListBoxHeader_B(label, items_count, height_in_items);
    }
}
function ListBoxFooter() { bind.ListBoxFooter(); }
function PlotLines(label) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        args[_i - 1] = arguments[_i];
    }
    if (Array.isArray(args[0])) {
        var values_1 = args[0];
        var values_getter = function (data, idx) { return values_1[idx * stride_1]; };
        var values_count = typeof (args[1]) === "number" ? args[1] : values_1.length;
        var values_offset = typeof (args[2]) === "number" ? args[2] : 0;
        var overlay_text = typeof (args[3]) === "string" ? args[3] : null;
        var scale_min = typeof (args[4]) === "number" ? args[4] : Number.MAX_VALUE;
        var scale_max = typeof (args[5]) === "number" ? args[5] : Number.MAX_VALUE;
        var graph_size = args[6] || ImVec2.ZERO;
        var stride_1 = typeof (args[7]) === "number" ? args[7] : 1;
        bind.PlotLines(label, values_getter, null, values_count, values_offset, overlay_text, scale_min, scale_max, graph_size);
    }
    else {
        var values_getter = args[0];
        var data = args[1];
        var values_count = args[2];
        var values_offset = typeof (args[3]) === "number" ? args[3] : 0;
        var overlay_text = typeof (args[4]) === "string" ? args[4] : null;
        var scale_min = typeof (args[5]) === "number" ? args[5] : Number.MAX_VALUE;
        var scale_max = typeof (args[6]) === "number" ? args[6] : Number.MAX_VALUE;
        var graph_size = args[7] || ImVec2.ZERO;
        bind.PlotLines(label, values_getter, data, values_count, values_offset, overlay_text, scale_min, scale_max, graph_size);
    }
}
function PlotHistogram(label) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        args[_i - 1] = arguments[_i];
    }
    if (Array.isArray(args[0])) {
        var values_2 = args[0];
        var values_getter = function (data, idx) { return values_2[idx * stride_2]; };
        var values_count = typeof (args[1]) === "number" ? args[1] : values_2.length;
        var values_offset = typeof (args[2]) === "number" ? args[2] : 0;
        var overlay_text = typeof (args[3]) === "string" ? args[3] : null;
        var scale_min = typeof (args[4]) === "number" ? args[4] : Number.MAX_VALUE;
        var scale_max = typeof (args[5]) === "number" ? args[5] : Number.MAX_VALUE;
        var graph_size = args[6] || ImVec2.ZERO;
        var stride_2 = typeof (args[7]) === "number" ? args[7] : 1;
        bind.PlotHistogram(label, values_getter, null, values_count, values_offset, overlay_text, scale_min, scale_max, graph_size);
    }
    else {
        var values_getter = args[0];
        var data = args[1];
        var values_count = args[2];
        var values_offset = typeof (args[3]) === "number" ? args[3] : 0;
        var overlay_text = typeof (args[4]) === "string" ? args[4] : null;
        var scale_min = typeof (args[5]) === "number" ? args[5] : Number.MAX_VALUE;
        var scale_max = typeof (args[6]) === "number" ? args[6] : Number.MAX_VALUE;
        var graph_size = args[7] || ImVec2.ZERO;
        bind.PlotHistogram(label, values_getter, data, values_count, values_offset, overlay_text, scale_min, scale_max, graph_size);
    }
}
function Value(prefix) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        args[_i - 1] = arguments[_i];
    }
    if (typeof (args[0]) === "boolean") {
        bind.Value_A(prefix, args[0]);
    }
    else if (typeof (args[0]) === "number") {
        if (Number.isInteger(args[0])) {
            bind.Value_B(prefix, args[0]);
        }
        else {
            bind.Value_D(prefix, args[0], typeof (args[1]) === "string" ? args[1] : null);
        }
    }
    else {
        bind.Text(prefix + String(args[0]));
    }
}
// Widgets: Menus
// - Use BeginMenuBar() on a window ImGuiWindowFlags_MenuBar to append to its menu bar.
// - Use BeginMainMenuBar() to create a menu bar at the top of the screen and append to it.
// - Use BeginMenu() to create a menu. You can call BeginMenu() multiple time with the same identifier to append more items to it.
// IMGUI_API bool          BeginMenuBar();                                                     // append to menu-bar of current window (requires ImGuiWindowFlags_MenuBar flag set on parent window).
// IMGUI_API void          EndMenuBar();                                                       // only call EndMenuBar() if BeginMenuBar() returns true!
// IMGUI_API bool          BeginMainMenuBar();                                                 // create and append to a full screen menu-bar.
// IMGUI_API void          EndMainMenuBar();                                                   // only call EndMainMenuBar() if BeginMainMenuBar() returns true!
// IMGUI_API bool          BeginMenu(const char* label, bool enabled = true);                  // create a sub-menu entry. only call EndMenu() if this returns true!
// IMGUI_API void          EndMenu();                                                          // only call EndMenu() if BeginMenu() returns true!
// IMGUI_API bool          MenuItem(const char* label, const char* shortcut = NULL, bool selected = false, bool enabled = true);  // return true when activated. shortcuts are displayed for convenience but not processed by ImGui at the moment
// IMGUI_API bool          MenuItem(const char* label, const char* shortcut, bool* p_selected, bool enabled = true);              // return true when activated + toggle (*p_selected) if p_selected != NULL
function BeginMenuBar() { return bind.BeginMenuBar(); }
function EndMenuBar() { bind.EndMenuBar(); }
function BeginMainMenuBar() { return bind.BeginMainMenuBar(); }
function EndMainMenuBar() { bind.EndMainMenuBar(); }
function BeginMenu(label, enabled) {
    if (enabled === void 0) { enabled = true; }
    return bind.BeginMenu(label, enabled);
}
function EndMenu() { bind.EndMenu(); }
function MenuItem(label) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        args[_i - 1] = arguments[_i];
    }
    if (args.length === 0) {
        return bind.MenuItem_A(label, null, false, true);
    }
    else if (args.length === 1) {
        var shortcut = args[0];
        return bind.MenuItem_A(label, shortcut, false, true);
    }
    else {
        var shortcut = args[0];
        if (typeof (args[1]) === "boolean") {
            var selected = args[1];
            var enabled = typeof (args[2]) === "boolean" ? args[2] : true;
            return bind.MenuItem_A(label, shortcut, selected, enabled);
        }
        else {
            var p_selected = args[1];
            var enabled = typeof (args[2]) === "boolean" ? args[2] : true;
            var ref_selected = Array.isArray(p_selected) ? p_selected : [p_selected()];
            var ret = bind.MenuItem_B(label, shortcut, ref_selected, enabled);
            if (!Array.isArray(p_selected)) {
                p_selected(ref_selected[0]);
            }
            return ret;
        }
    }
}
// Tooltips
// - Tooltip are windows following the mouse. They do not take focus away.
// IMGUI_API void          BeginTooltip();                                                     // begin/append a tooltip window. to create full-featured tooltip (with any kind of items).
// IMGUI_API void          EndTooltip();
// IMGUI_API void          SetTooltip(const char* fmt, ...) IM_FMTARGS(1);                     // set a text-only tooltip, typically use with ImGui::IsItemHovered(). override any previous call to SetTooltip().
// IMGUI_API void          SetTooltipV(const char* fmt, va_list args) IM_FMTLIST(1);
function BeginTooltip() { bind.BeginTooltip(); }
function EndTooltip() { bind.EndTooltip(); }
function SetTooltip(fmt) { bind.SetTooltip(fmt); }
// Popups, Modals
//  - They block normal mouse hovering detection (and therefore most mouse interactions) behind them.
//  - If not modal: they can be closed by clicking anywhere outside them, or by pressing ESCAPE.
//  - Their visibility state (~bool) is held internally instead of being held by the programmer as we are used to with regular Begin*() calls.
//  - The 3 properties above are related: we need to retain popup visibility state in the library because popups may be closed as any time.
//  - You can bypass the hovering restriction by using ImGuiHoveredFlags_AllowWhenBlockedByPopup when calling IsItemHovered() or IsWindowHovered().
//  - IMPORTANT: Popup identifiers are relative to the current ID stack, so OpenPopup and BeginPopup generally needs to be at the same level of the stack.
//    This is sometimes leading to confusing mistakes. May rework this in the future.
// Popups: begin/end functions
//  - BeginPopup(): query popup state, if open start appending into the window. Call EndPopup() afterwards. ImGuiWindowFlags are forwarded to the window.
//  - BeginPopupModal(): block every interactions behind the window, cannot be closed by user, add a dimming background, has a title bar.
// IMGUI_API bool          BeginPopup(const char* str_id, ImGuiWindowFlags flags = 0);                         // return true if the popup is open, and you can start outputting to it.
// IMGUI_API bool          BeginPopupModal(const char* name, bool* p_open = NULL, ImGuiWindowFlags flags = 0); // return true if the modal is open, and you can start outputting to it.
// IMGUI_API void          EndPopup();                                                                         // only call EndPopup() if BeginPopupXXX() returns true!
function BeginPopup(str_id, flags) {
    if (flags === void 0) { flags = 0; }
    return bind.BeginPopup(str_id, flags);
}
function BeginPopupModal(str_id, p_open, flags) {
    if (p_open === void 0) { p_open = null; }
    if (flags === void 0) { flags = 0; }
    if (Array.isArray(p_open)) {
        return bind.BeginPopupModal(str_id, p_open, flags);
    }
    else if (typeof (p_open) === "function") {
        var _p_open = [p_open()];
        var ret = bind.BeginPopupModal(str_id, _p_open, flags);
        p_open(_p_open[0]);
        return ret;
    }
    else {
        return bind.BeginPopupModal(str_id, null, flags);
    }
}
function EndPopup() { bind.EndPopup(); }
// Popups: open/close functions
//  - OpenPopup(): set popup state to open. ImGuiPopupFlags are available for opening options.
//  - If not modal: they can be closed by clicking anywhere outside them, or by pressing ESCAPE.
//  - CloseCurrentPopup(): use inside the BeginPopup()/EndPopup() scope to close manually.
//  - CloseCurrentPopup() is called by default by Selectable()/MenuItem() when activated (FIXME: need some options).
//  - Use ImGuiPopupFlags_NoOpenOverExistingPopup to avoid opening a popup if there's already one at the same level. This is equivalent to e.g. testing for !IsAnyPopupOpen() prior to OpenPopup().
// IMGUI_API void          OpenPopup(const char* str_id, ImGuiPopupFlags popup_flags = 0);                     // call to mark popup as open (don't call every frame!).
// IMGUI_API void          OpenPopupOnItemClick(const char* str_id = NULL, ImGuiPopupFlags popup_flags = 1);   // helper to open popup when clicked on last item. return true when just opened. (note: actually triggers on the mouse _released_ event to be consistent with popup behaviors)
// IMGUI_API void          CloseCurrentPopup();                                                                // manually close the popup we have begin-ed into.
function OpenPopup(str_id, popup_flags) {
    if (popup_flags === void 0) { popup_flags = 0; }
    bind.OpenPopup(str_id, popup_flags);
}
function OpenPopupOnItemClick(str_id, popup_flags) {
    if (str_id === void 0) { str_id = null; }
    if (popup_flags === void 0) { popup_flags = 1; }
    bind.OpenPopupOnItemClick(str_id, popup_flags);
}
function CloseCurrentPopup() { bind.CloseCurrentPopup(); }
// Popups: open+begin combined functions helpers
//  - Helpers to do OpenPopup+BeginPopup where the Open action is triggered by e.g. hovering an item and right-clicking.
//  - They are convenient to easily create context menus, hence the name.
//  - IMPORTANT: Notice that BeginPopupContextXXX takes ImGuiPopupFlags just like OpenPopup() and unlike BeginPopup(). For full consistency, we may add ImGuiWindowFlags to the BeginPopupContextXXX functions in the future.
//  - IMPORTANT: we exceptionally default their flags to 1 (== ImGuiPopupFlags_MouseButtonRight) for backward compatibility with older API taking 'int mouse_button = 1' parameter, so if you add other flags remember to re-add the ImGuiPopupFlags_MouseButtonRight.
// IMGUI_API bool          BeginPopupContextItem(const char* str_id = NULL, ImGuiPopupFlags popup_flags = 1);  // open+begin popup when clicked on last item. if you can pass a NULL str_id only if the previous item had an id. If you want to use that on a non-interactive item such as Text() you need to pass in an explicit ID here. read comments in .cpp!
// IMGUI_API bool          BeginPopupContextWindow(const char* str_id = NULL, ImGuiPopupFlags popup_flags = 1);// open+begin popup when clicked on current window.
// IMGUI_API bool          BeginPopupContextVoid(const char* str_id = NULL, ImGuiPopupFlags popup_flags = 1);  // open+begin popup when clicked in void (where there are no windows).
function BeginPopupContextItem(str_id, popup_flags) {
    if (str_id === void 0) { str_id = null; }
    if (popup_flags === void 0) { popup_flags = 1; }
    return bind.BeginPopupContextItem(str_id, popup_flags);
}
function BeginPopupContextWindow(str_id, popup_flags) {
    if (str_id === void 0) { str_id = null; }
    if (popup_flags === void 0) { popup_flags = 1; }
    return bind.BeginPopupContextWindow(str_id, popup_flags);
}
function BeginPopupContextVoid(str_id, popup_flags) {
    if (str_id === void 0) { str_id = null; }
    if (popup_flags === void 0) { popup_flags = 1; }
    return bind.BeginPopupContextVoid(str_id, popup_flags);
}
// Popups: test function
//  - IsPopupOpen(): return true if the popup is open at the current BeginPopup() level of the popup stack.
//  - IsPopupOpen() with ImGuiPopupFlags_AnyPopupId: return true if any popup is open at the current BeginPopup() level of the popup stack.
//  - IsPopupOpen() with ImGuiPopupFlags_AnyPopupId + ImGuiPopupFlags_AnyPopupLevel: return true if any popup is open.
// IMGUI_API bool          IsPopupOpen(const char* str_id, ImGuiPopupFlags flags = 0);                         // return true if the popup is open.
function IsPopupOpen(str_id, flags) {
    if (flags === void 0) { flags = 0; }
    return bind.IsPopupOpen(str_id, flags);
}
// Tables
// [BETA API] API may evolve slightly! If you use this, please update to the next version when it comes out!
// - Full-featured replacement for old Columns API.
// - See Demo->Tables for demo code.
// - See top of imgui_tables.cpp for general commentary.
// - See ImGuiTableFlags_ and ImGuiTableColumnFlags_ enums for a description of available flags.
// The typical call flow is:
// - 1. Call BeginTable().
// - 2. Optionally call TableSetupColumn() to submit column name/flags/defaults.
// - 3. Optionally call TableSetupScrollFreeze() to request scroll freezing of columns/rows.
// - 4. Optionally call TableHeadersRow() to submit a header row. Names are pulled from TableSetupColumn() data.
// - 5. Populate contents:
//    - In most situations you can use TableNextRow() + TableSetColumnIndex(N) to start appending into a column.
//    - If you are using tables as a sort of grid, where every columns is holding the same type of contents,
//      you may prefer using TableNextColumn() instead of TableNextRow() + TableSetColumnIndex().
//      TableNextColumn() will automatically wrap-around into the next row if needed.
//    - IMPORTANT: Comparatively to the old Columns() API, we need to call TableNextColumn() for the first column!
//    - Summary of possible call flow:
//        --------------------------------------------------------------------------------------------------------
//        TableNextRow() -> TableSetColumnIndex(0) -> Text("Hello 0") -> TableSetColumnIndex(1) -> Text("Hello 1")  // OK
//        TableNextRow() -> TableNextColumn()      -> Text("Hello 0") -> TableNextColumn()      -> Text("Hello 1")  // OK
//                          TableNextColumn()      -> Text("Hello 0") -> TableNextColumn()      -> Text("Hello 1")  // OK: TableNextColumn() automatically gets to next row!
//        TableNextRow()                           -> Text("Hello 0")                                               // Not OK! Missing TableSetColumnIndex() or TableNextColumn()! Text will not appear!
//        --------------------------------------------------------------------------------------------------------
// - 5. Call EndTable()
// IMGUI_API bool          BeginTable(const char* str_id, int column, ImGuiTableFlags flags = 0, const ImVec2& outer_size = ImVec2(0.0f, 0.0f), float inner_width = 0.0f);
// IMGUI_API void          EndTable();                                 // only call EndTable() if BeginTable() returns true!
// IMGUI_API void          TableNextRow(ImGuiTableRowFlags row_flags = 0, float min_row_height = 0.0f); // append into the first cell of a new row.
// IMGUI_API bool          TableNextColumn();                          // append into the next column (or first column of next row if currently in last column). Return true when column is visible.
// IMGUI_API bool          TableSetColumnIndex(int column_n);          // append into the specified column. Return true when column is visible.
function BeginTable(str_id, column, flags, outer_size, inner_width) {
    if (flags === void 0) { flags = 0; }
    if (outer_size === void 0) { outer_size = ImVec2.ZERO; }
    if (inner_width === void 0) { inner_width = 0.0; }
    return bind.BeginTable(str_id, column, flags, outer_size, inner_width);
}
function EndTable() { bind.EndTable(); }
function TableNextRow(row_flags, min_row_height) {
    if (row_flags === void 0) { row_flags = 0; }
    if (min_row_height === void 0) { min_row_height = 0.0; }
    bind.TableNextRow(row_flags, min_row_height);
}
function TableNextColumn() { return bind.TableNextColumn(); }
function TableSetColumnIndex(column_n) { return bind.TableSetColumnIndex(column_n); }
// Tables: Headers & Columns declaration
// - Use TableSetupColumn() to specify label, resizing policy, default width/weight, id, various other flags etc.
// - Use TableHeadersRow() to create a header row and automatically submit a TableHeader() for each column.
//   Headers are required to perform: reordering, sorting, and opening the context menu.
//   The context menu can also be made available in columns body using ImGuiTableFlags_ContextMenuInBody.
// - You may manually submit headers using TableNextRow() + TableHeader() calls, but this is only useful in
//   some advanced use cases (e.g. adding custom widgets in header row).
// - Use TableSetupScrollFreeze() to lock columns/rows so they stay visible when scrolled.
// IMGUI_API void          TableSetupColumn(const char* label, ImGuiTableColumnFlags flags = 0, float init_width_or_weight = 0.0f, ImU32 user_id = 0);
// IMGUI_API void          TableSetupScrollFreeze(int cols, int rows); // lock columns/rows so they stay visible when scrolled.
// IMGUI_API void          TableHeadersRow();                          // submit all headers cells based on data provided to TableSetupColumn() + submit context menu
// IMGUI_API void          TableHeader(const char* label);             // submit one header cell manually (rarely used)
function TableSetupColumn(label, flags, init_width_or_weight, user_id) {
    if (flags === void 0) { flags = 0; }
    if (init_width_or_weight === void 0) { init_width_or_weight = 0.0; }
    if (user_id === void 0) { user_id = 0; }
    bind.TableSetupColumn(label, flags, init_width_or_weight, user_id);
}
function TableSetupScrollFreeze(cols, rows) { bind.TableSetupScrollFreeze(cols, rows); }
function TableHeadersRow() { bind.TableHeadersRow(); }
function TableHeader(label) { bind.TableHeader(label); }
// Tables: Sorting
// - Call TableGetSortSpecs() to retrieve latest sort specs for the table. NULL when not sorting.
// - When 'SpecsDirty == true' you should sort your data. It will be true when sorting specs have changed
//   since last call, or the first time. Make sure to set 'SpecsDirty = false' after sorting, else you may
//   wastefully sort your data every frame!
// - Lifetime: don't hold on this pointer over multiple frames or past any subsequent call to BeginTable().
// IMGUI_API ImGuiTableSortSpecs* TableGetSortSpecs();                        // get latest sort specs for the table (NULL if not sorting).
function TableGetSortSpecs() {
    var sort_specs = bind.TableGetSortSpecs();
    return (sort_specs === null) ? null : new ImGuiTableSortSpecs(sort_specs);
}
// Tables: Miscellaneous functions
// - Functions args 'int column_n' treat the default value of -1 as the same as passing the current column index.
// IMGUI_API int                   TableGetColumnCount();                      // return number of columns (value passed to BeginTable)
// IMGUI_API int                   TableGetColumnIndex();                      // return current column index.
// IMGUI_API int                   TableGetRowIndex();                         // return current row index.
// IMGUI_API const char*           TableGetColumnName(int column_n = -1);      // return "" if column didn't have a name declared by TableSetupColumn(). Pass -1 to use current column.
// IMGUI_API ImGuiTableColumnFlags TableGetColumnFlags(int column_n = -1);     // return column flags so you can query their Enabled/Visible/Sorted/Hovered status flags. Pass -1 to use current column.
// IMGUI_API void                  TableSetBgColor(ImGuiTableBgTarget target, ImU32 color, int column_n = -1);  // change the color of a cell, row, or column. See ImGuiTableBgTarget_ flags for details.
function TableGetColumnCount() { return bind.TableGetColumnCount(); }
function TableGetColumnIndex() { return bind.TableGetColumnIndex(); }
function TableGetRowIndex() { return bind.TableGetRowIndex(); }
function TableGetColumnName(column_n) {
    if (column_n === void 0) { column_n = -1; }
    return bind.TableGetColumnName(column_n);
}
function TableGetColumnFlags(column_n) {
    if (column_n === void 0) { column_n = -1; }
    return bind.TableGetColumnFlags(column_n);
}
function TableSetBgColor(target, color, column_n) {
    if (column_n === void 0) { column_n = -1; }
    bind.TableSetBgColor(target, color, column_n);
}
// Legacy Columns API (2020: prefer using Tables!)
// - You can also use SameLine(pos_x) to mimic simplified columns.
// IMGUI_API void          Columns(int count = 1, const char* id = NULL, bool border = true);
// IMGUI_API void          NextColumn();                                                       // next column, defaults to current row or next row if the current row is finished
// IMGUI_API int           GetColumnIndex();                                                   // get current column index
// IMGUI_API float         GetColumnWidth(int column_index = -1);                              // get column width (in pixels). pass -1 to use current column
// IMGUI_API void          SetColumnWidth(int column_index, float width);                      // set column width (in pixels). pass -1 to use current column
// IMGUI_API float         GetColumnOffset(int column_index = -1);                             // get position of column line (in pixels, from the left side of the contents region). pass -1 to use current column, otherwise 0..GetColumnsCount() inclusive. column 0 is typically 0.0f
// IMGUI_API void          SetColumnOffset(int column_index, float offset_x);                  // set position of column line (in pixels, from the left side of the contents region). pass -1 to use current column
// IMGUI_API int           GetColumnsCount();
function Columns(count, id, border) {
    if (count === void 0) { count = 1; }
    if (id === void 0) { id = null; }
    if (border === void 0) { border = true; }
    bind.Columns(count, id, border);
}
function NextColumn() { bind.NextColumn(); }
function GetColumnIndex() { return bind.GetColumnIndex(); }
function GetColumnWidth(column_index) {
    if (column_index === void 0) { column_index = -1; }
    return bind.GetColumnWidth(column_index);
}
function SetColumnWidth(column_index, width) { bind.SetColumnWidth(column_index, width); }
function GetColumnOffset(column_index) {
    if (column_index === void 0) { column_index = -1; }
    return bind.GetColumnOffset(column_index);
}
function SetColumnOffset(column_index, offset_x) { bind.SetColumnOffset(column_index, offset_x); }
function GetColumnsCount() { return bind.GetColumnsCount(); }
// Tab Bars, Tabs
// IMGUI_API bool          BeginTabBar(const char* str_id, ImGuiTabBarFlags flags = 0);        // create and append into a TabBar
// IMGUI_API void          EndTabBar();                                                        // only call EndTabBar() if BeginTabBar() returns true!
// IMGUI_API bool          BeginTabItem(const char* label, bool* p_open = NULL, ImGuiTabItemFlags flags = 0); // create a Tab. Returns true if the Tab is selected.
// IMGUI_API void          EndTabItem();                                                       // only call EndTabItem() if BeginTabItem() returns true!
// IMGUI_API bool          TabItemButton(const char* label, ImGuiTabItemFlags flags = 0);      // create a Tab behaving like a button. return true when clicked. cannot be selected in the tab bar.
// IMGUI_API void          SetTabItemClosed(const char* tab_or_docked_window_label);           // notify TabBar or Docking system of a closed tab/window ahead (useful to reduce visual flicker on reorderable tab bars). For tab-bar: call after BeginTabBar() and before Tab submissions. Otherwise call with a window name.
function BeginTabBar(str_id, flags) {
    if (flags === void 0) { flags = 0; }
    return bind.BeginTabBar(str_id, flags);
}
function EndTabBar() { bind.EndTabBar(); }
function BeginTabItem(label, p_open, flags) {
    if (p_open === void 0) { p_open = null; }
    if (flags === void 0) { flags = 0; }
    if (p_open === null) {
        return bind.BeginTabItem(label, null, flags);
    }
    else if (Array.isArray(p_open)) {
        return bind.BeginTabItem(label, p_open, flags);
    }
    else {
        var ref_open = [p_open()];
        var ret = bind.BeginTabItem(label, ref_open, flags);
        p_open(ref_open[0]);
        return ret;
    }
}
function EndTabItem() { bind.EndTabItem(); }
function TabItemButton(label, flags) {
    if (flags === void 0) { flags = 0; }
    return bind.TabItemButton(label, flags);
}
function SetTabItemClosed(tab_or_docked_window_label) { bind.SetTabItemClosed(tab_or_docked_window_label); }
// Logging/Capture
// - All text output from the interface can be captured into tty/file/clipboard. By default, tree nodes are automatically opened during logging.
// IMGUI_API void          LogToTTY(int auto_open_depth = -1);                                 // start logging to tty (stdout)
// IMGUI_API void          LogToFile(int auto_open_depth = -1, const char* filename = NULL);   // start logging to file
// IMGUI_API void          LogToClipboard(int auto_open_depth = -1);                           // start logging to OS clipboard
// IMGUI_API void          LogFinish();                                                        // stop logging (close file, etc.)
// IMGUI_API void          LogButtons();                                                       // helper to display buttons for logging to tty/file/clipboard
// IMGUI_API void          LogText(const char* fmt, ...) IM_FMTARGS(1);                        // pass text data straight to log (without being displayed)
function LogToTTY(max_depth) {
    if (max_depth === void 0) { max_depth = -1; }
    bind.LogToTTY(max_depth);
}
function LogToFile(max_depth, filename) {
    if (max_depth === void 0) { max_depth = -1; }
    if (filename === void 0) { filename = null; }
    bind.LogToFile(max_depth, filename);
}
function LogToClipboard(max_depth) {
    if (max_depth === void 0) { max_depth = -1; }
    bind.LogToClipboard(max_depth);
}
function LogFinish() { bind.LogFinish(); }
function LogButtons() { bind.LogButtons(); }
function LogText(fmt) { bind.LogText(fmt); }
// Drag and Drop
// - If you stop calling BeginDragDropSource() the payload is preserved however it won't have a preview tooltip (we currently display a fallback "..." tooltip as replacement)
// IMGUI_API bool          BeginDragDropSource(ImGuiDragDropFlags flags = 0);                                      // call when the current item is active. If this return true, you can call SetDragDropPayload() + EndDragDropSource()
// IMGUI_API bool          SetDragDropPayload(const char* type, const void* data, size_t sz, ImGuiCond cond = 0);  // type is a user defined string of maximum 32 characters. Strings starting with '_' are reserved for dear imgui internal types. Data is copied and held by imgui.
// IMGUI_API void          EndDragDropSource();                                                                    // only call EndDragDropSource() if BeginDragDropSource() returns true!
// IMGUI_API bool                  BeginDragDropTarget();                                                          // call after submitting an item that may receive a payload. If this returns true, you can call AcceptDragDropPayload() + EndDragDropTarget()
// IMGUI_API const ImGuiPayload*   AcceptDragDropPayload(const char* type, ImGuiDragDropFlags flags = 0);          // accept contents of a given type. If ImGuiDragDropFlags_AcceptBeforeDelivery is set you can peek into the payload before the mouse button is released.
// IMGUI_API void                  EndDragDropTarget();                                                            // only call EndDragDropTarget() if BeginDragDropTarget() returns true!
// IMGUI_API const ImGuiPayload*   GetDragDropPayload();                                                           // peek directly into the current payload from anywhere. may return NULL. use ImGuiPayload::IsDataType() to test for the payload type.
var _ImGui_DragDropPayload_data = {};
function BeginDragDropSource(flags) {
    if (flags === void 0) { flags = 0; }
    return bind.BeginDragDropSource(flags);
}
function SetDragDropPayload(type, data, cond) {
    if (cond === void 0) { cond = 0; }
    _ImGui_DragDropPayload_data[type] = data;
    return bind.SetDragDropPayload(type, data, 0, cond);
}
function EndDragDropSource() {
    bind.EndDragDropSource();
}
function BeginDragDropTarget() {
    return bind.BeginDragDropTarget();
}
function AcceptDragDropPayload(type, flags) {
    if (flags === void 0) { flags = 0; }
    var data = _ImGui_DragDropPayload_data[type];
    return bind.AcceptDragDropPayload(type, flags) ? { Data: data } : null;
}
function EndDragDropTarget() {
    bind.EndDragDropTarget();
}
function GetDragDropPayload() {
    return bind.GetDragDropPayload();
}
// Clipping
// - Mouse hovering is affected by ImGui::PushClipRect() calls, unlike direct calls to ImDrawList::PushClipRect() which are render only.
// IMGUI_API void          PushClipRect(const ImVec2& clip_rect_min, const ImVec2& clip_rect_max, bool intersect_with_current_clip_rect);
// IMGUI_API void          PopClipRect();
function PushClipRect(clip_rect_min, clip_rect_max, intersect_with_current_clip_rect) {
    bind.PushClipRect(clip_rect_min, clip_rect_max, intersect_with_current_clip_rect);
}
function PopClipRect() {
    bind.PopClipRect();
}
// Focus, Activation
// - Prefer using "SetItemDefaultFocus()" over "if (IsWindowAppearing()) SetScrollHereY()" when applicable to signify "this is the default item"
// IMGUI_API void          SetItemDefaultFocus();                                              // make last item the default focused item of a window.
// IMGUI_API void          SetKeyboardFocusHere(int offset = 0);                               // focus keyboard on the next widget. Use positive 'offset' to access sub components of a multiple component widget. Use -1 to access previous widget.
function SetItemDefaultFocus() { bind.SetItemDefaultFocus(); }
function SetKeyboardFocusHere(offset) {
    if (offset === void 0) { offset = 0; }
    bind.SetKeyboardFocusHere(offset);
}
// Item/Widgets Utilities
// - Most of the functions are referring to the last/previous item we submitted.
// - See Demo Window under "Widgets->Querying Status" for an interactive visualization of most of those functions.
// IMGUI_API bool          IsItemHovered(ImGuiHoveredFlags flags = 0);                         // is the last item hovered? (and usable, aka not blocked by a popup, etc.). See ImGuiHoveredFlags for more options.
// IMGUI_API bool          IsItemActive();                                                     // is the last item active? (e.g. button being held, text field being edited. This will continuously return true while holding mouse button on an item. Items that don't interact will always return false)
// IMGUI_API bool          IsItemFocused();                                                    // is the last item focused for keyboard/gamepad navigation?
// IMGUI_API bool          IsItemClicked(ImGuiMouseButton mouse_button = 0);                   // is the last item clicked? (e.g. button/node just clicked on) == IsMouseClicked(mouse_button) && IsItemHovered()
// IMGUI_API bool          IsItemVisible();                                                    // is the last item visible? (items may be out of sight because of clipping/scrolling)
// IMGUI_API bool          IsItemEdited();                                                     // did the last item modify its underlying value this frame? or was pressed? This is generally the same as the "bool" return value of many widgets.
// IMGUI_API bool          IsItemActivated();                                                  // was the last item just made active (item was previously inactive).
// IMGUI_API bool          IsItemDeactivated();                                                // was the last item just made inactive (item was previously active). Useful for Undo/Redo patterns with widgets that requires continuous editing.
// IMGUI_API bool          IsItemDeactivatedAfterEdit();                                       // was the last item just made inactive and made a value change when it was active? (e.g. Slider/Drag moved). Useful for Undo/Redo patterns with widgets that requires continuous editing. Note that you may get false positives (some widgets such as Combo()/ListBox()/Selectable() will return true even when clicking an already selected item).
// IMGUI_API bool          IsItemToggledOpen();                                                // was the last item open state toggled? set by TreeNode().
// IMGUI_API bool          IsAnyItemHovered();                                                 // is any item hovered?
// IMGUI_API bool          IsAnyItemActive();                                                  // is any item active?
// IMGUI_API bool          IsAnyItemFocused();                                                 // is any item focused?
// IMGUI_API ImVec2        GetItemRectMin();                                                   // get upper-left bounding rectangle of the last item (screen space)
// IMGUI_API ImVec2        GetItemRectMax();                                                   // get lower-right bounding rectangle of the last item (screen space)
// IMGUI_API ImVec2        GetItemRectSize();                                                  // get size of last item
// IMGUI_API void          SetItemAllowOverlap();                                              // allow last item to be overlapped by a subsequent item. sometimes useful with invisible buttons, selectables, etc. to catch unused area.
function IsItemHovered(flags) {
    if (flags === void 0) { flags = 0; }
    return bind.IsItemHovered(flags);
}
function IsItemActive() { return bind.IsItemActive(); }
function IsItemFocused() { return bind.IsItemFocused(); }
function IsItemClicked(mouse_button) {
    if (mouse_button === void 0) { mouse_button = 0; }
    return bind.IsItemClicked(mouse_button);
}
function IsItemVisible() { return bind.IsItemVisible(); }
function IsItemEdited() { return bind.IsItemEdited(); }
function IsItemActivated() { return bind.IsItemActivated(); }
function IsItemDeactivated() { return bind.IsItemDeactivated(); }
function IsItemDeactivatedAfterEdit() { return bind.IsItemDeactivatedAfterEdit(); }
function IsItemToggledOpen() { return bind.IsItemToggledOpen(); }
function IsAnyItemHovered() { return bind.IsAnyItemHovered(); }
function IsAnyItemActive() { return bind.IsAnyItemActive(); }
function IsAnyItemFocused() { return bind.IsAnyItemFocused(); }
function GetItemRectMin(out) {
    if (out === void 0) { out = new ImVec2(); }
    return bind.GetItemRectMin(out);
}
function GetItemRectMax(out) {
    if (out === void 0) { out = new ImVec2(); }
    return bind.GetItemRectMax(out);
}
function GetItemRectSize(out) {
    if (out === void 0) { out = new ImVec2(); }
    return bind.GetItemRectSize(out);
}
function SetItemAllowOverlap() { bind.SetItemAllowOverlap(); }
function IsRectVisible() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    if (args.length === 1) {
        var size = args[0];
        return bind.IsRectVisible_A(size);
    }
    else {
        var rect_min = args[0];
        var rect_max = args[1];
        return bind.IsRectVisible_B(rect_min, rect_max);
    }
}
function GetTime() { return bind.GetTime(); }
function GetFrameCount() { return bind.GetFrameCount(); }
function GetBackgroundDrawList() {
    return new ImDrawList(bind.GetBackgroundDrawList());
}
function GetForegroundDrawList() {
    return new ImDrawList(bind.GetForegroundDrawList());
}
function GetDrawListSharedData() {
    return new ImDrawListSharedData(bind.GetDrawListSharedData());
}
function GetStyleColorName(idx) { return bind.GetStyleColorName(idx); }
// IMGUI_API void          SetStateStorage(ImGuiStorage* tree);
// IMGUI_API ImGuiStorage* GetStateStorage();
function CalcListClipping(items_count, items_height, out_items_display_start, out_items_display_end) {
    return bind.CalcListClipping(items_count, items_height, out_items_display_start, out_items_display_end);
}
function BeginChildFrame(id, size, flags) {
    if (flags === void 0) { flags = 0; }
    return bind.BeginChildFrame(id, size, flags);
}
function EndChildFrame() { bind.EndChildFrame(); }
// Text Utilities
// IMGUI_API ImVec2        CalcTextSize(const char* text, const char* text_end = NULL, bool hide_text_after_double_hash = false, float wrap_width = -1.0f);
function CalcTextSize(text, text_end, hide_text_after_double_hash, wrap_width, out) {
    if (text_end === void 0) { text_end = null; }
    if (hide_text_after_double_hash === void 0) { hide_text_after_double_hash = false; }
    if (wrap_width === void 0) { wrap_width = -1; }
    if (out === void 0) { out = new ImVec2(); }
    return bind.CalcTextSize(text_end !== null ? text.substring(0, text_end) : text, hide_text_after_double_hash, wrap_width, out);
}
// Color Utilities
// IMGUI_API ImVec4        ColorConvertU32ToFloat4(ImU32 in);
// IMGUI_API ImU32         ColorConvertFloat4ToU32(const ImVec4& in);
// IMGUI_API void          ColorConvertRGBtoHSV(float r, float g, float b, float& out_h, float& out_s, float& out_v);
// IMGUI_API void          ColorConvertHSVtoRGB(float h, float s, float v, float& out_r, float& out_g, float& out_b);
function ColorConvertU32ToFloat4(in_, out) {
    if (out === void 0) { out = new ImVec4(); }
    return bind.ColorConvertU32ToFloat4(in_, out);
}
function ColorConvertFloat4ToU32(in_) { return bind.ColorConvertFloat4ToU32(in_); }
function ColorConvertRGBtoHSV(r, g, b, out_h, out_s, out_v) { bind.ColorConvertRGBtoHSV(r, g, b, out_h, out_s, out_v); }
function ColorConvertHSVtoRGB(h, s, v, out_r, out_g, out_b) { bind.ColorConvertHSVtoRGB(h, s, v, out_r, out_g, out_b); }
// Inputs Utilities: Keyboard
// - For 'int user_key_index' you can use your own indices/enums according to how your backend/engine stored them in io.KeysDown[].
// - We don't know the meaning of those value. You can use GetKeyIndex() to map a ImGuiKey_ value into the user index.
// IMGUI_API int           GetKeyIndex(ImGuiKey imgui_key);                                    // map ImGuiKey_* values into user's key index. == io.KeyMap[key]
// IMGUI_API bool          IsKeyDown(int user_key_index);                                      // is key being held. == io.KeysDown[user_key_index].
// IMGUI_API bool          IsKeyPressed(int user_key_index, bool repeat = true);               // was key pressed (went from !Down to Down)? if repeat=true, uses io.KeyRepeatDelay / KeyRepeatRate
// IMGUI_API bool          IsKeyReleased(int user_key_index);                                  // was key released (went from Down to !Down)?
// IMGUI_API int           GetKeyPressedAmount(int key_index, float repeat_delay, float rate); // uses provided repeat rate/delay. return a count, most often 0 or 1 but might be >1 if RepeatRate is small enough that DeltaTime > RepeatRate
// IMGUI_API void          CaptureKeyboardFromApp(bool want_capture_keyboard_value = true);    // attention: misleading name! manually override io.WantCaptureKeyboard flag next frame (said flag is entirely left for your application to handle). e.g. force capture keyboard when your widget is being hovered. This is equivalent to setting "io.WantCaptureKeyboard = want_capture_keyboard_value"; after the next NewFrame() call.
function GetKeyIndex(imgui_key) { return bind.GetKeyIndex(imgui_key); }
function IsKeyDown(user_key_index) { return bind.IsKeyDown(user_key_index); }
function IsKeyPressed(user_key_index, repeat) {
    if (repeat === void 0) { repeat = true; }
    return bind.IsKeyPressed(user_key_index, repeat);
}
function IsKeyReleased(user_key_index) { return bind.IsKeyReleased(user_key_index); }
function GetKeyPressedAmount(user_key_index, repeat_delay, rate) { return bind.GetKeyPressedAmount(user_key_index, repeat_delay, rate); }
function CaptureKeyboardFromApp(capture) {
    if (capture === void 0) { capture = true; }
    return bind.CaptureKeyboardFromApp(capture);
}
// Inputs Utilities: Mouse
// - To refer to a mouse button, you may use named enums in your code e.g. ImGuiMouseButton_Left, ImGuiMouseButton_Right.
// - You can also use regular integer: it is forever guaranteed that 0=Left, 1=Right, 2=Middle.
// - Dragging operations are only reported after mouse has moved a certain distance away from the initial clicking position (see 'lock_threshold' and 'io.MouseDraggingThreshold')
// IMGUI_API bool          IsMouseDown(ImGuiMouseButton button);                               // is mouse button held?
// IMGUI_API bool          IsMouseClicked(ImGuiMouseButton button, bool repeat = false);       // did mouse button clicked? (went from !Down to Down)
// IMGUI_API bool          IsMouseReleased(ImGuiMouseButton button);                           // did mouse button released? (went from Down to !Down)
// IMGUI_API bool          IsMouseDoubleClicked(ImGuiMouseButton button);                      // did mouse button double-clicked? (note that a double-click will also report IsMouseClicked() == true)
// IMGUI_API bool          IsMouseHoveringRect(const ImVec2& r_min, const ImVec2& r_max, bool clip = true);// is mouse hovering given bounding rect (in screen space). clipped by current clipping settings, but disregarding of other consideration of focus/window ordering/popup-block.
// IMGUI_API bool          IsMousePosValid(const ImVec2* mouse_pos = NULL);                    // by convention we use (-FLT_MAX,-FLT_MAX) to denote that there is no mouse available
// IMGUI_API bool          IsAnyMouseDown();                                                   // is any mouse button held?
// IMGUI_API ImVec2        GetMousePos();                                                      // shortcut to ImGui::GetIO().MousePos provided by user, to be consistent with other calls
// IMGUI_API ImVec2        GetMousePosOnOpeningCurrentPopup();                                 // retrieve mouse position at the time of opening popup we have BeginPopup() into (helper to avoid user backing that value themselves)
// IMGUI_API bool          IsMouseDragging(ImGuiMouseButton button, float lock_threshold = -1.0f);         // is mouse dragging? (if lock_threshold < -1.0f, uses io.MouseDraggingThreshold)
// IMGUI_API ImVec2        GetMouseDragDelta(ImGuiMouseButton button = 0, float lock_threshold = -1.0f);   // return the delta from the initial clicking position while the mouse button is pressed or was just released. This is locked and return 0.0f until the mouse moves past a distance threshold at least once (if lock_threshold < -1.0f, uses io.MouseDraggingThreshold)
// IMGUI_API void          ResetMouseDragDelta(ImGuiMouseButton button = 0);                   //
// IMGUI_API ImGuiMouseCursor GetMouseCursor();                                                // get desired cursor type, reset in ImGui::NewFrame(), this is updated during the frame. valid before Render(). If you use software rendering by setting io.MouseDrawCursor ImGui will render those for you
// IMGUI_API void          SetMouseCursor(ImGuiMouseCursor cursor_type);                       // set desired cursor type
// IMGUI_API void          CaptureMouseFromApp(bool want_capture_mouse_value = true);          // attention: misleading name! manually override io.WantCaptureMouse flag next frame (said flag is entirely left for your application to handle). This is equivalent to setting "io.WantCaptureMouse = want_capture_mouse_value;" after the next NewFrame() call.
function IsMouseDown(button) { return bind.IsMouseDown(button); }
function IsMouseClicked(button, repeat) {
    if (repeat === void 0) { repeat = false; }
    return bind.IsMouseClicked(button, repeat);
}
function IsMouseDoubleClicked(button) { return bind.IsMouseDoubleClicked(button); }
function IsMouseReleased(button) { return bind.IsMouseReleased(button); }
function IsMouseHoveringRect(r_min, r_max, clip) {
    if (clip === void 0) { clip = true; }
    return bind.IsMouseHoveringRect(r_min, r_max, clip);
}
function IsMousePosValid(mouse_pos) {
    if (mouse_pos === void 0) { mouse_pos = null; }
    return bind.IsMousePosValid(mouse_pos);
}
function IsAnyMouseDown() { return bind.IsAnyMouseDown(); }
function GetMousePos(out) {
    if (out === void 0) { out = new ImVec2(); }
    return bind.GetMousePos(out);
}
function GetMousePosOnOpeningCurrentPopup(out) {
    if (out === void 0) { out = new ImVec2(); }
    return bind.GetMousePosOnOpeningCurrentPopup(out);
}
function IsMouseDragging(button, lock_threshold) {
    if (button === void 0) { button = 0; }
    if (lock_threshold === void 0) { lock_threshold = -1.0; }
    return bind.IsMouseDragging(button, lock_threshold);
}
function GetMouseDragDelta(button, lock_threshold, out) {
    if (button === void 0) { button = 0; }
    if (lock_threshold === void 0) { lock_threshold = -1.0; }
    if (out === void 0) { out = new ImVec2(); }
    return bind.GetMouseDragDelta(button, lock_threshold, out);
}
function ResetMouseDragDelta(button) {
    if (button === void 0) { button = 0; }
    bind.ResetMouseDragDelta(button);
}
function GetMouseCursor() { return bind.GetMouseCursor(); }
function SetMouseCursor(type) { bind.SetMouseCursor(type); }
function CaptureMouseFromApp(capture) {
    if (capture === void 0) { capture = true; }
    bind.CaptureMouseFromApp(capture);
}
// Clipboard Utilities
// - Also see the LogToClipboard() function to capture GUI into clipboard, or easily output text data to the clipboard.
// IMGUI_API const char*   GetClipboardText();
// IMGUI_API void          SetClipboardText(const char* text);
function GetClipboardText() { return bind.GetClipboardText(); }
function SetClipboardText(text) { bind.SetClipboardText(text); }
// Settings/.Ini Utilities
// - The disk functions are automatically called if io.IniFilename != NULL (default is "imgui.ini").
// - Set io.IniFilename to NULL to load/save manually. Read io.WantSaveIniSettings description about handling .ini saving manually.
// IMGUI_API void          LoadIniSettingsFromDisk(const char* ini_filename);                  // call after CreateContext() and before the first call to NewFrame(). NewFrame() automatically calls LoadIniSettingsFromDisk(io.IniFilename).
// IMGUI_API void          LoadIniSettingsFromMemory(const char* ini_data, size_t ini_size=0); // call after CreateContext() and before the first call to NewFrame() to provide .ini data from your own data source.
// IMGUI_API void          SaveIniSettingsToDisk(const char* ini_filename);                    // this is automatically called (if io.IniFilename is not empty) a few seconds after any modification that should be reflected in the .ini file (and also by DestroyContext).
// IMGUI_API const char*   SaveIniSettingsToMemory(size_t* out_ini_size = NULL);               // return a zero-terminated string with the .ini data which you can save by your own mean. call when io.WantSaveIniSettings is set, then save data by your own mean and clear io.WantSaveIniSettings.
function LoadIniSettingsFromDisk(ini_filename) { throw new Error(); } // TODO
function LoadIniSettingsFromMemory(ini_data, ini_size) {
    if (ini_size === void 0) { ini_size = 0; }
    bind.LoadIniSettingsFromMemory(ini_data);
}
function SaveIniSettingsToDisk(ini_filename) { throw new Error(); } // TODO
function SaveIniSettingsToMemory(out_ini_size) {
    if (out_ini_size === void 0) { out_ini_size = null; }
    return bind.SaveIniSettingsToMemory();
}
// Debug Utilities
// IMGUI_API bool          DebugCheckVersionAndDataLayout(const char* version_str, size_t sz_io, size_t sz_style, size_t sz_vec2, size_t sz_vec4, size_t sz_drawvert, size_t sz_drawidx); // This is called by IMGUI_CHECKVERSION() macro.
function DebugCheckVersionAndDataLayout(version_str, sz_io, sz_style, sz_vec2, sz_vec4, sz_draw_vert, sz_draw_idx) {
    return bind.DebugCheckVersionAndDataLayout(version_str, sz_io, sz_style, sz_vec2, sz_vec4, sz_draw_vert, sz_draw_idx);
}
// Memory Allocators
// - All those functions are not reliant on the current context.
// - If you reload the contents of imgui.cpp at runtime, you may need to call SetCurrentContext() + SetAllocatorFunctions() again because we use global storage for those.
// IMGUI_API void          SetAllocatorFunctions(void* (*alloc_func)(size_t sz, void* user_data), void (*free_func)(void* ptr, void* user_data), void* user_data = NULL);
// IMGUI_API void*         MemAlloc(size_t size);
// IMGUI_API void          MemFree(void* ptr);
function SetAllocatorFunctions(alloc_func, free_func, user_data) {
    if (user_data === void 0) { user_data = null; }
    bind.SetAllocatorFunctions(alloc_func, free_func, user_data);
}
function MemAlloc(sz) { bind.MemAlloc(sz); }
function MemFree(ptr) { bind.MemFree(ptr); }


/***/ }),

/***/ "./src/imgui_impl.ts":
/*!***************************!*\
  !*** ./src/imgui_impl.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "canvas": () => (/* binding */ canvas),
/* harmony export */   "canvas_scale": () => (/* binding */ canvas_scale),
/* harmony export */   "font_scale": () => (/* binding */ font_scale),
/* harmony export */   "setCanvasScale": () => (/* binding */ setCanvasScale),
/* harmony export */   "setFontScale": () => (/* binding */ setFontScale),
/* harmony export */   "gl": () => (/* binding */ gl),
/* harmony export */   "ctx": () => (/* binding */ ctx),
/* harmony export */   "any_pointerdown": () => (/* binding */ any_pointerdown),
/* harmony export */   "is_contextlost": () => (/* binding */ is_contextlost),
/* harmony export */   "add_key_event": () => (/* binding */ add_key_event),
/* harmony export */   "remove_key_event": () => (/* binding */ remove_key_event),
/* harmony export */   "Init": () => (/* binding */ Init),
/* harmony export */   "Shutdown": () => (/* binding */ Shutdown),
/* harmony export */   "ClearBuffer": () => (/* binding */ ClearBuffer),
/* harmony export */   "NewFrame": () => (/* binding */ NewFrame),
/* harmony export */   "dom_font": () => (/* binding */ dom_font),
/* harmony export */   "RenderDrawData": () => (/* binding */ RenderDrawData),
/* harmony export */   "CreateFontsTexture": () => (/* binding */ CreateFontsTexture),
/* harmony export */   "DestroyFontsTexture": () => (/* binding */ DestroyFontsTexture),
/* harmony export */   "CreateDeviceObjects": () => (/* binding */ CreateDeviceObjects),
/* harmony export */   "DestroyDeviceObjects": () => (/* binding */ DestroyDeviceObjects),
/* harmony export */   "Texture": () => (/* binding */ Texture),
/* harmony export */   "FrameBufferObject": () => (/* binding */ FrameBufferObject),
/* harmony export */   "Shader": () => (/* binding */ Shader)
/* harmony export */ });
/* harmony import */ var _font__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./font */ "./src/font.ts");
/* harmony import */ var _imgui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./imgui */ "./src/imgui.ts");


var clipboard_text = "";
var canvas = null;
var canvas_scale = _imgui__WEBPACK_IMPORTED_MODULE_1__.isMobile.any() ? 1 : window.devicePixelRatio;
var font_scale = Math.max(window.devicePixelRatio, 1.5);
function setCanvasScale(scale) {
    canvas_scale = scale;
}
function setFontScale(scale) {
    font_scale = scale;
}
var gl = null;
var g_ShaderHandle = null;
var g_VertHandle = null;
var g_FragHandle = null;
var g_AttribLocationTex = null;
var g_AttribLocationProjMtx = null;
var g_AttribLocationPosition = -1;
var g_AttribLocationUV = -1;
var g_AttribLocationColor = -1;
var g_VboHandle = null;
var g_ElementsHandle = null;
var g_FontTexture = null;
var enable_vao = true;
var g_vao;
var ctx = null;
var prev_time = 0;
function document_on_copy(event) {
    if (event.clipboardData) {
        event.clipboardData.setData("text/plain", clipboard_text);
    }
    // console.log(`${event.type}: "${clipboard_text}"`);
    event.preventDefault();
}
function document_on_cut(event) {
    if (event.clipboardData) {
        event.clipboardData.setData("text/plain", clipboard_text);
    }
    // console.log(`${event.type}: "${clipboard_text}"`);
    event.preventDefault();
}
function document_on_paste(event) {
    if (event.clipboardData) {
        clipboard_text = event.clipboardData.getData("text/plain");
    }
    // console.log(`${event.type}: "${clipboard_text}"`);
    event.preventDefault();
}
function window_on_resize() {
    if (canvas !== null) {
        canvas.width = canvas.scrollWidth * canvas_scale;
        canvas.height = canvas.scrollHeight * canvas_scale;
        //canvas.width = canvas.scrollWidth;
        //canvas.height = canvas.scrollHeight;
    }
}
function window_on_gamepadconnected(event /* GamepadEvent */) {
    console.log("Gamepad connected at index %d: %s. %d buttons, %d axes.", event.gamepad.index, event.gamepad.id, event.gamepad.buttons.length, event.gamepad.axes.length);
}
function window_on_gamepaddisconnected(event /* GamepadEvent */) {
    console.log("Gamepad disconnected at index %d: %s.", event.gamepad.index, event.gamepad.id);
}
function canvas_on_blur(event) {
    var io = _imgui__WEBPACK_IMPORTED_MODULE_1__.GetIO();
    io.KeyCtrl = false;
    io.KeyShift = false;
    io.KeyAlt = false;
    io.KeySuper = false;
    for (var i = 0; i < io.KeysDown.length; ++i) {
        io.KeysDown[i] = false;
    }
    for (var i = 0; i < io.MouseDown.length; ++i) {
        io.MouseDown[i] = false;
    }
    console.log("canvas_on_blur");
}
var key_code_to_index = {
    "NumpadEnter": 176,
};
function canvas_on_keydown(event) {
    // console.log(event.type, event.key, event.code, event.keyCode);
    var io = _imgui__WEBPACK_IMPORTED_MODULE_1__.GetIO();
    io.KeyCtrl = event.ctrlKey;
    io.KeyShift = event.shiftKey;
    io.KeyAlt = event.altKey;
    io.KeySuper = event.metaKey;
    var key_index = key_code_to_index[event.code] || event.keyCode;
    _imgui__WEBPACK_IMPORTED_MODULE_1__.ASSERT(key_index >= 0 && key_index < _imgui__WEBPACK_IMPORTED_MODULE_1__.ARRAYSIZE(io.KeysDown));
    io.KeysDown[key_index] = true;
    // forward to the keypress event
    if ( /*io.WantCaptureKeyboard ||*/event.key === "Tab") {
        event.preventDefault();
    }
}
function canvas_on_keyup(event) {
    // console.log(event.type, event.key, event.code, event.keyCode);
    var io = _imgui__WEBPACK_IMPORTED_MODULE_1__.GetIO();
    io.KeyCtrl = event.ctrlKey;
    io.KeyShift = event.shiftKey;
    io.KeyAlt = event.altKey;
    io.KeySuper = event.metaKey;
    var key_index = key_code_to_index[event.code] || event.keyCode;
    _imgui__WEBPACK_IMPORTED_MODULE_1__.ASSERT(key_index >= 0 && key_index < _imgui__WEBPACK_IMPORTED_MODULE_1__.ARRAYSIZE(io.KeysDown));
    io.KeysDown[key_index] = false;
    if (io.WantCaptureKeyboard) {
        event.preventDefault();
    }
}
function canvas_on_keypress(event) {
    // console.log(event.type, event.key, event.code, event.keyCode);
    var io = _imgui__WEBPACK_IMPORTED_MODULE_1__.GetIO();
    io.AddInputCharacter(event.charCode);
    if (io.WantCaptureKeyboard) {
        event.preventDefault();
    }
}
function canvas_on_pointermove(event) {
    var io = _imgui__WEBPACK_IMPORTED_MODULE_1__.GetIO();
    io.MousePos.x = event.offsetX;
    io.MousePos.y = event.offsetY;
    if (io.WantCaptureMouse) {
        event.preventDefault();
    }
}
// MouseEvent.button
// A number representing a given button:
// 0: Main button pressed, usually the left button or the un-initialized state
// 1: Auxiliary button pressed, usually the wheel button or the middle button (if present)
// 2: Secondary button pressed, usually the right button
// 3: Fourth button, typically the Browser Back button
// 4: Fifth button, typically the Browser Forward button
var mouse_button_map = [0, 2, 1, 3, 4];
function any_pointerdown() {
    var io = _imgui__WEBPACK_IMPORTED_MODULE_1__.GetIO();
    for (var i = 0; i < io.MouseDown.length; i++) {
        if (io.MouseDown[i])
            return true;
    }
    return false;
}
function canvas_on_pointerdown(event) {
    var io = _imgui__WEBPACK_IMPORTED_MODULE_1__.GetIO();
    io.MousePos.x = event.offsetX;
    io.MousePos.y = event.offsetY;
    io.MouseDown[mouse_button_map[event.button]] = true;
    // if (io.WantCaptureMouse) {
    //     event.preventDefault();
    // }
    //console.log("canvas_on_pointerdown", event);
}
function canvas_on_contextmenu(event) {
    var io = _imgui__WEBPACK_IMPORTED_MODULE_1__.GetIO();
    if (io.WantCaptureMouse) {
        event.preventDefault();
    }
}
function canvas_on_pointerup(event) {
    var io = _imgui__WEBPACK_IMPORTED_MODULE_1__.GetIO();
    io.MouseDown[mouse_button_map[event.button]] = false;
    if (io.WantCaptureMouse) {
        event.preventDefault();
    }
    //console.log("canvas_on_pointerup", event);
}
function canvas_on_wheel(event) {
    var io = _imgui__WEBPACK_IMPORTED_MODULE_1__.GetIO();
    var scale = 1.0;
    switch (event.deltaMode) {
        case event.DOM_DELTA_PIXEL:
            scale = 0.01;
            break;
        case event.DOM_DELTA_LINE:
            scale = 0.2;
            break;
        case event.DOM_DELTA_PAGE:
            scale = 1.0;
            break;
    }
    io.MouseWheelH = event.deltaX * scale;
    io.MouseWheel = -event.deltaY * scale; // Mouse wheel: 1 unit scrolls about 5 lines text.
    if (io.WantCaptureMouse) {
        event.preventDefault();
    }
}
var is_contextlost = false;
function add_key_event() {
    window.addEventListener("keydown", canvas_on_keydown);
    window.addEventListener("keyup", canvas_on_keyup);
    window.addEventListener("keypress", canvas_on_keypress);
}
function remove_key_event() {
    window.removeEventListener("keydown", canvas_on_keydown);
    window.removeEventListener("keyup", canvas_on_keyup);
    window.removeEventListener("keypress", canvas_on_keypress);
}
function canvas_on_contextlost(e) {
    e.preventDefault();
    console.log("canvas_on_contextlost");
    is_contextlost = true;
}
function canvas_on_contextrestored(e) {
    console.log("canvas_on_contextrestored");
    Init(canvas);
    is_contextlost = false;
}
function Init(value) {
    var io = _imgui__WEBPACK_IMPORTED_MODULE_1__.GetIO();
    if (typeof (window) !== "undefined") {
        io.BackendPlatformName = "imgui_impl_browser";
        _imgui__WEBPACK_IMPORTED_MODULE_1__.LoadIniSettingsFromMemory(window.localStorage.getItem("imgui.ini") || "");
    }
    else {
        io.BackendPlatformName = "imgui_impl_console";
    }
    if (typeof (navigator) !== "undefined") {
        io.ConfigMacOSXBehaviors = navigator.platform.match(/Mac/) !== null;
    }
    /*
    if (typeof(document) !== "undefined") {
        document.body.addEventListener("copy", document_on_copy);
        document.body.addEventListener("cut", document_on_cut);
        document.body.addEventListener("paste", document_on_paste);
    }
    */
    io.SetClipboardTextFn = function (user_data, text) {
        clipboard_text = text;
        // console.log(`set clipboard_text: "${clipboard_text}"`);
        if (typeof navigator !== "undefined" && typeof navigator.clipboard !== "undefined") {
            // console.log(`clipboard.writeText: "${clipboard_text}"`);
            navigator.clipboard.writeText(clipboard_text).then(function () {
                // console.log(`clipboard.writeText: "${clipboard_text}" done.`);
            });
        }
    };
    io.GetClipboardTextFn = function (user_data) {
        // if (typeof navigator !== "undefined" && typeof (navigator as any).clipboard !== "undefined") {
        //     console.log(`clipboard.readText: "${clipboard_text}"`);
        //     (navigator as any).clipboard.readText().then((text: string): void => {
        //         clipboard_text = text;
        //         console.log(`clipboard.readText: "${clipboard_text}" done.`);
        //     });
        // }
        // console.log(`get clipboard_text: "${clipboard_text}"`);
        return clipboard_text;
    };
    io.ClipboardUserData = null;
    if (typeof (window) !== "undefined") {
        window.addEventListener("resize", window_on_resize);
        window.addEventListener("gamepadconnected", window_on_gamepadconnected);
        window.addEventListener("gamepaddisconnected", window_on_gamepaddisconnected);
    }
    if (typeof (window) !== "undefined") {
        if (value instanceof (HTMLCanvasElement)) {
            canvas = value;
            value = canvas.getContext("webgl2", { alpha: false }) || canvas.getContext("webgl", { alpha: false }) || canvas.getContext("2d");
        }
        if (typeof WebGL2RenderingContext !== "undefined" && value instanceof (WebGL2RenderingContext)) {
            io.BackendRendererName = "imgui_impl_webgl2";
            canvas = canvas || value.canvas;
            gl = value;
        }
        else if (typeof WebGLRenderingContext !== "undefined" && value instanceof (WebGLRenderingContext)) {
            io.BackendRendererName = "imgui_impl_webgl";
            canvas = canvas || value.canvas;
            gl = value;
        }
        else if (typeof CanvasRenderingContext2D !== "undefined" && value instanceof (CanvasRenderingContext2D)) {
            io.BackendRendererName = "imgui_impl_2d";
            canvas = canvas || value.canvas;
            ctx = value;
        }
    }
    if (canvas !== null) {
        window_on_resize();
        canvas.style.touchAction = "none"; // Disable browser handling of all panning and zooming gestures.
        canvas.addEventListener("blur", canvas_on_blur);
        add_key_event();
        canvas.addEventListener("pointermove", canvas_on_pointermove);
        window.addEventListener("pointerdown", canvas_on_pointerdown);
        canvas.addEventListener("contextmenu", canvas_on_contextmenu);
        window.addEventListener("pointerup", canvas_on_pointerup);
        canvas.addEventListener("wheel", canvas_on_wheel);
        canvas.addEventListener('webglcontextlost', canvas_on_contextlost, false);
        canvas.addEventListener('webglcontextrestored', canvas_on_contextrestored, false);
    }
    // Setup back-end capabilities flags
    io.BackendFlags |= _imgui__WEBPACK_IMPORTED_MODULE_1__.BackendFlags.HasMouseCursors; // We can honor GetMouseCursor() values (optional)
    // Keyboard mapping. ImGui will use those indices to peek into the io.KeyDown[] array.
    io.KeyMap[_imgui__WEBPACK_IMPORTED_MODULE_1__.Key.Tab] = 9;
    io.KeyMap[_imgui__WEBPACK_IMPORTED_MODULE_1__.Key.LeftArrow] = 37;
    io.KeyMap[_imgui__WEBPACK_IMPORTED_MODULE_1__.Key.RightArrow] = 39;
    io.KeyMap[_imgui__WEBPACK_IMPORTED_MODULE_1__.Key.UpArrow] = 38;
    io.KeyMap[_imgui__WEBPACK_IMPORTED_MODULE_1__.Key.DownArrow] = 40;
    io.KeyMap[_imgui__WEBPACK_IMPORTED_MODULE_1__.Key.PageUp] = 33;
    io.KeyMap[_imgui__WEBPACK_IMPORTED_MODULE_1__.Key.PageDown] = 34;
    io.KeyMap[_imgui__WEBPACK_IMPORTED_MODULE_1__.Key.Home] = 36;
    io.KeyMap[_imgui__WEBPACK_IMPORTED_MODULE_1__.Key.End] = 35;
    io.KeyMap[_imgui__WEBPACK_IMPORTED_MODULE_1__.Key.Insert] = 45;
    io.KeyMap[_imgui__WEBPACK_IMPORTED_MODULE_1__.Key.Delete] = 46;
    io.KeyMap[_imgui__WEBPACK_IMPORTED_MODULE_1__.Key.Backspace] = 8;
    io.KeyMap[_imgui__WEBPACK_IMPORTED_MODULE_1__.Key.Space] = 32;
    io.KeyMap[_imgui__WEBPACK_IMPORTED_MODULE_1__.Key.Enter] = 13;
    io.KeyMap[_imgui__WEBPACK_IMPORTED_MODULE_1__.Key.Escape] = 27;
    io.KeyMap[_imgui__WEBPACK_IMPORTED_MODULE_1__.Key.KeyPadEnter] = key_code_to_index["NumpadEnter"];
    io.KeyMap[_imgui__WEBPACK_IMPORTED_MODULE_1__.Key.A] = 65;
    io.KeyMap[_imgui__WEBPACK_IMPORTED_MODULE_1__.Key.C] = 67;
    io.KeyMap[_imgui__WEBPACK_IMPORTED_MODULE_1__.Key.V] = 86;
    io.KeyMap[_imgui__WEBPACK_IMPORTED_MODULE_1__.Key.X] = 88;
    io.KeyMap[_imgui__WEBPACK_IMPORTED_MODULE_1__.Key.Y] = 89;
    io.KeyMap[_imgui__WEBPACK_IMPORTED_MODULE_1__.Key.Z] = 90;
    CreateDeviceObjects();
}
function Shutdown() {
    DestroyDeviceObjects();
    remove_key_event();
    if (canvas !== null) {
        canvas.removeEventListener("blur", canvas_on_blur);
        canvas.removeEventListener("pointermove", canvas_on_pointermove);
        canvas.removeEventListener("pointerdown", canvas_on_pointerdown);
        canvas.removeEventListener("contextmenu", canvas_on_contextmenu);
        canvas.removeEventListener("pointerup", canvas_on_pointerup);
        canvas.removeEventListener("wheel", canvas_on_wheel);
    }
    gl = null;
    ctx = null;
    canvas = null;
    if (typeof (window) !== "undefined") {
        window.removeEventListener("resize", window_on_resize);
        window.removeEventListener("gamepadconnected", window_on_gamepadconnected);
        window.removeEventListener("gamepaddisconnected", window_on_gamepaddisconnected);
    }
    if (typeof (document) !== "undefined") {
        document.body.removeEventListener("copy", document_on_copy);
        document.body.removeEventListener("cut", document_on_cut);
        document.body.removeEventListener("paste", document_on_paste);
    }
}
function ClearBuffer(color, bufferBit) {
    if (bufferBit === void 0) { bufferBit = gl.COLOR_BUFFER_BIT; }
    gl.clearColor(color.x, color.y, color.z, color.w);
    gl.clear(bufferBit);
}
function NewFrame(time) {
    var io = _imgui__WEBPACK_IMPORTED_MODULE_1__.GetIO();
    if (io.WantSaveIniSettings) {
        io.WantSaveIniSettings = false;
        if (typeof (window) !== "undefined") {
            window.localStorage.setItem("imgui.ini", _imgui__WEBPACK_IMPORTED_MODULE_1__.SaveIniSettingsToMemory());
        }
    }
    var w = canvas && canvas.scrollWidth || 640;
    var h = canvas && canvas.scrollHeight || 480;
    var display_w = gl && gl.drawingBufferWidth || w;
    var display_h = gl && gl.drawingBufferHeight || h;
    io.DisplaySize.x = w;
    io.DisplaySize.y = h;
    io.DisplayFramebufferScale.x = w > 0 ? (display_w / w) : 0;
    io.DisplayFramebufferScale.y = h > 0 ? (display_h / h) : 0;
    var dt = time - prev_time;
    prev_time = time;
    io.DeltaTime = dt / 1000;
    if (io.WantSetMousePos) {
        console.log("TODO: MousePos", io.MousePos.x, io.MousePos.y);
    }
    if (typeof (document) !== "undefined") {
        if (io.MouseDrawCursor) {
            document.body.style.cursor = "none";
        }
        else {
            switch (_imgui__WEBPACK_IMPORTED_MODULE_1__.GetMouseCursor()) {
                case _imgui__WEBPACK_IMPORTED_MODULE_1__.MouseCursor.None:
                    document.body.style.cursor = "none";
                    break;
                default:
                case _imgui__WEBPACK_IMPORTED_MODULE_1__.MouseCursor.Arrow:
                    document.body.style.cursor = "default";
                    break;
                case _imgui__WEBPACK_IMPORTED_MODULE_1__.MouseCursor.TextInput:
                    document.body.style.cursor = "text";
                    break; // When hovering over InputText, etc.
                case _imgui__WEBPACK_IMPORTED_MODULE_1__.MouseCursor.ResizeAll:
                    document.body.style.cursor = "all-scroll";
                    break; // Unused
                case _imgui__WEBPACK_IMPORTED_MODULE_1__.MouseCursor.ResizeNS:
                    document.body.style.cursor = "ns-resize";
                    break; // When hovering over an horizontal border
                case _imgui__WEBPACK_IMPORTED_MODULE_1__.MouseCursor.ResizeEW:
                    document.body.style.cursor = "ew-resize";
                    break; // When hovering over a vertical border or a column
                case _imgui__WEBPACK_IMPORTED_MODULE_1__.MouseCursor.ResizeNESW:
                    document.body.style.cursor = "nesw-resize";
                    break; // When hovering over the bottom-left corner of a window
                case _imgui__WEBPACK_IMPORTED_MODULE_1__.MouseCursor.ResizeNWSE:
                    document.body.style.cursor = "nwse-resize";
                    break; // When hovering over the bottom-right corner of a window
                case _imgui__WEBPACK_IMPORTED_MODULE_1__.MouseCursor.Hand:
                    document.body.style.cursor = "move";
                    break;
                case _imgui__WEBPACK_IMPORTED_MODULE_1__.MouseCursor.NotAllowed:
                    document.body.style.cursor = "not-allowed";
                    break;
            }
        }
    }
    // Gamepad navigation mapping [BETA]
    for (var i = 0; i < io.NavInputs.length; ++i) {
        // TODO: This is currently causing an issue and I have no gamepad to test with.
        //       The error is: ''set' on proxy: trap returned falsish for property '21'
        //       I think that the NavInputs are zeroed out by ImGui at the start of each frame anyway
        //       so I am not sure if the following is even necessary.
        //io.NavInputs[i] = 0.0;
    }
    if (io.ConfigFlags & _imgui__WEBPACK_IMPORTED_MODULE_1__.ConfigFlags.NavEnableGamepad) {
        // Update gamepad inputs
        var gamepads = (typeof (navigator) !== "undefined" && typeof (navigator.getGamepads) === "function") ? navigator.getGamepads() : [];
        var _loop_1 = function (i) {
            var gamepad = gamepads[i];
            if (!gamepad) {
                return "continue";
            }
            io.BackendFlags |= _imgui__WEBPACK_IMPORTED_MODULE_1__.BackendFlags.HasGamepad;
            var buttons_count = gamepad.buttons.length;
            var axes_count = gamepad.axes.length;
            MAP_BUTTON = function MAP_BUTTON(NAV_NO, BUTTON_NO) {
                if (!gamepad) {
                    return;
                }
                if (buttons_count > BUTTON_NO && gamepad.buttons[BUTTON_NO].pressed)
                    io.NavInputs[NAV_NO] = 1.0;
            };
            MAP_ANALOG = function MAP_ANALOG(NAV_NO, AXIS_NO, V0, V1) {
                if (!gamepad) {
                    return;
                }
                var v = (axes_count > AXIS_NO) ? gamepad.axes[AXIS_NO] : V0;
                v = (v - V0) / (V1 - V0);
                if (v > 1.0)
                    v = 1.0;
                if (io.NavInputs[NAV_NO] < v)
                    io.NavInputs[NAV_NO] = v;
            };
            // TODO: map input based on vendor and product id
            // https://developer.mozilla.org/en-US/docs/Web/API/Gamepad/id
            var match = gamepad.id.match(/^([0-9a-f]{4})-([0-9a-f]{4})-.*$/);
            var match_chrome = gamepad.id.match(/^.*\(.*Vendor: ([0-9a-f]{4}) Product: ([0-9a-f]{4})\).*$/);
            var vendor = (match && match[1]) || (match_chrome && match_chrome[1]) || "0000";
            var product = (match && match[2]) || (match_chrome && match_chrome[2]) || "0000";
            switch (vendor + product) {
                case "046dc216": // Logitech Logitech Dual Action (Vendor: 046d Product: c216)
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.Activate, 1); // Cross / A
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.Cancel, 2); // Circle / B
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.Menu, 0); // Square / X
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.Input, 3); // Triangle / Y
                    MAP_ANALOG(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.DpadLeft, 4, -0.3, -0.9); // D-Pad Left
                    MAP_ANALOG(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.DpadRight, 4, +0.3, +0.9); // D-Pad Right
                    MAP_ANALOG(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.DpadUp, 5, -0.3, -0.9); // D-Pad Up
                    MAP_ANALOG(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.DpadDown, 5, +0.3, +0.9); // D-Pad Down
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.FocusPrev, 4); // L1 / LB
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.FocusNext, 5); // R1 / RB
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.TweakSlow, 6); // L2 / LT
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.TweakFast, 7); // R2 / RT
                    MAP_ANALOG(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.LStickLeft, 0, -0.3, -0.9);
                    MAP_ANALOG(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.LStickRight, 0, +0.3, +0.9);
                    MAP_ANALOG(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.LStickUp, 1, -0.3, -0.9);
                    MAP_ANALOG(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.LStickDown, 1, +0.3, +0.9);
                    break;
                case "046dc21d": // Logitech Gamepad F310 (STANDARD GAMEPAD Vendor: 046d Product: c21d)
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.Activate, 0); // Cross / A
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.Cancel, 1); // Circle / B
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.Menu, 2); // Square / X
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.Input, 3); // Triangle / Y
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.DpadLeft, 14); // D-Pad Left
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.DpadRight, 15); // D-Pad Right
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.DpadUp, 12); // D-Pad Up
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.DpadDown, 13); // D-Pad Down
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.FocusPrev, 4); // L1 / LB
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.FocusNext, 5); // R1 / RB
                    MAP_ANALOG(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.TweakSlow, 6, +0.3, +0.9); // L2 / LT
                    MAP_ANALOG(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.TweakFast, 7, +0.3, +0.9); // R2 / RT
                    MAP_ANALOG(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.LStickLeft, 0, -0.3, -0.9);
                    MAP_ANALOG(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.LStickRight, 0, +0.3, +0.9);
                    MAP_ANALOG(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.LStickUp, 1, -0.3, -0.9);
                    MAP_ANALOG(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.LStickDown, 1, +0.3, +0.9);
                    break;
                case "2dc86001": // 8Bitdo SN30 Pro  8Bitdo SN30 Pro (Vendor: 2dc8 Product: 6001)
                case "2dc86101": // 8Bitdo SN30 Pro (Vendor: 2dc8 Product: 6101)
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.Activate, 1); // Cross / A
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.Cancel, 0); // Circle / B
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.Menu, 4); // Square / X
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.Input, 3); // Triangle / Y
                    MAP_ANALOG(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.DpadLeft, 6, -0.3, -0.9); // D-Pad Left
                    MAP_ANALOG(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.DpadRight, 6, +0.3, +0.9); // D-Pad Right
                    MAP_ANALOG(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.DpadUp, 7, -0.3, -0.9); // D-Pad Up
                    MAP_ANALOG(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.DpadDown, 7, +0.3, +0.9); // D-Pad Down
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.FocusPrev, 6); // L1 / LB
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.FocusNext, 7); // R1 / RB
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.TweakSlow, 8); // L2 / LT
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.TweakFast, 9); // R2 / RT
                    MAP_ANALOG(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.LStickLeft, 0, -0.3, -0.9);
                    MAP_ANALOG(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.LStickRight, 0, +0.3, +0.9);
                    MAP_ANALOG(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.LStickUp, 1, -0.3, -0.9);
                    MAP_ANALOG(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.LStickDown, 1, +0.3, +0.9);
                    break;
                default: // standard gamepad: https://w3c.github.io/gamepad/#remapping
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.Activate, 0); // Cross / A
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.Cancel, 1); // Circle / B
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.Menu, 2); // Square / X
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.Input, 3); // Triangle / Y
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.DpadLeft, 14); // D-Pad Left
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.DpadRight, 15); // D-Pad Right
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.DpadUp, 12); // D-Pad Up
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.DpadDown, 13); // D-Pad Down
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.FocusPrev, 4); // L1 / LB
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.FocusNext, 5); // R1 / RB
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.TweakSlow, 6); // L2 / LT
                    MAP_BUTTON(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.TweakFast, 7); // R2 / RT
                    MAP_ANALOG(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.LStickLeft, 0, -0.3, -0.9);
                    MAP_ANALOG(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.LStickRight, 0, +0.3, +0.9);
                    MAP_ANALOG(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.LStickUp, 1, -0.3, -0.9);
                    MAP_ANALOG(_imgui__WEBPACK_IMPORTED_MODULE_1__.NavInput.LStickDown, 1, +0.3, +0.9);
                    break;
            }
        };
        var MAP_BUTTON, MAP_ANALOG;
        for (var i = 0; i < gamepads.length; ++i) {
            _loop_1(i);
        }
    }
}
function toRgba(col) {
    var r = (col >>> 24);
    var g = (col >> 16) & 0xFF;
    var b = (col >> 8) & 0xFF;
    var a = (col & 0xFF);
    return 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';
}
var dom_font = new _font__WEBPACK_IMPORTED_MODULE_0__.Font;
function font_update(io) {
    io.Fonts.Fonts.forEach(function (font) {
        font.IterateGlyphToCreate.forEach(function (glyph) {
            glyph = dom_font.Create(glyph, font);
            font.GlyphCreated(glyph);
        });
        /*
        let glyph=font.GlyphToCreate;
        while(glyph)   {
            glyph=dom_font.Create(glyph, font);
            font.GlyphCreated(glyph);
            glyph=font.GlyphToCreate;
        }
        */
    });
    dom_font.UpdateTexture();
}
function RenderDrawData(draw_data) {
    if (draw_data === void 0) { draw_data = _imgui__WEBPACK_IMPORTED_MODULE_1__.GetDrawData(); }
    var io = _imgui__WEBPACK_IMPORTED_MODULE_1__.GetIO();
    font_update(io);
    if (draw_data === null) {
        throw new Error();
    }
    gl || ctx || console.log(draw_data);
    // Avoid rendering when minimized, scale coordinates for retina displays (screen coordinates != framebuffer coordinates)
    var fb_width = io.DisplaySize.x * io.DisplayFramebufferScale.x;
    var fb_height = io.DisplaySize.y * io.DisplayFramebufferScale.y;
    if (fb_width === 0 || fb_height === 0) {
        return;
    }
    draw_data.ScaleClipRects(io.DisplayFramebufferScale);
    var gl2 = typeof WebGL2RenderingContext !== "undefined" && gl instanceof WebGL2RenderingContext && gl || null;
    var gl_vao = gl && gl.getExtension("OES_vertex_array_object") || null;
    // Backup GL state
    //const last_active_texture: GLenum | null = gl && gl.getParameter(gl.ACTIVE_TEXTURE) || null;
    //const last_program: WebGLProgram | null = gl && gl.getParameter(gl.CURRENT_PROGRAM) || null;
    //const last_texture: WebGLTexture | null = gl && gl.getParameter(gl.TEXTURE_BINDING_2D) || null;
    //const last_array_buffer: WebGLBuffer | null = gl && gl.getParameter(gl.ARRAY_BUFFER_BINDING) || null;
    //const last_element_array_buffer: WebGLBuffer | null = gl && gl.getParameter(gl.ELEMENT_ARRAY_BUFFER_BINDING) || null;
    //const last_vertex_array_object: WebGLVertexArrayObject | WebGLVertexArrayObjectOES | null = gl2 && gl2.getParameter(gl2.VERTEX_ARRAY_BINDING) || gl && gl_vao && gl.getParameter(gl_vao.VERTEX_ARRAY_BINDING_OES) || null;
    // GLint last_polygon_mode[2]; glGetIntegerv(GL_POLYGON_MODE, last_polygon_mode);
    //const last_viewport: Int32Array | null = gl && gl.getParameter(gl.VIEWPORT) || null;
    //const last_scissor_box: Int32Array | null = gl && gl.getParameter(gl.SCISSOR_BOX) || null;
    //const last_blend_src_rgb: GLenum | null = gl && gl.getParameter(gl.BLEND_SRC_RGB) || null;
    //const last_blend_dst_rgb: GLenum | null = gl && gl.getParameter(gl.BLEND_DST_RGB) || null;
    //const last_blend_src_alpha: GLenum | null = gl && gl.getParameter(gl.BLEND_SRC_ALPHA) || null;
    //const last_blend_dst_alpha: GLenum | null = gl && gl.getParameter(gl.BLEND_DST_ALPHA) || null;
    //const last_blend_equation_rgb: GLenum | null = gl && gl.getParameter(gl.BLEND_EQUATION_RGB) || null;
    //const last_blend_equation_alpha: GLenum | null = gl && gl.getParameter(gl.BLEND_EQUATION_ALPHA) || null;
    //const last_enable_blend: GLboolean | null = gl && gl.getParameter(gl.BLEND) || null;
    //const last_enable_cull_face: GLboolean | null = gl && gl.getParameter(gl.CULL_FACE) || null;
    //const last_enable_depth_test: GLboolean | null = gl && gl.getParameter(gl.DEPTH_TEST) || null;
    //const last_enable_scissor_test: GLboolean | null = gl && gl.getParameter(gl.SCISSOR_TEST) || null;
    var last_enable_scissor_test = false;
    // Setup desired GL state
    // Recreate the VAO every time (this is to easily allow multiple GL contexts to be rendered to. VAO are not shared among GL contexts)
    // The renderer would actually work without any VAO bound, but then our VertexAttrib calls would overwrite the default one currently bound.
    // Setup render state: alpha-blending enabled, no face culling, no depth testing, scissor enabled, polygon fill
    gl && gl.enable(gl.BLEND);
    gl && gl.blendEquation(gl.FUNC_ADD);
    gl && gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);
    gl && gl.disable(gl.CULL_FACE);
    gl && gl.disable(gl.DEPTH_TEST);
    gl && gl.enable(gl.SCISSOR_TEST);
    // glPolygonMode(GL_FRONT_AND_BACK, GL_FILL);
    // Setup viewport, orthographic projection matrix
    // Our visible imgui space lies from draw_data->DisplayPps (top left) to draw_data->DisplayPos+data_data->DisplaySize (bottom right). DisplayMin is typically (0,0) for single viewport apps.
    gl && gl.viewport(0, 0, fb_width, fb_height);
    var L = draw_data.DisplayPos.x;
    var R = draw_data.DisplayPos.x + draw_data.DisplaySize.x;
    var T = draw_data.DisplayPos.y;
    var B = draw_data.DisplayPos.y + draw_data.DisplaySize.y;
    var ortho_projection = new Float32Array([
        2.0 / (R - L), 0.0, 0.0, 0.0,
        0.0, 2.0 / (T - B), 0.0, 0.0,
        0.0, 0.0, -1.0, 0.0,
        (R + L) / (L - R), (T + B) / (B - T), 0.0, 1.0,
    ]);
    gl && gl.useProgram(g_ShaderHandle);
    gl && gl.uniform1i(g_AttribLocationTex, 0);
    gl && g_AttribLocationProjMtx && gl.uniformMatrix4fv(g_AttribLocationProjMtx, false, ortho_projection);
    var enable_vao = false;
    if (enable_vao) {
        if (!g_vao) {
            g_vao = gl2 && gl2.createVertexArray(); // || gl_vao && gl_vao.createVertexArrayOES();
        }
        gl2 && gl2.bindVertexArray(g_vao);
        //gl_vao && gl_vao.bindVertexArrayOES(vertex_array_object);
    }
    // Render command lists
    gl && gl.bindBuffer(gl.ARRAY_BUFFER, g_VboHandle);
    gl && gl.enableVertexAttribArray(g_AttribLocationPosition);
    gl && gl.enableVertexAttribArray(g_AttribLocationUV);
    gl && gl.enableVertexAttribArray(g_AttribLocationColor);
    gl && gl.vertexAttribPointer(g_AttribLocationPosition, 2, gl.FLOAT, false, _imgui__WEBPACK_IMPORTED_MODULE_1__.DrawVertSize, _imgui__WEBPACK_IMPORTED_MODULE_1__.DrawVertPosOffset);
    gl && gl.vertexAttribPointer(g_AttribLocationUV, 2, gl.FLOAT, false, _imgui__WEBPACK_IMPORTED_MODULE_1__.DrawVertSize, _imgui__WEBPACK_IMPORTED_MODULE_1__.DrawVertUVOffset);
    gl && gl.vertexAttribPointer(g_AttribLocationColor, 4, gl.UNSIGNED_BYTE, true, _imgui__WEBPACK_IMPORTED_MODULE_1__.DrawVertSize, _imgui__WEBPACK_IMPORTED_MODULE_1__.DrawVertColOffset);
    // Draw
    var pos = draw_data.DisplayPos;
    var idx_buffer_type = gl && ((_imgui__WEBPACK_IMPORTED_MODULE_1__.DrawIdxSize === 4) ? gl.UNSIGNED_INT : gl.UNSIGNED_SHORT) || 0;
    draw_data.IterateDrawLists(function (draw_list) {
        gl || ctx || console.log(draw_list);
        gl || ctx || console.log("VtxBuffer.length", draw_list.VtxBuffer.length);
        gl || ctx || console.log("IdxBuffer.length", draw_list.IdxBuffer.length);
        var idx_buffer_offset = 0;
        var vx = draw_list.VtxBuffer;
        var ix = draw_list.IdxBuffer;
        var ixU16 = new Uint16Array(ix.buffer.slice(ix.byteOffset, ix.byteOffset + ix.byteLength));
        if (vx) {
            gl && gl.bindBuffer(gl.ARRAY_BUFFER, g_VboHandle);
            gl && gl.bufferData(gl.ARRAY_BUFFER, vx, gl.STREAM_DRAW);
        }
        if (ixU16) {
            gl && gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, g_ElementsHandle);
            gl && gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, ixU16, gl.STREAM_DRAW);
        }
        draw_list.IterateDrawCmds(function (draw_cmd) {
            gl || ctx || console.log(draw_cmd);
            gl || ctx || console.log("ElemCount", draw_cmd.ElemCount);
            gl || ctx || console.log("ClipRect", draw_cmd.ClipRect.x, fb_height - draw_cmd.ClipRect.w, draw_cmd.ClipRect.z - draw_cmd.ClipRect.x, draw_cmd.ClipRect.w - draw_cmd.ClipRect.y);
            gl || ctx || console.log("TextureId", draw_cmd.TextureId);
            if (!gl && !ctx) {
                console.log("i: pos.x pos.y uv.x uv.y col");
                for (var i = 0; i < Math.min(3, draw_cmd.ElemCount); ++i) {
                    var view = new _imgui__WEBPACK_IMPORTED_MODULE_1__.DrawVert(draw_list.VtxBuffer.buffer, draw_list.VtxBuffer.byteOffset + i * _imgui__WEBPACK_IMPORTED_MODULE_1__.DrawVertSize);
                    console.log(i + ": " + view.pos[0].toFixed(2) + " " + view.pos[1].toFixed(2) + " " + view.uv[0].toFixed(5) + " " + view.uv[1].toFixed(5) + " " + ("00000000" + view.col[0].toString(16)).substr(-8));
                }
            }
            if (draw_cmd.UserCallback !== null) {
                // User callback (registered via ImDrawList::AddCallback)
                draw_cmd.UserCallback(draw_list, draw_cmd);
            }
            else {
                var clip_rect = new _imgui__WEBPACK_IMPORTED_MODULE_1__.Vec4(draw_cmd.ClipRect.x - pos.x, draw_cmd.ClipRect.y - pos.y, draw_cmd.ClipRect.z - pos.x, draw_cmd.ClipRect.w - pos.y);
                if (clip_rect.x < fb_width && clip_rect.y < fb_height && clip_rect.z >= 0.0 && clip_rect.w >= 0.0) {
                    // Apply scissor/clipping rectangle
                    gl && gl.scissor(clip_rect.x, fb_height - clip_rect.w, clip_rect.z - clip_rect.x, clip_rect.w - clip_rect.y);
                    // Bind texture, Draw
                    gl && gl.activeTexture(gl.TEXTURE0);
                    gl && gl.bindTexture(gl.TEXTURE_2D, draw_cmd.TextureId);
                    gl && gl.drawElements(gl.TRIANGLES, draw_cmd.ElemCount, idx_buffer_type, idx_buffer_offset);
                    if (ctx) {
                        ctx.save();
                        ctx.beginPath();
                        ctx.rect(clip_rect.x, clip_rect.y, clip_rect.z - clip_rect.x, clip_rect.w - clip_rect.y);
                        ctx.clip();
                        var idx = _imgui__WEBPACK_IMPORTED_MODULE_1__.DrawIdxSize === 4 ?
                            new Uint32Array(draw_list.IdxBuffer.buffer, draw_list.IdxBuffer.byteOffset + idx_buffer_offset) :
                            new Uint16Array(draw_list.IdxBuffer.buffer, draw_list.IdxBuffer.byteOffset + idx_buffer_offset);
                        for (var i = 0; i < draw_cmd.ElemCount; i += 3) {
                            var i0 = idx[i + 0];
                            var i1 = idx[i + 1];
                            var i2 = idx[i + 2];
                            var v0 = new _imgui__WEBPACK_IMPORTED_MODULE_1__.DrawVert(draw_list.VtxBuffer.buffer, draw_list.VtxBuffer.byteOffset + i0 * _imgui__WEBPACK_IMPORTED_MODULE_1__.DrawVertSize);
                            var v1 = new _imgui__WEBPACK_IMPORTED_MODULE_1__.DrawVert(draw_list.VtxBuffer.buffer, draw_list.VtxBuffer.byteOffset + i1 * _imgui__WEBPACK_IMPORTED_MODULE_1__.DrawVertSize);
                            var v2 = new _imgui__WEBPACK_IMPORTED_MODULE_1__.DrawVert(draw_list.VtxBuffer.buffer, draw_list.VtxBuffer.byteOffset + i2 * _imgui__WEBPACK_IMPORTED_MODULE_1__.DrawVertSize);
                            var i3 = idx[i + 3];
                            var i4 = idx[i + 4];
                            var i5 = idx[i + 5];
                            var v3 = new _imgui__WEBPACK_IMPORTED_MODULE_1__.DrawVert(draw_list.VtxBuffer.buffer, draw_list.VtxBuffer.byteOffset + i3 * _imgui__WEBPACK_IMPORTED_MODULE_1__.DrawVertSize);
                            var v4 = new _imgui__WEBPACK_IMPORTED_MODULE_1__.DrawVert(draw_list.VtxBuffer.buffer, draw_list.VtxBuffer.byteOffset + i4 * _imgui__WEBPACK_IMPORTED_MODULE_1__.DrawVertSize);
                            var v5 = new _imgui__WEBPACK_IMPORTED_MODULE_1__.DrawVert(draw_list.VtxBuffer.buffer, draw_list.VtxBuffer.byteOffset + i5 * _imgui__WEBPACK_IMPORTED_MODULE_1__.DrawVertSize);
                            var quad = true;
                            var minmin = v0;
                            var minmax = v0;
                            var maxmin = v0;
                            var maxmax = v0;
                            for (var _i = 0, _a = [v1, v2, v3, v4, v5]; _i < _a.length; _i++) {
                                var v = _a[_i];
                                var found = false;
                                if (v.pos[0] <= minmin.pos[0] && v.pos[1] <= minmin.pos[1]) {
                                    minmin = v;
                                    found = true;
                                }
                                if (v.pos[0] <= minmax.pos[0] && v.pos[1] >= minmax.pos[1]) {
                                    minmax = v;
                                    found = true;
                                }
                                if (v.pos[0] >= maxmin.pos[0] && v.pos[1] <= maxmin.pos[1]) {
                                    maxmin = v;
                                    found = true;
                                }
                                if (v.pos[0] >= maxmax.pos[0] && v.pos[1] >= maxmax.pos[1]) {
                                    maxmax = v;
                                    found = true;
                                }
                                if (!found) {
                                    quad = false;
                                }
                            }
                            quad = quad && (minmin.pos[0] === minmax.pos[0]);
                            quad = quad && (maxmin.pos[0] === maxmax.pos[0]);
                            quad = quad && (minmin.pos[1] === maxmin.pos[1]);
                            quad = quad && (minmax.pos[1] === maxmax.pos[1]);
                            if (quad) {
                                if (minmin.uv[0] === maxmax.uv[0] || minmin.uv[1] === maxmax.uv[1]) {
                                    // one vertex color
                                    ctx.beginPath();
                                    ctx.rect(minmin.pos[0], minmin.pos[1], maxmax.pos[0] - minmin.pos[0], maxmax.pos[1] - minmin.pos[1]);
                                    ctx.fillStyle = "rgba(" + (v0.col[0] >> 0 & 0xff) + ", " + (v0.col[0] >> 8 & 0xff) + ", " + (v0.col[0] >> 16 & 0xff) + ", " + (v0.col[0] >> 24 & 0xff) / 0xff + ")";
                                    ctx.fill();
                                }
                                else {
                                    // no vertex color
                                    var image = draw_cmd.TextureId; // HACK
                                    var width = image instanceof HTMLVideoElement ? image.videoWidth : image.width;
                                    var height = image instanceof HTMLVideoElement ? image.videoHeight : image.height;
                                    image && ctx.drawImage(image, minmin.uv[0] * width, minmin.uv[1] * height, (maxmax.uv[0] - minmin.uv[0]) * width, (maxmax.uv[1] - minmin.uv[1]) * height, minmin.pos[0], minmin.pos[1], maxmax.pos[0] - minmin.pos[0], maxmax.pos[1] - minmin.pos[1]);
                                    // ctx.beginPath();
                                    // ctx.rect(minmin.pos[0], minmin.pos[1], maxmax.pos[0] - minmin.pos[0], maxmax.pos[1] - minmin.pos[1]);
                                    // ctx.strokeStyle = "yellow";
                                    // ctx.stroke();
                                }
                                i += 3;
                            }
                            else {
                                // one vertex color, no texture
                                ctx.beginPath();
                                ctx.moveTo(v0.pos[0], v0.pos[1]);
                                ctx.lineTo(v1.pos[0], v1.pos[1]);
                                ctx.lineTo(v2.pos[0], v2.pos[1]);
                                ctx.closePath();
                                ctx.fillStyle = "rgba(" + (v0.col[0] >> 0 & 0xff) + ", " + (v0.col[0] >> 8 & 0xff) + ", " + (v0.col[0] >> 16 & 0xff) + ", " + (v0.col[0] >> 24 & 0xff) / 0xff + ")";
                                ctx.fill();
                            }
                        }
                        ctx.restore();
                    }
                }
            }
            idx_buffer_offset += draw_cmd.ElemCount * _imgui__WEBPACK_IMPORTED_MODULE_1__.DrawIdxSize;
        });
    });
    // Destroy the temporary VAO
    if (enable_vao) {
        gl2 && gl2.bindVertexArray(null);
        //gl2 && gl2.deleteVertexArray(vertex_array_object);
        //gl_vao && gl_vao.deleteVertexArrayOES(vertex_array_object);
    }
    else {
        gl && gl.bindBuffer(gl.ARRAY_BUFFER, null);
        gl && gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);
    }
    // Restore modified GL state
    //gl && (last_program !== null) && gl.useProgram(last_program);
    //gl && (last_texture !== null) && gl.bindTexture(gl.TEXTURE_2D, last_texture);
    //gl && (last_active_texture !== null) && gl.activeTexture(last_active_texture);
    //gl2 && gl2.bindVertexArray(last_vertex_array_object);
    //gl_vao && gl_vao.bindVertexArrayOES(last_vertex_array_object);
    //gl && (last_array_buffer !== null) && gl.bindBuffer(gl.ARRAY_BUFFER, last_array_buffer);
    //gl && (last_element_array_buffer !== null) && gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, last_element_array_buffer);
    //gl && (last_blend_equation_rgb !== null && last_blend_equation_alpha !== null) && gl.blendEquationSeparate(last_blend_equation_rgb, last_blend_equation_alpha);
    //gl && (last_blend_src_rgb !== null && last_blend_src_alpha !== null && last_blend_dst_rgb !== null && last_blend_dst_alpha !== null) && gl.blendFuncSeparate(last_blend_src_rgb, last_blend_src_alpha, last_blend_dst_rgb, last_blend_dst_alpha);
    //gl && (last_enable_blend ? gl.enable(gl.BLEND) : gl.disable(gl.BLEND));
    //gl && (last_enable_cull_face ? gl.enable(gl.CULL_FACE) : gl.disable(gl.CULL_FACE));
    //gl && (last_enable_depth_test ? gl.enable(gl.DEPTH_TEST) : gl.disable(gl.DEPTH_TEST));
    gl && (last_enable_scissor_test ? gl.enable(gl.SCISSOR_TEST) : gl.disable(gl.SCISSOR_TEST));
    // glPolygonMode(GL_FRONT_AND_BACK, (GLenum)last_polygon_mode[0]);
    //gl && (last_viewport !== null) && gl.viewport(last_viewport[0], last_viewport[1], last_viewport[2], last_viewport[3]);
    //gl && (last_scissor_box !== null) && gl.scissor(last_scissor_box[0], last_scissor_box[1], last_scissor_box[2], last_scissor_box[3]);
}
function CreateFontsTexture() {
    var io = _imgui__WEBPACK_IMPORTED_MODULE_1__.GetIO();
    // Backup GL state
    var last_texture = gl && gl.getParameter(gl.TEXTURE_BINDING_2D);
    // Build texture atlas
    // const width: number = 256;
    // const height: number = 256;
    // const pixels: Uint8Array = new Uint8Array(4 * width * height).fill(0xff);
    //const { width, height, pixels } = io.Fonts.GetTexDataAsRGBA32();   // Load as RGBA 32-bits (75% of the memory is wasted, but default font is so small) because it is more likely to be compatible with user's existing shaders. If your ImTextureId represent a higher-level concept than just a GL texture id, consider calling GetTexDataAsAlpha8() instead to save on GPU memory.
    var _a = io.Fonts.GetTexDataAsAlpha8(), width = _a.width, height = _a.height, pixels = _a.pixels;
    if (width && height && pixels) {
        var rgba4_1 = new Uint16Array(width * height);
        var i_1 = 0;
        pixels.forEach(function (p) {
            rgba4_1[i_1] = 0xFFF0 | (p >> 4);
            i_1++;
        });
        // Upload texture to graphics system
        g_FontTexture = gl && gl.createTexture();
        gl && gl.bindTexture(gl.TEXTURE_2D, g_FontTexture);
        gl && gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
        gl && gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
        // gl && gl.pixelStorei(gl.UNPACK_ROW_LENGTH); // WebGL2
        gl && gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_SHORT_4_4_4_4, rgba4_1);
        //gl && gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, pixels);
        // Store our identifier
        io.Fonts.TexID = g_FontTexture || { foo: "bar" };
        // console.log("font texture id", g_FontTexture);
    }
    if (ctx) {
        var image_canvas = document.createElement("canvas");
        image_canvas.width = width;
        image_canvas.height = height;
        var image_ctx = image_canvas.getContext("2d");
        if (image_ctx === null) {
            throw new Error();
        }
        var image_data = image_ctx.getImageData(0, 0, width, height);
        image_data.data.set(pixels);
        image_ctx.putImageData(image_data, 0, 0);
        io.Fonts.TexID = image_canvas;
    }
    // Restore modified GL state
    gl && last_texture && gl.bindTexture(gl.TEXTURE_2D, last_texture);
}
function DestroyFontsTexture() {
    var io = _imgui__WEBPACK_IMPORTED_MODULE_1__.GetIO();
    io.Fonts.TexID = null;
    gl && gl.deleteTexture(g_FontTexture);
    g_FontTexture = null;
}
function CreateDeviceObjects() {
    var vertex_shader = [
        "uniform mat4 ProjMtx;",
        "attribute vec2 Position;",
        "attribute vec2 UV;",
        "attribute vec4 Color;",
        "varying vec2 Frag_UV;",
        "varying vec4 Frag_Color;",
        "void main() {",
        "	Frag_UV = UV;",
        "	Frag_Color = Color;",
        "	gl_Position = ProjMtx * vec4(Position.xy,0,1);",
        "}",
    ];
    var fragment_shader = [
        "precision mediump float;",
        "uniform sampler2D Texture;",
        "varying vec2 Frag_UV;",
        "varying vec4 Frag_Color;",
        "void main() {",
        "	gl_FragColor = Frag_Color * texture2D(Texture, Frag_UV);",
        "}",
    ];
    g_ShaderHandle = gl && gl.createProgram();
    g_VertHandle = gl && gl.createShader(gl.VERTEX_SHADER);
    g_FragHandle = gl && gl.createShader(gl.FRAGMENT_SHADER);
    gl && gl.shaderSource(g_VertHandle, vertex_shader.join("\n"));
    gl && gl.shaderSource(g_FragHandle, fragment_shader.join("\n"));
    gl && gl.compileShader(g_VertHandle);
    gl && gl.compileShader(g_FragHandle);
    gl && gl.attachShader(g_ShaderHandle, g_VertHandle);
    gl && gl.attachShader(g_ShaderHandle, g_FragHandle);
    gl && gl.linkProgram(g_ShaderHandle);
    g_AttribLocationTex = gl && gl.getUniformLocation(g_ShaderHandle, "Texture");
    g_AttribLocationProjMtx = gl && gl.getUniformLocation(g_ShaderHandle, "ProjMtx");
    g_AttribLocationPosition = gl && gl.getAttribLocation(g_ShaderHandle, "Position") || 0;
    g_AttribLocationUV = gl && gl.getAttribLocation(g_ShaderHandle, "UV") || 0;
    g_AttribLocationColor = gl && gl.getAttribLocation(g_ShaderHandle, "Color") || 0;
    g_VboHandle = gl && gl.createBuffer();
    g_ElementsHandle = gl && gl.createBuffer();
    CreateFontsTexture();
}
function DestroyDeviceObjects() {
    DestroyFontsTexture();
    var gl2 = typeof WebGL2RenderingContext !== "undefined" && gl instanceof WebGL2RenderingContext && gl || null;
    if (g_vao) {
        gl2 && gl2.deleteVertexArray(g_vao);
    }
    gl && gl.deleteBuffer(g_VboHandle);
    g_VboHandle = null;
    gl && gl.deleteBuffer(g_ElementsHandle);
    g_ElementsHandle = null;
    g_AttribLocationTex = null;
    g_AttribLocationProjMtx = null;
    g_AttribLocationPosition = -1;
    g_AttribLocationUV = -1;
    g_AttribLocationColor = -1;
    gl && gl.deleteProgram(g_ShaderHandle);
    g_ShaderHandle = null;
    gl && gl.deleteShader(g_VertHandle);
    g_VertHandle = null;
    gl && gl.deleteShader(g_FragHandle);
    g_FragHandle = null;
}
var Texture = /** @class */ (function () {
    function Texture(param) {
        this._internalFormat = gl.RGBA;
        this._srcFormat = gl.RGBA;
        this._srcType = gl.UNSIGNED_BYTE;
        this._wrapS = gl.CLAMP_TO_EDGE;
        this._wrapT = gl.CLAMP_TO_EDGE;
        this._minFilter = gl.LINEAR;
        this._magFilter = gl.LINEAR;
        this._width = 1;
        this._height = 1;
    }
    Texture.prototype.Destroy = function () {
        if (this._texture) {
            gl && gl.deleteTexture(this._texture);
            this._texture = null;
        }
    };
    Texture.prototype.Bind = function (index) {
        if (index === void 0) { index = gl.TEXTURE0; }
        gl.activeTexture(index);
        gl.bindTexture(gl.TEXTURE_2D, this._texture);
    };
    Texture.prototype.Update = function (src, param) {
        var w, h;
        if (src == null) {
            if (param) {
                w = param.width;
                h = param.height;
            }
        }
        else if (src instanceof HTMLVideoElement) {
            var srcVideo = src;
            if (srcVideo) {
                w = srcVideo.videoWidth;
                h = srcVideo.videoHeight;
            }
        }
        else if (src instanceof Uint8Array || src instanceof Uint16Array) {
            if (param) {
                w = param.width;
                h = param.height;
            }
            else {
                w = this._width;
                h = this._height;
            }
        }
        else {
            w = src.width;
            h = src.height;
        }
        if (!this._texture) {
            this._texture = gl.createTexture();
            gl.bindTexture(gl.TEXTURE_2D, this._texture);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, this._wrapS);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, this._wrapT);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
        }
        var level = param ? param.level ? param.level : 0 : 0;
        gl.bindTexture(gl.TEXTURE_2D, this._texture);
        gl && gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, this._minFilter);
        gl && gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, this._magFilter);
        if (w != this._width || h != this._height) {
            if (src == null) {
                var data = null;
                gl.texImage2D(gl.TEXTURE_2D, level, this._internalFormat, w, h, 0, this._srcFormat, this._srcType, data);
            }
            else if (src instanceof Uint8Array || src instanceof Uint16Array) {
                gl.texImage2D(gl.TEXTURE_2D, level, this._internalFormat, w, h, 0, this._srcFormat, this._srcType, src);
            }
            else {
                gl.texImage2D(gl.TEXTURE_2D, level, this._internalFormat, this._srcFormat, this._srcType, src);
            }
            this._width = w;
            this._height = h;
        }
        else {
            if (src instanceof Uint8Array || src instanceof Uint16Array) {
                gl.texSubImage2D(gl.TEXTURE_2D, level, 0, 0, w, h, this._srcFormat, this._srcType, src);
            }
            else {
                gl.texSubImage2D(gl.TEXTURE_2D, level, 0, 0, this._srcFormat, this._srcType, src);
            }
        }
    };
    return Texture;
}());

var FrameBufferObject = /** @class */ (function () {
    function FrameBufferObject() {
    }
    FrameBufferObject.prototype.Destroy = function () {
        if (this._target) {
            this._target.Destroy();
            this._target = null;
        }
        if (this._depth) {
            gl.deleteRenderbuffer(this._depth);
            this._depth = null;
        }
        if (this._fbo) {
            gl.deleteFramebuffer(this._fbo);
            this._fbo = null;
        }
    };
    FrameBufferObject.prototype.Create = function (width, height, format, depth) {
        if (format === void 0) { format = gl.RGB; }
        if (depth === void 0) { depth = gl.DEPTH_COMPONENT16; }
        this.width = width;
        this.height = height;
        this.format = format;
        this.depth_format = depth;
    };
    FrameBufferObject.prototype.Bind = function (use) {
        if (use === void 0) { use = true; }
        if (use) {
            if (!this._target) {
                var target = new Texture();
                target._srcFormat = target._internalFormat = this.format;
                target.Update(null, { width: this.width, height: this.height });
                this._target = target;
            }
            if (this.depth_format && !this._depth) {
                var depth = gl.createRenderbuffer();
                gl.bindRenderbuffer(gl.RENDERBUFFER, depth);
                gl.renderbufferStorage(gl.RENDERBUFFER, this.depth_format, this.width, this.height);
                this._depth = depth;
            }
            if (!this._fbo) {
                var fbo = gl.createFramebuffer();
                gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
                gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this._target._texture, 0);
                if (this._depth) {
                    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, this._depth);
                }
                this._fbo = fbo;
            }
            gl.bindFramebuffer(gl.FRAMEBUFFER, this._fbo);
            gl.viewport(0, 0, this.width, this.height);
        }
        else {
            gl.bindFramebuffer(gl.FRAMEBUFFER, null);
        }
    };
    FrameBufferObject.prototype.get_texture = function () {
        return this._target ? this._target._texture : null;
    };
    return FrameBufferObject;
}());

var Shader = /** @class */ (function () {
    function Shader() {
    }
    Shader.prototype.Destroy = function () {
        if (this._program) {
            gl && gl.deleteProgram(this._program);
            this._program = null;
        }
        if (this._vs) {
            gl && gl.deleteShader(this._vs);
            this._vs = null;
        }
        if (this._ps) {
            gl && gl.deleteShader(this._ps);
            this._ps = null;
        }
    };
    Shader.prototype.Create = function (vsCode, psCode) {
        var vs;
        if (vsCode) {
            vs = gl && gl.createShader(gl.VERTEX_SHADER);
            gl && gl.shaderSource(vs, vsCode.join("\n"));
            gl && gl.compileShader(vs);
            if (!gl.getShaderParameter(vs, gl.COMPILE_STATUS)) {
                console.log('VertexShader compile failed: ' + gl.getShaderInfoLog(vs));
            }
            this._vs = vs;
        }
        else {
            vs = g_VertHandle;
        }
        var ps;
        if (psCode) {
            ps = gl && gl.createShader(gl.FRAGMENT_SHADER);
            gl && gl.shaderSource(ps, psCode.join("\n"));
            gl && gl.compileShader(ps);
            if (!gl.getShaderParameter(ps, gl.COMPILE_STATUS)) {
                console.log('FragmentShader compile failed: ' + gl.getShaderInfoLog(ps));
            }
            this._ps = ps;
        }
        else {
            ps = g_FragHandle;
        }
        var program = gl && gl.createProgram();
        gl && gl.attachShader(program, vs);
        gl && gl.attachShader(program, ps);
        gl && gl.linkProgram(program);
        if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
            console.log('linkProgram failed: ' + gl.getProgramInfoLog(program));
        }
        this._program = program;
    };
    return Shader;
}());



/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ImGui": () => (/* reexport module object */ _imgui__WEBPACK_IMPORTED_MODULE_0__),
/* harmony export */   "ImGui_Impl": () => (/* reexport module object */ _imgui_impl__WEBPACK_IMPORTED_MODULE_1__)
/* harmony export */ });
/* harmony import */ var _imgui__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./imgui */ "./src/imgui.ts");
/* harmony import */ var _imgui_impl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./imgui_impl */ "./src/imgui_impl.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};



var _main;
function _loop(time) {
    _main.loop(time);
    window.requestAnimationFrame(_loop);
}
var Main = /** @class */ (function () {
    function Main() {
        this.text = new _imgui__WEBPACK_IMPORTED_MODULE_0__.ImStringBuffer(128, 'whats up');
        this.text2 = new _imgui__WEBPACK_IMPORTED_MODULE_0__.ImStringBuffer(128, 'もじ/もんじ');
        this.text_area = new _imgui__WEBPACK_IMPORTED_MODULE_0__.ImStringBuffer(128, 'whats up multiline');
        this.text_area2 = new _imgui__WEBPACK_IMPORTED_MODULE_0__.ImStringBuffer(128, '觀自在菩薩，行深般若波羅蜜多時，\n照見五蘊皆空，度一切苦厄。');
        this.first = true;
        this.v4 = new _imgui__WEBPACK_IMPORTED_MODULE_0__.Vec4;
    }
    Main.prototype.ImObject = function (obj, id) {
        var _this = this;
        if (id === void 0) { id = 0; }
        Object.entries(obj).forEach(function (_a) {
            var key = _a[0], value = _a[1];
            _imgui__WEBPACK_IMPORTED_MODULE_0__.PushID(id);
            id++;
            if (value == null) {
                _imgui__WEBPACK_IMPORTED_MODULE_0__.Text(key + ": (null)");
            }
            else if (typeof (value) === 'object') {
                if (_imgui__WEBPACK_IMPORTED_MODULE_0__.TreeNode(key)) {
                    id = _this.ImObject(value, id + 1);
                    _imgui__WEBPACK_IMPORTED_MODULE_0__.TreePop();
                }
            }
            else if (typeof (value) === 'number') {
                var v = function (_) {
                    if (_ === void 0) { _ = value; }
                    return obj[key] = _;
                };
                _imgui__WEBPACK_IMPORTED_MODULE_0__.SetNextItemWidth(100);
                _imgui__WEBPACK_IMPORTED_MODULE_0__.InputFloat(key, v);
            }
            else if (typeof (value) === 'boolean') {
                var v = function (_) {
                    if (_ === void 0) { _ = value; }
                    return obj[key] = _;
                };
                _imgui__WEBPACK_IMPORTED_MODULE_0__.SetNextItemWidth(100);
                _imgui__WEBPACK_IMPORTED_MODULE_0__.Checkbox(key, v);
            }
            else {
                _imgui__WEBPACK_IMPORTED_MODULE_0__.Text(key + ": " + value);
            }
            _imgui__WEBPACK_IMPORTED_MODULE_0__.PopID();
        });
        return id;
    };
    Main.prototype.loop = function (time) {
        if (_imgui_impl__WEBPACK_IMPORTED_MODULE_1__.is_contextlost)
            return;
        if (!_imgui_impl__WEBPACK_IMPORTED_MODULE_1__.any_pointerdown() && time - this.prev_time < 1000.0 / 30) {
            return;
        }
        this.prev_time = time;
        _imgui_impl__WEBPACK_IMPORTED_MODULE_1__.NewFrame(time);
        _imgui__WEBPACK_IMPORTED_MODULE_0__.NewFrame();
        if (this.first) {
            _imgui__WEBPACK_IMPORTED_MODULE_0__.SetNextWindowPos(new _imgui__WEBPACK_IMPORTED_MODULE_0__.ImVec2(0, 0));
            if (_imgui__WEBPACK_IMPORTED_MODULE_0__.isMobile.any())
                _imgui__WEBPACK_IMPORTED_MODULE_0__.SetNextWindowSize(new _imgui__WEBPACK_IMPORTED_MODULE_0__.ImVec2(_imgui_impl__WEBPACK_IMPORTED_MODULE_1__.canvas.scrollWidth, _imgui_impl__WEBPACK_IMPORTED_MODULE_1__.canvas.scrollHeight));
            this.first = false;
        }
        _imgui__WEBPACK_IMPORTED_MODULE_0__.Begin("Hello");
        _imgui__WEBPACK_IMPORTED_MODULE_0__.Text("Version " + _imgui__WEBPACK_IMPORTED_MODULE_0__.VERSION);
        _imgui__WEBPACK_IMPORTED_MODULE_0__.InputText("Input", this.text);
        _imgui__WEBPACK_IMPORTED_MODULE_0__.InputText("Input2", this.text2);
        _imgui__WEBPACK_IMPORTED_MODULE_0__.InputText("Password", this.text, this.text.size, _imgui__WEBPACK_IMPORTED_MODULE_0__.InputTextFlags.Password);
        _imgui__WEBPACK_IMPORTED_MODULE_0__.InputTextMultiline("Text", this.text_area);
        _imgui__WEBPACK_IMPORTED_MODULE_0__.InputTextMultiline("Text2", this.text_area2);
        _imgui__WEBPACK_IMPORTED_MODULE_0__.TextWrapped(this.text_area2.buffer);
        _imgui__WEBPACK_IMPORTED_MODULE_0__.SliderFloat4("Slider", this.v4, 0, 100);
        _imgui__WEBPACK_IMPORTED_MODULE_0__.InputFloat4("Float4", this.v4);
        //this.ImObject(ImGui.GetIO().Fonts);
        _imgui__WEBPACK_IMPORTED_MODULE_0__.TextColored(new _imgui__WEBPACK_IMPORTED_MODULE_0__.ImVec4(0, 1, 0, 1), "FontTexturePool");
        _imgui_impl__WEBPACK_IMPORTED_MODULE_1__.dom_font.texturePage.forEach(function (page) {
            _imgui__WEBPACK_IMPORTED_MODULE_0__.Image(page.Texure._texture, new _imgui__WEBPACK_IMPORTED_MODULE_0__.ImVec2(512, 512));
        });
        _imgui__WEBPACK_IMPORTED_MODULE_0__.End();
        _imgui__WEBPACK_IMPORTED_MODULE_0__.ShowDemoWindow();
        _imgui__WEBPACK_IMPORTED_MODULE_0__.ShowMetricsWindow();
        _imgui__WEBPACK_IMPORTED_MODULE_0__.EndFrame();
        _imgui__WEBPACK_IMPORTED_MODULE_0__.Render();
        _imgui_impl__WEBPACK_IMPORTED_MODULE_1__.ClearBuffer(new _imgui__WEBPACK_IMPORTED_MODULE_0__.ImVec4(0.25, 0.25, 0.25, 1));
        _imgui_impl__WEBPACK_IMPORTED_MODULE_1__.RenderDrawData(_imgui__WEBPACK_IMPORTED_MODULE_0__.GetDrawData());
    };
    return Main;
}());
window.addEventListener('DOMContentLoaded', function () { return __awaiter(void 0, void 0, void 0, function () {
    var io, font, canvas;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, _imgui__WEBPACK_IMPORTED_MODULE_0__.default()];
            case 1:
                _a.sent();
                _imgui__WEBPACK_IMPORTED_MODULE_0__.CHECKVERSION();
                console.log("ImGui.CreateContext() VERSION=", _imgui__WEBPACK_IMPORTED_MODULE_0__.VERSION);
                _imgui__WEBPACK_IMPORTED_MODULE_0__.CreateContext();
                _imgui__WEBPACK_IMPORTED_MODULE_0__.StyleColorsDark();
                if (_imgui__WEBPACK_IMPORTED_MODULE_0__.isMobile.any()) {
                    _imgui_impl__WEBPACK_IMPORTED_MODULE_1__.setCanvasScale(1);
                    _imgui_impl__WEBPACK_IMPORTED_MODULE_1__.setFontScale(1.5);
                }
                io = _imgui__WEBPACK_IMPORTED_MODULE_0__.GetIO();
                font = io.Fonts.AddFontDefault();
                font.FontName = "Microsoft JhengHei";
                canvas = document.getElementById("canvas");
                _imgui_impl__WEBPACK_IMPORTED_MODULE_1__.Init(canvas);
                _main = new Main;
                window.requestAnimationFrame(_loop);
                return [2 /*return*/];
        }
    });
}); });


/***/ }),

/***/ "./src/input.ts":
/*!**********************!*\
  !*** ./src/input.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "EType": () => (/* binding */ EType),
/* harmony export */   "Input": () => (/* binding */ Input)
/* harmony export */ });
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index */ "./src/index.ts");

var EType;
(function (EType) {
    EType[EType["eInput"] = 0] = "eInput";
    EType[EType["eMultiLine"] = 1] = "eMultiLine";
    EType[EType["ePassword"] = 2] = "ePassword";
})(EType || (EType = {}));
var Input = /** @class */ (function () {
    function Input(type) {
        var _this = this;
        this.isVisible = false;
        var textCol = _index__WEBPACK_IMPORTED_MODULE_0__.ImGui.GetStyleColorVec4(_index__WEBPACK_IMPORTED_MODULE_0__.ImGui.ImGuiCol.Text);
        var textBg = _index__WEBPACK_IMPORTED_MODULE_0__.ImGui.GetStyleColorVec4(_index__WEBPACK_IMPORTED_MODULE_0__.ImGui.ImGuiCol.WindowBg);
        var input;
        switch (type) {
            case EType.eInput:
                input = document.createElement('input');
                input.type = 'text';
                break;
            case EType.eMultiLine:
                input = document.createElement('textarea');
                input.style.resize = 'none';
                break;
            case EType.ePassword:
                input = document.createElement('input');
                input.type = 'password';
                break;
        }
        input.style.position = 'fixed';
        input.style.top = 0 + 'px';
        input.style.left = 0 + 'px';
        input.style.borderWidth = '0';
        input.style.borderStyle = 'none';
        input.style.zIndex = '999';
        input.style.backgroundColor = this.to_rgba(textBg);
        input.style.color = this.to_rgba(textCol);
        input.value = "123";
        input.addEventListener('blur', function (e) { _this.onLostFocus(e); });
        document.body.appendChild(input);
        this._dom_input = input;
        this.setVisible(false);
    }
    Input.prototype.to_rgba = function (c) {
        return "rgba(" + c.x * 255 + "," + c.y * 255 + "," + c.z * 255 + "," + c.w * 255 + ")";
    };
    Input.prototype.onLostFocus = function (e) {
        if (this.on_input) {
            this.on_input(this._dom_input.value);
        }
        this.setVisible(false);
    };
    Input.prototype.isMe = function (id) {
        return this.isVisible && this._id == id;
    };
    Object.defineProperty(Input.prototype, "Text", {
        get: function () {
            return this._dom_input.value;
        },
        enumerable: false,
        configurable: true
    });
    Input.prototype.setRect = function (x, y, w, h) {
        var input = this._dom_input;
        input.style.left = x + 'px';
        input.style.top = y + 'px';
        input.style.width = w - 5 + 'px';
        input.style.height = h - 5 + 'px';
    };
    Input.prototype.setText = function (text, id, font) {
        this._id = id;
        var input = this._dom_input;
        input.style.font = font.FontSize + "px " + font.FontName;
        input.value = text;
        this.setVisible(true);
    };
    Input.prototype.setVisible = function (b) {
        var input = this._dom_input;
        if (b) {
            _index__WEBPACK_IMPORTED_MODULE_0__.ImGui_Impl.remove_key_event();
            input.style.display = 'inline-block';
            input.focus();
        }
        else {
            _index__WEBPACK_IMPORTED_MODULE_0__.ImGui_Impl.add_key_event();
            input.style.display = 'none';
        }
        this.isVisible = b;
    };
    return Input;
}());



/***/ }),

/***/ "./src/bind-imgui.js":
/*!***************************!*\
  !*** ./src/bind-imgui.js ***!
  \***************************/
/***/ ((module) => {


var Module = (function() {
  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;
  
  return (
function(Module) {
  Module = Module || {};



// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};

// Set up the promise that indicates the Module is initialized
var readyPromiseResolve, readyPromiseReject;
Module['ready'] = new Promise(function(resolve, reject) {
  readyPromiseResolve = resolve;
  readyPromiseReject = reject;
});

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '_main')) {
        Object.defineProperty(Module['ready'], '_main', { configurable: true, get: function() { abort('You are getting _main on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '_main', { configurable: true, set: function() { abort('You are setting _main on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '_emscripten_stack_get_end')) {
        Object.defineProperty(Module['ready'], '_emscripten_stack_get_end', { configurable: true, get: function() { abort('You are getting _emscripten_stack_get_end on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '_emscripten_stack_get_end', { configurable: true, set: function() { abort('You are setting _emscripten_stack_get_end on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '_emscripten_stack_get_free')) {
        Object.defineProperty(Module['ready'], '_emscripten_stack_get_free', { configurable: true, get: function() { abort('You are getting _emscripten_stack_get_free on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '_emscripten_stack_get_free', { configurable: true, set: function() { abort('You are setting _emscripten_stack_get_free on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '_emscripten_stack_init')) {
        Object.defineProperty(Module['ready'], '_emscripten_stack_init', { configurable: true, get: function() { abort('You are getting _emscripten_stack_init on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '_emscripten_stack_init', { configurable: true, set: function() { abort('You are setting _emscripten_stack_init on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '_stackSave')) {
        Object.defineProperty(Module['ready'], '_stackSave', { configurable: true, get: function() { abort('You are getting _stackSave on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '_stackSave', { configurable: true, set: function() { abort('You are setting _stackSave on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '_stackRestore')) {
        Object.defineProperty(Module['ready'], '_stackRestore', { configurable: true, get: function() { abort('You are getting _stackRestore on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '_stackRestore', { configurable: true, set: function() { abort('You are setting _stackRestore on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '_stackAlloc')) {
        Object.defineProperty(Module['ready'], '_stackAlloc', { configurable: true, get: function() { abort('You are getting _stackAlloc on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '_stackAlloc', { configurable: true, set: function() { abort('You are setting _stackAlloc on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '___wasm_call_ctors')) {
        Object.defineProperty(Module['ready'], '___wasm_call_ctors', { configurable: true, get: function() { abort('You are getting ___wasm_call_ctors on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '___wasm_call_ctors', { configurable: true, set: function() { abort('You are setting ___wasm_call_ctors on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '___errno_location')) {
        Object.defineProperty(Module['ready'], '___errno_location', { configurable: true, get: function() { abort('You are getting ___errno_location on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '___errno_location', { configurable: true, set: function() { abort('You are setting ___errno_location on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '_malloc')) {
        Object.defineProperty(Module['ready'], '_malloc', { configurable: true, get: function() { abort('You are getting _malloc on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '_malloc', { configurable: true, set: function() { abort('You are setting _malloc on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '_free')) {
        Object.defineProperty(Module['ready'], '_free', { configurable: true, get: function() { abort('You are getting _free on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '_free', { configurable: true, set: function() { abort('You are setting _free on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '___getTypeName')) {
        Object.defineProperty(Module['ready'], '___getTypeName', { configurable: true, get: function() { abort('You are getting ___getTypeName on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '___getTypeName', { configurable: true, set: function() { abort('You are setting ___getTypeName on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '___embind_register_native_and_builtin_types')) {
        Object.defineProperty(Module['ready'], '___embind_register_native_and_builtin_types', { configurable: true, get: function() { abort('You are getting ___embind_register_native_and_builtin_types on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '___embind_register_native_and_builtin_types', { configurable: true, set: function() { abort('You are setting ___embind_register_native_and_builtin_types on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], 'onRuntimeInitialized')) {
        Object.defineProperty(Module['ready'], 'onRuntimeInitialized', { configurable: true, get: function() { abort('You are getting onRuntimeInitialized on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], 'onRuntimeInitialized', { configurable: true, set: function() { abort('You are setting onRuntimeInitialized on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
// {{PRE_JSES}}

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

var arguments_ = [];
var thisProgram = './this.program';
var quit_ = function(status, toThrow) {
  throw toThrow;
};

// Determine the runtime environment we are in. You can customize this by
// setting the ENVIRONMENT setting at compile time (see settings.js).

var ENVIRONMENT_IS_WEB = true;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

if (Module['ENVIRONMENT']) {
  throw new Error('Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -s ENVIRONMENT=web or -s ENVIRONMENT=node)');
}

// `/` should be present at the end if `scriptDirectory` is not empty
var scriptDirectory = '';
function locateFile(path) {
  if (Module['locateFile']) {
    return Module['locateFile'](path, scriptDirectory);
  }
  return scriptDirectory + path;
}

// Hooks that are implemented differently in different runtime environments.
var read_,
    readAsync,
    readBinary,
    setWindowTitle;

if (ENVIRONMENT_IS_SHELL) {

  if ((typeof process === 'object' && "function" === 'function') || typeof window === 'object' || typeof importScripts === 'function') throw new Error('not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)');

  if (typeof read != 'undefined') {
    read_ = function shell_read(f) {
      var data = tryParseAsDataURI(f);
      if (data) {
        return intArrayToString(data);
      }
      return read(f);
    };
  }

  readBinary = function readBinary(f) {
    var data;
    data = tryParseAsDataURI(f);
    if (data) {
      return data;
    }
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  readAsync = function readAsync(f, onload, onerror) {
    setTimeout(function() { onload(readBinary(f)); }, 0);
  };

  if (typeof scriptArgs != 'undefined') {
    arguments_ = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    arguments_ = arguments;
  }

  if (typeof quit === 'function') {
    quit_ = function(status) {
      quit(status);
    };
  }

  if (typeof print !== 'undefined') {
    // Prefer to use print/printErr where they exist, as they usually work better.
    if (typeof console === 'undefined') console = /** @type{!Console} */({});
    console.log = /** @type{!function(this:Console, ...*): undefined} */ (print);
    console.warn = console.error = /** @type{!function(this:Console, ...*): undefined} */ (typeof printErr !== 'undefined' ? printErr : print);
  }

} else

// Note that this includes Node.js workers when relevant (pthreads is enabled).
// Node.js workers are detected as a combination of ENVIRONMENT_IS_WORKER and
// ENVIRONMENT_IS_NODE.
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  if (ENVIRONMENT_IS_WORKER) { // Check worker, not web, since window could be polyfilled
    scriptDirectory = self.location.href;
  } else if (typeof document !== 'undefined' && document.currentScript) { // web
    scriptDirectory = document.currentScript.src;
  }
  // When MODULARIZE, this JS may be executed later, after document.currentScript
  // is gone, so we saved it, and we use it here instead of any other info.
  if (_scriptDir) {
    scriptDirectory = _scriptDir;
  }
  // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.
  // otherwise, slice off the final part of the url to find the script directory.
  // if scriptDirectory does not contain a slash, lastIndexOf will return -1,
  // and scriptDirectory will correctly be replaced with an empty string.
  if (scriptDirectory.indexOf('blob:') !== 0) {
    scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf('/')+1);
  } else {
    scriptDirectory = '';
  }

  if (!(typeof window === 'object' || typeof importScripts === 'function')) throw new Error('not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)');

  // Differentiate the Web Worker from the Node Worker case, as reading must
  // be done differently.
  {

// include: web_or_worker_shell_read.js


  read_ = function(url) {
    try {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
    } catch (err) {
      var data = tryParseAsDataURI(url);
      if (data) {
        return intArrayToString(data);
      }
      throw err;
    }
  };

  if (ENVIRONMENT_IS_WORKER) {
    readBinary = function(url) {
      try {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(/** @type{!ArrayBuffer} */(xhr.response));
      } catch (err) {
        var data = tryParseAsDataURI(url);
        if (data) {
          return data;
        }
        throw err;
      }
    };
  }

  readAsync = function(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      var data = tryParseAsDataURI(url);
      if (data) {
        onload(data.buffer);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

// end include: web_or_worker_shell_read.js
  }

  setWindowTitle = function(title) { document.title = title };
} else
{
  throw new Error('environment detection error');
}

// Set up the out() and err() hooks, which are how we can print to stdout or
// stderr, respectively.
var out = Module['print'] || console.log.bind(console);
var err = Module['printErr'] || console.warn.bind(console);

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = null;

// Emit code to handle expected values on the Module object. This applies Module.x
// to the proper local x. This has two benefits: first, we only emit it if it is
// expected to arrive, and second, by using a local everywhere else that can be
// minified.

if (Module['arguments']) arguments_ = Module['arguments'];
if (!Object.getOwnPropertyDescriptor(Module, 'arguments')) {
  Object.defineProperty(Module, 'arguments', {
    configurable: true,
    get: function() {
      abort('Module.arguments has been replaced with plain arguments_ (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}

if (Module['thisProgram']) thisProgram = Module['thisProgram'];
if (!Object.getOwnPropertyDescriptor(Module, 'thisProgram')) {
  Object.defineProperty(Module, 'thisProgram', {
    configurable: true,
    get: function() {
      abort('Module.thisProgram has been replaced with plain thisProgram (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}

if (Module['quit']) quit_ = Module['quit'];
if (!Object.getOwnPropertyDescriptor(Module, 'quit')) {
  Object.defineProperty(Module, 'quit', {
    configurable: true,
    get: function() {
      abort('Module.quit has been replaced with plain quit_ (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}

// perform assertions in shell.js after we set up out() and err(), as otherwise if an assertion fails it cannot print the message
// Assertions on removed incoming Module JS APIs.
assert(typeof Module['memoryInitializerPrefixURL'] === 'undefined', 'Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['pthreadMainPrefixURL'] === 'undefined', 'Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['cdInitializerPrefixURL'] === 'undefined', 'Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['filePackagePrefixURL'] === 'undefined', 'Module.filePackagePrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['read'] === 'undefined', 'Module.read option was removed (modify read_ in JS)');
assert(typeof Module['readAsync'] === 'undefined', 'Module.readAsync option was removed (modify readAsync in JS)');
assert(typeof Module['readBinary'] === 'undefined', 'Module.readBinary option was removed (modify readBinary in JS)');
assert(typeof Module['setWindowTitle'] === 'undefined', 'Module.setWindowTitle option was removed (modify setWindowTitle in JS)');
assert(typeof Module['TOTAL_MEMORY'] === 'undefined', 'Module.TOTAL_MEMORY has been renamed Module.INITIAL_MEMORY');

if (!Object.getOwnPropertyDescriptor(Module, 'read')) {
  Object.defineProperty(Module, 'read', {
    configurable: true,
    get: function() {
      abort('Module.read has been replaced with plain read_ (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}

if (!Object.getOwnPropertyDescriptor(Module, 'readAsync')) {
  Object.defineProperty(Module, 'readAsync', {
    configurable: true,
    get: function() {
      abort('Module.readAsync has been replaced with plain readAsync (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}

if (!Object.getOwnPropertyDescriptor(Module, 'readBinary')) {
  Object.defineProperty(Module, 'readBinary', {
    configurable: true,
    get: function() {
      abort('Module.readBinary has been replaced with plain readBinary (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}

if (!Object.getOwnPropertyDescriptor(Module, 'setWindowTitle')) {
  Object.defineProperty(Module, 'setWindowTitle', {
    configurable: true,
    get: function() {
      abort('Module.setWindowTitle has been replaced with plain setWindowTitle (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}
var IDBFS = 'IDBFS is no longer included by default; build with -lidbfs.js';
var PROXYFS = 'PROXYFS is no longer included by default; build with -lproxyfs.js';
var WORKERFS = 'WORKERFS is no longer included by default; build with -lworkerfs.js';
var NODEFS = 'NODEFS is no longer included by default; build with -lnodefs.js';
function alignMemory() { abort('`alignMemory` is now a library function and not included by default; add it to your library.js __deps or to DEFAULT_LIBRARY_FUNCS_TO_INCLUDE on the command line'); }

assert(!ENVIRONMENT_IS_WORKER, "worker environment detected but not enabled at build time.  Add 'worker' to `-s ENVIRONMENT` to enable.");

assert(!ENVIRONMENT_IS_NODE, "node environment detected but not enabled at build time.  Add 'node' to `-s ENVIRONMENT` to enable.");

assert(!ENVIRONMENT_IS_SHELL, "shell environment detected but not enabled at build time.  Add 'shell' to `-s ENVIRONMENT` to enable.");




var STACK_ALIGN = 16;

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = Number(type.substr(1));
        assert(bits % 8 === 0, 'getNativeTypeSize invalid bits ' + bits + ', type ' + type);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    err(text);
  }
}

// include: runtime_functions.js


// Wraps a JS function as a wasm function with a given signature.
function convertJsFunctionToWasm(func, sig) {

  // If the type reflection proposal is available, use the new
  // "WebAssembly.Function" constructor.
  // Otherwise, construct a minimal wasm module importing the JS function and
  // re-exporting it.
  if (typeof WebAssembly.Function === "function") {
    var typeNames = {
      'i': 'i32',
      'j': 'i64',
      'f': 'f32',
      'd': 'f64'
    };
    var type = {
      parameters: [],
      results: sig[0] == 'v' ? [] : [typeNames[sig[0]]]
    };
    for (var i = 1; i < sig.length; ++i) {
      type.parameters.push(typeNames[sig[i]]);
    }
    return new WebAssembly.Function(type, func);
  }

  // The module is static, with the exception of the type section, which is
  // generated based on the signature passed in.
  var typeSection = [
    0x01, // id: section,
    0x00, // length: 0 (placeholder)
    0x01, // count: 1
    0x60, // form: func
  ];
  var sigRet = sig.slice(0, 1);
  var sigParam = sig.slice(1);
  var typeCodes = {
    'i': 0x7f, // i32
    'j': 0x7e, // i64
    'f': 0x7d, // f32
    'd': 0x7c, // f64
  };

  // Parameters, length + signatures
  typeSection.push(sigParam.length);
  for (var i = 0; i < sigParam.length; ++i) {
    typeSection.push(typeCodes[sigParam[i]]);
  }

  // Return values, length + signatures
  // With no multi-return in MVP, either 0 (void) or 1 (anything else)
  if (sigRet == 'v') {
    typeSection.push(0x00);
  } else {
    typeSection = typeSection.concat([0x01, typeCodes[sigRet]]);
  }

  // Write the overall length of the type section back into the section header
  // (excepting the 2 bytes for the section id and length)
  typeSection[1] = typeSection.length - 2;

  // Rest of the module is static
  var bytes = new Uint8Array([
    0x00, 0x61, 0x73, 0x6d, // magic ("\0asm")
    0x01, 0x00, 0x00, 0x00, // version: 1
  ].concat(typeSection, [
    0x02, 0x07, // import section
      // (import "e" "f" (func 0 (type 0)))
      0x01, 0x01, 0x65, 0x01, 0x66, 0x00, 0x00,
    0x07, 0x05, // export section
      // (export "f" (func 0 (type 0)))
      0x01, 0x01, 0x66, 0x00, 0x00,
  ]));

   // We can compile this wasm module synchronously because it is very small.
  // This accepts an import (at "e.f"), that it reroutes to an export (at "f")
  var module = new WebAssembly.Module(bytes);
  var instance = new WebAssembly.Instance(module, {
    'e': {
      'f': func
    }
  });
  var wrappedFunc = instance.exports['f'];
  return wrappedFunc;
}

var freeTableIndexes = [];

// Weak map of functions in the table to their indexes, created on first use.
var functionsInTableMap;

function getEmptyTableSlot() {
  // Reuse a free index if there is one, otherwise grow.
  if (freeTableIndexes.length) {
    return freeTableIndexes.pop();
  }
  // Grow the table
  try {
    wasmTable.grow(1);
  } catch (err) {
    if (!(err instanceof RangeError)) {
      throw err;
    }
    throw 'Unable to grow wasm table. Set ALLOW_TABLE_GROWTH.';
  }
  return wasmTable.length - 1;
}

// Add a wasm function to the table.
function addFunctionWasm(func, sig) {
  // Check if the function is already in the table, to ensure each function
  // gets a unique index. First, create the map if this is the first use.
  if (!functionsInTableMap) {
    functionsInTableMap = new WeakMap();
    for (var i = 0; i < wasmTable.length; i++) {
      var item = wasmTable.get(i);
      // Ignore null values.
      if (item) {
        functionsInTableMap.set(item, i);
      }
    }
  }
  if (functionsInTableMap.has(func)) {
    return functionsInTableMap.get(func);
  }

  // It's not in the table, add it now.

  var ret = getEmptyTableSlot();

  // Set the new value.
  try {
    // Attempting to call this with JS function will cause of table.set() to fail
    wasmTable.set(ret, func);
  } catch (err) {
    if (!(err instanceof TypeError)) {
      throw err;
    }
    assert(typeof sig !== 'undefined', 'Missing signature argument to addFunction: ' + func);
    var wrapped = convertJsFunctionToWasm(func, sig);
    wasmTable.set(ret, wrapped);
  }

  functionsInTableMap.set(func, ret);

  return ret;
}

function removeFunction(index) {
  functionsInTableMap.delete(wasmTable.get(index));
  freeTableIndexes.push(index);
}

// 'sig' parameter is required for the llvm backend but only when func is not
// already a WebAssembly function.
function addFunction(func, sig) {
  assert(typeof func !== 'undefined');

  return addFunctionWasm(func, sig);
}

// end include: runtime_functions.js
// include: runtime_debug.js


// end include: runtime_debug.js
var tempRet0 = 0;

var setTempRet0 = function(value) {
  tempRet0 = value;
};

var getTempRet0 = function() {
  return tempRet0;
};



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

var wasmBinary;
if (Module['wasmBinary']) wasmBinary = Module['wasmBinary'];
if (!Object.getOwnPropertyDescriptor(Module, 'wasmBinary')) {
  Object.defineProperty(Module, 'wasmBinary', {
    configurable: true,
    get: function() {
      abort('Module.wasmBinary has been replaced with plain wasmBinary (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}
var noExitRuntime = Module['noExitRuntime'] || false;
if (!Object.getOwnPropertyDescriptor(Module, 'noExitRuntime')) {
  Object.defineProperty(Module, 'noExitRuntime', {
    configurable: true,
    get: function() {
      abort('Module.noExitRuntime has been replaced with plain noExitRuntime (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}

if (typeof WebAssembly !== 'object') {
  abort('no native wasm support detected');
}

// include: runtime_safe_heap.js


// In MINIMAL_RUNTIME, setValue() and getValue() are only available when building with safe heap enabled, for heap safety checking.
// In traditional runtime, setValue() and getValue() are always available (although their use is highly discouraged due to perf penalties)

/** @param {number} ptr
    @param {number} value
    @param {string} type
    @param {number|boolean=} noSafe */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch (type) {
      case 'i1': HEAP8[((ptr)>>0)] = value; break;
      case 'i8': HEAP8[((ptr)>>0)] = value; break;
      case 'i16': HEAP16[((ptr)>>1)] = value; break;
      case 'i32': HEAP32[((ptr)>>2)] = value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math.min((+(Math.floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)] = tempI64[0],HEAP32[(((ptr)+(4))>>2)] = tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)] = value; break;
      case 'double': HEAPF64[((ptr)>>3)] = value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @param {number} ptr
    @param {string} type
    @param {number|boolean=} noSafe */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch (type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}

// end include: runtime_safe_heap.js
// Wasm globals

var wasmMemory;

//========================================
// Runtime essentials
//========================================

// whether we are quitting the application. no code should run after this.
// set in exit() and abort()
var ABORT = false;

// set by exit() and abort().  Passed to 'onExit' handler.
// NOTE: This is also used as the process return code code in shell environments
// but only when noExitRuntime is false.
var EXITSTATUS;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

// C calling interface.
/** @param {string|null=} returnType
    @param {Array=} argTypes
    @param {Arguments|Array=} args
    @param {Object=} opts */
function ccall(ident, returnType, argTypes, args, opts) {
  // For fast lookup of conversion functions
  var toC = {
    'string': function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    },
    'array': function(arr) {
      var ret = stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    }
  };

  function convertReturnValue(ret) {
    if (returnType === 'string') return UTF8ToString(ret);
    if (returnType === 'boolean') return Boolean(ret);
    return ret;
  }

  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== 'array', 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);
  function onDone(ret) {
    if (stack !== 0) stackRestore(stack);
    return convertReturnValue(ret);
  }

  ret = onDone(ret);
  return ret;
}

/** @param {string=} returnType
    @param {Array=} argTypes
    @param {Object=} opts */
function cwrap(ident, returnType, argTypes, opts) {
  return function() {
    return ccall(ident, returnType, argTypes, arguments, opts);
  }
}

// We used to include malloc/free by default in the past. Show a helpful error in
// builds with assertions.

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((Uint8Array|Array<number>), number)} */
function allocate(slab, allocator) {
  var ret;
  assert(typeof allocator === 'number', 'allocate no longer takes a type argument')
  assert(typeof slab !== 'number', 'allocate no longer takes a number as arg0')

  if (allocator == ALLOC_STACK) {
    ret = stackAlloc(slab.length);
  } else {
    ret = _malloc(slab.length);
  }

  if (slab.subarray || slab.slice) {
    HEAPU8.set(/** @type {!Uint8Array} */(slab), ret);
  } else {
    HEAPU8.set(new Uint8Array(slab), ret);
  }
  return ret;
}

// include: runtime_strings.js


// runtime_strings.js: Strings related runtime functions that are part of both MINIMAL_RUNTIME and regular runtime.

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;

/**
 * @param {number} idx
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ArrayToString(heap, idx, maxBytesToRead) {
  var endIdx = idx + maxBytesToRead;
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  // (As a tiny code save trick, compare endPtr against endIdx using a negation, so that undefined means Infinity)
  while (heap[endPtr] && !(endPtr >= endIdx)) ++endPtr;

  if (endPtr - idx > 16 && heap.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(heap.subarray(idx, endPtr));
  } else {
    var str = '';
    // If building with TextDecoder, we have already computed the string length above, so test loop end condition against that
    while (idx < endPtr) {
      // For UTF8 byte structure, see:
      // http://en.wikipedia.org/wiki/UTF-8#Description
      // https://www.ietf.org/rfc/rfc2279.txt
      // https://tools.ietf.org/html/rfc3629
      var u0 = heap[idx++];
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      var u1 = heap[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      var u2 = heap[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        if ((u0 & 0xF8) != 0xF0) warnOnce('Invalid UTF-8 leading byte 0x' + u0.toString(16) + ' encountered when deserializing a UTF-8 string in wasm memory to a JS string!');
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | (heap[idx++] & 63);
      }

      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
  return str;
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns a
// copy of that string as a Javascript String object.
// maxBytesToRead: an optional length that specifies the maximum number of bytes to read. You can omit
//                 this parameter to scan the string until the first \0 byte. If maxBytesToRead is
//                 passed, and the string at [ptr, ptr+maxBytesToReadr[ contains a null byte in the
//                 middle, then the string will cut short at that byte index (i.e. maxBytesToRead will
//                 not produce a string of exact length [ptr, ptr+maxBytesToRead[)
//                 N.B. mixing frequent uses of UTF8ToString() with and without maxBytesToRead may
//                 throw JS JIT optimizations off, so it is worth to consider consistently using one
//                 style or the other.
/**
 * @param {number} ptr
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ToString(ptr, maxBytesToRead) {
  return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : '';
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   heap: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array.
//                    This count should include the null terminator,
//                    i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, heap, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) {
      var u1 = str.charCodeAt(++i);
      u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);
    }
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      heap[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      heap[outIdx++] = 0xC0 | (u >> 6);
      heap[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      heap[outIdx++] = 0xE0 | (u >> 12);
      heap[outIdx++] = 0x80 | ((u >> 6) & 63);
      heap[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 3 >= endIdx) break;
      if (u >= 0x200000) warnOnce('Invalid Unicode code point 0x' + u.toString(16) + ' encountered when serializing a JS string to a UTF-8 string in wasm memory! (Valid unicode code points should be in range 0-0x1FFFFF).');
      heap[outIdx++] = 0xF0 | (u >> 18);
      heap[outIdx++] = 0x80 | ((u >> 12) & 63);
      heap[outIdx++] = 0x80 | ((u >> 6) & 63);
      heap[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  heap[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.
function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) ++len;
    else if (u <= 0x7FF) len += 2;
    else if (u <= 0xFFFF) len += 3;
    else len += 4;
  }
  return len;
}

// end include: runtime_strings.js
// include: runtime_strings_extra.js


// runtime_strings_extra.js: Strings related runtime functions that are available only in regular runtime.

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAPU8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;

function UTF16ToString(ptr, maxBytesToRead) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  var maxIdx = idx + maxBytesToRead / 2;
  // If maxBytesToRead is not passed explicitly, it will be undefined, and this
  // will always evaluate to true. This saves on code size.
  while (!(idx >= maxIdx) && HEAPU16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var str = '';

    // If maxBytesToRead is not passed explicitly, it will be undefined, and the for-loop's condition
    // will always evaluate to true. The loop is then terminated on the first null char.
    for (var i = 0; !(i >= maxBytesToRead / 2); ++i) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) break;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }

    return str;
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)] = codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)] = 0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr, maxBytesToRead) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  // If maxBytesToRead is not passed explicitly, it will be undefined, and this
  // will always evaluate to true. This saves on code size.
  while (!(i >= maxBytesToRead / 4)) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0) break;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
  return str;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)] = codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)] = 0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated
    @param {boolean=} dontAddNull */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}

/** @param {boolean=} dontAddNull */
function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)] = str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)] = 0;
}

// end include: runtime_strings_extra.js
// Memory management

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBufferAndViews(buf) {
  buffer = buf;
  Module['HEAP8'] = HEAP8 = new Int8Array(buf);
  Module['HEAP16'] = HEAP16 = new Int16Array(buf);
  Module['HEAP32'] = HEAP32 = new Int32Array(buf);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buf);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buf);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buf);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buf);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buf);
}

var TOTAL_STACK = 5242880;
if (Module['TOTAL_STACK']) assert(TOTAL_STACK === Module['TOTAL_STACK'], 'the stack size can no longer be determined at runtime')

var INITIAL_MEMORY = Module['INITIAL_MEMORY'] || 16777216;
if (!Object.getOwnPropertyDescriptor(Module, 'INITIAL_MEMORY')) {
  Object.defineProperty(Module, 'INITIAL_MEMORY', {
    configurable: true,
    get: function() {
      abort('Module.INITIAL_MEMORY has been replaced with plain INITIAL_MEMORY (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}

assert(INITIAL_MEMORY >= TOTAL_STACK, 'INITIAL_MEMORY should be larger than TOTAL_STACK, was ' + INITIAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');

// If memory is defined in wasm, the user can't provide it.
assert(!Module['wasmMemory'], 'Use of `wasmMemory` detected.  Use -s IMPORTED_MEMORY to define wasmMemory externally');
assert(INITIAL_MEMORY == 16777216, 'Detected runtime INITIAL_MEMORY setting.  Use -s IMPORTED_MEMORY to define wasmMemory dynamically');

// include: runtime_init_table.js
// In regular non-RELOCATABLE mode the table is exported
// from the wasm module and this will be assigned once
// the exports are available.
var wasmTable;

// end include: runtime_init_table.js
// include: runtime_stack_check.js


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  var max = _emscripten_stack_get_end();
  assert((max & 3) == 0);
  // The stack grows downwards
  HEAPU32[(max >> 2)+1] = 0x2135467;
  HEAPU32[(max >> 2)+2] = 0x89BACDFE;
  // Also test the global address 0 for integrity.
  HEAP32[0] = 0x63736d65; /* 'emsc' */
}

function checkStackCookie() {
  if (ABORT) return;
  var max = _emscripten_stack_get_end();
  var cookie1 = HEAPU32[(max >> 2)+1];
  var cookie2 = HEAPU32[(max >> 2)+2];
  if (cookie1 != 0x2135467 || cookie2 != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x2135467, but received 0x' + cookie2.toString(16) + ' ' + cookie1.toString(16));
  }
  // Also test the global address 0 for integrity.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) abort('Runtime error: The application has corrupted its heap memory area (address zero)!');
}

// end include: runtime_stack_check.js
// include: runtime_assertions.js


// Endianness check
(function() {
  var h16 = new Int16Array(1);
  var h8 = new Int8Array(h16.buffer);
  h16[0] = 0x6373;
  if (h8[0] !== 0x73 || h8[1] !== 0x63) throw 'Runtime error: expected the system to be little-endian! (Run with -s SUPPORT_BIG_ENDIAN=1 to bypass)';
})();

// end include: runtime_assertions.js
var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the main() is called

var runtimeInitialized = false;
var runtimeExited = false;
var runtimeKeepaliveCounter = 0;

function keepRuntimeAlive() {
  return noExitRuntime || runtimeKeepaliveCounter > 0;
}

function preRun() {

  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPRERUN__);
}

function initRuntime() {
  checkStackCookie();
  assert(!runtimeInitialized);
  runtimeInitialized = true;

  
  callRuntimeCallbacks(__ATINIT__);
}

function exitRuntime() {
  checkStackCookie();
  callRuntimeCallbacks(__ATEXIT__);
  flush_NO_FILESYSTEM()
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();

  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

// include: runtime_math.js


// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/fround

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc

assert(Math.imul, 'This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.fround, 'This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.clz32, 'This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.trunc, 'This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');

// end include: runtime_math.js
// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// Module.preRun (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
}

function addRunDependency(id) {
  runDependencies++;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            err('still waiting on run dependencies:');
          }
          err('dependency: ' + dep);
        }
        if (shown) {
          err('(end of list)');
        }
      }, 10000);
    }
  } else {
    err('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    err('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data

/** @param {string|number=} what */
function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  what += '';
  err(what);

  ABORT = true;
  EXITSTATUS = 1;

  var output = 'abort(' + what + ') at ' + stackTrace();
  what = output;

  // Use a wasm runtime error, because a JS error might be seen as a foreign
  // exception, which means we'd run destructors on it. We need the error to
  // simply make the program stop.
  var e = new WebAssembly.RuntimeError(what);

  readyPromiseReject(e);
  // Throw the error whether or not MODULARIZE is set because abort is used
  // in code paths apart from instantiation where an exception is expected
  // to be thrown when abort is called.
  throw e;
}

// {{MEM_INITIALIZER}}

// include: memoryprofiler.js


// end include: memoryprofiler.js
// show errors on likely calls to FS when it was not included
var FS = {
  error: function() {
    abort('Filesystem support (FS) was not included. The problem is that you are using files from JS, but files were not used from C/C++, so filesystem support was not auto-included. You can force-include filesystem support with  -s FORCE_FILESYSTEM=1');
  },
  init: function() { FS.error() },
  createDataFile: function() { FS.error() },
  createPreloadedFile: function() { FS.error() },
  createLazyFile: function() { FS.error() },
  open: function() { FS.error() },
  mkdev: function() { FS.error() },
  registerDevice: function() { FS.error() },
  analyzePath: function() { FS.error() },
  loadFilesFromDB: function() { FS.error() },

  ErrnoError: function ErrnoError() { FS.error() },
};
Module['FS_createDataFile'] = FS.createDataFile;
Module['FS_createPreloadedFile'] = FS.createPreloadedFile;

// include: URIUtils.js


// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  // Prefix of data URIs emitted by SINGLE_FILE and related options.
  return filename.startsWith(dataURIPrefix);
}

// Indicates whether filename is delivered via file protocol (as opposed to http/https)
function isFileURI(filename) {
  return filename.startsWith('file://');
}

// end include: URIUtils.js
function createExportWrapper(name, fixedasm) {
  return function() {
    var displayName = name;
    var asm = fixedasm;
    if (!fixedasm) {
      asm = Module['asm'];
    }
    assert(runtimeInitialized, 'native function `' + displayName + '` called before runtime initialization');
    assert(!runtimeExited, 'native function `' + displayName + '` called after runtime exit (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
    if (!asm[name]) {
      assert(asm[name], 'exported native function `' + displayName + '` not found');
    }
    return asm[name].apply(null, arguments);
  };
}

var wasmBinaryFile;
  wasmBinaryFile = 'data:application/octet-stream;base64,AGFzbQEAAAABoYuAgACoAWABfwF/YAJ/fwBgAAF/YAJ/fwF/YAF/AGADf39/AGADf39/AX9gAABgBH9/f38Bf2AEf39/fwBgB39/f39/f38Bf2AFf39/f38AYAZ/f39/f38Bf2ACf38BfWABfAF/YAZ/f39/f38AYAV/f39/fwF/YAJ/fQBgAAF9YAN/f30AYAF/AX1gCH9/f39/f39/AX9gAX0BfWAHf39/f39/fwBgAX0AYAJ9fQF9YAV/f31/fwBgBn9/f39/fQBgCH9/f31/f39/AX9gCX9/f39/f39/fwF/YAN/f30Bf2AEf39/fQBgBX9/f399AGADfX19AX1gBH9/fX8AYAF8AXxgBX9/f31/AGAAAX5gCn9/f39/f39/f38AYAZ9fX1/f38AYAZ/f31/f30AYAV/fn5+fgBgCH9/f39/f39/AGAHf39/f39/fQBgB39/fX9/f38Bf2AGf399fX9/AX9gAX8BfGADf35/AX5gBH99f38AYAJ9fQBgBn9/f399fwBgCH9/f39/f31/AGAHf39/f399fwBgC39/f39/f39/f39/AGAJf39/f39/f31/AGACfn4BfmAHf399fX1/fwF/YAl/f39/f39/f38AYAN/fX0Bf2ACf30Bf2ACf30BfWAEf399fQBgA39/fwF9YAZ/f319fX8AYAd/f39/fX99AGAFf39/f30Bf2ADfX9/AGAGf398fH9/AX9gA399fwBgCH9/fX19f39/AGAGf399f39/AGABfAF9YAF/AX5gBX99fX19AX9gBX9/f319AGADf319AGACfHwBfGAIf399f39/fX8AYAJ/fABgBH99f30Bf2AEf35+fwBgBH9+fn8BfmAAAXxgBH19fX0BfWAGf39/f399AX9gB39/fX5+f38Bf2AHf39/f399fQF9YAd/fX9/f319AX9gB39+fn5/fX0BfWAHf31+fn99fQF+YAN/f34BfmAHf319fX99fQF9YAl/f39/fn5/f38Bf2AJf39/f399fX9/AGAJf39/f39/fX1/AGADfn5+AX5gA35+fQF+YAZ/f399f38AYAF9AX9gA39+fwF/YAJ8fwF8YAZ/fH9/f38Bf2ACfn8Bf2AEfn5+fgF/YA1/f39/f39/f39/f39/AGADf39/AXxgA39/fABgCH9/f319f39/AGAEfX19fQF/YAJ9fQF/YAt/fX19fX19fX19fwBgCX99fX19fX19fwBgCX9/fX9/f399fwBgB39/fX9/f38AYAZ/f399fX0AYAh/f39/fX99fwBgB39/f399fX8Bf2AHf399fHx/fwF/YAN/f30BfWAHf3x8fH99fQF9YAd/fXx8f319AXxgA39/fAF8YAl/f39/fX9/f38Bf2AJf39/fX19f39/AX9gCX9/f31/f39/fwF/YAl/f39/fX1/f38Bf2AJf39/f3x8f39/AX9gB39/f319f38Bf2AKf39/f39/f319fwF/YAR/fX19AX1gA3x8fAF8YAN8fH0BfGAKf39/f39/f39/fwF/YAd/f398fH9/AX9gBX9/f31/AX9gB399fX1/f38AYAR/f319AX9gBH9/fX8Bf2AIf39/f399f30AYAh/f39/f39/fQBgB39/f31/f30AYAl/f399f39/fX8AYAx/f39/f39/f39/f38AYAp/f39/f39/f31/AGAHf39/fX19fwBgCH9/fX19f39/AX9gBX9/fX99AX9gB39/f31/f38AYAR/f399AX9gBX99fX19AGAFf31/f30Bf2AKf399f39/f399fwBgAn1/AX1gAn1/AX9gA35/fwF/YAF8AX5gAn9+AGADf35+AGACf38BfmAEf39/fgF+YAN/f34AYAJ/fwF8YAJ+fgF8YAJ+fgF9YAJ+fgF/YAR/f35/AX5gBX9/f35+AGAEf35/fwF/Ar+JgIAALQNlbnYNX19hc3NlcnRfZmFpbAAJA2VudhFfZW12YWxfbmV3X29iamVjdAACA2VudhNfZW12YWxfc2V0X3Byb3BlcnR5AAUDZW52EV9lbXZhbF90YWtlX3ZhbHVlAAMDZW52DV9lbXZhbF9kZWNyZWYABANlbnYZX2VtYmluZF9yZWdpc3Rlcl9mdW5jdGlvbgAPA2VudhZfZW1iaW5kX3JlZ2lzdGVyX2NsYXNzAGgDZW52CV9lbXZhbF9hcwBpA2VudhJfZW12YWxfbmV3X2NzdHJpbmcAAANlbnYTX2VtdmFsX2dldF9wcm9wZXJ0eQADA2VudhZfZW12YWxfc3RyaWN0bHlfZXF1YWxzAAMDZW52H19lbWJpbmRfcmVnaXN0ZXJfY2xhc3NfcHJvcGVydHkAJgNlbnYZX2VtYmluZF9yZWdpc3Rlcl9jb25zdGFudABqA2Vudg1fZW12YWxfaW5jcmVmAAQDZW52GF9fY3hhX2FsbG9jYXRlX2V4Y2VwdGlvbgAAA2VudgtfX2N4YV90aHJvdwAFA2VudhZfZW12YWxfcnVuX2Rlc3RydWN0b3JzAAQDZW52H19lbWJpbmRfcmVnaXN0ZXJfY2xhc3NfZnVuY3Rpb24AKgNlbnYiX2VtYmluZF9yZWdpc3Rlcl9jbGFzc19jb25zdHJ1Y3RvcgAPA2VudgtfZW12YWxfY2FsbAAIA2Vudg1fZW12YWxfdHlwZW9mAAADZW52EF9lbXZhbF9uZXdfYXJyYXkAAgNlbnYXX2VtdmFsX2NhbGxfdm9pZF9tZXRob2QACQNlbnYYX2VtdmFsX2dldF9tZXRob2RfY2FsbGVyAAMDZW52DF9fY3hhX2F0ZXhpdAAGA2VudhVfZW1iaW5kX3JlZ2lzdGVyX3ZvaWQAAQNlbnYVX2VtYmluZF9yZWdpc3Rlcl9ib29sAAsDZW52G19lbWJpbmRfcmVnaXN0ZXJfc3RkX3N0cmluZwABA2VudhxfZW1iaW5kX3JlZ2lzdGVyX3N0ZF93c3RyaW5nAAUDZW52Fl9lbWJpbmRfcmVnaXN0ZXJfZW12YWwAAQNlbnYYX2VtYmluZF9yZWdpc3Rlcl9pbnRlZ2VyAAsDZW52Fl9lbWJpbmRfcmVnaXN0ZXJfZmxvYXQABQNlbnYcX2VtYmluZF9yZWdpc3Rlcl9tZW1vcnlfdmlldwAFA2VudgpfX3N5c19vcGVuAAYWd2FzaV9zbmFwc2hvdF9wcmV2aWV3MQhmZF9jbG9zZQAAA2Vudg1fX3N5c19mY250bDY0AAYDZW52C19fc3lzX2lvY3RsAAYWd2FzaV9zbmFwc2hvdF9wcmV2aWV3MQdmZF9yZWFkAAgWd2FzaV9zbmFwc2hvdF9wcmV2aWV3MQhmZF93cml0ZQAIA2VudgVhYm9ydAAHA2VudhZlbXNjcmlwdGVuX3Jlc2l6ZV9oZWFwAAADZW52FWVtc2NyaXB0ZW5fbWVtY3B5X2JpZwAGA2VudgtzZXRUZW1wUmV0MAAEA2VudhdfZW1iaW5kX3JlZ2lzdGVyX2JpZ2ludAAXFndhc2lfc25hcHNob3RfcHJldmlldzEHZmRfc2VlawAQA96tgIAAtC0HAAAAOhETARYAAAEBAAAA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BAEBAQEfAT8BGgELAQkBJAEBAQQBBQEBCQEPJgEJAQEJBwAHAgICAgIABAEBAwAFAwAFAwEAAQEBAQEHAAcCAgICAgAEAwEAAQ0AEwEFAQADAAUHAAcCAgICAgAEAwEABQEAAwAFAwAFDQATAQEBAwAFAQEBAQUABQUABQAABQUABQUFAAUFAQAADgAOAA4ADgAOAE4ABwAHAgICAgIABAUBAAEBAQMBAAUBAAMABQEBAQEBBwAHAgICAgIABAIDAAUNABMDAQAFAQABAQEBAwAFAwAFAQEFAQVFAU8BRgEBAQEBAQEEAQcABwICAgICAAQDAAUDAQANABMBBQEAAQEDAQYBAQEBAwAFAQEBAQEBAQEBAQEBAQEBAQEBAQEDAQYBAwYNAR4BAQEBAQEBAQUBDQENDQcABwICAgICAAQNABMDAQABAQMABQEBAQEBAQEBAQMABQUBBgECBAEHAAMBAgEBAAEEAQIBBAQBBAEEBAEEBAQEAQQEAQQBBAQGAQgBAQQBAQEBBQEBAQkBBAEBAQEBBwUBBQUBBAEBAQEBBAEBAQEBBAEDAQABAAEBAQQBBAEBBAQABAQBAQQEAQEEAwEAAQYDAQ8BCgEDBgEDAQZCAQYMAQoBCgoKHQEKAQoKCh0VAQwBDAwMDAwBDAwMCgEKChUBDAEKAQoBDAgBCAgQAQYGBkMBCgYGBggBCAADAQMBAwYBBgEEBAMGCAEIEAEMAwYBOQE5AQEBAQEBRAEDCAEIAQQDBgEBAwEDAwNBAQcRAQIAIgEBAQcEBAIBAgIBAQABBQEFAQEDBgMEAQQIAQMEBQEBAQEAAQMBAQQEBAEEBDABBgEkAQUBACcBJwEBBgEAAQEBIgEEBAQECgEFAQEBBAIAAAYAAAACAC4AAAMAAAIBAAAAAAAAAAQAAAEAAAEAAAAAAQAAAggAAAIQAAADAAADAAACFAAAAgkAAAUAAAILAAAFAAACEQAACQAACQAAAksAAAUAAAEAAAEAAAIGAAADAAADAAADAAAFAAAFAAAGAAADAAAGAAACFwAAAhUAAAgAAAYAAAIwAAACCgAAFQAAAoQBAAAVAAACHQAACgAACgAAFQAAHQAACgAAFQAAFQAAEAAAAgwAAAKFAQAAEAAABgAABgAACAAACAAAEAAADAAACAAAAiYAAAUAAAUAAAUAAAIiAAAQAAAQAAAGAAACVAAAEwAAAiQAAAUAAAAAAwAAAwAACQAACQAADQAAEAAACQAAAwAABgACLgAAAhoAAAgAAAKGAQAABgAAAocBAAAGAAACiAEAAAgAAAIeAAACiQEAABUAAAkAAAMAAAUFAAAAAAAABQEEAAAAAAAAAAAAAAEEAgAAAgAAAAABAAABAAQDAwACDgEGAAACAgICIyMAAwIAFBECAAICAhYCAAAIAAECAQAABgACBgAAAgACAgIAAAwAAgACAgIAAgAAAgEDAAMAAQIAAAAAAQIAAAACAAAJAAACBQAACQAAAgAAAwAAAgACAgIBAwADAgAAAQIAAQEAAgICAAAAAAIAAAIfAAACAAABAAIAAAMAAgACAgIAAAIAAAIBAAACAgIFAwADAgAAAQIAAAYAAAIAAgICAQMAAwIAAAECAAEDAAMAAAICAgEAAwMJAAsAAwIAAAMCAAYAAAECAAABAgECAAAFAAACAQAABQMGAAMCAAEBAgABAAAJAAALAAACAAABAAACAg4BAAAFAAIFAQMAAAAGAAIFASAAAAIbAAJAAAACigEAAjIAAAI0AAIXAAACKgACKwAAAosBAAIPAAAXAAIbAAACKwACCwAAAg8AAigAAAKMAQACGgAAAmEAAigaCQAACwACTQADAAAOAg4ABAAAAo0BAAIXAAAqAAI1AAACjgEAAjYAAAKPAQACGwUAACsAAgkAAAsAAjMAAAI2AAI0AAACMwACAQEBAQAABQACHwAAAiAAAj8AAAKQAQACGgAAYQACCwAADwACCQAACwACJAAAAjIAAgAABQACAAAJAAIAAAkAAgkAAAsAAg8mAAACNQACCQEAAAUAAgkAAgICAQMFCQADAgADAAABAgAABQAAAgEAAQEAAAEAAAIBAAAFAAACAAICAgEDAAMCAAIAAQMAAwABAQEAAAICAgQHAAABAQEDAAMCAAABAgEBAQMAAwIAAAECAg4AAg4CDgACDgACAgIFAAAGAAACAAADAAACAQUDBQMGAAMCAAADAgABAQICAAADAAIBAQAAAQEAAAUAAAIEAAAAAgICAwEBAQABARRHAkcAAAEBAQMDAAMCAAABAgAABQACAQMAAwIAAAECAAADAAIFAwADAgAAAQIAAAYAAAIFRQUAAAKRAQACTwAAApIBAAJGAAAOAg4AAAKTAQACAQAAAAMCAQAABQACAQAADgIOAAAABQIEBAQAAAEAAgACAgIBAAEBAgABAQMAAAYAAAIGAAAIAAIEBAMBAwADAgAAAQIBAQEEBAQEBAQEBAQEBAQEBAQEAQMAAAYAAgYAAAgAAgMGDQAAAj4AAh4AAAKUAQACAAAFAAACAQAABQACAQAABQACAAABAAIBBQMEAAMCAAIAAAYAAAINAAANDQACAgIBAAEBAQEBAQEBAQEBBQMAAwIAAAECAAAGAAACBgAACAACAAAAAAIAABMAAgICAgAAAwEABQMJAAkDAAAAAgMACwYAAAACAAIEBAACAgIEBAQDAAMCAAABAgQDAAMCAAECAgQDAAMCAAABAgQDAAAEBAUABAEFAwADAAEDAAMCAAICBAQEAA4OBAIEBAQCBAQGAggBAgIEAwADAgAAAQIBAQUCAQIFBAQDAAMCAAABAgIEAgIBAQEHBQIFBQIEAQEBAQIEAQICAQIEAQMCAAIAAgECBAEEAQEEBAAEBAECBAQBAgQDAgACBgMCDwIKAgMDAAAEBAQGAwAABAQEAAECAwIGAwAABAQEAAFCAwAAAwAEAQQCBgwGAwQDAwsDAgAPAggAAAAAAgACCgMAAAQEBAIKAwAABAQECgMAAAQEBAoDAAAEBAQdAgoCCgMAAAQEBAoDAAAEBAQKAwAABAQEHRUDAAMAHAADAAMAHAADAAMAHAADAAMAHAADAAMAHAADAAMAHAADAAMAHAADAAMAHAAAAAABBQMFBQAAAAABBQAAAAABBQMFAAAAAAEFAwUAAAAAAQUDBQAAAAABBQMFAAAAAAEFAwUAAAAAAQUDBQAAAAEBBgADAgAFAAYAAwAAAAEAAwgBAQABAQEABgEAAAAAAwYAAwAGAAQJAQEEBAAFAAEAAAACAwADAwAAAgYAAAAAAAMDAAAAAAsAAQUAAQEBAAEBAgICAAACBAAAAA4CDgAFAAICAAACBAAAAQEGAwAAAAEAAwgBAQABAQEABgEAAAAABgADAAYABAkBAQQEAAUAAQAAAAAAAAAAAAAAAwMAAAAACwABBQABAQEABAAAAA4CDgAFAAICAAACBAAAAQEGAAMCAAYDAAAAAQADCAEBAAEBAQAGAQAAAAAGAAMABgAECQEBBAQABQABAAAAAAAAAAAAAAADAwAAAAALAAEFAAEBAQABAQIEAAAADgIOBQACAgAAAgQAAAEBBgADAgAGAwAAAAEAAwgBAQABAQEABgEAAAAABgADAAYABAkBAQQEAAUAAQAAAAAAAAAAAAAAAwMAAAAACwABBQABAQEAAQECBAAAAA4CDgUAAgIAAAIEAAABAQYAAwIABgMAAAABAAMIAQEAAQEBAAYBAAAAAAYAAwAGAAQJAQEEBAAFAAEAAAAAAAAAAAAAAAMDAAAAAAsAAQUAAQEBAAEBAgQFAAICAAACBAAAAQEGAAMCAAYDAAAAAQADCAEBAAEBAQAGAQAAAAAGAAMABgAECQEBBAQABQABAAAAAAAAAAAAAAADAwAAAAALAAEFAAEBAQABAQIEBQACAgAAAgQAAAEBBgADAgAGAwAAAAEAAwgBAQABAQEABgEAAAAABgADAAYABAkBAQQEAAUAAQAAAAAAAAAAAAAAAwMAAAAACwABBQABAQEAAQECBAUAAgIAAAIEAAABAQYAAwIABgMAAAABAAMIAQEAAQEBAAYBAAAAAAYAAwAGAAQJAQEEBAAFAAEAAAAAAAAAAAAAAAMDAAAAAAsAAQUAAQEBAAEBAgQuBQACAgAAAgQCDAIMDAwMDAIMDAwKCgoKCgoKCgoCCgoVAAAAAAAAAAACEAAFAwADAAMCAAABAgADAAIMAAACDAAAAgwIAggIEAIGBgZDAwAABAQEAQMAAwIALk4CAgoKCgoKCgoKCgYGBggDAAAEBAQCCAADAgMCAwYCBgIEBAMGCAIIEAYDAgwGAwMGAjkNFAkLBgAAAAICOQ0UAQIBAgECRAIDCAIIAgQDBgEBAwIDAwNBAgcRAgIAIgIBAgcEBAMAAwIAAAECAgICAQIAAgUCBQICAwYDBAEEAwIDBAUCAQEBAAIDBAQEAwADAgAAAQIBBwQwAgYCJAIFAgAnAAInAgIGAgADAAQBAQIiAgQEBAQKAgUDAQADCQALAAMCAAAOBgAAAAICAg4ABAMAAwIAAAECAgECBAcHBAcHBwcHBwcHBwcHBwQEBwQHBwcHBwAEAwQEBAcEBAAEAAEDBAQABAUABAUFAQQABAQDAAQAAwAEBASVAQEGBgAABAQAAAQDAw0NBwcEBAQEAAQFAwMEBAMDBwQAAAAGA0YCBwAAAAQAAwAEAAEMBRMECwAEAAADAQMDlgENAANFABmXAQEAAARJAwQAAwADAQMDAAAEAQUAAwAA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ACABKgIAOAIAIAEgAjgCAAuyAgIBfwF9AkAgAUMAAAAAXA0AIAUgAjgCACAEIAI4AgAgAyACOAIADwsCQAJAIABDAACAPxDMLUOrqio+lSIAi0MAAABPXUUNACAAqCEGDAELQYCAgIB4IQYLQwAAgD8gACAGspMiACABlJMgApQhB0MAAIA/QwAAgD8gAJMgAZSTIAKUIQBDAACAPyABkyAClCEBAkACQAJAAkACQAJAIAYOBQABAgMEBQsgAyACOAIAIAQgADgCACAFIAE4AgAPCyADIAc4AgAgBCACOAIAIAUgATgCAA8LIAMgATgCACAEIAI4AgAgBSAAOAIADwsgAyABOAIAIAQgBzgCACAFIAI4AgAPCyADIAA4AgAgBCABOAIAIAUgAjgCAA8LIAMgAjgCACAEIAE4AgAgBSAHOAIACykBAX8CQCAAIAEQeyIDIAAQfEYNACADKAIAIAFHDQAgAygCBCECCyACC08BA38gACgCCCECAkAgACgCACIARQ0AA0AgAiAAQQF2IgNBA3RqIgRBCGogAiAEKAIAIAFJIgQbIQIgACADQX9zaiADIAQbIgANAAsLIAILEAAgACgCCCAAKAIAQQN0agstAQJ/QQAhAgJAIAAgARB7IgMgABB8Rg0AIAMoAgAgAUcNACADKAIEIQILIAILTQECfyMAQRBrIgMkAAJAAkAgACABEHsiBCAAEH9GDQAgBCgCACABRg0BCyAAIAQgA0EIaiABIAIQgAEQgQEhBAsgA0EQaiQAIARBBGoLEAAgACgCCCAAKAIAQQN0agsSACAAIAI2AgQgACABNgIAIAALtgEBAn8CQCAAKAIIIgMgAUsNACADIAAoAgAiBEEDdGogAUkNACABIANrQQN1IQECQCAEIAAoAgRHDQAgACAAIARBAWoQggEQgwEgACgCACEECwJAIAQgAUwNACAAKAIIIAFBA3RqIgNBCGogAyAEIAFrQQN0ENItGgsgACgCCCABQQN0IgRqIAIpAgA3AgAgACAAKAIAQQFqNgIAIAAoAgggBGoPC0HdvQFBlZcBQfcMQY4qEAAACysAAkACQCAAKAIEIgANAEEIIQAMAQsgAEECbSAAaiEACyAAIAEgACABShsLTAECfwJAIAAoAgQgAU4NACABQQN0EFUhAgJAIAAoAggiA0UNACACIAMgACgCAEED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AkEIakEAKALgkgciA0GYKmogAEEEdGoiAEHMAWopAgA3AwAgAiAAQcQBaikCADcDACACIAIqAgwgAyoCmCogAZSUOAIMIAIQdSEAIAJBEGokACAAC1ABAn8jAEEQayIBJABBACgC4JIHIQIgAUEIaiAAQQhqKQIANwMAIAEgACkCADcDACABIAIqApgqIAEqAgyUOAIMIAEQdSEAIAFBEGokACAACxMAQQAoAuCSByAAQQR0akHcK2oLYgIBfQF/AkBBACgC4JIHKgKYKiIBQwAAgD9gDQAgAEH///8HcSECAkACQCABIABBGHazlCIBQwAAgE9dIAFDAAAAAGBxRQ0AIAGpIQAMAQtBACEACyAAQRh0IAJyIQALIAALggEBBH8jAEEwayICJABBACgC4JIHIQMgAkEYahCwASIEIAA2AgAgBCADIABBBHRqIgBB3CtqIgUpAgA3AgQgBEEMaiAAQeQraiIAKQIANwIAIANB5DZqIAQQsQEgAkEIaiABEHMgACACQRBqKQMANwIAIAUgAikDCDcCACACQTBqJAALDAAgAEEEahAwGiAAC24BAX8CQCAAKAIAIgIgACgCBEcNACAAIAAgAkEBahCyARCzASAAKAIAIQILIAAoAgggAkEUbGoiAiABKQIANwIAIAJBEGogAUEQaigCADYCACACQQhqIAFBCGopAgA3AgAgACAAKAIAQQFqNgIACysAAkACQCAAKAIEIgANAEEIIQAMAQsgAEECbSAAaiEACyAAIAEgACABShsLTAECfwJAIAAoAgQgAU4NACABQRRsEFUhAgJAIAAoAggiA0UNACACIAMgACgCAEEUbBDQLRogACgCCBBXCyAAIAE2AgQgACACNgIICwt5AQR/IwBBIGsiAiQAQQAoAuCSByEDIAJBCGoQsAEiBCAANgIAIAQgAyAAQQR0aiIAQdwraiIFKQIANwIEIARBDGogAEHkK2oiACkCADcCACADQeQ2aiAEELEBIAAgAUEIaikCADcCACAFIAEpAgA3AgAgAkEgaiQAC2YBBH8CQCAAQQFIDQBBACgC4JIHIgFB5DZqIQIDQCABIAIQtgEiAygCAEEEdGoiBEHkK2ogA0EMaikCADcCACAEQdwraiADKQIENwIAIAIQtwEgAEEBSiEDIABBf2ohACADDQALCwszAQF/AkAgACgCACIB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ahDZARogAEGUBGoQ2QEaIABBpARqENkBGiAAQbQEahDZARogAEHEBGoQ2QEaIABB1ARqENoBGiAAQdgEahDaARogAEHoBGoQ2wEaIABB9ARqENwBGiAAQdgGaiEJIABBuAZqIQogAEGMBWpBABDdASELA0AgChDZAUEQaiIKIAlHDQALIABBAEHkBhDRLSIKIAIQVDYCACAKIAIQ2S1BAWo2AkwgCiACQQBBABBjNgIEIAggCkEEahDeASAKIApBwZQCQQAQ3wE2AlAgA0EIakP//39/Q///f38QMRogBCADKQMINwIAIANBCGpDAAAAP0MAAAA/EDEaIAUgAykDCDcCACAKQX82AqQBIApB//8DOwGgASAKIApBrgFqLQAAQRh0QY+ePHI2AKsBIANBCGpD//9/f0P//39/EDEaIAcgAykDCCIMNwIAIAYgDDcCACAKQbgFaiABQbgyajYCACAKIAs2AogFIApCgICA/HM3AoAFIApC/////4+AgMC/fzcC3AQgCkG8BWogCigCADYCACADQRBqJAAgCgsSACAAQQA2AgggAEIANwIAIAALpgEAIAAQLxogAEEIahAvGiAAQRBqEC8aIABBGGoQLxogAEEgahAvGiAAQShqEC8aIABBMGoQLxogAEHAAGoQ4AEaIABBxABqEOABGiAAQcgAahDgARogAEHUAGoQ2QEaIABB5ABqENkBGiAAQYgBahAvGiAAQZABahDhARogAEG8AWoQ4gEaIABB8AFqEOMBGiAAQfwBahDjARogAEGIAmoQ5AEaIAALJQAgAEMAAAAAQwAAAAAQMRogAEEIakMAAAAAQwAAAAAQMRogAAsLACAAQQA2AQAgAAsKACAAEOUBGiAACxIAIABBADYCCCAAQgA3AgAgAAtdACAAEOYBGiAAQQxqEDcaIABBGGoQ5wEaIABBPGoQ6AEaIABByABqEOkBGiAAQdQAahDqARogAEHgAGoQ6wEaIABB+ABqEOwBGiAAQQBBkAEQ0S0iACABNgIsIAALTAEBfwJAIAAoAgAiAiAAKAIERw0AIAAgACACQQFqEO0BEO4BIAAoAgAhAgsgACgCCCACQQJ0aiABKAIANgIAIAAgACgCAEEBajYCAAsjACABIAIgAWtBACACGyAAQcABahDvASgCABBjIgIQ8AEgAgsLACAAQQA2AgAgAAsL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2QEaIABB4D1qELwCGiAAQYA+ahC9AhogAEGcPmoQvgIaIABBqD5qEOMBGiAAQbQ+ahC/AhogAEHEPmoQwAIaIABB4D5qEL4CGiAAQew+ahDBAhogAEH4PmoQLyEDIABBgD9qEMICGiAAQfzbAGoQjSoaIABBoN4AahAwGiAAQczeAGoQwwIaIABB2N4AahDXARogAEHk3gBqEC8hBiAAQezeAGoQLyEHIABB/N4AahDEAhogAEGI3wBqEMUCGiAAQZTfAGoQxgIaIABBoN8AahDHAhogAEGs3wBqEMgCGiAAQcTfAGoQxAIaIABB7N8AahDJAhogAEEANgK0MiAAIAFFOgABIABBADoAACAAQgA3AqwyAkAgAQ0AQbQIQbQIEFUQrQIQhyohAQsgAEIANwOINCAAQgA3AqQ0IABCgICAgHA3A5A0IABC/////w83A5g0IABCADcD6DQgAEGYAWogATYCACAAQaA0akEAOgAAIABB8DRqQgA3AwAgAEH4NGpCADcDACAAQYA1akEANgIAIABBjDVqQQBBKxDRLRogAEHANWpCADcDACAAQgA3A7g1IAJDAACAv0MAAIC/EDEaIAQgAikDADcDACAAQQA2Auw1IABCADcC5DUgAEIANwPQNSAAQdg1akIANwMAIABB4DVqQQA7AQAgAEHEN2pBAEE0ENEtGiACENkBGiAFQQhqIAJBCGopAwA3AgAgBSACKQMANwIAIABBADYCvDggAEIANwK0OCAAQQA6ALA4IABBADYCnDggAEEBOgCWOCAAQQA7AZQ4IABB/////wc2ApA4IABCADcDiDggAEF/NgLIOCAAQQA2AJc4IABCfzcDwDggAEIANwLkOSAAQgA3AsQ5IABBzDlqQgA3AgAgAEHUOWpCADcCACAAQdk5akIANwAAIABB/////wc2AvA5IABB/////wc2Auw5IABC//////f/////ADcC9DkgAEH4OmpBiOABNgIAIABBiDxqQZXgATYCACAAQQA2AvA8IABBADYCxDogAEEAOgD8OSAAQQA2Aug8IABB6zxqQQA2AAAgAEJ/NwL0PCAAQgA3AsQ9IABBzD1qQgA3AgAgAEHUPWpBADYCACAAQQA2AsA+IABC/////w83A9g9IABCADcC7D0gAEH0PWpCADcCACAAQfw9akEANgIAIAJDAAAAAEMAAAAAEDEaIAMgAikDADcDACAAQoCAgICAgIDICjcChF4gAEGc3gBqQf////sHNgIAIABCADcCjF4gAEGAgID4AzYCyF4gAEIANwPAXiAAQoCAgICg4fWRPDcDuF4gAEEAOwG0XiAAQQA2ArBeIABC////+/f//7//ADcClF4gAkP//39/Q///f38QMRogByACKQMAIgg3AgAgBiAINwIAIABBAjYC4F8gAEEAOgDUXyAAQf////sHNgLQXyAAQgA3ArxfIABBADoAuF8gAEEANgL4XiAAQS47AfReIABBADYC6F8gAEEAOgDkXyAAQoCAgIAgNwPYXyAAQfzfAGpBAEHoAxDRLRogAEF/NgLsYyAAQn83AuRjIABB8OMAakEAQYEYENEtGiACQRBqJAAgAAuZAQEDfyMAQTBrIgEkAAJAAkAgAC0AAA0AIAAtAPVeRQ0BC0HX7AFBrvEAQZ4fQeW0ARAAAAsgAUEIahDKAiICQfwZNgIAQfwZQQBBABBjIQMgAkEENgIcIAJBBTYCGCACQQY2AhQgAkEHNgIQIAJBCDYCCCACIAM2AgQgAEGI3wBqIAIQ0AIgABDUCCAAQQE6AAAgAUEwaiQAC0YAIABBEGoQLxogAEEYahAvGiAAQSBqEC8aIABBKGoQLxogAEEwahAvGiAAQTxqENkBGiAAQdgAahAvGiAAQQBB4AAQ0S0LHwAgAEIANwIAIABBEGpBADYCACAAQQhqQgA3AgAgAAsSACAAQQA2AgggAEIANwIAIAALEgAgAEEANgIIIABCADcCACAACxIAIABBADYCCCAAQgA3AgAgAAsSACAAQQA2AgggAEIANwIAIAALEgAgAEEANgIIIABCADcCACAACxIAIABBADYCCCAAQgA3AgAgAAsSACAAQRhqENkBGiAAELQDIAALKAAgAEEUahAvGiAAQRxqEC8aIABBJGoQLxogAEEAOgAAIAAQjgMgAAsjAQJ/IABBGGohASAAIQIDQCACELUGQQxqIgIgAUcNAAsgAAsJACAAEKcEIAALEgAgAEEANgIIIABCADcCACAACxoAIAAQtgYaIABBDGoQ2wEaIABBADYCGCAACxIAIABBADYCCCAAQgA3AgAgAAsSACAAQQA2AgggAEIANwIAIAALGgAgABC3BhogAEEMahDbARogAEEANgIYIAALEgAgAEEA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A0F/Rg0AIANBAEchAwwBCyAAKAKkNSACckEARyEDCyAAQdYGaiAAKALsY0EBakEBSzoAACAAQdUGakEBIAMgBEEJcUEBRhsgAyAAQdkGai0AABs6AAALggQCCn8BfiMAQdAAayIAJABBACEBAkBBACgC4JIHIgIoAvw0IgNFDQBBACADIANBCWotAABBAnEbIQELIAAgAkH4KmoiAykDACIKNwNIAkACQCACQbQBai0AAEUNACAAQcAAaiADIABBMGpDAACAQEMAAIBAEDEQ1AEMAQsgACAKNwNACwJAAkACQCACKAKsNCIEQQFIDQAgAkHkAWohBSACQaw0aiEGIABBOGohBwNAAkAgBiAEIghBf2oiBBDXAigCACIDLQCKAUUNACADLQCRAQ0AIANBCWotAABBAnENACAHIANB7ANqKQIANwMAIAAgAykC5AM3AzAgAEEwaiAAQcgAaiAAQcAAaiADKAIIQcKAgAhxGxDSASAAQTBqIAUQngJFDQACQCADLwHUBEUNACAAQQhqIABBKGogAyoCDCADLgHYBLKSIANBEGoqAgAgA0HaBGouAQCykhAxIgkgAEEgaiADLgHUBLIgA0HWBGouAQCyEDEQTiAAQRBqIAkgAEEIahChASAFEJ4CDQELIAEgAyABGyEBAkAgAigC/DQiCUUNACADKAKgBiAJKAKgBkYNAQsgAiABNgLwNAwDCyAIQQFKDQALCyACIAE2AvA0QQAhA0EAIQQgAUUNAQsgASgCoAYhBAsgAiADNgL4NCACIAQ2AvQ0IABB0ABqJAALMAEBfwJAIAAoAqAGIAFHDQBBAQ8LAkADQCAAIAFGIgINASAAKAKcBiIADQALCyACC0cBAn9BACgC4JIHIgBB/AFqLQAAIgFBAnIgASAAQf0Bai0AABsiAUEEciABIABB/gFqLQAAGyIBQQhyIAEgAEH/AWotAAAbC/cOAgZ/A30jAEEQayIAJAACQAJAAkACQEEAKALgkgciAUUNACABQQAQ1gIQiAMQiQMgAUEBOgCcNCABQQA2AsReIAFBADYC6DQgASABKAKQNEEBajYCkDQgASABKwOINCABQRhqIgIqAgC7oDkDiDQgAUHY3gBqQQAQigMgASABKgLgYyACKgIAIgYgASABKALcYyICQQJ0akH83wBqIgMqAgCTkjgC4GMgAyAGOAIAIAEgAkEBakH4AG82AtxjQ///f38hBgJAIAEqAuBjIgdDAAAAAF5FDQBDAACAPyAHQwAA8EKVlSEGCyABQdwGaiAGOAIAIAFBmAFqKAIAQQE6ABwQiwMQjAMgASgCrDIQjQNFDQEgAEMAAAAAQwAAAAAgAUEQaioCACABQRRqKgIAEHQaIAFB2DJqIABBCGopAwA3AgAgAUHQMmogACkDADcCACABQcgyaiABQdQraioCADgCACABQbgyaiABQdgraioCABDiBiABQeAyaiABQdArai0AACICNgIAAkAgAUHRK2otAABFDQAgASgCrDIoAkgtAABBBHENACABIAJBAnIiAjYC4DILAkAgAUHSK2otAABFDQAgASACQQRyIgI2AuAyCwJAIAFBDGotAABBCHFFDQAgASACQQhyNgLgMgsgAUHIOmoiAhDlBiACIAEoApgBKAIEEIkHIAIQhgcgAUHYO2oiAhDlBiACIAEoApgBKAIEEIkHIAIQhgcgAUGAOmoQjgMCQCABLQDsPEUNACABQYQ9aigCACICIAEoAqQ1Rw0AIAIQ8AELAkACQCABKAKUNUUNACABKAKQNSIDRQ0BIAEoAqQ1IANHDQQgAUEANgKgNQwECyABQgA3Apw1IAEoApA1IgMNAwsgASgCpDUhAkEAIQMMAwtBgq0EQa7xAEHFHUHnzgEQAAALQfybBEGu8QBB4B1B584BEAAACyABIAEqAhgiBiABKgKcNZI4Apw1AkAgASgCpDUiAiADRw0AIAMhAgwBCyABIAYgASoCoDWSOAKgNQsgASADNgKUNSABQQA6AJs1IAFBADoAmDUgAUEANgKQNSABLQCZNSEDIAFBADoAmTUgASADOgCaNQJAIAEoAqg1IAJGDQAgAkUNACABKALcNSACRw0AEJUCIAEoAqQ1IQILIAEqAhghCAJAIAJFDQAgASAIIAEqAqw1kjgCrDULIAEgAjYC3DUgAUEAOgDgNSABQQA6ALU1IAFBADYCqDUgAUEAOgCwNSABIAEoAtA1NgLkNSABIAEtALQ1OgDhNSABIAggASoC7DWSOALsNQJAIAEoAoReIgNFDQAgAiADRg0AIAFBADYChF4LAkAgAg0AIAFCADcDuDUgAUHANWpCADcDAAsgAUH////7BzYCzD1BACECIAFBADYC3D0gAUEAOwDtPCABIAEoAtA9NgLUPSABQQA2AtA9IAFB/AZqEIYDNgIAIAFB2BhqIAFB2AhqQYAQENAtGgNAAkACQCABIAJqQYACai0AAA0AQwAAgL8hBgwBC0MAAAAAIQYgASACQQJ0akHYCGoqAgAiB0MAAAAAXQ0AIAcgCJIhBgsgASACQQJ0akHYCGogBjgCACACQQFqIgJBgARHDQALEI8DEJADEIMDEPUCAkACQAJAEP4CDQAgASgCzDlFDQEgASoC3DlDAAAAAF5FDQELIAEgASoCxDogASoCGEMAAMBAlJJDAACAPxBSOALEOgwBCyABIAEqAsQ6IAEqAhhDAAAgwZSSQwAAAAAQqAE4AsQ6CyABQX82AuxjIAFBADYC6DwgAUJ/NwLkYyAAQwAAgD9DAACAPxAxGiABIAApAwA3AuReEJEDEJIDAkACQCABKAK4NCICIAEoAqw0Rw0AQ///f38hBgJAIAEtAJ80DQAgAUG4AWoqAgAiB0MAAAAAXQ0AIAErA4g0tiAHkyEGCwJAIAJFDQAgAUGsNGohBEEAIQMDQCAEIAMQ1wIoAgAiAkEAOwGWASACQQA6AIwBIAIgAi0AigEiBToAiwEgAkEAOgCKAQJAIAUNACACLQDgBg0AIAIqAuAEIAZdRQ0AIAIQjgILIANBAWoiAyAEKAIARw0ACwtBACECAkAgASgCqD5BAEwNACABQYA+aiEEIAFBqD5qIQMDQAJAIAMgAhCTAyoCAEMAAAAAYEUNACADIAIQkwMqAgAgBl1FDQAgBCACEJQDENsICyACQQFqIgIgAygCAEgNAAsLAkAgAS0AnzRFDQAQiwILIAFBADoAnzQCQCABKALENyICRQ0AIAItAIsBDQBBAEEAEJUDCyABQdA0akEAEJYDIAFBuDdqQQAQlwMgAUGUN2oiAkEAEJgDIABBADYCACACIAAQmQMgAUGgN2pBABCaAyABKALEN0EAEPICEJsDIAFBAToAnTQgAEMAAMhDQwAAyEMQMUEEEJwDQdQyQQBBABCdAxogASgC7DQtAJIBRQ0BIAFBARDWAiAAQRBqJAAPC0HvtwFBrvEAQdAeQefOARAAAAtBjsEBQa7xAEH9HkHnzgEQAAAL/wQCAn8BfQJAAkACQAJAAkACQAJAAkACQAJAAkBBACgC4JIHIgAtAABFDQAgACgCkDQhAQJAAkAgAEEYaioCAEMAAAAAXg0AIAFFDQFBwcgEQa7xAEGyNkG80AAQAAALIAFFDQAgACgClDQgAUcNAgsgAEEQaioCAEMAAAAAYEUNAiAAQRRqKgIAQwAAAABgRQ0CIABBmAFqKAIAIgEoAqgIQQBMDQMgAUGoCGpBABCeAygCABCNA0UNBCAAQdQraioCAEMAAAAAXkUNBSAAQdgraioCAEMAAAAAXkUNBiAAKgKYKiICQwAAAABgRQ0HIAJDAACAP19FDQcgAEGsKmoqAgBDAACAP2BFDQggAEGwKmoqAgBDAACAP2BFDQggAEG8KmooAgBBAWpBA08NCkEAIQEDQAJAIAAgAUECdGpBNGooAgBBAWpBgQRJDQBBxrUEQa7xAEG9NkG80AAQAAALIAFBAWoiAUEWRw0ACwJAIAAtAAhBAXFFDQAgAEHkAGooAgBBf0YNCgsCQCAAQbQBai0AAEUNACAAQQxqLQAAQQJxDQAgAEEAOgC0AQsPC0GZ5AFBrvEAQbE2QbzQABAAAAtB96YEQa7xAEGzNkG80AAQAAALQejHBEGu8QBBtDZBvNAAEAAAC0GIqwRBrvEAQbU2QbzQABAAAAtBgqwEQa7xAEG2NkG80AAQAAALQafGBEGu8QBBtzZBvNAAEAAAC0HmxQRBrvEAQbg2QbzQABAAAAtBm8UEQa7xAEG5NkG80AAQAAALQamxBEGu8QBBujZBvNAAEAAAC0HvrgRBrvEAQcE2QbzQABAAAAtBvTVBrvEAQbs2QbzQABAAAAu4AQICfwF9AkACQEEAKALgkgciAC0A9V4NACAAQZTfAGoQnwNFDQECQCAAQSBqKAIAIgFFDQAgARCgAwsgAEEBOgD1XgsCQCAAKgL4XiICQwAAAABeRQ0AIAAgAiAAQRhqKgIAkyICOAL4XiACQwAAAABfRQ0AAkACQCAAQSBqKAIAIgFFDQAgARDVAgwBCyAAQdgGakEBOgAACyAAQQA2AvheCw8LQaGZBEGu8QBBus4AQZXSABAAAAsiAAJAIAAoAgQgAU4NACAAIAAgARDtARDuAQsgACABNgIACzQBAn8CQEEAKALgkgciAEGkAWooAgAiAQ0AIABBmAFqKAIAQagIakEAEJ4DKAIAIQELIAEL5AEDAn8CfQF+AkACQCAARQ0AQQAoAuCSByEBIAAQjQNFDQBDAAAAACEDIAAqAswBIgRDAAAAAF5FDQEgASAANgKsMiABQwAAgD8gBCABQZwBaioCACAAKgIolJQQqAE4ArQyAkAgASgC7DQiAkUNACACEKEDIQMgASgCrDIhAAsgASADOAKwMiAAKAJIIgIpAiAhBSABQYQ0aiACQShqNgIAIAEgBTcDuDIgAUHEMmogAzgCACABQcAyaiAANgIADwtB45sEQa7xAEG7MUHjLxAAAAtBwK8BQa7xAEG8MUHjLxAAAAsEAEEBC1oCAX8BfiMAQRBrIgEkACAAQgA3AgQgAEEAOgAAIABBDGpCADcCACABQQhqQwAAAABDAAAAABAxGiAAIAEpAwgiAjcCHCAAIAI3AiQgACACNwIUIAFBEGokAAvnGQMIfwN9AX4jAEHQAGsiACQAQQAhAUEAKALgkgciAkIANwLEOSACQdcGakEAOgAAIAIoAggiA0EBcSEEAkAgA0ECcUUNACACQQxqLQAAQQFxRQ0AQQEhASACKAL0N0EERg0AAkAgAkGABmoqAgBDAAAAAF4NACACQYgGaioCAEMAAAAAXg0AIAJBhAZqKgIAQwAAAABeDQAgAkGMBmoqAgBDAAAAAF4NACACQZAGaioCAEMAAAAAXg0AIAJBlAZqKgIAQwAAAABeDQAgAkGYBmoqAgBDAAAAAF4NACACQZwGaioCAEMAAAAAXkUNAQsgAkEENgL0NwsCQCAERQ0AAkAgAkHkAGooAgAQogNFDQAgAkEDNgL0NyACQYAGakGAgID8AzYCAAsCQCACQegAaigCABCiA0UNACACQQM2AvQ3IAJBiAZqQYCAgPwDNgIACwJAIAJB7ABqKAIAEKIDRQ0AIAJBAzYC9DcgAkGEBmpBgICA/AM2AgALAkAgAkE4aigCABCiA0UNACACQQM2AvQ3IAJBxAZqQYCAgPwDNgIACwJAIAJBPGooAgAQogNFDQAgAkEDNgL0NyACQcgGakGAgID8AzYCAAsCQCACQcAAaigCABCiA0UNACACQQM2AvQ3IAJBzAZqQYCAgPwDNgIACwJAIAJBxABqKAIAEKIDRQ0AIAJBAzYC9DcgAkHQBmpBgICA/AM2AgALAkAgAkH8AWotAAAiA0UNACACQbgGakGAgID8AzYCAAsCQCACQf0Bai0AAEUNACACQbwGakGAgID8AzYCAAsgAkH+AWotAABFDQAgAw0AIAJBwAZqQYCAgPwDNgIACyACQawpaiACQdgoakHUABDQLRpBACEDA0BDAACAvyEIAkAgAiADQQJ0aiIFQYAGaioCAEMAAAAAXkUNAEMAAAAAIQggBUHYKGoqAgAiCUMAAAAAXQ0AIAkgAioCGJIhCAsgBUHYKGogCDgCACADQQFqIgNBFUcNAAsCQCACKAKcOEUNAAJAIAItAJY4RQ0AIAItAJo4RQ0BCxCjAwsgAkEANgKcOCACQQA7AJk4IAJBADYC5DcCQCACLQCwOEUNABCkAwsCQAJAAkACQAJAIAIoArg4QQJHDQAgAi0AsDhFDQECQCACQdA4aigCAA0AIAJBoDlqKAIADQAgAkEAOgCWOAsgAkEANgK4OAsCQCACLQCVOEUNACACLQCUOEUNAAJAIAItAAhBBHFFDQAgAkEMai0AAEEEcUUNACACLQCWOA0AIAItAJc4RQ0AIAIoAsQ3RQ0AIABBwABqEKUDIAJB5AFqIAApA0AiCzcCACACQYAHaiALNwMAIAJBAToA1wYLIAJBADoAlTgLIAJBADYC4DcgAkEAOgCUOCACKAKMOEECTw0BAkAgAigCxDciA0UNACADEKYDIAIoAsQ3IgNFDQAgAygCrAZFDQAgAigCjDgNACADQQA2AqwGCxCnAwJAAkAgASAEQQBHckEBRw0AIAIoAsQ3IgMNAQsgAkHZBmpBADoAAAwDCyACQdkGaiADKAIIQYCAEHEiA0ESdkEBczoAACADDQIgAigCyDdFDQIgAi0AljgNAkEBIQMMAwtBvSlBrvEAQZTFAEGLwwEQAAALQZW6AkGu8QBBqsUAQYvDARAAAAsgAigCzDlBAEchAwsgAkHaBmogAzoAAAJAAkACQAJAAkACQAJAAkACQEEBQQEQqANFDQACQCACKAKkNUUNAEEBEKkDDQEQlQIMAQsCQCACKALENyIDRQ0AIAMoAghBgICAKHFBgICACEcNACADKAKcBiIFRQ0AIAMoAlRFDQIgBRDxAiADKAJUQQBBABCqAyACQQA6AJQ4IAItAJc4RQ0BIAJBAToAlTgMAQsCQCACKAKsN0EBSA0AIAJBrDdqIgMQqwMoAgRBC2otAABBCHENASADKAIAQX9qQQEQggMMAQsCQCACKAKMOEUNAEEAEKwDDAELAkAgA0UNACADKAIIQYCAgChxQYCAgAhGDQAgA0EANgKwBgsgAkIANwPINwsgAkIANwPQNyACQdg3akIANwMAIAJB0DdqIQMgAigCyDdFDQUgAi0AljgNBSACKALMOQ0FIAIoAsQ3IgVFDQYgBUEKai0AAEEEcQ0FAkBBABCtAw0AIAIoAqQ1IgVFDQUgAigCyDchBgwCC0EAQQEQqAMhByACKALINyEBAkAgAigCpDUiBQ0AIAdFDQAgAyABNgIADAMLIAVFDQICQCAFIAFGDQAgASEGDAILIAIgBTYC1DcgASEGIAUhASAHRQ0BDAMLQYTDAkGu8QBBx8UAQYvDARAAAAsgBSAGRg0CDAMLIAIgATYC1DcgB0UNAQsgAiABNgLYNwtBAkEBEKgDRQ0AIAIgAigCyDc2Atw3CyACKALENyIFRQ0AQQAhByAFQQpqLQAAQQRxRQ0BIAJBAToAljgMAQtBACEFQQEhBwsCQAJAAkACQAJAIAMoAgAiA0UNACACKALUNyADRw0BCyACQQA6ALA4AkAgAigC8DciA0UNACACIAM2Atg3IAIgAzYC3DcgAiADNgLUNyACIAM2AtA3CyACQQA2AvA3AkACQCACKAK4OCIBDQAgAkEANgK0OCACQX82AsA4AkAgBw0AIAIoAsw5DQAgBUEKai0AAEEEcQ0AAkBBABCuAw0AAkBBBEEDEKgDDQBBEUEDEKgDRQ0BCyACQQA2AsA4CwJAQQEQrgMNAAJAQQVBAxCoAw0AQRJBAxCoA0UNAQsgAkEBNgLAOAsCQEECEK4DDQACQEEGQQMQqAMNAEETQQMQqANFDQELIAJBAjYCwDgLQQMQrgMNAAJAQQdBAxCoAw0AQRRBAxCoA0UNAQsgAkEDNgLAOAsgAiACKALAOCIDNgLIOAwBCyACKALAOCIDQX9GDQIgAigCyDhBf0YNAiABQQFHDQMgAkECNgK4OAtDAAAAACEIAkAgBEUNABCvAyEIIAIoAsA4IQMLAkACQAJAIANBf0YNACACQQE6ALA4IAIgAzYCxDggAiACQfwGaigCADYCvDgMAQsgAi0AsDhFDQELIAIoAsg3DQAgAkEANgKcOCACQYECOwCZOCACQQA6AJY4CxCwAwJAIAIoAsQ3IgNFDQAgA0EKai0AAEEEcQ0AIAIoAsw5DQACQAJAIAMQoQNDAADIQpQgAioCGJRDAAAAP5IiCYtDAAAAT11FDQAgCaghBQwBC0GAgICAeCEFCyAFsiEJAkAgA0HEAmooAgANACADQdECai0AAEUNACACLQCwOEUNAAJAIAIoAsA4IgVBAUsNACADIAkgCYwgBRsgAyoCWJIQNRCxAyACKALAOCEFCyAFQX5xQQJHDQAgAyAJjCAJIAVBAkYbIANB3ABqKgIAkhA1ELIDCyAAQcAAakEEQQBDzczMPUMAACBBELMDAkAgACoCQCIKQwAAAABbDQAgAy0AiAFFDQAgAyAKIAmUIAMqAliSEDUQsQMLIAAqAkQiCkMAAAAAWw0AIAMgCiAJlCADQdwAaioCAJIQNRCyAwsgAkHMOGoQtAMgAkH0OGoQtAMgAkGcOWoQtAMCQCACLQCwOEUNACACKAL0N0EERw0AIAIoAow4DQAgAEE4aiACKALENyIDQfQDaiADQQxqIgUQSyAAQQhqIABBOGogAEEwakMAAIA/QwAAgD8QMRBLIABBIGogA0H8A2ogBRBLIABBKGogAEEgaiAAQRhqQwAAgD9DAACAPxAxEE4gAEHAAGogAEEIaiAAQShqEKEBIgUgAyACKAKMOEEEdGpBuAZqENMBDQAgAxChAyEJIAUgAEEIaiAFELUDIAlDAAAAP5QiCRBSjCAFELYDIAkQUowQMRDSASADIAIoAow4QQR0akG4BmogBRC3AyACQgA3A8g3CwJAAkAgAigCxDciA0UNACAAQcgAaiADIAIoAow4QQR0aiIFQcAGaikCADcDACAAIAVBuAZqKQIANwNADAELIABBwABqQwAAAABDAAAAAEMAAAAAQwAAAAAQuAMaIAIoAsQ3IQMLAkACQCADRQ0AIABBOGogA0EMaiAAQcAAahBOIABBMGogAigCxDdBDGogAEHIAGoQTiAAQQhqIABBOGogAEEwahChARoMAQsgAEEIahC5AwsgAiAAKQMINwL4NyACQYA4aiIDIABBEGopAwA3AgAgAkH4N2oiBSAIELoDIAMgAioC+DdDAACAP5IgAyoCABBSIgg4AgAgAiAIOAL4NyAFELsDDQMgAkEANgKIOCAAQdAAaiQADwtBsO4BQa7xAEH1xQBBi8MBEAAAC0GIyQFBrvEAQZDGAEGLwwEQAAALQeDkAUGu8QBBkcYAQYvDARAAAAtBxJsEQa7xAEHgxgBBi8MBEAAAC7MHBA9/AX4CfQF8IwBBEGsiACQAAkBBACgC4JIHIgFB5AFqIgIQ9gJFDQAgAEEIaiACEDQgASAAKQMIIg83AuQBIAEgDzcD+D4LAkACQCACEPYCRQ0AIAFBgAdqIgMQ9gJFDQAgAEEIaiACIAMQSyABQfQGaiAAKQMIIg83AgAMAQsgAEEIakMAAAAAQwAAAAAQMRogAUH0BmogACkDCCIPNwIACwJAAkAgD6e+QwAAAABcDQAgD0IgiKe+QwAAAABbDQELIAFBADoAlzgLIAFBgAdqIAEpAuQBNwMAIAFBCGohBEEAIQMDQAJAAkAgASADaiIFQewBaiIGLQAARQ0AIAQgA0ECdGoiB0HsB2oiCCoCACEQIAQgA2oiCUHaB2oiCkEAOgAAQwAAAAAhESAJQdAHaiILIBBDAAAAAF0iDDoAACAHQYAIaiAQOAIAAkAgDA0AIBAgASoCGJIhEQsgCCAROAIAIAVB3QdqIghBADoAAAJAIBBDAAAAAF1FDQACQAJAIAEqAiggASsDiDQiEiABIANBA3QiDGoiDUGwB2oiDisDAKG2XkUNAAJAAkAgAhD2AkUNACAAQQhqIAIgDUGIB2oQSwwBCyAAQQhqQwAAAABDAAAAABAxGgsCQCAAQQhqEEwgASoCLCIQIBCUXUUNACAIQQE6AAALIA4gASoCKEMAAADAlLs5AwAMAQsgDiASOQMACyAEIAxqIgxBgAdqIAEpAuQBNwMAIAlB5AdqIAgtAAA6AAAgAEEIakMAAAAAQwAAAAAQMRogDEGUCGogACkDCDcCACAHQbwIakEANgIADAILAkACQCACEPYCRQ0AIABBCGogAiABIANBA3RqQYgHahBLDAELIABBCGpDAAAAAEMAAAAAEDEaCyAHQbwIaiEHIAcgByoCACAAQQhqEEwQqAE4AgAgBCADQQN0aiIJQZQIaiEHIAcgByoCACAAKgIIIhCMIBAgEEMAAAAAXRsQqAE4AgAgCUGYCGohByAHIAcqAgAgACoCDCIQjCAQIBBDAAAAAF0bEKgBOAIADAELIAQgA2oiB0HQB2oiC0EAOgAAIAdB2gdqIgogBCADQQJ0aiIJQewHaiIIKgIAIhBDAAAAAGA6AAAgCEGAgID8ezYCACAJQYAIaiAQOAIAIAdB1QdqQQA6AAALAkAgBi0AAA0AIAotAAANACAFQewHakEAOgAACwJAIAstAABFDQAgAUEAOgCXOAsgA0EBaiIDQQVHDQALIABBEGokAAuVBwIEfwN9IwBBIGsiACQAAkBBACgC4JIHIgEoAoA1RQ0AIAEgASoCjDUgAUEYaioCAJM4Aow1AkACQEEAEPYCRQ0AIABBGGogAUHkAWogAUGENWoQSyAAQRhqEEwgAUEwaioCACIEIASUXkUNACABQQA2Aow1DAELIAEqAow1QwAAAABfRQ0BCyABQQA2Aow1IAFBADYCgDULAkACQCABQfQBaioCACIEQwAAAABcDQAgAUH4AWoqAgBDAAAAAFsNAQsCQCABKAKkNUUNACABLQC2NQ0BCwJAIAEoApQ1RQ0AIAEtAJo1DQELAkAgASgCgDUiAg0AIAEoAvA0IgJFDQELIAItAI0BDQACQCAEQwAAAABbDQACQCABQfwBai0AAEUNACABQaABai0AAEUNASACELwDIAIgAioCgAUiBCABKgL0AUPNzMw9lJJDAAAAP0MAACBAEL0DIgU4AoAFIAJBC2otAABBAXENAiAAQQhqIAJBFGoiA0MAAIA/IAUgBJUiBJMQMyAAIAFB5AFqIAJBDGoiARBLIABBEGogAEEIaiAAEL4DIABBGGogAEEQaiADEL8DIABBEGogASAAQRhqEE4gAiAAQRBqQQAQ+AIgAEEIaiADIAQQMyAAQRBqIABBCGoQNCACIAApAxA3AhQgAEEIaiACQRxqIAQQMyAAQRBqIABBCGoQNCACIAApAxA3AhwMAgsgAUH9AWotAAANACACELwDAkAgAigCCCIDQYCAgAhxRQ0AA0ACQCACQeQAaioCAEMAAAAAWw0AIANBkARxQRBHDQILIAIoApwGIgIoAggiA0GAgIAIcQ0ACwsgA0GQBHENACACQfQDahC2AyEFIAIQoQMhBiACIAJB3ABqKgIAIAQgBkMAAKBAlCAFQx+FKz+UEFIQNZSTELIDCwJAAkAgAUH4AWoqAgAiBEMAAAAAWw0AIAFB/QFqLQAARQ0BCyABKgL0ASIEQwAAAABbDQEgAUH9AWotAABFDQELIARDAAAAAFsNACABQfwBai0AAA0AIAIQvAMCQCACKAIIIgFBgICACHFFDQADQAJAIAIqAmBDAAAAAFsNACABQZAEcUEQRw0CCyACKAKcBiICKAIIIgFBgICACHENAAsLIAFBkARxDQAgAkH0A2oQtQMhBiACEKEDIQUgAiACKgJYIAQgBSAFkiAGQx+FKz+UEFIQNZSTELEDCyAAQSBqJAALjAMBBH9BACEAAkBBACgC4JIHIgEoAsQ3IgJFDQAgAi0AigFFDQAgAkEKai0AAEEEcQ0AIAFB/AFqLQAADQBBAEEBEMADIQALIAEgADoA/DkCQAJAAkAgASgCpDUNACAADQELIAEoAug5IQAMAQsgAUH/////BzYC9DkgASABKALENyIANgLoOQJAIAEoAsg3RQ0AIAEoApA4IgJB/////wdGDQAgASACQX9BASABQf0Bai0AABtqQQFqNgL4OQwBCyABQQAgAUH9AWotAABBAXFrNgL4OQsgAUEANgLkOSABQv/////3/////wA3Auw5AkAgAEUNACABIAA2AuQ5AkAgASgC9DkiAkH/////B0YNACAAQagDaigCACIDQX9GDQAgASACIANBAWoQwQM2Auw5CwJAIAEoAvg5IgJB/////wdGDQAgAEGsA2ooAgAiAEF/Rg0AIAEgAiAAQQFqEMEDNgLwOQsgAUEANgLoOSABQv/////3/////wA3AvQ5CyABQf////8HNgKQOAs2AAJAAkAgAUEASA0AIAAoAgAgAUoNAQtByr0BQZWXAUHcDEH/gAIQAAALIAAoAgggAUECdGoLCQAgACABEMIDC6cBAQN/QQAhAkEAKALgkgciAygCuDRBf2ohBAJAIABFDQAgBCAAEMMDIgBBf2ogAEF/RhshBAsCQCAEQQBIDQAgA0G4NGohAwNAAkAgAyAEIgAQ1wIoAgAiBCABRg0AIAQtAIsBRQ0AIAQoAggiAkGAgIAIcQ0AIAJBgIQQcUGAhBBGDQAgBBDEAyECDAILIABBf2ohBEEAIQIgAEEASg0ACwsgAhDxAgsiAAJAIAAoAgQgAU4NACAAIAAgARDFAxDGAwsgACABNgIACyIAAkAgACgCBCABTg0AIAAgACABEMcDEMgDCyAAIAE2AgALIgACQCAAKAIEIAFODQAgACAAIAEQyQMQygMLIAAgATYCAAtMAQF/AkAgACgCACICIAAoAgRHDQAgACAAIAJBAWoQyQMQygMgACgCACECCyAAKAIIIAJBAnRqIAEoAgA2AgAgACAAKAIAQQFqNgIACyIAAkAgACgCBCABTg0AIAAgACABEMsDEMwDCyAAIAE2AgALqQEBA38jAEEQayIAJABBACgC4JIHIgFBADYC6F8CQCABLQDkX0UNACABKAKUNSECQQcQzQMCQEEOQQEQwANFDQAgAUEAOgDkXwsCQEEAQQAQzgNFDQAgAkUNACABQQA6AORfIAEgAjYC6F8LQ5qZGT8QzwMQ0AMgACACNgIAQfmGAiAAEJEJQZeaA0EAEJEJIAJFEK0BQcfQBEEAEJMJENEDCyAAQRBqJAALZAIBfwF+QQAoAuCSByECAkACQCABDQBBASEBDAELIAEQ+QINAEGbiARBrvEAQaA0QYq1ARAAAAsgAiACKALwNUECcjYC8DUgACkCACEDIAJB+DVqIAE2AgAgAkGQNmogAzcDAAusOAQWfwF8AX4LfSMAQbABayIDJAACQAJAAkACQAJAAkACQAJAAkACQAJAAkAgAEUNACAALQAARQ0AQQAoAuCSByIELQCcNEUNASAEKAKUNCAEKAKQNEYNAiADIAAQ0gMiBTYCrAEgBSEGAkAgBQ0AIAMgACACENMDIgY2AqwBCyACQQZyIAIgAkGAhDBxQYCEMEYbIgJBgICADHFBgICABEYNAyAEKAKQNCEHQQAhCAJAIAQoAtA0DQAgBC0AnTRBAEchCAsgBigC3AQhCSAGIAg6AJIBIAdBf2ohCCAGLACpASEKAkACQCACQYCAgCBxDQAgCSAISCELDAELIARBrDdqIAQoArg3EIADIQwgCSAISCAGKAKcASAMKAIAR3IgBiAMKAIER3IhCwsgBiALIApBAEpyIgg6AJABAkAgCEEBRw0AIAZBCEEBENQDCyAEQdA0aiENAkACQCAJIAdGIg4NACAGIAc2AtwEIAYgAjYCCCAEKwOINCEZIAZBADsBmAEgBiAZtjgC4AQgBCAEKALoNCIIQQFqNgLoNCAGIAg7AZoBDAELIAYoAgghAgtBACEIAkAgDRDVAw0AIA0Q1gMoAgAhCAsCQAJAIA4NACAIQQAgAkGAgIAocRshDAwBCyAGKAKcBiEMCyACQYCAgAhxIQgCQCAMDQAgCA0FCwJAIAYoAsABDQAgBkHAAWogBkEEahDeAQsgDSADQawBahDXAyAEIAMoAqwBIgY2Auw0IAZB1ANqENgDIARBADYC7DQCQCACQYCAgCBxIg9FDQAgBEGsN2ogBCgCuDcQgAMiBiADKAKsATYCBCAEQbg3aiAGENkDIAMoAqwBIAYoAgA2ApwBCwJAIApBAUgNACAIDQAgAygCrAFBADYCsAYLAkAgDg0AIAMoAqwBIAIgDBDaAwsgBEHwNWohDUEAIRBBACERAkAgBC0A8DVBAXFFDQACQCADKAKsASIGKACrASISQRh0QRh1IARB9DVqKAIAIhNxIhFFDQAgBEGINmoQTEOsxSc3XkUNACAGIARBgDZqKQMANwKwASAEKQOINiEaIAYgEkFxcTYAqwEgBiAaNwK4AUEBIREMAQsgEUEARyERIAYgBEGANmogExD4AgtBACETAkAgDSgCACIGQQJxRQ0AAkACQCADKAKsASIGKACrAUEQdEEYdSAEQfg1aigCACIScQ0AQQAhE0EAIRAMAQsgBEGUNmoqAgBDAAAAAF4hECAEQZA2aioCAEMAAAAAXiETCyAGIARBkDZqIBIQ2wMgBCgC8DUhBgsCQCAGQYABcUUNAAJAIARBoDZqKgIAIhtDAAAAAGBFDQAgAygCrAEiEkEANgJwIBIgGzgCaAsgBEGkNmoqAgAiG0MAAAAAYEUNACADKAKsASISQfQAakEANgIAIBJB7ABqIBs4AgALAkACQCAGQQRxRQ0AIAMoAqwBIARBmDZqKQMANwI0DAELIA4NACADQZgBakMAAAAAQwAAAAAQMRogAygCrAEgAykDmAE3AjQLAkAgDSgCACIGQQhxRQ0AIAMoAqwBIARBqDZqLQAAIARB/DVqKAIAENwDIAQoAvA1IQYLAkAgBkEgcUUNACADKAKsARDxAgsCQCADKAKsASIGLQCQAUUNACAGQQhBABDUAwsCQAJAIA4NACADKAKsASIGQQE6AIoBIAYgAUEARzoAkwEgA0GYAWogA0GIAWpD//9//0P//3//Q///f39D//9/fxB0EN0DGiADKAKsASIGIAMpA5gBNwK0BCAGQbwEaiADQaABaikDADcCACAGQcABakEBEIoDIAMoAqwBKAKIBRDlBiADKAKsASIGQZwDakF/NgIAAkAgBi0A4AZFDQAgBhCSAgsgAygCrAEhBgJAIAQoAtQ5RQ0AIAZBCmotAABBCHENACAFRQ0AIAAgBigCACIOEL8sRQ0AIAMgBigCTDYCmAEgDiADQZgBaiAAEFYhBiADKAKsASAGNgIAIAMoAqwBIgYgAygCmAE2AkwLIAYgBkEkaiAGQSxqEN4DAkAgAygCrAEiBiwAqAEiDkEBSA0AIAYgDkF/ajoAqAELAkAgBiwAqQEiDkEBSA0AIAYgDkF/ajoAqQELAkAgBiwAqgEiDkEBSA0AIAYgDkF/ajoAqgELAkAgBQ0AIBMgEHENACAGQQE6AKkBCyACQYCAgDBxIQ4CQCALRQ0AIA5FDQAgBkEBOgCpASACQcAAcUUNAAJAIBMNACAGQQA2AhQgBkEANgIcCwJAIBANACAGQRhqQQA2AgAgBkEgakEANgIACyADQZgBakMAAAAAQwAAAAAQMRogAygCrAEiBiADKQOYASIaNwIkIAYgGjcCLAsgBhDfAwJAAkAgCEUNACAEQcQqaiEODAELIARBEEE0IAJBgICAwABxG0EQIA4bakGYKmohDgsgAygCrAEiBiAOKgIAIhs4AkggBiAEQZwqaikCADcCPAJAIAhFDQAgAkGAgIQgcQ0AQwAAAAAhHCAbQwAAAABcDQACQCACQYAIcUUNACAEQaAqaioCACEcCyADQZgBakMAAAAAIBwQMRogAygCrAEiBiADKQOYATcCPAsgBUUhDiAGQdQCaiAGKgI8IARB4CpqKgIAEKgBIARByDZqKgIAEKgBOAIAIAZB2AJqIARBzDZqKgIAOAIAAkACQCACQSFxDQAgA0GYAWogBhD9AgJAIAQoAvA0IAMoAqwBRw0AIAQoApA1DQAgBCgClDUNACADQZgBaiADQaABakEBEJwCRQ0AIARB3QdqLQAARQ0AIAMoAqwBQQE6AI4BCyADKAKsASIGLQCOAUUNASAGIAYtAI0BQQFzOgCNASAGEPcCIAMoAqwBEPECIAMoAqwBIQYMAQsgBkEAOgCNAQsgCEEARyESIAZBADoAjgEgA0GAAWogBiAGQSxqEOADIAMoAqwBIQYCQAJAIAJBwABxIhRFDQAgBi0AjQENACAOIRUCQCATDQAgBiADKgKAATgCHEEBIRULIBVBAEchFiAQDQEgBkEgaiADKgKEATgCAEEBIQ4MAQsCQAJAIAYsAKABQQBKDQAgDiEVIAYsAKEBQQBKDQEgDiEWDAILIA4hFSATDQACQAJAIAYtAKMBRQ0AIAYqAhwgAyoCgAEQqAEhGwwBCyADKgKAASEbCyAGIBs4AhxBASEVCwJAIBANACAGLAChAUEBSA0AAkACQCAGLQCjAUUNACAGQSBqKgIAIAMqAoQBEKgBIRsMAQsgAyoChAEhGwsgBkEgaiAbOAIAQQEhDgsgFUEARyEWIA5BAEchDiAGLQCNAQ0AIAYQ9wIgAygCrAEhBgsgAyAGKQIcIho3AwAgAyAaNwN4IANBmAFqIAYgAxDhAyADKAKsASIGIAMpA5gBIho3AhwCQCAGLQCNAUUgEnINACADQZgBaiAGEP0CIANBiAFqIANBmAFqEOIDIAMpA4gBIRogAygCrAEhBgsgBiAaNwIUIAYQgQMhGyADKAKsARDjAyEcAkAgC0UNACADKAKsAUF/NgKkASACQYCAgOAAcUGAgIAgRyARcg0AIARBuDdqEKsDIQYgAygCrAEgBikCFDcCDAsgAkGAgIAYcSEQAkAgCEUNACAMRQ0IIAwtAIoBRQ0IIAMoAqwBIAxBiANqIgYoAgA7AZgBIAYgA0GsAWoQ1wMgD0EARyARcg0AIBBBgICAGEYNACADKAKsASAMKQLMATcCDAsgAkGAgIAQcSETAkACQCADKAKsASIGKgKwAUP//39/Ww0AIAYtAKkBDQAgA0GIAWogBkEUaiAGQbgBahC+AyADQZgBaiAGQbABaiADQYgBahBLIAYgA0GYAWpBABD4AgwBCwJAIAJBgICAgAFxRQ0AIANBmAFqIAYQ5AMgAygCrAEgAykDmAE3AgwMAQsCQCAPRSARcg0AIApBAUgNACADQZgBaiAGEOQDIAMoAqwBIAMpA5gBNwIMDAELIBNFIBFyDQAgEEGAgIAYRg0AIANBmAFqIAYQ5AMgAygCrAEgAykDmAE3AgwLIANBmAFqELkDIANB8ABqIARBvCtqIARBxCtqENQBIANB0ABqIANBmAFqIANB8ABqEE4gA0HAAGogA0GgAWoiFyADQfAAahBLIANBiAFqIANB0ABqIANBwABqEKEBIRgCQCARIBJyDQAgAygCrAEiBiwAoAFBAEoNACAGLAChAUEASg0AIANBmAFqELUDQwAAAABeRQ0AIANBmAFqELYDQwAAAABeRQ0AIAMoAqwBIBgQ5QMLIANB0ABqIAMoAqwBQQxqEDQgAygCrAEiBiADKQNQNwIMAkACQCAIRQ0AIARBwCpqIQogD0EARyIRIRIMAQsCQCAPRQ0AIAJBgICAwABxDQAgBEHIKmohCkEBIRFBASESDAELIA9BAEchEiAEQaQqaiEKQQEhEQsgBiAKKgIAIh04AkQgA0F/NgJsIANCADcDWCADQgA3A1AgBEG0AWotAAAhCgJAAkAgBCoCsDIiHkPNzIw/lCAdQwAAgD+SIB5DzcxMPpSSEKgBIh2LQwAAAE9dRQ0AIB2oIRUMAQtBgICAgHghFQsgGyAckiEcQQJBASAKGyEKAkACQCAGLQCNAUUNACAGQf8BOgCUAQwBCyAGIANBgAFqIANB7ABqIAogA0HQAGogGBDmAyEPIAMoAqwBIgYgAygCbDoAlAEgBi0AjQENACAPIBZyIRggDyAOciEOIANBwABqIAYqAhwgBkEgaioCACAckxAxIQYgA0EgaiADKAKsAUH0A2oQ4gMgA0EwaiADQSBqIAMoAqwBQYABahBOAkACQCAFDQAgA0EgakMAAAAAQwAAAAAQMRoMAQsgA0EQaiADKAKsASIFQTxqQwAAAEAQMyADQSBqIAVBJGogA0EQahBOCyAGIANBMGogDhsqAgQhGyAGIANBMGogGBshDkEBIQYCQCACQYCAAXENACADKgIkIBteIAJBCHFFcSEGCyAOKgIAIR0gAygCrAEiBSAGOgCJAQJAAkACQAJAAkAgAkGAgAJxRQ0AQQEhDiAFQQE6AIgBIAYNAyACQQhxIQ8MAQtDAAAAACEeIAMqAiAhHwJAIAZFDQAgBEGIK2oqAgAhHgsCQAJAIB8gHSAek15FDQAgAkEIcUUNAQtBACEOIAVBADoAiAEMAgsgBSACQYAQcSIYQQt2Ig46AIgBQQAhDyAYRSAGcg0BCyAFIAMqAiQgG14gD0VxIgY6AIkBQQEhDgsgBg0AQwAAAAAhGwwBCyAEQYgraioCACEbCwJAAkAgDg0AQwAAAAAhHQwBCyAEQYgraioCACEdCyADQRBqIBsgHRAxGiADKAKsASIGIAMpAxA3AoABCyADQcAAakEIaiADQZgBaiAMQbQEaiARIBBBgICAGEZyIg8bIg5BCGopAgA3AwAgAyAOKQIANwNAIANBMGogBhDnAyADQSBqIAMoAqwBEP0CIAMoAqwBIgYgAykDMDcC5AMgBkHsA2ogA0EwakEIaikDADcCACAGQeQDaiADQcAAahDRASADKAKsASIGIAYqAgwiGzgC9AMgBkH4A2ogHCAGQRBqKgIAIh2SIh44AgAgBkH8A2ogGyAGKgIUkiAGKgKAAZMiHzgCACAGQYAEaiAdIAZBGGoqAgCSIAZBhAFqKgIAkyIdOAIAIAZByABqIARB3CpqIAJBgQhxQQFGGyoCACEgIAYgG0MAAAA/kiAGKgI8QwAAAD+UEDUgBioCSCIbEKgBIiGSEDU4AoQEIAZBiARqICAgHkMAAAA/kpIQNTgCACAGQYwEaiAfQwAAAD+SICGTEDU4AgAgBkGQBGogHUMAAAA/kiAbkxA1OAIAIAZBhARqIANBwABqELcDAkACQCADKAKsASIGKgIUIhtDAAAAAF5FDQAgEw0AIBQNACAbQ2ZmJj+UIRsMAQsgBCoCsDJDAACAQZQhGwsgBiAbEDU4AuQEIAYqAiQhHSAGKgI8IRsgBkH0A2oQtQMhHiADKAKsASIGQwAAAAAgHSAbIBuSkiAekxCoATgCYCAGQShqKgIAIR0gBkHAAGoqAgAhGyAGQfQDahC2AyEeIAMoAqwBIgZB5ABqQwAAAAAgHSAbIBuSkiAekxCoATgCACADQRBqIAYQ6AMgAygCrAEgAykDEDcCWCADQRBqQ///f39D//9/fxAxGiADKAKsASIGIAMpAxA3AmggBigCiAUiBigCAEEBRw0IQQAhBSAGQQAQ6QMoAhwNCCACQYAgcSEGIAMoAqwBKAKIBSAEKAKsMigCSCgCBBCJByADQcAAaiADQcgAakEAEOoDAkAgAkGAgIDAAHFFDQAgAygCrAEiDhD+AkcNACAOLACpAUEBSCEFCyALQQFzIQ4gBkEMdiERAkACQCAEKALQOSIGDQBBACEGDAELIAMoAqwBIAYoAqAGRiEGCyAOIBFyIQ4CQCAFIAZyQQFHDQBBNEEzIAUbIAQqAsQ6EKsBIQUgAygCrAEoAogFIANBmAFqIBcgBUMAAAAAQQ8QpgcLIA5BAXMhBSAQRSERAkAgBkUNACADKAKsASIGIAQoAtA5Rw0AIANBEGogBhDnAyADQRBqIAQqArAyEOsDIANBEGogA0GYAWoQ0wENACADKAKsASgCiAUgA0EQaiADQRhqQTIgBCoC3DlDAACAPpQQqwEgBEGkKmoqAgBBDxCmBwsgBSARIBIbIQZBACERAkAgDw0AIAMoAqwBKAKIBRDsAygCHA0AIAwoAogFIhAoAhhBAUgNACADKAKsASAQNgKIBUEBIRELIAUgBiAOGyEOAkAgBCgCzDkiBQ0AIAQoAsQ3IQULIBWyIRtBASEGAkAgDg0AAkAgBQ0AQQAhBgwBCyADKAKsASgCpAYgBSgCpAZGIQYLIAMoAqwBIANBIGogBiAKIANB0ABqIBsQ7QMgAygCrAEhBgJAIBFFDQAgBiAGQYwFajYCiAULAkAgBCgC0DkgBkcNACAEQaQqaioCACEbIAYqAkQhHSADQRBqIAYQ5wMgA0EQaiAEKgKwMhDrAwJAAkAgA0EQaiADQZgBahDTAQ0AIB0gGxCoASEbIAMoAqwBIQYMAQsgA0EQakMAAIC/IAQqArAykxDrAyADKAKsASIGKgJEIRsLIAYoAogFIANBEGogA0EYakEyIAQqAtw5EKsBIBtBf0MAAEBAEKUHIAMoAqwBIQYLQwAAAAAhGyAGKgI0Ih0hIgJAIB1DAAAAAFwNAAJAIAJBiBBxQYAQRw0AIAYqAiQhGwsgGyAGKgIUIAYqAjwiHiAekpMgBioCgAGTEKgBISILQwAAAAAhHwJAAkAgBkE4aioCACIeQwAAAABbDQAgBkHAAGoqAgAhGyAeISMMAQsCQCACQQhxDQAgBkEoaioCACEfCyAfIAZBGGoqAgAgBkHAAGoqAgAiGyAbkpMgHJMgBkGEAWoqAgCTEKgBISMLIAYgBioC9AMgBioCWCIgkyAGKgI8Ih8gBioCSCIkEKgBkhA1IiU4ApQEIAZBmARqIAZB+ANqKgIAIAZB3ABqKgIAIiGTIBsgJBCoAZIQNSIkOAIAIAZBnARqIgUgIiAlkjgCACAGQaAEaiAjICSSOAIAIAYgBikClAQ3AqQEIAZBrARqIAUpAgA3AgAgBiAfIAYqAgwgIJOSIiI4AsQEIAZByARqIBwgGyAGQRBqKgIAICGTkpIiJDgCAAJAIB1DAAAAAFwNACAGKgIUIB8gH5KTIAYqAoABkyEdCyAGQcwEaiAiIB2SOAIAAkAgHkMAAAAAXA0AIAZBGGoqAgAgGyAbkpMgHJMgBkGEAWoqAgCTIR4LIAZB0ARqICQgHpI4AgAgBkGQAmpCADcCACAGQYwCaiAfQwAAAACSICCTIh04AgAgA0EQaiAGQQxqIANBCGogHUMAAAAAkiAcIBuSICGTEDEQTiADKAKsASIGQdwBaiADKQMQIho3AgAgBkHsAWogGjcCACAGQeQBaiAaNwIAIAZB1AFqIBo3AgAgBiAaNwLMASADQRBqQwAAAABDAAAAABAxGiADKAKsASIGQfQBaiADKQMQIho3AgAgBkH8AWogGjcCACAGQcACakEANgIAIAZBhAJqQgA3AgAgBkHQAmpBADoAACAGQdICakEAOgAAIAZByAJqIgUoAgAhCiAFQQA2AgAgBkHEAmogCjYCACAGQdECaiAGQeQAaioCAEMAAAAAXjoAACAGQdwCakEDIAQqAuAqIAsQuwsgAygCrAEiBkGAA2pCADcCACAGQYgDakEAEJYDIAMoAqwBIgZBoANqQQE2AgAgBkGYA2pBADYCACAGQZQDaiAGQegEajYCAEEBIQUCQCAMRQ0AIAxBoANqKAIAIQULIAZBpANqIAU2AgAgBkGoA2pCfzcCACAGQbgDakGAgID8ezYCACAGQbQDaiAGKgLkBDgCACAGQbwDakEAEO4DIAMoAqwBQcgDakEAEO4DAkAgAygCrAEiBiwAoAEiBUEBSA0AIAYgBUF/ajoAoAELAkAgBiwAoQEiBUEBSA0AIAYgBUF/ajoAoQELIAJBAXEhBQJAIA5FDQAgBhDxAiADKAKsAUEAEO8DCwJAIAUNACADKAKsASADQSBqIAAgARDwAwsgAygCrAEiBkEANgLUBCAGIAYoAlAgA0EgaiADQShqQQAQnAIgA0EgahChAgwBCyADKAKsARDfAwsgBEGUN2oQ8QMhACADKAKsASIGQbADaiAAKAIANgIAQQAhAAJAIAhFDQAgDEHMAmooAgAhAAsgBkHMAmogADYCACAGQYQEaiAGQYwEakEBEOoDIAMoAqwBIgZBADoAjAEgBiAGLwGWAUEBajsBlgEgDRDyAwJAIAkgB0cNACADKAKsAS0AjwEhBAwMCyAIRQ0KIAJBAXFFDQcCQCACQcAAcQ0AIAMoAqwBIgYsAKABQQBKDQAgBiwAoQFBAEoNACAELQC4Xw0AAkAgBioC5AMgBkHsA2oqAgBgDQAgBkHoA2oqAgAgBkHwA2oqAgBgRQ0BCyAGQQE6AKgBCyAMRQ0KIAwtAI0BDQgCQCAMLACoAUEBSA0AIAMoAqwBQQE6AKgBCyAMLACpAUEBSA0KIAMoAqwBIQYMCQtBoJ4EQa7xAEGrK0HzgQEQAAALQcHIAUGu8QBBrCtB84EBEAAAC0H+LkGu8QBBrStB84EBEAAAC0GGGUGu8QBBuitB84EBEAAAC0G+4gNBrvEAQd4rQfOBARAAAAtB2MABQa7xAEHHLUHzgQEQAAALQe6/AkGu8QBB0i5B84EBEAAAC0GfwwJBrvEAQYcwQfOBARAAAAsgAygCrAEiBkEBOgCoAQsgBkEBOgCpAQsgAygCrAEhBgJAAkAgBCoCmCpDAAAAAF9FDQBBASECIAZBAToAqAEMAQtBASECIAYsAKgBQQBKDQAgBiwAqQFBAEoNACAGLACqAUEASiECCyAGIAI6AJEBAkACQCAGLQCNAQ0AIAYtAIoBRQ0AQQAhBCACQQFzDQELQQAhBCAGLACgAUEASg0AQQAhBCAGLAChAUEASg0AIAYsAKkBQQFIIQQLIAYgBDoAjwELIANBsAFqJAAgBEH/AXFFCzYAAkACQCABQQBIDQAgACgCACABSg0BC0HKvQFBlZcBQdwMQf+AAhAAAAsgACgCCCABQQJ0agsIACAAKAIARQtAAQF/IwBBEGsiASQAIAFBADYCDAJAIABBqfsBIAFBDGpBABBpIgBFDQAgACABKAIMEJEGIAAQVwsgAUEQaiQACzMBAX1BACgC4JIHKgK0MiAAKgKABZQhAQJAIAAoApwGIgBFDQAgASAAKgKABZQhAQsgAQtIAQF/QQAhAQJAAkAgAEEASA0AIABBgARODQFBACgC4JIHIABqQYACai0AAEEARyEBCyABDwtBk5cEQa7xAEGFI0Gt+AAQAAALgQEBA38CQEEAKALgkgciACgCxDdFDQAgACgCjDghASAAKAKcOCECAkACQCAALQCaOEUNACACIAFBACAAQaA4ahDyBQwBCyACIAFBABCqAwsgACgCxDcgACgCjDhBBHRqIgFBwAZqIABBqDhqKQIANwIAIAFBuAZqIAApAqA4NwIACwvdBAMFfwJ9AX4jAEEwayIAJAACQAJAAkBBACgC4JIHIgFB0DhqKAIAIgINACABQaA5aigCAA0AIAEoAsg3RQ0BIAFBgAI7AZY4DAELIAFBzDhqIAFBnDlqIgMgAhshAgJAIAEtALQ4QSBxRQ0AIAFB+DhqKAIAIgRFDQAgAiABQfQ4aiAEIAEoAsg3RhshAgsCQAJAIAIgA0YNACABQaA5aigCAEUNASABKAKcOSgCnAYgASgCxDdHDQEgAUGoOWoqAgAiBSACKgIMIgZdDQAgBSAGXA0BIAFBrDlqKgIAIAIqAhBdRQ0BCyADIQILIAEoAsQ3RQ0BIAIoAgBFDQECQCABKAKMOA0AIABBKGoQLyEDAkACQCABLQC0OEHAAHFFDQAgAigCACEEQwAAAAAhBQJAIAEoAsA4QQJHDQAgBEHkAGoqAgAhBQsgAyAEQdwAaioCACAFkzgCBCAEIAUQsgMgACoCKCEFDAELIABBEGogAkEYaiACKAIAQQxqEE4gAEEIaiACQSBqIAIoAgBBDGoQTiAAQRhqIABBEGogAEEIahChASEEIABBEGogAigCACAEENgFIAAgACkDECIHNwMoIAenviEFCyACQRhqIgQgBYwQpgQgBCADKgIEjBC6AwsQlQIgASACKAIANgLENwJAAkAgASgCyDcgAigCBCIDRw0AIAIoAgghBAwBCyABIAM2AuQ3IAEgAigCCCIENgLoNyABIAEoArw4NgLsNwsgAyABKAKMOCAEIAJBGGoQ8gULIABBMGokAA8LQeUZQa7xAEGYxwBBojIQAAAL/gECBH8BfiMAQTBrIgEkAAJAAkACQEEAKALgkgciAi0AljgNACACLQCXOEUNACACKALENyIDDQELAkAgAkHkAWoiAxD2AkUNACAAIAMpAgA3AgAMAgsgACACKQP4PjcCAAwBCyABQShqIANBDGogAUEYaiADIAIoAow4QQR0aiIEQbgGaiIDKgIAIAJB0CpqKgIAQwAAgECUIAMQtQMQUpIgBEHEBmoqAgAgAkHUKmoqAgAgAxC2AxBSkxAxEE4gAUEYahC5AyABIAEpAyAiBTcDCCABIAU3AwAgAUEQaiABQShqIAFBGGogARDiBCAAIAFBEGoQNAsgAUEwaiQAC0YBAX8CQCAARQ0AIAAhAQJAA0AgASgCCEGAgICoAXFBgICACEcNASABKAKcBiIBDQAMAgsACyABIABGDQAgASAANgKsBgsLwAoDBn8BfQF+IwBBIGsiACQAQQAoAuCSByEBAkAQ/gIiAkUNACABQQA2Asw5CwJAIAEoAtA5RQ0AIAEoAsw5DQAgASABKgLcOSABQRhqKgIAQwAAIMGUkkMAAAAAEKgBIgY4Atw5IAEqAsQ6QwAAAABfRQ0AIAZDAAAAAF9FDQAgAUEANgLQOQtBACEDAkACQCACDQAgASgCzDkNAEEDQQEQqAMhAiABKALMOQ0BIAFB/AFqLQAARQ0BQQAhA0EAQQEQwANFDQEgAS0ACEEBcSEDDAELQQAhAgsCQAJAIAINACADRQ0BCwJAIAEoAsQ3IgINACABKAK4NEF/akGBgICAeEF/EMAGIgJFDQELIAEgAigCoAYiAjYCzDkgASACNgLQOSABIANBAXM6AOA5IAFCADcD2DkgAUEDQQQgAxs2AvQ3CyABIAFBGGoqAgAgASoC2DmSIgY4Atg5AkACQCABKALMOUUNAAJAIAEoAvQ3IgRBBEcNACABIAEqAtw5IAZDzcxMvpJDzcxMPZUQdhCoATgC3DkCQEEMQQQQqANBDUEEEKgDayIDRQ0AIAMQwQYgAUGAgID8AzYC3DkLAkBBAxCtAw0AIAEgAS0A4DkgASoC3DlDAACAP11xIgQ6AOA5AkACQCAERQ0AAkAgASgCxDdFDQBBACEDQQEhAgwCC0EAIQJBACEDIAQNAQsgASgCzDkhA0EAIQILIAFBADYCzDkMAwsgASgCzDlFDQEgASgC9DchBAtBACECQQAhAyAEQQNHDQEgASABKgLcOSABKgLYOUPNzEy+kkPNzEw9lRB2EKgBOALcOUEAIQICQEEAQQEQwANFDQBBAUF/IAFB/QFqLQAAGxDBBgtBACEDIAFB/AFqLQAADQEgASgCzDkhA0EAIQIMAQtBACECQQAhAwsCQEEQQQEQqANFDQAgAUEBOgDgOQsCQAJAIAEoAqQ1RQ0AIAEtALE1RQ0BCyABLQDgOUUNAEEQQQIQqANFDQAgAiABQeQBahD2AiABQYAHahD2AnNBAXNyIQILAkAgASgCzDkiBEUNACAELQAIQQRxDQAgAEEYahAvIQUCQAJAAkACQCABKAL0NyIEQQNHDQAgAUH9AWotAAANASAAQRBqQQFBAEMAAAAAQwAAAAAQswMgACAAKQMQNwMYIAEoAvQ3IQQLIARBBEYNAQsgACoCGCEGDAELIABBEGpBBEEAQwAAAABDAAAAABCzAyAAIAApAxAiBzcDGCAHp74hBgsCQCAGQwAAAABcDQAgBSoCBEMAAAAAWw0BCyABKALMOSgCoAYhBCAAQQhqIAUgASoCGEMAAEhElCABQagBaioCACABQawBaioCABBSlBA1EDMgAEEQaiAEQQxqIABBCGoQTiAEIABBEGpBARD4AiAEEPcCIAFBAToAlzgLAkAgA0UNAAJAAkAgASgCxDciBEUNACADIAQoAqAGRg0BCxCVAiABQYACOwGWOCADEMQDIgNBABDyAiADEPECAkAgAygCsAYNACADQQAQ7wMLIANBxAJqKAIAQQJHDQAgAUEBNgKMOAsgAUEANgLMOQsCQCACRQ0AIAEoAsQ3IgRFDQAgBCECAkADQCACIgMoApwGIgJFDQEgA0HEAmotAABBAnENASADKAIIQYCAgKgBcUGAgIAIRg0ACwsCQCADIARGDQAgAxDxAiADIAQ2AqwGIAEoAsQ3IQQLIAFBgAI7AZY4QQAhAwJAIARBxAJqLQAAQQJxRQ0AIAEoAow4QQFzIQMLIAMQrAMLIABBIGokAAsPACAAIAEQ9gVDAAAAAF4LEwBBACgC4JIHKAK8NSAAdkEBcQtqAQJ/AkACQEEAKALgkgciAygCxDciBEUNACABQQJPDQEgAyACNgLMNyADIAA2Asg3IAQgAUECdGpBsAZqIAA2AgAPC0GdFkGu8QBBpsEAQZKVAhAAAAtB9LkCQa7xAEGnwQBBkpUCEAAACzMBAX8CQCAAKAIAIgFBAEoNAEHXvgJBlZcBQeYMQeWOARAAAAsgAUEkbCAAKAIIakFcagtRAQJ/QQAoAuCSByIBIAA2Aow4IAEoAsQ3IQICQCAADQAgASACEMQDIgI2AsQ3IAIoArAGIgBFDQAgAEEAQQAgAkG4BmoQ8gUPCyACQQEQ7wMLHABBACgC4JIHIABBAnRqQYAGaioCAEMAAAAAXgsTAEEAKALgkgcoArg1IAB2QQFxC+sFAgJ9Bn9DAAAAACEAAkBBACgC4JIHIgIoAsA4QX9HDQAgAigCxDciA0UNACADQQpqLQAAQQRxDQAgAigCzDkNACACKAKMOA0AQQAhBEEAIQUCQCACQcgAaigCABCiA0UNAEEFEKMCQQFzIQULAkAgAkHMAGooAgAQogNFDQBBBhCjAkEBcyEEC0EAIQZBACEHAkAgAkHQAGooAgBBARC3BEUNAEEHEKMCQQFzIQcLAkAgAkHUAGooAgBBARC3BEUNAEEIEKMCQQFzIQYLAkAgBSAERw0AIAcgBnNFDQELAkAgA0HEAmooAgANACADQdECai0AAEUNAAJAIAIoAkhBARC3BEUNACADIANB3ABqKgIAIANB9ANqELYDkxCyA0MAAAAADwsCQCACKAJMQQEQtwRFDQAgAyADQdwAaioCACADQfQDahC2A5IQsgNDAAAAAA8LAkAgB0UNACADQwAAAAAQsgNDAAAAAA8LIAZFDQEgAyADQeQAaioCABCyA0MAAAAADwsgAigCjDghBEMAAAAAIANB9ANqELYDIAMQoQOTIAMgBEEEdGpBuAZqIgUQtgOSEKgBIQACQCACKAJIQQEQtwRFDQAgAkECNgLIOCACQQM2AsA4IAJBMDYCtDggAIwPCwJAIAIoAkxBARC3BEUNACACQQM2Asg4IAJBAjYCwDggAkEwNgK0OCAADwsCQCAHRQ0AIAMgBEEEdGoiBEG8BmogA0HcAGoqAgCMIgA4AgAgBEHEBmogADgCAAJAIAUQuwNFDQAgBEHABmpBADYCACAFQQA2AgALIAJB0AA2ArQ4IAJBAzYCwDhDAAAAAA8LQwAAAAAhACAGRQ0AIAMgBEEEdGoiBEG8BmogA0HkAGoqAgAgA0EgaioCAJIgA0HcAGoqAgCTIgE4AgAgBEHEBmogATgCAAJAIAUQuwNFDQAgBEHABmpBADYCACAFQQA2AgALIAJB0AA2ArQ4IAJBAjYCwDgLIAALVQECfwJAAkACQEEAKALgkgciAC0AsDhFDQAgAEEBOgCYOAwBCyAAIAAtAJk4IgE6AJg4IAFFDQELIAAoAsQ3DQBB8Y8CQa7xAEGAxABByqIBEAAACwsXACAAQQA2AnggAEEANgJwIAAgATgCaAsjACAAQfwAakEANgIAIABB9ABqQQA2AgAgAEHsAGogATgCAAv7AQEBfyMAQRBrIgUkACAAQwAAAABDAAAAABAxIQACQCABQQFxRQ0AIAAgBUEIakESIAIQ9gVBESACEPYFk0EUIAIQ9gVBEyACEPYFkxAxEPoCCwJAIAFBAnFFDQAgACAFQQhqQQUgAhD2BUEEIAIQ9gWTQQcgAhD2BUEGIAIQ9gWTEDEQ+gILAkAgAUEEcUUNACAAIAVBCGpBCSACEPYFQQggAhD2BZNBCyACEPYFQQogAhD2BZMQMRD6AgsCQCADQwAAAABbDQBBDhCtA0UNACAAIAMQ7AQLAkAgBEMAAAAAWw0AQQ8QrQNFDQAgACAEEOwECyAFQRBqJAALXQEBfyMAQRBrIgEkACAAQQA2AgggAEIANwIAIABB////+wc2AhQgAEL////79///v/8ANwIMIAEQ2QEaIABBIGogAUEIaikDADcCACAAIAEpAwA3AhggAUEQaiQACw0AIAAqAgggACoCAJMLEAAgAEEMaioCACAAKgIEkwt1AgF/AX4jAEEwayICJAAgAiABKQIIIgM3AxAgAiADNwMgIAJBKGogACABIAJBEGoQ4gQgACACKQMoNwIAIAIgASkCCCIDNwMIIAIgAzcDGCACQShqIABBCGogASACQQhqEOIEIAAgAikDKDcCCCACQTBqJAALGQAgACABIAIQMRogAEEIaiADIAQQMRogAAsrAQF/IABDAAAAAEMAAAAAQQAoAuCSByIBQRBqKgIAIAFBFGoqAgAQuAMaCyEAIAAgACoCBCABkjgCBCAAQQxqIgAgACoCACABkjgCAAscACAAKgIAIAAqAgheIAAqAgQgAEEMaioCAF5yCzwBAX8CQEEAKALgkgciASgCgDUgAEYNACABIAA2AoA1IAFBgICAgAQ2Aow1IAEgAUHkAWopAgA3AoQ1CwsUACABIAIgACAAIAJeGyAAIAFdGwsdACAAIAEqAgAgAioCAJQgASoCBCACKgIElBAxGgsdACAAIAEqAgAgAioCAJUgASoCBCACKgIElRAxGgswAQF/QQAhAgJAQQAoAuCSByAAQQJ0akE0aigCACIAQQBIDQAgACABELcEIQILIAILCgAgASAAaiABbws3AAJAAkAgAUEASA0AIAAoAgAgAUoNAQtByr0BQZWXAUHcDEH/gAIQAAALIAAoAgggAUGoBGxqC0EBAn9BACgC4JIHIgFBuDRqIQIgASgCuDQhAQNAAkAgAUEBTg0AQX8PCyACIAFBf2oiARDXAigCACAARw0ACyABCyMBAX8CQAJAIAAoAqwGIgFFDQAgAS0AiwENAQsgACEBCyABCysAAkACQCAAKAIEIgANAEEIIQAMAQsgAEECbSAAaiEACyAAIAEgACABShsLTAECfwJAIAAoAgQgAU4NACABQQJ0EFUhAgJAIAAoAggiA0UNACACIAMgACgCAEECdBDQLRogACgCCBBXCyAAIAE2AgQgACACNgIICwsrAAJAAkAgACgCBCIADQBBCCEADAELIABBAm0gAGohAAsgACABIAAgAUobC0wBAn8CQCAAKAIEIAFODQAgAUEkbBBVIQICQCAAKAIIIgNFDQAgAiADIAAoAgBBJGwQ0C0aIAAoAggQVwsgACABNgIEIAAgAjYC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QQBBABBjEPsDIgENACAAEPwDIQELIAELKAEBfyAAQQRqENoBGiAAQQhqIgEQ2gEaIAFCADcCACAAQgA3AgAgAAsSACAAIAI7AQIgACABOwEAIAALEQAgACgCCCIAQQRqQQAgABsLEQBBACgC4JIHQdw0aiAAEH0LhwECA38BfiMAQRBrIgIkACACQQhqIAIgAS4BBLIgAUEGai4BALIQMRA0IAAgAikDCDcCDAJAIAEuAQgiA0EBSA0AIAFBCmouAQAiBEEBSA0AIAJBCGogAiADsiAEshAxEDQgACACKQMIIgU3AhQgACAFNwIcCyAAIAEtAAw6AI0BIAJBEGokAAtqAAJAAkAgABD2AyABSw0AIAAQjAYgAU0NAAJAIAEgACABEI0GaiIBIAAQjAZBBGpHDQBBAA8LIAAQjAYgAU0NASABDwtBqpsEQfaWAUHXBEGAjQEQAAALQbqbBEH2lgFB1wRBgI0BEAAACzIAAkACQCABQQRIDQAgACgCACABSg0BC0HavAFB9pYBQdsEQdc3EAAACyAAKAIIIAFqCz0BAn8CQEEAKALgkgdBlN8AaiIBEPYDIgJFDQADQAJAIAIoAgAgAEcNACACDwsgASACEPkDIgINAAsLQQALVwECf0EQQQAoAuCSB0GU3wBqIABBg58EEIkGIgEgACABGyIBENktIgJBEWoQigYiABCtAhD0AxogACABIAJBABBjNgIAIAAQgQQgASACQQFqENAtGiAACzYAAkACQCAAEPYDIAFLDQAgABCMBiABSw0BC0GqmwRB9pYBQdoEQcDiABAAAAsgASAAKAIIawsRACAAKAIAIgBBf2pBACAAGwsHACAAKAIACwkAIAAgARCaAQsHACAAQRBqCysAAkACQCAAKAIEIgANAEEIIQAMAQsgAEECbSAAaiEACyAAIAEgACABShsLTAECfwJAIAAoAgQgAU4NACABQSRsEFUhAgJAIAAoAggiA0UNACACIAMgACgCAEEkbBDQLRogACgCCBBXCyAAIAE2AgQgACACNgIICwufAQEGfyMAQRBrIgEkAEEAIQJBACgC4JIHIgNBADYC+F4gA0H83gBqIgRBABA+IAFBADoADyAEIAFBD2oQkgYCQCADKAKIX0EATA0AIANBiN8AaiEFA0AgAyAFIAIQjwYiBiAEIAYoAhwRBQAgAkEBaiIC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ACgC4JIHKgKwMgsSACAAQQAoAuCSBykDuDI3AgALTwECfwJAIABDAAAAAF4NAEGzrwFBrvEAQew0QdzXARAAAAtBACgC4JIHIQEQkwQiAiAAOAKABSABIAIQoQMiADgCsDIgAUHEMmogADgCAAsvAQF/AkAgACgCACIBQQBKDQBB174CQZWXAUHyDEHhjgEQAAALIAAgAUF/ajYCAAtaAQJ/AkAgAEF+Sg0AQdC1AkGu8QBBjDVBmscBEAAAC0EAKALgkgciASABKALsNCICNgLoOSACQagDaigCACECIAFB/////wc2Avg5IAEgACACakEBajYC9DkL3gEBBH8jAEEgayIAJAACQEEAKALgkgciASgC7DQiAi0AkAFFDQAgASgCxDciAyACKAKoBkcNAAJAIAEtAJk4DQAgASgCnDhFDQELIAEoAow4IANBwAJqKAIARw0AIAFBADoAmTggASADQZgCaigCADYCnDggAEEIaiADQaACaiADQQxqEEsgACABKALENyICQagCaiACQQxqEEsgAEEQaiAAQQhqIAAQoQEaIAFBqDhqIABBGGopAwA3AgAgASAAKQMQNwKgOBCwAxDOBA0AQwAAAD8QrQULIABBIGokAAttAgJ/An1BACgC4JIHIgEoAuw0IQIgAiACQdgBaioCACIDIAFB5CpqKgIAIgSTIAQgAyACQYACaioCAJKSIAAQrgUgAkEQaioCAJMgABCvBSACQfwAakMAAAAAIAJBwABqKgIAIASTEKgBOAIACw0AIAEgAJMgApQgAJILlQECAn0BfwJAIAJDAAAAAGBFDQAgAkMAAIA/X0UNACAAEIEDIQMgABDjAyEEIABB/ABqQQA2AgAgAEH0AGogAjgCAAJAAkAgAEHcAGoqAgAgASADIASSk5IiAotDAAAAT11FDQAgAqghBQwBC0GAgICAeCEFCyAAQewAaiAFsjgCAA8LQfisAUGu8QBBzTxB3YECEAAACzkBAn8jAEEQayIBJAAgAUEAKALgkgcoAuw0IgIgABCIAjYCDCACQcABaiABQQxqEN4BIAFBEGokAAs5AQJ/IwBBEGsiASQAIAFBACgC4JIHKALsNCICIAAQiQI2AgwgAkHAAWogAUEMahDeASABQRBqJAALMgEBfyMAQRBrIgEkACABIAA2AgxBACgC4JIHKALsNEHAAWog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CGogAxChARoMBAsgAyABQfQDaiABQdgAahBLIANBCGogAyABQTxqEE4gAyADQQhqIAFBLGoQTiAAIANBCGogAxChARoMAwsgACABKQLEBDcCACAAQQhqIAFBzARqKQIANwIADAILQfzDAkGu8QBB49IAQc86EAAACyAAIAEQ5wMLIANBEGokAAsHACAAKAIAC8EEAQF9AkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQCACDg0NAAECAwQFBgcICQoLDAsgACABKQLkATcCACAAQQhqIAFB7AFqKQIANwIADwsgACABKQL0ATcCACAAQQhqIAFB/AFqKQIANwIADwsgACABKQLEAjcCACAAQQhqIAFBzAJqKQIANwIADwsgACABKQKEAjcCACAAQQhqIAFBjAJqKQIANwIADwsgACABKQKUAjcCACAAQQhqIAFBnAJqKQIANwIADwsgACABQQxqIAMQowYiAioCCCABQYgCaioCACIEIAIqAgwgBCABKgK0AZIQuAMaDwsgACABQQxqIAMQowYiAioCNCABQfgBaioCACACKgI4IAFBgAJqKgIAELgDGg8LIAAgAUEMaiADEKMGIgEpAiA3AgAgAEEIaiABQShqKQIANwIADwsgACABQQxqIAMQowYiAioCNCABQYgCaioCACIEIAIqAkggBCABKgK4AZIQuAMaDwsgACABQQxqIAMQowYiAioCNCABQYgCaioCACIEIAIqAkwgBCABKgK4AZIQuAMaDwsgACABQQxqIAMQowYiAioCNCABQYgCaioCACIEIAIqAkAgBCABKgK4AZIQuAMaDwsgACABQQxqIAMQowYiAioCNCABQYgCaioCACABKgK4AZIgAioCRCABQZACaioCABC4AxoPC0H8wwJBrvEAQdXSAEHaPBAAAAsgACABKQLUATcCACAAQQhqIAFB3AFqKQIANwIAC4gBAQN/IwBBEGsiAiQAIAIgACgCADYCBCACIAE2AgACQCABQbuJBCACEJQLRQ0AQbGMBEEAEJEJAkAgACgCACIBQQBMDQADQCAAIAFBf2oiAxDXAigCABCwBSAAIAMQ1wIoAgBB/BkQpAYgAUEBSiEEEOsEIAMhASAEDQALCxChCwsgAkEQaiQAC40MAhR/BH0jAEGwBGsiAyQAQQAoAuCSByEEAkAgASgCACIFQQFIDQAgARClBigCHA0AIAUgARClBigCIEVrIQULIAEoAjAhBiABKAIYIQcgASgCDCEIIANBsAFqIAU2AgAgAyAINgKsASADIAc2AqgBIAMgAjYCoAEgAyAGQdfkBCAGGzYCpAEgAUGA2wAgA0GgAWoQlwshBgJAAkACQBClBSABRw0AQwAAAABDAACAvxDdBCADQYACakMAAIA/Q83MzD5DzczMPkMAAIA/EHRBiZQCQQAQkwkgBg0BDAILIAAQogYhCQJAAkAgAEUNAAJAQQAQmAJFDQAgA0GAAmogAEEMaiICIABBFGoQTiAJIAIgA0GAAmpB//+DeEMAAAAAQQ9DAACAPxClBwsgBkUNAyAALQCLAQ0BQcXTBEEAEJUJDAELIAZFDQILIAVBAUgNACADQcABakEYaiEKIANBgAJqQawCaiELIANB4AFqQRBqIQwgA0HgAWpBCHIhDSADQeABakEYaiEOIAEoAgghDyADQeAAakEgaiEQIANB4ABqQRhqIREgA0HgAGpBEGohEgNAAkACQCAPKAIgIgZFDQAgAyAPKAIkNgKUASADIAY2ApABQY/1ACADQZABahCbCQwBCyAPKAIcIQYgDyoCACEXIA8oAhAhAiAPKgIEIRggDyoCCCEZIBAgDyoCDLs5AwAgESAZuzkDACASIBi7OQMAIAMgAjYCZCADIBe7OQNoIAMgBkEDbjYCYCADQYACakGsAkGigwQgA0HgAGoQYBogARCmBiEGIAMgA0GAAmo2AlAgDyAGa0EobUGX4gAgA0HQAGoQlwshBgJAQQAQmAJFDQACQAJAIAQtAO9fIgINACAELQDwX0UNAkEBIQcgCQ0BDAILIAlFDQEgBC0A8F8hBwsgACABIA8gAkEARyAHQf8BcUEARxCnBgsgBkUNAAJAAkAgASgCDEEBTg0AQQAhEwwBCyABKAIUIRMLIAEoAiAgDygCFCIIQRRsaiEUQwAAAAAhFwJAIA8oAhgiBiAGIA8oAhwiAmpPDQADQCADQeABaiECA0AgAhAvQQhqIgIgDkcNAAtBACECA0AgBiEHAkAgE0UNACATIAZBAXRqLwEAIQcLIANB4AFqIAJBA3RqIBQgB0EUbGopAgA3AwAgBkEBaiEGIAJBAWoiAkEDRw0ACyAXIANB4AFqIA0gDBCoBpIhFyAGIA8oAhwiAiAPKAIYIgdqSQ0ACyAPKAIUIQggByEGCyADQTBqQRBqIBe7OQMAIAMgBjYCOCADIAg2AjQgAyACNgIwIANBgAJqQawCQZ0PIANBMGoQYBogA0GAAmpBAEEAIANB4AFqQwAAAABDAAAAABAxEM0JGgJAQQAQmAJFDQAgCUUNACAAIAEgD0EBQQAQpwYLIANB4AFqEKMBIhUgDygCHEEDbkMAAIC/EKUBAkAgFRCpAUUNAANAAkAgAygC4AEiFiADKALkAU4NACAPKAIYIBZBA2xqIQIDQCADQcABaiEGA0AgBhAvQQhqIgYgCkcNAAtBACEHIANBgAJqIQgDQCACIQYCQCATRQ0AIBMgAkEBdGovAQAhBgsgA0HAAWogB0EDdGogFCAGQRRsaiIGKQIANwMAIAYqAgAhFyAGKgIEIRggBioCCCEZIAZBDGoqAgAhGiADQShqIAYoAhA2AgAgA0EgaiAauzkDACADQRhqIBm7OQMAIANBEGogGLs5AwAgA0Gn1wRBuaICIAcbNgIAIAMgF7s5AwggAyACNgIEIAJBAWohAiAIIAggCyAIa0Hl3AQgAxBgaiEIIAdBAWoiB0EDRw0ACyADQYACakEAQQAgA0G4AWpDAAAAAEMAAAAAEDEQzQkaAkAgCUUNAEEAEJgCRQ0AIAkgCSgCJCIGQX5xNgIkIAkgA0HAAWpBA0H//4N4QQFDAACAPxCUByAJIAY2AiQLIBZBAWoiFiADKALkAUgNAAsLIBUQqQENAAsLEKELIBUQpAEaCyAPQShqIg8gASgCCCAFQShsakkNAAsLEKELCyADQbAEaiQACwcAIAAoAgALCQAgACABEIcEC4EFAgd/An0jAEHwAmsiAiQAIAAoAiQhAxDtAiEEIAAoAhAhBSACIAAoAgA2AlggAiAFNgJUIAIgATYCUCACQY3hA0HX5AQgAyAEQX5qIgFIGzYCXCACQfAAakGAAkHL3gAgAkHQAGoQYBoCQAJAAkAgAyABTg0AQQBBARCtARC0ASACIAJB8ABqNgIwIABBl+IAIAJBMGoQlwshA0EBELUBIAMNAQwCCyACIAJB8ABqNgJAIABBl+IAIAJBwABqEJcLIQMCQEEAEJgCRQ0AEJ0CIgEgAEEoaiAAQTBqQf//g3hDAAAAAEEPQwAAgD8QpQcgASACQegAaiAAKgJYIABBLGoiBCoCABAxIAJB4ABqIAAqAlggAEE0aiIFKgIAEDFBgP6DeEMAAIA/EKQHIAEgAkHoAGogACoCXCAEKgIAEDEgAkHgAGogACoCXCAFKgIAEDFBgP6DeEMAAIA/EKQHCyADRQ0BC0EAIQECQCAAKAIAQQBMDQAgAkEYaiEGIAJBEGohBwNAIAAgARCpBiIDELAFAkBB8qECEKAJRQ0AIAAgA0F/EOULC0MAAAAAQwAAAEAQ3QQCQEHroQIQoAlFDQAgACADQQEQ5QsLQwAAAABDAACAvxDdBEEqQSAgAygCACIEIAAoAhRGGyEFAkACQCADLwEcQf//A0cNAEHX5AQhCAwBCyAAIAMQqgYhCAsgAyoCECEJIAMqAhQhCiACQSBqIAMqAhi7OQMAIAYgCrs5AwAgByAJuzkDACACIAg2AgwgAiAENgIIIAIgBTYCBCACIAE2AgBB2akBIAIQkQkQ6wQgAUEBaiIBIAAoAgBIDQALCxChCwsgAkHwAmokAAuKAQEHfyMAQSBrIgEkACAAKAIAIQIgABCBBCEDIABBBmouAQAhBCAAQQpqLgEAIQUgAC4BBCEGIAAuAQghByABQRhqIAAtAAw2AgAgAUEUaiAFNgIAIAFBEGogBzYCACABIAQ2AgwgASAGNgIIIAEgAzYCBCABIAI2AgBBxPABIAEQkQkgAUEgaiQACwcAIAAoAgALEQAgACgCCCIAQQRqQQAgABsLagACQAJAIAAQoAYgAUsNACAAEKsGIAFNDQACQCABIAAgARCsBmoiASAAEKsGQQRqRw0AQQAPCyAAEKsGIAFNDQEgAQ8LQaqbBEH2lgFB1wRBgI0BEAAAC0G6mwRB9pYBQdcEQYCNARAAAAsNAEEAKALgkgdB2DtqCzkAAkACQCABQQBIDQAgACgCACABQegAbGoiASAAKAIESQ0BC0Gy4QFB9pYBQY4EQf+AAhAAAAsgAQvUCwMEfwd9AX4jAEHgAmsiAiQAAkACQCAADQAgAiABNgIAQYWPAiACEJsJDAELQQAoAuCSBygCxDcgAEYhAwJAAkAgAC0AiwENAEEAQQEQrQEQtAEgACgCACEEIAJBjeEDNgK4AiACIAQ2ArQCIAIgATYCsAIgASADQYbfACACQbACahCdCyEBQQEQtQFBABCYAhogAQ0BDAILIAAoAgAhBCACQdfkBDYCyAIgAiAENgLEAiACIAE2AsACIAEgA0GG3wAgAkHAAmoQnQshAQJAQQAQmAJFDQAgABCiBiEDIAJB2AJqIABBDGoiBCAAQRRqEE4gAyAEIAJB2AJqQf//g3hDAAAAAEEPQwAAgD8QpQcLIAFFDQELAkAgAC0A4AZFDQBBrbcDQQAQlQkLIAAoAgghASAAIAAoAogFQYgpEJoGIABBEGoqAgAhBiAAQRhqKgIAIQcgAEEoaioCACEIIAAqAgwhCSAAKgIUIQogACoCJCELIAAqAiwhDCACQagCaiAAQTBqKgIAuzkDACACQfABakEwaiAMuzkDACACQfABakEoaiAIuzkDACACQfABakEgaiALuzkDACACQfABakEYaiAHuzkDACACQfABakEQaiAKuzkDACACIAa7OQP4ASACIAm7OQPwAUHm/AMgAkHwAWoQmwkgAkHAAWpBJGpB8bIBQdfkBCABQcAAcRs2AgAgAkHAAWpBIGpB9sAAQdfkBCABQYCAEHEbNgIAIAJB3AFqQaTBAEHX5AQgAUGABHEbNgIAIAJBwAFqQRhqQbTVBEHX5AQgAUGAAnEbNgIAIAJB1AFqQanVBEHX5AQgAUGAgICAAXEbNgIAIAJBwAFqQRBqQdXVBEHX5AQgAUGAgIDAAHEbNgIAIAJBxdUEQdfkBCABQYCAgCBxGzYCzAEgAkHM1QRB1+QEIAFBgICAEHEbNgLIASACQfvVBEHX5AQgAUGAgIAIcRs2AsQBIAIgATYCwAFBxZMEIAJBwAFqEJsJIABB3ABqKgIAIQYgAEHkAGoqAgAhByAAKgJYIQggACoCYCEJIAAtAIgBIQEgAkGQAWpBJGpBjIMCQdfkBCAALQCJARs2AgAgAkGQAWpBIGpB2YgCQdfkBCABGzYCACACQZABakEYaiAHuzkDACACQZABakEQaiAGuzkDACACIAm7OQOYASACIAi7OQOQAUGQ3QAgAkGQAWoQmwkgAC0AjAEhA0F/IQECQCAALQCKASIEIAAtAIsBIgVyRQ0AIAAuAZoBIQELIAIgATYCjAEgAiADNgKIASACIAU2AoQBIAIgBDYCgAFB2vQBIAJBgAFqEJsJIAAtAJABIQEgAC0AkQEhAyAALACoASEEIAAsAKkBIQUgAkHgAGpBEGogAC0AjwE2AgAgAiAFNgJsIAIgBDYCaCACIAM2AmQgAiABNgJgQd/1ASACQeAAahCbCSAAKQKwBiENIAIgAEHEAmooAgA2AlggAiANNwNQQZGIAiACQdAAahCbCQJAAkAgACgCrAYiAQ0AQYmPAiEBDAELIAEoAgAhAQsgAiABNgJAQYXgACACQcAAahCbCQJAAkAgAEG4BmoQuwMNACAAQbwGaioCACEGIABBwAZqKgIAIQcgACoCuAYhCCACQThqIABBxAZqKgIAuzkDACACQTBqIAe7OQMAIAIgCLs5AyAgAiAGuzkDKEHA/AMgAkEgahCbCQwBC0HXoAJBABCbCQsCQCAAKAKgBiIBIABGDQAgAUHzFhCkBgsCQCAAKAKcBiIBRQ0AIAFB3BcQpAYLAkAgAEGIA2oiASgCAEEBSA0AIAFBqj8QmQYLAkAgACgC9AQiAUEBSA0AIAIgATYCEEGJzgBB7IgEIAJBEGoQlAtFDQBBACEBAkAgAEH0BGoiAygCAEEATA0AA0AgAyABEPMBEK0GIAFBAWoiASADKAIASA0ACwsQoQsLIABB6ARqQaLZARCwBhChCwsgAkHgAmokAAszAQF/AkAgACgCACIBQQBKDQBB174CQZWXAUHnDEHljgEQAAALIAFBKGwgACgCCGpBWGoLBwAgACgCCAvfAwELfyMAQdAAayIFJAACQAJAIAMNACAERQ0BCyAAEKIGIQYCQAJAIAEoAgxBAU4NAEEAIQcMAQsgAUEUaigCACEHCyABQSBqKAIAIQggAigCFCEJIAVBwABqIAIQ3QMhCiAFQTBqQ///f39D//9/f0P//3//Q///f/8QuAMhCyAGIAYoAiQiDEF+cTYCJAJAIAIoAhgiASABIAIoAhxqTw0AIAVBKGohDQNAIAVBEGohAANAIAAQL0EIaiIAIA1HDQALQQAhAANAIAEhDgJAIAdFDQAgByABQQF0ai8BACEOCyAFQRBqIABBA3RqIg8gCCAOIAlqQRRsaikCADcDACALIA8QrwYgAUEBaiEBIABBAWoiAEEDRw0ACwJAIANFDQAgBiAFQRBqQQNB//+DeEEBQwAAgD8QlAcLIAEgAigCHCACKAIYakkNAAsLAkAgBEUNACAFQRBqIAoQNCAFQQhqIApBCGoQNCAGIAVBEGogBUEIakH/gXxDAAAAAEEPQwAAgD8QpQcgBUEQaiALEDQgBUEIaiALQQhqEDQgBiAFQRBqIAVBCGpBgH5DAAAAAEEPQwAAgD8QpQcLIAYgDDYCJCAFQdAAaiQADwtBsvsBQa7xAEHl1QBBqxAQAAALPQEDfSACKgIAIAAqAgQiAyABKgIEIgSTlCAAKgIAIAQgAioCBCIFk5QgASoCACAFIAOTlJKSi0MAAAA/lAs2AAJAAkAgAUEASA0AIAAoAgAgAUoNAQtByr0BQZWXAUHcDEH/gAIQAAALIAAoAgggAUEkbGoLPQACQAJAIAEuARwiAUF/Rg0AIAAoAoQBIAFKDQELQZe8AUH2lgFB5A5BytABEAAACyAAQYwBaigCACABagsNACAAKAIIIAAoAgBqCwoAIAFBfGooAgAL+gECBH8CfSMAQdAAayIBJAAgACgCACECIAAoAhAhAyABIAAoAgQ2AkggASADNgJEIAEgAjYCQAJAIAJBq4cCIAFBwABqEJcLRQ0AIAAqAhQhBSABQSBqQRBqIAAqAhgiBrs5AwAgASAFuzkDKCABIAYgBZO7OQMgQZr+AyABQSBqEJsJQQAhAgJAIAAoAlxBAEwNACAAQdwAaiEDIAFBEGohBANAIAMgAhCuBioCACEFIAQgACADIAIQrgYqAgAQ5Qi7OQMAIAEgBbs5AwggASACNgIAQanhAyABEJsJIAJBAWoiAiAAKAJcSA0ACwsQoQsLIAFB0ABqJAALNgACQAJAIAFBAEgNACAAKAIAIAFKDQELQcq9AUGVlwFB3AxB/4ACEAAACyAAKAIIIAFBHGxqC28BAX0CQCAAKgIAIAEqAgAiAl5FDQAgACACOAIACwJAIAAqAgQgASoCBCICXkUNACAAIAI4AgQLAkAgACoCCCABKgIAIgJdRQ0AIAAgAjgCCAsCQCAAQQxqKgIAIAEqAgQiAl1FDQAgACACOAIMCwuEAQECfyMAQSBrIgIkACAAKAIAIQMgAiAAELEGNgIYIAIgAzYCFCACIAE2AhACQCABQbvWACACQRBqEJQLRQ0AQQAhAQJAIAAoAgBBAEwNAANAIAIgACABEIcBKQIANwMAQYAIIAIQmwkgAUEBaiIBIAAoAgBIDQALCxChCwsgAkEgaiQACwoAIAAoAgBBA3QLFwEBfwJAIAAoAggiAUUNACABEFcLIAALBwAgABDELQsHACAAEMUtCxIAIABBADYCCCAAQgA3AgAgAAsSACAAQQA2AgggAEIANwIAIAALEgAgAEEANgIIIABCADcCACAAC7YBAQJ/AkAgACgCCCIDIAFLDQAgAyAAKAIAIgRBAnRqIAFJDQAgASADa0ECdSEBAkAgBCAAKAIERw0AIAAgACAEQQFqEMUDEMYDIAAoAgAhBAsCQCAEIAFMDQAgACgCCCABQQJ0aiIDQQRqIAMgBCABa0ECdBDSLRoLIAAoAgggAUECdCIEaiACKAIANgIAIAAgACgCAEEBajYCACAAKAIIIARqDwtB3b0BQZWXAUH3DEGOKhAAAAsiACAAIAAqAgAgASoCAJM4AgAgACAAKgIEIAEqAgSTOAIEC0wBAX8CQCAAKAIAIgIgACgCBEcNACAAIAAgAkEBahC8BhC9BiAAKAIAIQILIAAoAgggAkEDdGogASkCADcCACAAIAAoAgBBAWo2AgALIgAgACAAQdwAaigCACAAKAJUIAEgAiADEJQHIABBADYCVAsrAAJAAkAgACgCBCIADQBBCCEADAELIABBAm0gAGohAAsgACABIAAgAUobC0wBAn8CQCAAKAIEIAFODQAgAUEDdBBVIQICQCAAKAIIIgNFDQAgAiADIAAoAgBBA3QQ0C0aIAAoAggQVwsgACABNgIEIAAgAjYCCAsLcQEBfQJAAkAgAEEBSw0AIAEgASoCBCACKgIEIAJBDGoqAgAiAxC9AzgCBCABQQxqIQEgAkEEaiECDAELIAEgASoCACACKgIAIAIqAggiAxC9AzgCACABQQhqIQELIAEgASoCACACKgIAIAMQvQM4AgALLgACQCABIAJdRQ0AIAEgApMPC0MAAAAAIQECQCADIABdRQ0AIAAgA5MhAQsgAQthAQJ/QQAhAwJAIABBAEgNAEEAKALgkgdBuDRqIQQDQCAAIAQoAgBODQEgACABRg0BAkAgBCAAENcCKAIAEJAFDQAgACACaiIAQX9KDQEMAgsLIAQgABDXAigCACEDCyADC5kBAQN/AkBBACgC4JIHIgEoAsw5IgJFDQACQCACQQtqLQAAQQhxDQACQAJAIAIQwwMiAyAAakGBgICAeCAAEMAGIgINAEEAIQICQCAAQX9KDQAgASgCuDRBf2ohAgsgAiADIAAQwAYiAkUNAQsgASACNgLMOSABIAI2AtA5CyABQQA6AOA5Cw8LQa86Qa7xAEHZyABB9xcQAAALQwECf0GJ7wMhAQJAIAAoAggiAkGAgIAgcQ0AAkAgAkGACHFFDQAgACgCAEGL7QAQvywNAEH57gMPC0G9iAQhAQsgAQsKACAAEMgGGiAACxcBAX8CQCAAKAIIIgFFDQAgARBXCyAACwoAIAAQyAYaIAALCgAgABDIBhogAAsXAQF/AkAgACgCCCIBRQ0AIAEQVwsgAAsXAQF/AkAgACgCCCIBRQ0AIAEQVwsgAAsfACAAQSRqEMgGGiAAQRhqEMgGGiAAQQxqEIACGiAACxcBAX8CQCAAKAIIIgFFDQAgARBXCyAACxcBAX8CQCAAKAIIIgFFDQAgARBXCyAACxgAIAAQ3wIgAEEMahD3ARogABDYBhogAAsYACAAEOICIABBDGoQ9wEaIAAQ2QYaIAALFwEBfwJAIAAoAggiAUUNACABEFcLIAALHwEBfyAAQRhqIQEDQCABQXRqENoGIgEgAEcNAAsgAAsJACAAEI4DIAALFwEBfwJAIAAoAggiAUUNACABEFcLIAALFwEBfwJAIAAoAggiAUUNACABEFcLIAALFwEBfwJAIAAoAggiAUUNACABEFcLIAALFwEBfwJAIAAoAggiAUUNACABEFcLIAALFwEBfwJAIAAoAggiAUUNACABEFcLIAALFwEBfwJAIAAoAggiAUUNACABEFcLIAALDgAgAEGAKmoQgAIaIAALFwEBfwJAIAAoAggiAUUNACABEFcLIAALFwEBfwJAIAAoAggiAUUNACABEFcLIAALFwEBfwJAIAAoAggiAUUNACABEFcLIAALFwEBfwJAIAAoAggiAUUNACABEFcLIAALFwEBfwJAIAAoAggiAUUNACABEFcLIAAL0RUBCn8jAEEQayIBJAACQCAADQAQqgEhAAsgAUMAAIA/QwAAgD9DAACAP0MAAIA/EHQaIABBzAFqIAFBCGoiAikDADcCACAAIAEpAwA3AsQBIAFDAAAAP0MAAAA/QwAAAD9DAACAPxB0GiAAQdwBaiACKQMANwIAIABB1AFqIAEpAwA3AgAgAUOPwnU9Q4/CdT1Dj8J1PUPXo3A/EHQaIABB7AFqIAIpAwA3AgAgAEHkAWogASkDADcCACABQwAAAABDAAAAAEMAAAAAQwAAAAAQdBogAEH8AWogAikDADcCACAAQfQBaiABKQMANwIAIAFDCtejPUMK16M9QwrXoz1D16NwPxB0GiAAQYwCaiACKQMANwIAIABBhAJqIAEpAwA3AgAgAUP2KNw+Q/Yo3D5DAAAAP0MAAAA/EHQaIABBnAJqIgMgAikDADcCACAAQZQCaiIEIAEpAwA3AgAgAUMAAAAAQwAAAABDAAAAAEMAAAAAEHQaIABBrAJqIAIpAwA3AgAgAEGkAmogASkDADcCACABQwrXIz5D4XqUPkOPwvU+Q3E9Cj8QdBogAEG8AmogAikDADcCACAAQbQCaiABKQMANwIAIAFDuB6FPkM9Chc/Q0jhej9DzczMPhB0GiAAQcwCaiACKQMANwIAIABBxAJqIAEpAwA3AgAgAUO4HoU+Qz0KFz9DSOF6P0MfhSs/EHQaIABB3AJqIAIpAwA3AgAgAEHUAmogASkDADcCACABQwrXIz1DCtcjPUMK1yM9QwAAgD8QdBogAEHsAmogAikDADcCACAAQeQCaiIFIAEpAwA3AgAgAUMK1yM+Q+F6lD5Dj8L1PkMAAIA/EHQaIABB/AJqIAIpAwA3AgAgAEH0AmoiBiABKQMANwIAIAFDAAAAAEMAAAAAQwAAAABDXI8CPxB0GiAAQYwDaiACKQMANwIAIABBhANqIAEpAwA3AgAgAUMpXA8+QylcDz5DKVwPPkMAAIA/EHQaIABBnANqIAIpAwA3AgAgAEGUA2ogASkDADcCACABQwrXozxDCtejPEMK16M8QxSuBz8QdBogAEGsA2ogAikDADcCACAAQaQDaiABKQMANwIAIAFDUriePkNSuJ4+Q1K4nj5DAACAPxB0GiAAQbwDaiACKQMANwIAIABBtANqIAEpAwA3AgAgAUOF69E+Q4Xr0T5DhevRPkMAAIA/EHQaIABBzANqIAIpAwA3AgAgAEHEA2ogASkDADcCACABQ1yPAj9DXI8CP0NcjwI/QwAAgD8QdBogAEHcA2ogAikDADcCACAAQdQDaiABKQMANwIAIAFDuB6FPkM9Chc/Q0jhej9DAACAPxB0GiAAQewDaiACKQMANwIAIABB5ANqIAEpAwA3AgAgAUOPwnU+Q7geBT9DrkdhP0MAAIA/EHQaIABB/ANqIAIpAwA3AgAgAEH0A2ogASkDADcCACABQ7gehT5DPQoXP0NI4Xo/QwAAgD8QdBogAEGMBGogAikDADcCACAAQYQEaiABKQMANwIAIAFDuB6FPkM9Chc/Q0jhej9DzczMPhB0GiAAQZwEaiACKQMANwIAIABBlARqIAEpAwA3AgAgAUO4HoU+Qz0KFz9DSOF6P0MAAIA/EHQaIABBrARqIAIpAwA3AgAgAEGkBGogASkDADcCACABQ4/CdT1DFK4HP0NI4Xo/QwAAgD8QdBogAEG8BGogAikDADcCACAAQbQEaiABKQMANwIAIAFDuB6FPkM9Chc/Q0jhej9DUriePhB0GiAAQcwEaiACKQMANwIAIABBxARqIgcgASkDADcCACABQ7gehT5DPQoXP0NI4Xo/Q83MTD8QdBogAEHcBGoiCCACKQMANwIAIABB1ARqIgkgASkDADcCACABQ7gehT5DPQoXP0NI4Xo/QwAAgD8QdBogAEHsBGogAikDADcCACAAQeQEaiIKIAEpAwA3AgAgAEH8BGogAykCADcCACAAQfQEaiAEKQIANwIAIAFDzczMPUPNzMw+QwAAQD9DFK5HPxB0GiAAQYwFaiACKQMANwIAIABBhAVqIAEpAwA3AgAgAUPNzMw9Q83MzD5DAABAP0MAAIA/EHQaIABBnAVqIAIpAwA3AgAgAEGUBWogASkDADcCACABQ7gehT5DPQoXP0NI4Xo/Q83MTD4QdBogAEGsBWogAikDADcCACAAQaQFaiABKQMANwIAIAFDuB6FPkM9Chc/Q0jhej9DH4UrPxB0GiAAQbwFaiACKQMANwIAIABBtAVqIAEpAwA3AgAgAUO4HoU+Qz0KFz9DSOF6P0MzM3M/EHQaIABBzAVqIAIpAwA3AgAgAEHEBWogASkDADcCACABIAcgBkPNzEw/EN4GIABB3AVqIAIpAwA3AgAgAEHUBWoiAyABKQMANwIAIABB7AVqIAgpAgA3AgAgAEHkBWogCSkCADcCACABIAogBkOamRk/EN4GIABB/AVqIAIpAwA3AgAgAEH0BWoiBiABKQMANwIAIAEgAyAFQ83MTD8Q3gYgAEGMBmogAikDADcCACAAQYQGaiABKQMANwIAIAEgBiAFQ83MzD4Q3gYgAEGcBmogAikDADcCACAAQZQGaiABKQMANwIAIAFD9igcP0P2KBw/Q/YoHD9DAACAPxB0GiAAQawGaiACKQMANwIAIABBpAZqIAEpAwA3AgAgAUMAAIA/Q/Yo3D5DMzOzPkMAAIA/EHQaIABBvAZqIAIpAwA3AgAgAEG0BmogASkDADcCACABQ2ZmZj9DMzMzP0MAAAAAQwAAgD8QdBogAEHMBmogAikDADcCACAAQcQGaiABKQMANwIAIAFDAACAP0OamRk/QwAAAABDAACAPxB0GiAAQdwGaiACKQMANwIAIABB1AZqIAEpAwA3AgAgAUNcj0I+Q1yPQj5DzcxMPkMAAIA/EHQaIABB7AZqIAIpAwA3AgAgAEHkBmogASkDADcCACABQ1K4nj5DUriePkMzM7M+QwAAgD8QdBogAEH8BmogAikDADcCACAAQfQGaiABKQMANwIAIAFDH4VrPkMfhWs+QwAAgD5DAACAPxB0GiAAQYwHaiACKQMANwIAIABBhAdqIAEpAwA3AgAgAUMAAAAAQwAAAABDAAAAAEMAAAAAEHQaIABBnAdqIAIpAwA3AgAgAEGUB2ogASkDADcCACABQwAAgD9DAACAP0MAAIA/Q4/CdT0QdBogAEGsB2ogAikDADcCACAAQaQHaiABKQMANwIAIAFDuB6FPkM9Chc/Q0jhej9DMzOzPhB0GiAAQbwHaiACKQMANwIAIABBtAdqIAEpAwA3AgAgAUMAAIA/QwAAgD9DAAAAAENmZmY/EHQaIABBzAdqIAIpAwA3AgAgAEHEB2ogASkDADcCACABQ7gehT5DPQoXP0NI4Xo/QwAAgD8QdBogAEHcB2ogAikDADcCACAAQdQHaiABKQMANwIAIAFDAACAP0MAAIA/QwAAgD9DMzMzPxB0GiAAQewHaiACKQMANwIAIABB5AdqIAEpAwA3AgAgAUPNzEw/Q83MTD9DzcxMP0PNzEw+EHQaIABB/AdqIAIpAwA3AgAgAEH0B2ogASkDADcCACABQ83MTD9DzcxMP0PNzEw/QzMzsz4QdBogAEGMCGogAikDADcCACAAQYQIaiABKQMANwIAIAFBEGokAAtVAQF9IAAgASoCACIEIAIqAgAgBJMgA5SSIAEqAgQiBCACKgIEIASTIAOUkiABKgIIIgQgAioCCCAEkyADlJIgASoCDCIEIAIqAgwgBJMgA5SSEHQaC80VAQh/IwBBEGsiASQAAkAgAA0AEKoBIQALIAFDZmZmP0NmZmY/Q2ZmZj9DAACAPxB0GiAAQcwBaiABQQhqIgIpAwA3AgAgACABKQMANwLEASABQ5qZGT9DmpkZP0OamRk/QwAAgD8QdBogAEHcAWogAikDADcCACAAQdQBaiABKQMANwIAIAFDAAAAAEMAAAAAQwAAAABDmplZPxB0GiAAQewBaiACKQMANwIAIABB5AFqIAEpAwA3AgAgAUMAAAAAQwAAAABDAAAAAEMAAAAAEHQaIABB/AFqIAIpAwA3AgAgAEH0AWogASkDADcCACABQ65H4T1DrkfhPUMpXA8+Qx+Faz8QdBogAEGMAmogAikDADcCACAAQYQCaiABKQMANwIAIAFDAAAAP0MAAAA/QwAAAD9DAAAAPxB0GiAAQZwCaiACKQMANwIAIABBlAJqIAEpAwA3AgAgAUMAAAAAQwAAAABDAAAAAEMAAAAAEHQaIABBrAJqIAIpAwA3AgAgAEGkAmogASkDADcCACABQ/Yo3D5D9ijcPkP2KNw+QxSuxz4QdBogAEG8AmogAikDADcCACAAQbQCaiABKQMANwIAIAFD16PwPkPXo/A+Q9ejMD9DzczMPhB0GiAAQcwCaiACKQMANwIAIABBxAJqIAEpAwA3AgAgAUM9Ctc+Q4Xr0T5DCtcjP0PXozA/EHQaIABB3AJqIAIpAwA3AgAgAEHUAmogASkDADcCACABQ3E9ij5DcT2KPkNxPQo/Q+F6VD8QdBogAEHsAmogAikDADcCACAAQeQCaiIDIAEpAwA3AgAgAUMK16M+QwrXoz5DrkchP0NSuF4/EHQaIABB/AJqIAIpAwA3AgAgAEH0AmoiBCABKQMANwIAIAFDzczMPkPNzMw+Q83MTD9DzcxMPhB0GiAAQYwDaiACKQMANwIAIABBhANqIAEpAwA3AgAgAUPNzMw+Q83MzD5DzcwMP0PNzEw/EHQaIABBnANqIAIpAwA3AgAgAEGUA2ogASkDADcCACABQ83MTD5DAACAPkOamZk+Q5qZGT8QdBogAEGsA2ogAikDADcCACAAQaQDaiABKQMANwIAIAFDzczMPkPNzMw+Q83MTD9DmpmZPhB0GiAAQbwDaiACKQMANwIAIABBtANqIAEpAwA3AgAgAUPNzMw+Q83MzD5DzcxMP0PNzMw+EHQaIABBzANqIAIpAwA3AgAgAEHEA2ogASkDADcCACABQ4Xr0T5DFK7HPkPNzEw/Q5qZGT8QdBogAEHcA2ogAikDADcCACAAQdQDaiABKQMANwIAIAFDZmZmP0NmZmY/Q2ZmZj9DAAAAPxB0GiAAQewDaiACKQMANwIAIABB5ANqIAEpAwA3AgAgAUMAAIA/QwAAgD9DAACAP0OamZk+EHQaIABB/ANqIAIpAwA3AgAgAEH0A2ogASkDADcCACABQ4Xr0T5DFK7HPkPNzEw/Q5qZGT8QdBogAEGMBGogAikDADcCACAAQYQEaiABKQMANwIAIAFDMzOzPkPNzMw+Q/YoHD9DUrgePxB0GiAAQZwEaiACKQMANwIAIABBlARqIAEpAwA3AgAgAUPNzMw+Q4/C9T5Dj8I1P0NxPUo/EHQaIABBrARqIAIpAwA3AgAgAEGkBGogASkDADcCACABQx+F6z5DcT0KP0PNzEw/QwAAgD8QdBogAEG8BGogAikDADcCACAAQbQEaiABKQMANwIAIAFDzczMPkPNzMw+Q2ZmZj9DZmbmPhB0GiAAQcwEaiACKQMANwIAIABBxARqIgUgASkDADcCACABQ2Zm5j5DZmbmPkNmZmY/Q83MTD8QdBogAEHcBGoiBiACKQMANwIAIABB1ARqIgcgASkDADcCACABQxSuBz9DFK4HP0NSuF4/Q83MTD8QdBogAEHsBGogAikDADcCACAAQeQEaiIIIAEpAwA3AgAgAUMAAAA/QwAAAD9DAAAAP0OamRk/EHQaIABB/ARqIAIpAwA3AgAgAEH0BGogASkDADcCACABQ5qZGT9DmpkZP0MzMzM/QwAAgD8QdBogAEGMBWogAikDADcCACAAQYQFaiABKQMANwIAIAFDMzMzP0MzMzM/Q2ZmZj9DAACAPxB0GiAAQZwFaiACKQMANwIAIABBlAVqIAEpAwA3AgAgAUMAAIA/QwAAgD9DAACAP0PNzMw9EHQaIABBrAVqIAIpAwA3AgAgAEGkBWogASkDADcCACABQxSuRz9DhetRP0MAAIA/Q5qZGT8QdBogAEG8BWogAikDADcCACAAQbQFaiABKQMANwIAIAFDFK5HP0OF61E/QwAAgD9DZmZmPxB0GiAAQcwFaiACKQMANwIAIABBxAVqIAEpAwA3AgAgASAFIARDzcxMPxDeBiAAQdwFaiACKQMANwIAIABB1AVqIgUgASkDADcCACAAQewFaiAGKQIANwIAIABB5AVqIAcpAgA3AgAgASAIIARDmpkZPxDeBiAAQfwFaiACKQMANwIAIABB9AVqIgQgASkDADcCACABIAUgA0PNzEw/EN4GIABBjAZqIAIpAwA3AgAgAEGEBmogASkDADcCACABIAQgA0PNzMw+EN4GIABBnAZqIAIpAwA3AgAgAEGUBmogASkDADcCACABQwAAgD9DAACAP0MAAIA/QwAAgD8QdBogAEGsBmogAikDADcCACAAQaQGaiABKQMANwIAIAFDZmZmP0MzMzM/QwAAAABDAACAPxB0GiAAQbwGaiACKQMANwIAIABBtAZqIAEpAwA3AgAgAUNmZmY/QzMzMz9DAAAAAEMAAIA/EHQaIABBzAZqIAIpAwA3AgAgAEHEBmogASkDADcCACABQwAAgD9DmpkZP0MAAAAAQwAAgD8QdBogAEHcBmogAikDADcCACAAQdQGaiABKQMANwIAIAFDcT2KPkNxPYo+Q1yPwj5DAACAPxB0GiAAQewGaiACKQMANwIAIABB5AZqIAEpAwA3AgAgAUNSuJ4+Q1K4nj5DZmbmPkMAAIA/EHQaIABB/AZqIAIpAwA3AgAgAEH0BmogASkDADcCACABQ7gehT5DuB6FPkMpXI8+QwAAgD8QdBogAEGMB2ogAikDADcCACAAQYQHaiABKQMANwIAIAFDAAAAAEMAAAAAQwAAAABDAAAAABB0GiAAQZwHaiACKQMANwIAIABBlAdqIAEpAwA3AgAgAUMAAIA/QwAAgD9DAACAP0MpXI89EHQaIABBrAdqIAIpAwA3AgAgAEGkB2ogASkDADcCACABQwAAAABDAAAAAEMAAIA/QzMzsz4QdBogAEG8B2ogAikDADcCACAAQbQHaiABKQMANwIAIAFDAACAP0MAAIA/QwAAAABDZmZmPxB0GiAAQcwHaiACKQMANwIAIABBxAdqIAEpAwA3AgAgAEHcB2ogBikCADcCACAAQdQHaiAHKQIANwIAIAFDAACAP0MAAIA/QwAAgD9DMzMzPxB0GiAAQewHaiACKQMANwIAIABB5AdqIAEpAwA3AgAgAUPNzEw/Q83MTD9DzcxMP0PNzEw+EHQaIABB/AdqIAIpAwA3AgAgAEH0B2ogASkDADcCACABQ83MTD5DzcxMPkPNzEw+QzMzsz4QdBogAEGMCGogAikDADcCACAAQYQIaiABKQMANwIAIAFBEGokAAvNFQEIfyMAQRBrIgEkAAJAIAANABCqASEACyABQwAAAABDAAAAAEMAAAAAQwAAgD8QdBogAEHMAWogAUEIaiICKQMANwIAIAAgASkDADcCxAEgAUOamRk/Q5qZGT9DmpkZP0MAAIA/EHQaIABB3AFqIAIpAwA3AgAgAEHUAWogASkDADcCACABQ9ejcD9D16NwP0PXo3A/QwAAgD8QdBogAEHsAWogAikDADcCACAAQeQBaiABKQMANwIAIAFDAAAAAEMAAAAAQwAAAABDAAAAABB0GiAAQfwBaiACKQMANwIAIABB9AFqIAEpAwA3AgAgAUMAAIA/QwAAgD9DAACAP0NI4Xo/EHQaIABBjAJqIAIpAwA3AgAgAEGEAmogASkDADcCACABQwAAAABDAAAAAEMAAAAAQ5qZmT4QdBogAEGcAmogAikDADcCACAAQZQCaiABKQMANwIAIAFDAAAAAEMAAAAAQwAAAABDAAAAABB0GiAAQawCaiACKQMANwIAIABBpAJqIAEpAwA3AgAgAUMAAIA/QwAAgD9DAACAP0MAAIA/EHQaIABBvAJqIAIpAwA3AgAgAEG0AmogASkDADcCACABQ7gehT5DPQoXP0NI4Xo/Q83MzD4QdBogAEHMAmogAikDADcCACAAQcQCaiABKQMANwIAIAFDuB6FPkM9Chc/Q0jhej9DH4UrPxB0GiAAQdwCaiACKQMANwIAIABB1AJqIAEpAwA3AgAgAUOPwnU/Q4/CdT9Dj8J1P0MAAIA/EHQaIABB7AJqIAIpAwA3AgAgAEHkAmoiAyABKQMANwIAIAFDhetRP0OF61E/Q4XrUT9DAACAPxB0GiAAQfwCaiACKQMANwIAIABB9AJqIgQgASkDADcCACABQwAAgD9DAACAP0MAAIA/Q1yPAj8QdBogAEGMA2ogAikDADcCACAAQYQDaiABKQMANwIAIAFD9ihcP0P2KFw/Q/YoXD9DAACAPxB0GiAAQZwDaiACKQMANwIAIABBlANqIAEpAwA3AgAgAUNI4Xo/Q0jhej9DSOF6P0MUrgc/EHQaIABBrANqIAIpAwA3AgAgAEGkA2ogASkDADcCACABQ9ejMD9D16MwP0PXozA/Q83MTD8QdBogAEG8A2ogAikDADcCACAAQbQDaiABKQMANwIAIAFDSOH6PkNI4fo+Q0jh+j5DzcxMPxB0GiAAQcwDaiACKQMANwIAIABBxANqIAEpAwA3AgAgAUNI4fo+Q0jh+j5DSOH6PkMAAIA/EHQaIABB3ANqIAIpAwA3AgAgAEHUA2ogASkDADcCACABQ7gehT5DPQoXP0NI4Xo/QwAAgD8QdBogAEHsA2ogAikDADcCACAAQeQDaiABKQMANwIAIAFDuB6FPkM9Chc/Q0jhej9DFK5HPxB0GiAAQfwDaiACKQMANwIAIABB9ANqIAEpAwA3AgAgAUMfhes+Q3E9Cj9DzcxMP0OamRk/EHQaIABBjARqIAIpAwA3AgAgAEGEBGogASkDADcCACABQ7gehT5DPQoXP0NI4Xo/Q83MzD4QdBogAEGcBGogAikDADcCACAAQZQEaiABKQMANwIAIAFDuB6FPkM9Chc/Q0jhej9DAACAPxB0GiAAQawEaiACKQMANwIAIABBpARqIAEpAwA3AgAgAUOPwnU9QxSuBz9DSOF6P0MAAIA/EHQaIABBvARqIAIpAwA3AgAgAEG0BGogASkDADcCACABQ7gehT5DPQoXP0NI4Xo/Q1K4nj4QdBogAEHMBGogAikDADcCACAAQcQEaiIFIAEpAwA3AgAgAUO4HoU+Qz0KFz9DSOF6P0PNzEw/EHQaIABB3ARqIgYgAikDADcCACAAQdQEaiIHIAEpAwA3AgAgAUO4HoU+Qz0KFz9DSOF6P0MAAIA/EHQaIABB7ARqIAIpAwA3AgAgAEHkBGoiCCABKQMANwIAIAFDFK7HPkMUrsc+QxSuxz5DUrgePxB0GiAAQfwEaiACKQMANwIAIABB9ARqIAEpAwA3AgAgAUMpXA8+Q65H4T5DzcxMP0MUrkc/EHQaIABBjAVqIAIpAwA3AgAgAEGEBWogASkDADcCACABQylcDz5DrkfhPkPNzEw/QwAAgD8QdBogAEGcBWogAikDADcCACAAQZQFaiABKQMANwIAIAFDMzOzPkMzM7M+QzMzsz5DexQuPhB0GiAAQawFaiACKQMANwIAIABBpAVqIAEpAwA3AgAgAUO4HoU+Qz0KFz9DSOF6P0MfhSs/EHQaIABBvAVqIAIpAwA3AgAgAEG0BWogASkDADcCACABQ7gehT5DPQoXP0NI4Xo/QzMzcz8QdBogAEHMBWogAikDADcCACAAQcQFaiABKQMANwIAIAEgBSAEQ2ZmZj8Q3gYgAEHcBWogAikDADcCACAAQdQFaiIFIAEpAwA3AgAgAEHsBWogBikCADcCACAAQeQFaiAHKQIANwIAIAEgCCAEQ5qZGT8Q3gYgAEH8BWogAikDADcCACAAQfQFaiIEIAEpAwA3AgAgASAFIANDzcxMPxDeBiAAQYwGaiACKQMANwIAIABBhAZqIAEpAwA3AgAgASAEIANDzczMPhDeBiAAQZwGaiACKQMANwIAIABBlAZqIAEpAwA3AgAgAUMUrsc+QxSuxz5DFK7HPkMAAIA/EHQaIABBrAZqIAIpAwA3AgAgAEGkBmogASkDADcCACABQwAAgD9D9ijcPkMzM7M+QwAAgD8QdBogAEG8BmogAikDADcCACAAQbQGaiABKQMANwIAIAFDZmZmP0MzMzM/QwAAAABDAACAPxB0GiAAQcwGaiACKQMANwIAIABBxAZqIAEpAwA3AgAgAUMAAIA/Q2Zm5j5DAAAAAEMAAIA/EHQaIABB3AZqIAIpAwA3AgAgAEHUBmogASkDADcCACABQxSuRz9DUrheP0NI4Xo/QwAAgD8QdBogAEHsBmogAikDADcCACAAQeQGaiABKQMANwIAIAFDhesRP0OF6xE/QwrXIz9DAACAPxB0GiAAQfwGaiACKQMANwIAIABB9AZqIAEpAwA3AgAgAUN7FC4/Q3sULj9DpHA9P0MAAIA/EHQaIABBjAdqIAIpAwA3AgAgAEGEB2ogASkDADcCACABQwAAAABDAAAAAEMAAAAAQwAAAAAQdBogAEGcB2ogAikDADcCACAAQZQHaiABKQMANwIAIAFDmpmZPkOamZk+Q5qZmT5D7FG4PRB0GiAAQawHaiACKQMANwIAIABBpAdqIAEpAwA3AgAgAUO4HoU+Qz0KFz9DSOF6P0MzM7M+EHQaIABBvAdqIAIpAwA3AgAgAEG0B2ogASkDADcCACABQ7gehT5DPQoXP0NI4Xo/QzMzcz8QdBogAEHMB2ogAikDADcCACAAQcQHaiABKQMANwIAIABB3AdqIAYpAgA3AgAgAEHUB2ogBykCADcCACABQzMzMz9DMzMzP0MzMzM/QzMzMz8QdBogAEHsB2ogAikDADcCACAAQeQHaiABKQMANwIAIAFDzcxMPkPNzEw+Q83MTD5DzcxMPhB0GiAAQfwHaiACKQMANwIAIABB9AdqIAEpAwA3AgAgAUPNzEw+Q83MTD5DzcxMPkMzM7M+EHQaIABBjAhqIAIpAwA3AgAgAEGECGogASkDADcCACABQRBqJAALnQECA38BfSMAQRBrIgEkACAAEC8aIABBGGoQMBogAEGMAWohAiAAQSxqIQMDQCADEC9BCGoiAyACRw0AC0EAIQMgAEEAQdABENEtIQIDQCABQQhqIAOyIgQgBJJD2w9JQJRDAABAQZUiBBDUKyAEENwrEDEaIAIgA0EDdGpBLGogASkDCDcCACADQQFqIgNBDEcNAAsgAUEQaiQAIAILfwICfwF9AkAgACoCFCABWw0AIAAgATgCFEEAIQIDQAJAAkBD2w/JQCACskMAAIA/kiIEIAGTIASVEM4rlSIEi0MAAABPXUUNACAEqCEDDAELQYCAgIB4IQMLIAAgAmpBjAFqIANBDBDjBhDkBjoAACACQQFqIgJBwABHDQALCwsWACABIABBgAQgAEGABEgbIAAgAUgbCw4AIABB/wEgAEH/AUgbC6wBAQJ/IwBBMGsiASQAIABBABDmBiAAQQxqQQAQSSAAQRhqQQAQ5wYgACgCLCgCKCECIABCADcCYCAAIAI2AiQgAEHoAGpCADcCACAAQfAAakIANwIAIABCADcCNCAAQQA2AiggAEE8akEAEOgGIABByABqQQAQ6QYgAEHUAGpBABDqBiAAQfgAahDrBiAAIAFBCGoQ7AYQ7QYgAEGAgID8AzYCjAEgAUEwaiQACyIAAkAgACgCBCABTg0AIAAgACABEO4GEO8GCyAAIAE2AgALIgACQCAAKAIEIAFODQAgACAAIAEQ8AYQkwILIAAgATYCAAsiAAJAIAAoAgQgAU4NACAAIAAgARDxBhDyBgsgACABNgIACyIAAkAgACgCBCABTg0AIAAgACABEPMGEPQGCyAAIAE2AgALIgACQCAAKAIEIAFODQAgACAAIAEQvAYQvQYLIAAgATYCAAsNACAAQoCAgIAQNwIACxAAIAAQMBogAEEAQSgQ0S0LTAEBfwJAIAAoAgAiAiAAKAIERw0AIAAgACACQQFqEO4GEO8GIAAoAgAhAgsgACgCCCACQShsaiABQSgQ0C0aIAAgACgCAEEBajYCAAsrAAJAAkAgACgCBCIADQBBCCEADAELIABBAm0gAGohAAsgACABIAAgAUobC0wBAn8CQCAAKAIEIAFODQAgAUEobBBVIQICQCAAKAIIIgNFDQAgAiADIAAoAgBBKGwQ0C0aIAAoAggQVwsgACABNgIEIAAgAjYCCAsLKwACQAJAIAAoAgQiAA0AQQghAAwBCyAAQQJtIABqIQALIAAgASAAIAFKGwsrAAJAAkAgACgCBCIADQBBCCEADAELIABBAm0gAGohAAsgACABIAAgAUobC0wBAn8CQCAAKAIEIAFODQAgAUEEdBBVIQICQCAAKAIIIgNFDQAgAiADIAAoAgBBBHQQ0C0aIAAoAggQVwsgACABNgIEIAAgAjYCCAsLKwACQAJAIAAoAgQiAA0AQQghAAwBCyAAQQJtIABqIQALIAAgASAAIAFKGwtMAQJ/AkAgACgCBCABTg0AIAFBAnQQVSECAkAgACgCCCIDRQ0AIAIgAyAAKAIAQQJ0ENAtGiAAKAIIEFcLIAAgATYCBCAAIAI2AggLC0gAIAAQ9gYgAEEMahCMBCAAQRhqEPcGIABCADcCNCAAQgA3AiQgAEE8ahD4BiAAQcgAahD5BiAAQdQAahD6BiAAQfgAahD7BgsjAQF/AkAgACgCCCIBRQ0AIABCADcCACABEFcgAEEANgIICwsjAQF/AkAgACgCCCIBRQ0AIABCADcCACABEFcgAEEANgIICwsjAQF/AkAgACgCCCIBRQ0AIABCADcCACABEFcgAEEANgIICwsjAQF/AkAgACgCCCIBRQ0AIABCADcCACABEFcgAEEANgIICwsjAQF/AkAgACgCCCIBRQ0AIABCADcCACABEFcgAEEANgIICwuEAQEDfyAAQQhqIQFBACECAkAgACgCCEEATA0AA0ACQCACIAAoAgBHDQAgASACEPwGIgNCADcCACADQRBqQgA3AgAgA0EIakIANwIACyABIAIQ/AYQ9gYgASACEPwGQQxqEIwEIAJBAWoiAiABKAIASA0ACwsgAEKAgICAEDcCACABEOMCCzYAAkACQCABQQBIDQAgACgCACABSg0BC0HKvQFBlZcBQdwMQf+AAhAAAAsgACgCCCABQRhsaguYAQECfyMAQTBrIgEkACABQQhqEOwGIQIgAUEQaiAAQegAaikCADcDACABIAApAmA3AwggAiAAQfAAaigCADYCECACIABB9ABqKAIANgIUIAIgACgCDDYCGAJAAkAgAioCACACKgIIX0UNACACKgIEIAIqAgxfDQELQdQbQdfwAEG+A0HV4QEQAAALIAAgAhDt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IAFBLUcNASACIAMqAgAgBCoCAJM4AgAPCwJAIAFBK0cNACACIAMrAwAgBCsDAKA5AwALIAFBLUcNACACIAMrAwAgBCsDAKE5AwALDwtB/MMCQenwAEHXDkH/9AAQAAALSgEBfwJAAkACQCABQX9KDQBBgAEhAkGAfyABayAATA0BDAILIAFFDQBB/wAhAkH/ACABayAASA0BCyABIABqIQILIAJBGHRBGHULTAEBfwJAAkACQCABQQFIDQBBgAEhAiABQYB/aiAATA0BDAILIAFBf0oNAEH/ACECIAFB/wBqIABIDQELIAAgAWshAgsgAkEYdEEYdQsgAQF/QX8gASAAaiICIAFB/wFzIABJGyACIAEbQf8BcQscAQF/QQAgACABayICIAAgAUkbIAIgARtB/wFxC04BAX8CQAJAAkAgAUF/Sg0AQYCAAiECQYCAfiABayAATA0BDAILIAFFDQBB//8BIQJB//8BIAFrIABIDQELIAEgAGohAgsgAkEQdEEQdQtQAQF/AkACQAJAIAFBAUgNAEGAgAIhAiABQYCAfmogAEwNAQwCCyABQX9KDQBB//8BIQIgAUH//wFqIABIDQELIAAgAWshAgsgAkEQdEEQdQsiAQF/QX8gASAAaiICIAFB//8DcyAASRsgAiABG0H//wNxCx0BAX9BACAAIAFrIgIgACABSRsgAiABG0H//wNxC00BAX8CQAJAIAFBf0oNAEGAgICAeCECQYCAgIB4IAFrIABKDQELQf////8HIAEgAGoiAkH/////ByABayAASBsgAiABQQBKGyECCyACC00BAX8CQAJAIAFBAUgNAEGAgICAeCECIAFBgICAgHhyIABKDQELQf////8HIAAgAWsiAiABQf////8HaiAASBsgAiABQQBIGyECCyACCxsBAX9BfyABIABqIgIgAUF/cyAASRsgAiABGwsYAQF/QQAgACABayICIAAgAUkbIAIgARsLYQEBfgJAAkAgAUJ/VQ0AQoCAgICAgICAgH8hAkKAgICAgICAgIB/IAF9IABVDQELQv///////////wAgASAAfCICQv///////////wAgAX0gAFMbIAIgAUIAVRshAgsgAgthAQF+AkACQCABQgFTDQBCgICAgICAgICAfyECIAFCgICAgICAgICAf4QgAFUNAQtC////////////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EKIMGiAAQZTQACABIAFBHGoQoAwiAhCjDCACEKIMGiAAQZzQACABIAFBIGoQoAwiAhCjDCACEKIMGiAAQarQACABIAFBJGoQoAwiAhClDCACEKIMGiAAQbPQACABIAFBKGoQoAwiAhClDCACEKIMGiAAQbkjIAEgAUEsahCgDCICEKUMIAIQogwaIAFBMGokAAsKACAAEAEQpgwaCzQBAX8jAEEQayICJAAgAkEIaiABEKgMEKkMIQEgABCqDCABEKsMEAM2AgAgAkEQaiQAIAALNQEBfyMAQRBrIgMkACAAKAIAIANBCGogARCnDCIBKAIAIAIoAgAQAiABEKIMGiADQRBqJAALCwAgACgCABAEIAALNQEBfyMAQRBrIgMkACAAKAIAIANBCGogARCnDCIBKAIAIAIoAgAQAiABEKIMGiADQRBqJAALNQEBfyMAQRBrIgMkACAAKAIAIANBCGogARCnDCIBKAIAIAIoAgAQAiABEKIMGiADQRBqJAALNQEBfyMAQRBrIgMkACAAKAIAIANBCGogARCnDCIBKAIAIAIoAgAQAiABEKIMGiADQRBqJAALCwAgACABNgIAIAALDQAgACABEAg2AgAgAAsEACAACzsBAX8jAEEQayICJAAgAiAAELYWNgIMIAJBDGogARCoDBCoDBC3FhC4FiACQQxqELkWIAJBEGokACAACwUAELoWCwcAIAAQuxYLCgBB7JIHEK0MGgsNAEGY9gBBFxCuDCAACy8BAX8jAEEQayICJAAgACACQQhqEK8MIAJBCGoQsAwQsQxBGCABEAUgAkEQaiQACwQAQQELBQAQvRYLBgBB2PcECzMBAX8jAEEQayIBJAAgAUEIaiAAEQQAIAFBCGoQvBYhACABQQhqEKIMGiABQRBqJAAgAAsKAEH0kgcQtAwaCzgBAn8QtQwQtgwhARC3DCECELgMELkMELoMELsMELEMQRkQvQwgARC9DCACQfYeEL4MQRoQBiAACwIACwQAQQALBABBAAsFABDRFgsFABDSFgsFABDTFgsEAEEACwcAIAAQzxYLBgBB0PkECwYAQdL5BAsSAAJAIABFDQAgABDQFhDhLAsLPwIBfQF8Q///f38hAQJAIAAQwQwiAkQAAADg///vR2YNAEP//3//IQEgAkQAAADg///vx2UNACACtiEBCyABC0oCAX8B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CGogASAAKAIAEQEAIAJBCGoQvBYhASACQQhqEKIMGiACQRBqJAAgAQsHACAAEP0aCycBAX8jAEEQayIBJAAgASAANgIMIAFBDGoQ/xohACABQRBqJAAgAAs6AQF/IwBBEGsiAyQAIAAoAgAhACADQQhqIAIQ6BYgASADQQhqIAARAQAgA0EIahCiDBogA0EQaiQACwUAEP4aCycBAX8jAEEQayIBJAAgASAANgIMIAFBDGoQgBshACABQRBqJAAgAAsQACABIAAoAgBqLQAAEPIWCxUBAX9BBBDgLCIBIAAoAgA2AgAgAQsWACACEJUXIQIgASAAKAIAaiACOgAACw0AIAEgACgCAGoQtxYLFQEBf0EEEOAsIgEgACgCADYCACABCxYAIAIQgRchAiABIAAoAgBqIAI2AgALDQAgASAAKAIAahDbFgsVAQF/QQQQ4CwiASAAKAIANgIAIAELFgAgAhDiFiECIAEgACgCAGogAjgCAAsJACAAIAEQgRsLCQAgACABEIIbCwkAIAAgARCDGwsNACABIAAoAgBqENgXCxUBAX9BBBDgLCIBIAAoAgA2AgAgAQsWACACENkXIQIgASAAKAIAaiACNgIACwkAIAAgARCMGwsJACAAIAEQjRsLCQAgACABEI4bC6wGAQN/IwBBMGsiAiQAIAAQ0gchACACQShqIAFB2v0BELcPAkACQCACQShqELgPRQ0AIABCADcCAAwBCyACQRBqIAJBKGpB4OgAELkPIAJBIGogAkEoakGWORC6DyACQSBqELsPIQMgAkEgahCiDBogAkEgaiACQShqQf+PARC6DyACQSBqELsPIQQgAkEgahCiDBogAEIANwIAIAIgBDYCBCACIAM2AgBBrdcEIAIQ1i0aIAJBEGoQogwaCyACQRBqIAFBydwAELwPIAAgAkEQahC9DzoACCACQRBqEKIMGiACQRBqIAFBkvgAELkPIAAgAkEQahC+DzYCDCACQRBqEKIMGiACQRBqIAFBrs8AELoPIAAgAkEQahDADDgCECACQRBqEKIMGiACQRBqIAFB7pMCEL8PIAAgAkEQahC+DzYCFCACQRBqEKIMGiACQRBqIAFBz4kCEL8PIAAgAkEQahC+DzYCGCACQRBqEKIMGiACQRBqIAFB45MCELoPIAAgAkEQahC9DzoAHCACQRBqEKIMGiACQSBqIAFBqqEBEMAPIAJBEGogAkEgahDJDCAAIAIpAxA3AiAgAkEgahCiDBogAkEgaiABQYo5EL8PIAJBEGogAkEgahDJDCAAIAIpAxA3AiggAkEgahCiDBogAkEgaiABQcDZABC/D0EAIQMCQCACQSBqELgPDQAgAkEgahDBDyEDCyAAIAM2AjAgAkEQaiABQfyEAhDCDyAAIAJBEGoQwAw4AjQgAkEQahCiDBogAkEQaiABQeuEAhDCDyAAIAJBEGoQwAw4AjggAkEQahCiDBogAkEQaiABQezaARDDDyAAIAJBEGoQvQ86ADwgAkEQahCiDBogAkEQaiABQc7TABDEDyAAIAJBEGoQxQ82AkAgAkEQahCiDBogAkEQaiABQf0JEMYPIAAgAkEQahDADDgCRCACQRBqEKIMGiACQQhqIAFB0NABEMcPIAJBEGogAkEIahDIDyAAQcoAaiACQRBqEMkPQScQwywaIAJBEGoQ+ywaIAJBCGoQogwaIAJBIGoQogwaIAJBKGoQogwaIAJBMGokAAs2AQF/IwBBEGsiAyQAIAAgASgCACADQQhqIAIQpwwiAigCABAJEKYMGiACEKIMGiADQRBqJAALCgAgACgCAEECRgs2AQF/IwBBEGsiAyQAIAAgASgCACADQQhqIAIQpwwiAigCABAJEKYMGiACEKIMGiADQRBqJAALNgEBfyMAQRBrIgMkACAAIAEoAgAgA0EIaiACEKcMIgIoAgAQCRCmDBogAhCiDBogA0EQaiQAC0oCAn8BfCMAQRBrIgEkACAAKAIAIAFBCGoQyg8oAgAgAUEEahAHIQMgASABKAIEEMMMIQAgAxDLDyECIAAQxQwaIAFBEGokACACCzYBAX8jAEEQayIDJAAgACABKAIAIANBCGogAhCnDCICKAIAEAkQpgwaIAIQogwaIANBEGokAAtKAgJ/AXwjAEEQayIBJAAgACgCACABQQhqEMwPKAIAIAFBBGoQByEDIAEgASgCBBDDDCEAIAMQzQ8hAiAAEMUMGiABQRBqJAAgAgtKAgJ/AXwjAEEQayIBJAAgACgCACABQQhqEM4PKAIAIAFBBGoQByEDIAEgASgCBBDDDCEAIAMQzw8hAiAAEMUMGiABQRBqJAAgAgs2AQF/IwBBEGsiAyQAIAAgASgCACADQQhqIAIQpwwiAigCABAJEKYMGiACEKIMGiADQRBqJAALNgEBfyMAQRBrIgMkACAAIAEoAgAgA0EIaiACEKcMIgIoAgAQCRCmDBogAhCiDBogA0EQaiQAC0oCAn8BfCMAQRBrIgEkACAAKAIAIAFBCGoQ0A8oAgAgAUEEahAHIQMgASABKAIEEMMMIQAgAxDRDyECIAAQxQwaIAFBEGokACACCzYBAX8jAEEQayIDJAAgACABKAIAIANBCGogAhCnDCICKAIAEAkQpgwaIAIQogwaIANBEGokAAs2AQF/IwBBEGsiAyQAIAAgASgCACADQQhqIAIQpwwiAigCABAJEKYMGiACEKIMGiADQRBqJAALNgEBfyMAQRBrIgMkACAAIAEoAgAgA0EIaiACEKcMIgIoAgAQCRCmDBogAhCiDBogA0EQaiQAC0oCAn8BfCMAQRBrIgEkACAAKAIAIAFBCGoQ0g8oAgAgAUEEahAHIQMgASABKAIEEMMMIQAgAxDTDyECIAAQxQwaIAFBEGokACACCzYBAX8jAEEQayIDJAAgACABKAIAIANBCGogAhCnDCICKAIAEAkQpgwaIAIQogwaIANBEGokAAs2AQF/IwBBEGsiAyQAIAAgASgCACADQQhqIAIQpwwiAigCABAJEKYMGiACEKIMGiADQRBqJAALSAIBfwF8IwBBEGsiAiQAIAEoAgAgAkEIahDUDygCACACQQRqEAchAyACIAIoAgQQwwwhASAAIAMQ1Q8gARDFDBogAkEQaiQACwcAIAAQ1g8LBQAQlxsLCgAgABCYGxCZGwsFABCaGwsKACAAEJsbEJUXCwUAEMgYCwoAIAAQyRgQgRcLBQAQnBsLCgAgABCdGxCeGwsFABCfGwsKACAAEKAbENkXCwUAEMsWCwwAIAAgARDMFhDNFgsKACAAELAWELEWCwoAQYGTBxDYDxoLvAIBA38jAEEQayIBJAAQ2Q8Q2g8hAhDbDyEDENwPEN0PEN4PELsMELEMQfoBEL0MIAIQvQwgA0He3AAQvgxB+wEQBkHFMkH8ARDiDyABQQA2AgwgAUH9ATYCCCABIAEpAwg3AwBB4zIgARDkD0GvqQJB/gEQ5g8Q3A9BjJUCEJINEIkNQf8BQYACEOkPEJINEIwNQYECQYICEOwPEAsgAUEINgIIENwPQb2QARCIDRCJDUGDAiABQQhqEO4PEIgNEIwNQYQCIAFBCGoQ7g8QCyABQQw2AggQ3A9B9jQQiA0QiQ1BgwIgAUEIahDuDxCIDRCMDUGEAiABQQhqEO4PEAsQ3A9B04oBEJINEIkNQf8BQYUCEOkPQQBBAEEAQQAQC0GLwgBBhgIQ8g9B5i9BhwIQ9A8gAUEQaiQAIAALAgALBABBAAsEAEEACwUAEKIbCwUAEKMbCwUAEKQbCwcAIAAQoRsLEgACQCAARQ0AIAAQiCoQ4SwLCwsAIAAgASACEKUbC0IBAX8jAEEQayICJAAgAiABNgIMENwPIAAgAkEIahCmGyACQQhqEKcbELYUQYgCIAJBDGoQqRtBABARIAJBEGokAAsEAEEBCz8BAX8jAEEQayICJAAgAiABKQIANwMIENwPIAAgAhCsGyACEK0bEIkNQYkCIAJBCGoQrxtBABARIAJBEGokAAsJACAAIAEQshsLQgEBfyMAQRBrIgIkACACIAE2AgwQ3A8gACACQQhqEMQbIAJBCGoQxRsQiQ1BigIgAkEMahDHG0EAEBEgAkEQaiQACzgBAX8jAEEQayICJAAgAkEIaiABIAAoAgARAQAgAkEIahC8FiEBIAJBCGoQogwaIAJBEGokACABCwkAIAAgARDJGwsnAQF/IwBBEGsiASQAIAEgADYCDCABQQxqEMsbIQAgAUEQaiQAIAALOgEBfyMAQRBrIgMkACAAKAIAIQAgA0EIaiACEOgWIAEgA0EIaiAAEQEAIANBCGoQogwaIANBEGokAAsJACAAIAEQyhsLJwEBfyMAQRBrIgEkACABIAA2AgwgAUEMahDMGyEAIAFBEGokACAACw0AIAEgACgCAGoQtxYLFQEBf0EEEOAsIgEgACgCADYCACABCxYAIAIQgRchAiABIAAoAgBqIAI2AgALCQAgACABEM0bCwkAIAAgARDOGwtCAQF/IwBBEGsiAiQAIAIgATYCDBDcDyAAIAJBCGoQzxsgAkEIahDQGxCMDUGLAiACQQxqENIbQQAQESACQRBqJAALBwAgABDVGwtCAQF/IwBBEGsiAiQAIAIgATYCDBDcDyAAIAJBCGoQ1hsgAkEIahDXGxCJDUGKAiACQQxqEMcbQQAQESACQRBqJAALCgBBgpMHEPYPGguCBAEDfyMAQRBrIgEkABD3DxD4DyECEPkPIQMQ+g8Q+w8Q/A8QuwwQsQxBjAIQvQwgAhC9DCADQYIwEL4MQY0CEAYgAUEENgIMEPoPQfTPARD/DxCJDUGOAiABQQxqEIEQEP8PEIwNQY8CIAFBDGoQgRAQCyABQSg2AgwQ+g9B17UBEN4MEN8MQZACIAFBDGoQhBAQ3gwQ4gxBkQIgAUEMahCEEBALIAFBzAE2AgwQ+g9BotgBEN4MEN8MQZACIAFBDGoQhBAQ3gwQ4gxBkQIgAUEMahCEEBALEPoPQam7AhCSDRCJDUGSAkGTAhCIEBCSDRCMDUGUAkGVAhCLEBALEPoPQby1AhCSDRCJDUGSAkGWAhCIEBCSDRCMDUGUAkGXAhCLEBALQdLRAEGYAhCPECABQcgBNgIMEPoPQdHrABCODRCJDUGZAiABQQxqEJEQEI4NEIwNQZoCIAFBDGoQkRAQCyABQcQBNgIMEPoPQaAvENQNEIkNQZsCIAFBDGoQlBAQ1A0QjA1BnAIgAUEMahCUEBALQf7+AUGdAhCXEEGEkwFBngIQmRBBoI4BQZ8CEJkQQfuZAkGgAhCcEEHlmQJBoQIQnhBB3usAQaICEKAQQf3CAUGjAhCiEEH2wgFBpAIQpBBBm+YBQaUCEKYQQZbmAUGmAhCoECABQRBqJAAgAAsCAAsEAEEACwQAQQALBQAQ2RsLBQAQ2hsLBQAQ2xsLBwAgABDYGwsSAAJAIABFDQAgABCLKhDhLAsLBQAQjBcLDQAgASAAKAIAahDaEwsVAQF/QQQQ4CwiASAAKAIANgIAIAELLwEBfyMAQRBrIgMkACADIAIQzRYgASAAKAIAaiADENwbGiADEPssGiADQRBqJAALDQAgASAAKAIAahDbFgsVAQF/QQQQ4CwiASAAKAIANgIAIAELFgAgAhDiFiECIAEgACgCAGogAjgCAAs4AQF/IwBBEGsiAiQAIAJBCGogASAAKAIAEQEAIAJBCGoQvBYhASACQQhqEKIMGiACQRBqJAAgAQsJACAAIAEQ4RsLJwEBfyMAQRBrIgEkACABIAA2AgwgAUEMahDnGyEAIAFBEGokACAACzoBAX8jAEEQayIDJAAgACgCACEAIANBCGogAhDoFiABIANBCGogABEBACADQQhqEKIMGiADQRBqJAALCQAgACABEOIbCycBAX8jAEEQayIBJAAgASAANgIMIAFBDGoQ6BshACABQRBqJAAgAAsJACAAIAEQ6RsLCQAgACABEOobCwkAIAAgARDrGwtCAQF/IwBBEGsiAiQAIAIgATYCDBD6DyAAIAJBCGoQ9RsgAkEIahD2GxCMDUGnAiACQQxqEPgbQQAQESACQRBqJAALDQAgASAAKAIAahCDFwsVAQF/QQQQ4CwiASAAKAIANgIAIAELFgAgAhCEFyECIAEgACgCAGogAjsBAAsNACABIAAoAgBqENsXCxUBAX9BBBDgLCIBIAAoAgA2AgAgAQsWACACENwXIQIgASAAKAIAaiACOwEACwkAIAAgARD6GwtCAQF/IwBBEGsiAiQAIAIgATYCDBD6DyAAIAJBCGoQgxwgAkEIahCEHBCJDUGoAiACQQxqEIYcQQAQESACQRBqJAALCwAgACABIAIQiBwLQgEBfyMAQRBrIgIkACACIAE2AgwQ+g8gACACQQhqEJEcIAJBCGoQkhwQthRBqQIgAkEMahCUHEEAEBEgAkEQaiQACwsAIAAgASACEJccCxUAIAAgASACIAMgBCAFIAYgBxCYHAtCAQF/IwBBEGsiAiQAIAIgATYCDBD6DyAAIAJBCGoQmhwgAkEIahCbHBCcHEGqAiACQQxqEJ4cQQAQESACQRBqJAALDQAgACABIAIgAxCgHAtCAQF/IwBBEGsiAiQAIAIgATYCDBD6DyAAIAJBCGoQoRwgAkEIahCiHBCjHEGrAiACQQxqEKUcQQAQESACQRBqJAALEQAgACABIAIgAyAEIAUQpxwLQgEBfyMAQRBrIgIkACACIAE2AgwQ+g8gACACQQhqEK0cIAJBCGoQrhwQrxxBrAIgAkEMahCxHEEAEBEgAkEQaiQACwkAIAAgARCzHAtCAQF/IwBBEGsiAiQAIAIgATYCDBD6DyAAIAJBCGoQtRwgAkEIahC2HBCJDUGtAiACQQxqEOcbQQAQESACQRBqJAALCQAgACABELkcC0IBAX8jAEEQayICJAAgAiABNgIMEPoPIAAgAkEIahC6HCACQQhqELscEIwNQa4CIAJBDGoQvRxBABARIAJBEGokAAsJACAAIAEQvxwLQgEBfyMAQRBrIgIkACACIAE2AgwQ+g8gACACQQhqEMYcIAJBCGoQxxwQjA1BrwIgAkEMahDoG0EAEBEgAkEQaiQACwcAIAAQyhwLQgEBfyMAQRBrIgIkACACIAE2AgwQ+g8gACACQQhqEM0cIAJBCGoQzhwQ6BNBsAIgAkEMahDQHEEAEBEgAkEQaiQACwoAQYOTBxCqEBoLsBUBA38jAEEgayIBJAAQqxAQrBAhAhCtECEDEK4QEK8QELAQELsMELEMQbECEL0MIAIQvQwgA0HdjQIQvgxBsgIQBiABQQA2AhgQrhBBiNQAEIgNEIkNQbMCIAFBGGoQtBAQiA0QjA1BtAIgAUEYahC0EBALIAFBBDYCGBCuEEGU1AAQiA0QiQ1BswIgAUEYahC0EBCIDRCMDUG0AiABQRhqELQQEAsQrhBB8LQBEJINEIkNQbUCQbYCELgQQQBBAEEAQQAQCyABQRA2AhgQrhBBxs4BEN4MEN8MQbcCIAFBGGoQuhAQ3gwQ4gxBuAIgAUEYahC6EBALIAFBFDYCGBCuEEG8wwEQ3gwQ3wxBtwIgAUEYahC6EBDeDBDiDEG4AiABQRhqELoQEAsQrhBBms8BEJINEIkNQbUCQbkCELgQEJINEIwNQboCQbsCEL8QEAsQrhBBps8BEJINEIkNQbUCQbwCELgQEJINEIwNQboCQb0CEL8QEAsgAUEgNgIYEK4QQbHOARDeDBDfDEG3AiABQRhqELoQEN4MEOIMQbgCIAFBGGoQuhAQCyABQSQ2AhgQrhBBpSkQ3gwQ3wxBtwIgAUEYahC6EBDeDBDiDEG4AiABQRhqELoQEAsgAUEoNgIYEK4QQZLiARDeDBDfDEG3AiABQRhqELoQEN4MEOIMQbgCIAFBGGoQuhAQC0Hx9ABBvgIQwxBB4/QAQb8CEMUQIAFBhAE2AhgQrhBB0gwQ3gwQ3wxBtwIgAUEYahC6EBDeDBDiDEG4AiABQRhqELoQEAsgAUGIATYCGBCuEEGuwwEQ3gwQ3wxBtwIgAUEYahC6EBDeDBDiDEG4AiABQRhqELoQEAsQrhBBtP4BEJINEIkNQbUCQcACELgQEJINEIwNQboCQcECEL8QEAsQrhBBksIAEJINEIkNQbUCQcICELgQQQBBAEEAQQAQCyABQZQBNgIYEK4QQZjYARDeDBDfDEG3AiABQRhqELoQEN4MEOIMQbgCIAFBGGoQuhAQCyABQZgBNgIYEK4QQZadARCZDRCJDUHDAiABQRhqEMoQEJkNEIwNQcQCIAFBGGoQyhAQCxCuEEHIMhCSDRCJDUG1AkHFAhC4EBCSDRCMDUG6AkHGAhC/EBALEK4QQYDYARCSDRCJDUG1AkHHAhC4EEEAQQBBAEEAEAsgAUGoATYCGBCuEEHx4wAQmQ0QiQ1BwwIgAUEYahDKEBCZDRCMDUHEAiABQRhqEMoQEAsgAUGpATYCGBCuEEGQxgAQmQ0QiQ1BwwIgAUEYahDKEBCZDRCMDUHEAiABQRhqEMoQEAsgAUGqATYCGBCuEEGVjQEQmQ0QiQ1BwwIgAUEYahDKEBCZDRCMDUHEAiABQRhqEMoQEAsgAUGrATYCGBCuEEHrHxCZDRCJDUHDAiABQRhqEMoQEJkNEIwNQcQCIAFBGGoQyhAQCyABQawBNgIYEK4QQc/ZABCZDRCJDUHDAiABQRhqEMoQEJkNEIwNQcQCIAFBGGoQyhAQCyABQa0BNgIYEK4QQb8KEJkNEIkNQcMCIAFBGGoQyhAQmQ0QjA1BxAIgAUEYahDKEBALIAFBsAE2AhgQrhBBhegAEN4MEN8MQbcCIAFBGGoQuhAQ3gwQ4gxBuAIgAUEYahC6EBALEK4QQbbQARCSDRCJDUG1AkHIAhC4EBCSDRCMDUG6AkHJAhC/EBALEK4QQY/QARCSDRCJDUG1AkHKAhC4EBCSDRCMDUG6AkHLAhC/EBALEK4QQfv9ARCSDRCJDUG1AkHMAhC4EBCSDRCMDUG6AkHNAhC/EBALEK4QQeP9ARCSDRCJDUG1AkHOAhC4EBCSDRCMDUG6AkHPAhC/EBALEK4QQZP+ARCSDRCJDUG1AkHQAhC4EBCSDRCMDUG6AkHRAhC/EBALEK4QQcKEARCSDRCJDUG1AkHSAhC4EBCSDRCMDUG6AkHTAhC/EBALEK4QQa+EARCSDRCJDUG1AkHUAhC4EBCSDRCMDUG6AkHVAhC/EBALEK4QQav+ARCSDRCJDUG1AkHWAhC4EBCSDRCMDUG6AkHXAhC/EBALEK4QQc/LABCSDRCJDUG1AkHYAhC4EEEAQQBBAEEAEAtBrPkAQdkCEOEQQZv5AEHaAhDjECABQewBNgIYEK4QQZCLARDeDBDfDEG3AiABQRhqELoQEN4MEOIMQbgCIAFBGGoQuhAQCyABQfQBNgIYEK4QQf+GARCZDRCJDUHDAiABQRhqEMoQEJkNEIwNQcQCIAFBGGoQyhAQCyABQfUBNgIYEK4QQYg3EJkNEIkNQcMCIAFBGGoQyhAQmQ0QjA1BxAIgAUEYahDKEBALIAFB9gE2AhgQrhBB6zIQmQ0QiQ1BwwIgAUEYahDKEBCZDRCMDUHEAiABQRhqEMoQEAsgAUH3ATYCGBCuEEHN5wAQmQ0QiQ1BwwIgAUEYahDKEBCZDRCMDUHEAiABQRhqEMoQEAtBx/gAQdsCEOEQQbf4AEHcAhDjEEGTwQBB3QIQ5xBBgsEAQd4CEOkQIAFBADYCHCABQd8CNgIYIAEgASkDGDcDEEG15wAgAUEQahDqEEHIqQJB4AIQ7BBByKkCQeECEO4QIAFBADYCHCABQeICNgIYIAEgASkDGDcDCEG2xgAgAUEIahDvECABQcwGNgIYEK4QQeLDARCZDRCJDUHDAiABQRhqEMoQEJkNEIwNQcQCIAFBGGoQyhAQCyABQc0GNgIYEK4QQazeARCZDRCJDUHDAiABQRhqEMoQEJkNEIwNQcQCIAFBGGoQyhAQCyABQc4GNgIYEK4QQb4hEJkNEIkNQcMCIAFBGGoQyhAQmQ0QjA1BxAIgAUEYahDKEBALIAFBzwY2AhgQrhBB98oAEJkNEIkNQcMCIAFBGGoQyhAQmQ0QjA1BxAIgAUEYahDKEBALIAFB0AY2AhgQrhBB79EAEJkNEIkNQcMCIAFBGGoQyhAQmQ0QjA1BxAIgAUEYahDKEBALIAFB0QY2AhgQrhBB4L4BEJkNEIkNQcMCIAFBGGoQyhAQmQ0QjA1BxAIgAUEYahDKEBALIAFB0gY2AhgQrhBBnNMBEJkNEIkNQcMCIAFBGGoQyhAQmQ0QjA1BxAIgAUEYahDKEBALIAFB1AY2AhgQrhBB18IBEN4MEN8MQbcCIAFBGGoQuhAQ3gwQ4gxBuAIgAUEYahC6EBALIAFB2AY2AhgQrhBBzdoAEIgNEIkNQbMCIAFBGGoQtBAQiA0QjA1BtAIgAUEYahC0EBALIAFB3AY2AhgQrhBB49oAEIgNEIkNQbMCIAFBGGoQtBAQiA0QjA1BtAIgAUEYahC0EBALIAFB4AY2AhgQrhBBgD8QiA0QiQ1BswIgAUEYahC0EBCIDRCMDUG0AiABQRhqELQQEAsgAUHkBjYCGBCuEEGVPxCIDRCJDUGzAiABQRhqELQQEIgNEIwNQbQCIAFBGGoQtBAQCyABQegGNgIYEK4QQa/NABCIDRCJDUGzAiABQRhqELQQEIgNEIwNQbQCIAFBGGoQtBAQCxCuEEGi/QEQkg0QiQ1BtQJB4wIQuBBBAEEAQQBBABALQenLAEHkAhDyEEH0/wBB5QIQ9BBBv/8AQeYCEPQQQdf/AEHnAhD0ECABQSBqJAAgAAsCAAsEAEEACwQAQQALBQAQ0xwLBQAQ1BwLBQAQ1RwLBwAgABDSHAsSAAJAIABFDQAgABDXBhDhLAsLDQAgASAAKAIAahC3FgsVAQF/QQQQ4CwiASAAKAIANgIAIAELFgAgAhCBFyECIAEgACgCAGogAjYCAAs4AQF/IwBBEGsiAiQAIAJBCGogASAAKAIAEQEAIAJBCGoQvBYhASACQQhqEKIMGiACQRBqJAAgAQsJACAAIAEQ1hwLJwEBfyMAQRBrIgEkACABIAA2AgwgAUEMahDXHCEAIAFBEGokACAACw0AIAEgACgCAGoQ2xYLFQEBf0EEEOAsIgEgACgCADYCACABCxYAIAIQ4hYhAiABIAAoAgBqIAI4AgALCQAgACABENgcCzoBAX8jAEEQayIDJAAgACgCACEAIANBCGogAhDoFiABIANBCGogABEBACADQQhqEKIMGiADQRBqJAALCQAgACABENkcCycBAX8jAEEQayIBJAAgASAANgIMIAFBDGoQ2xwhACABQRBqJAAgAAsJACAAIAEQ3BwLCQAgACABEN0cCwkAIAAgARDeHAtCAQF/IwBBEGsiAiQAIAIgATYCDBCuECAAIAJBCGoQ3xwgAkEIahDgHBC2FEHoAiACQQxqEOIcQQAQESACQRBqJAALCwAgACABIAIQ5RwLQgEBfyMAQRBrIgIkACACIAE2AgwQrhAgACACQQhqEOYcIAJBCGoQ5xwQ/xNB6QIgAkEMahDpHEEAEBEgAkEQaiQACwcAIAAQ6xwLBwAgARDsHAsJACAAIAEQ7hwLEAAgASAAKAIAai0AABDyFgsVAQF/QQQQ4CwiASAAKAIANgIAIAELFgAgAhCVFyECIAEgACgCAGogAjoAAAsJACAAIAEQ9xwLCQAgACABEPgcCwkAIAAgARD5HAsHACAAEPocCwcAIAEQ+xwLBwAgABD8HAsHACABEP0cCwcAIAAQ/hwLBwAgARD/HAsHACAAEIAdCwcAIAEQgR0LBwAgABCCHQsHACABEIMdCwcAIAAQhB0LBwAgARCFHQsHACAAEIYdCwcAIAEQhx0LBwAgABCIHQsHACABEIkdCwkAIAAgARCKHQsJACAAIAEQix0LQgEBfyMAQRBrIgIkACACIAE2AgwQrhAgACACQQhqEIwdIAJBCGoQjR0QthRB6gIgAkEMahCPHUEAEBEgAkEQaiQACwsAIAAgASACEJEdC0IBAX8jAEEQayICJAAgAiABNgIMEK4QIAAgAkEIahCSHSACQQhqEJMdEP8TQesCIAJBDGoQlR1BABARIAJBEGokAAsJACAAIAEQlx0LCwAgACABIAIQmB0LCQAgACABEJkdC0IBAX8jAEEQayICJAAgAiABNgIMEK4QIAAgAkEIahCaHSACQQhqEJsdEJwdQewCIAJBDGoQnh1BABARIAJBEGokAAsLACAAIAEgAhCgHQtCAQF/IwBBEGsiAiQAIAIgATYCDBCuECAAIAJBCGoQoR0gAkEIahCiHRCjHUHtAiACQQxqEKUdQQAQESACQRBqJAALPwEBfyMAQRBrIgIkACACIAEpAgA3AwgQrhAgACACEKcdIAIQqB0QjA1B7gIgAkEIahCqHUEAEBEgAkEQaiQACwkAIAAgARCtHQtCAQF/IwBBEGsiAiQAIAIgATYCDBCuECAAIAJBCGoQrh0gAkEIahCvHRCMDUHvAiACQQxqELEdQQAQESACQRBqJAALCQAgACABELMdC0IBAX8jAEEQayICJAAgAiABNgIMEK4QIAAgAkEIahC0HSACQQhqELUdEIwNQfACIAJBDGoQtx1BABARIAJBEGokAAs/AQF/IwBBEGsiAiQAIAIgASkCADcDCBCuECAAIAIQuR0gAhC6HRDoE0HxAiACQQhqELwdQQAQESACQRBqJAALCQAgACABEL4dCwsAIAAgASACEL8dC0IBAX8jAEEQayICJAAgAiABNgIMEK4QIAAgAkEIahDHHSACQQhqEMgdELYUQfICIAJBDGoQyh1BABARIAJBEGokAAsJACAAIAEQzR0LQgEBfyMAQRBrIgIkACACIAE2AgwQrhAgACACQQhqEM4dIAJBCGoQzx0QnB1B7AIgAkEMahCeHUEAEBEgAkEQaiQACwkAIAAgARDQHQsJACAAIAEQ0R0LCgBBhJMHEPgQGgvfDgEDfyMAQRBrIgEkABD5EBD6ECECEPsQIQMQ/BAQ/RAQ/hAQuwwQsQxB8wIQvQwgAhC9DCADQf3QARC+DEH0AhAGIAFBADYCCBD8EEG0gAIQ3gwQ3wxB9QIgAUEIahCCERDeDBDiDEH2AiABQQhqEIIREAsQ/BBBr58BEJINEIkNQfcCQfgCEIYRQQBBAEEAQQAQCyABQQw2AggQ/BBBy50BEN4MEN8MQfUCIAFBCGoQghEQ3gwQ4gxB9gIgAUEIahCCERALIAFBEDYCCBD8EEGhtgEQ3gwQ3wxB9QIgAUEIahCCERDeDBDiDEH2AiABQQhqEIIREAsQ/BBB/rYBEJINEIkNQfcCQfkCEIYRQQBBAEEAQQAQCxD8EEHmggEQkg0QiQ1B9wJB+gIQhhFBAEEAQQBBABALIAFBJDYCCBD8EEHz/AAQiA0QiQ1B+wIgAUEIahCKERCIDRCMDUH8AiABQQhqEIoREAsgAUEoNgIIEPwQQYieARDeDBDfDEH1AiABQQhqEIIREN4MEOIMQfYCIAFBCGoQghEQCyABQSw2AggQ/BBB0rYBEN4MEN8MQfUCIAFBCGoQghEQ3gwQ4gxB9gIgAUEIahCCERALIAFBMDYCCBD8EEHsnQEQ3gwQ3wxB9QIgAUEIahCCERDeDBDiDEH2AiABQQhqEIIREAsgAUE0NgIIEPwQQbK2ARDeDBDfDEH1AiABQQhqEIIREN4MEOIMQfYCIAFBCGoQghEQCxD8EEHUnwEQkg0QiQ1B9wJB/QIQhhFBAEEAQQBBABALIAFBwAA2AggQ/BBB+p0BEN4MEN8MQfUCIAFBCGoQghEQ3gwQ4gxB9gIgAUEIahCCERALIAFBxAA2AggQ/BBBwrYBEN4MEN8MQfUCIAFBCGoQghEQ3gwQ4gxB9gIgAUEIahCCERALEPwQQc2gARCSDRCJDUH3AkH+AhCGEUEAQQBBAEEAEAsQ/BBBqqABEJINEIkNQfcCQf8CEIYRQQBBAEEAQQAQCxD8EEG9nwEQkg0QiQ1B9wJBgAMQhhFBAEEAQQBBABALEPwQQeGfARCSDRCJDUH3AkGBAxCGEUEAQQBBAEEAEAsgAUHoADYCCBD8EEGcoAEQ3gwQ3wxB9QIgAUEIahCCERDeDBDiDEH2AiABQQhqEIIREAsgAUHsADYCCBD8EEG7oAEQ3gwQ3wxB9QIgAUEIahCCERDeDBDiDEH2AiABQQhqEIIREAsgAUHwADYCCBD8EEHwtgEQ3gwQ3wxB9QIgAUEIahCCERDeDBDiDEH2AiABQQhqEIIREAsgAUH0ADYCCBD8EEHanQEQ3gwQ3wxB9QIgAUEIahCCERDeDBDiDEH2AiABQQhqEIIREAsgAUH4ADYCCBD8EEGMtwEQ3gwQ3wxB9QIgAUEIahCCERDeDBDiDEH2AiABQQhqEIIREAsgAUH8ADYCCBD8EEGWngEQ3gwQ3wxB9QIgAUEIahCCERDeDBDiDEH2AiABQQhqEIIREAsgAUGAATYCCBD8EEHUyAEQ3gwQ3wxB9QIgAUEIahCCERDeDBDiDEH2AiABQQhqEIIREAsgAUGEATYCCBD8EEGjngEQ3gwQ3wxB9QIgAUEIahCCERDeDBDiDEH2AiABQQhqEIIREAsgAUGIATYCCBD8EEHitgEQ3gwQ3wxB9QIgAUEIahCCERDeDBDiDEH2AiABQQhqEIIREAsgAUGMATYCCBD8EEGo+wAQ3gwQ3wxB9QIgAUEIahCCERDeDBDiDEH2AiABQQhqEIIREAsgAUGQATYCCBD8EEGM/QAQiA0QiQ1B+wIgAUEIahCKERCIDRCMDUH8AiABQQhqEIoREAsQ/BBBwoIBEJINEIkNQfcCQYIDEIYRQQBBAEEAQQAQCxD8EEHSggEQkg0QiQ1B9wJBgwMQhhFBAEEAQQBBABALEPwQQaifARCSDRCJDUH3AkGEAxCGEUEAQQBBAEEAEAsQ/BBB858BEJINEIkNQfcCQYUDEIYRQQBBAEEAQQAQCyABQbQBNgIIEPwQQe/XARDeDBDfDEH1AiABQQhqEIIREN4MEOIMQfYCIAFBCGoQghEQCyABQbgBNgIIEPwQQezXABCZDRCJDUGGAyABQQhqEJYREJkNEIwNQYcDIAFBCGoQlhEQCyABQbkBNgIIEPwQQeMREJkNEIkNQYYDIAFBCGoQlhEQmQ0QjA1BhwMgAUEIahCWERALIAFBugE2AggQ/BBB74gBEJkNEIkNQYYDIAFBCGoQlhEQmQ0QjA1BhwMgAUEIahCWERALIAFBvAE2AggQ/BBBjIcBEN4MEN8MQfUCIAFBCGoQghEQ3gwQ4gxB9gIgAUEIahCCERALIAFBwAE2AggQ/BBBt+QAEN4MEN8MQfUCIAFBCGoQghEQ3gwQ4gxB9gIgAUEIahCCERALQerFAEGIAxCZEUHcxQBBiQMQmxFBigMQnREgAUEANgIMIAFBiwM2AgggASABKQMINwMAQcHUACABEJ4RIAFBEGokACAACwIACwQAQQALBABBAAsFABDTHQsFABDUHQsFABDVHQsHACAAENIdCw8AAkAgAEUNACAAEOEsCwsNACABIAAoAgBqENsWCxUBAX9BBBDgLCIBIAAoAgA2AgAgAQsWACACEOIWIQIgASAAKAIAaiACOAIACzgBAX8jAEEQayICJAAgAkEIaiABIAAoAgARAQAgAkEIahC8FiEBIAJBCGoQogwaIAJBEGokACABCwkAIAAgARDWHQsnAQF/IwBBEGsiASQAIAEgADYCDCABQQxqENcdIQAgAUEQaiQAIAALCQAgACABENgdCwkAIAAgARDZHQsNACABIAAoAgBqELcWCxUBAX9BBBDgLCIBIAAoAgA2AgAgAQsWACACEIEXIQIgASAAKAIAaiACNgIACwkAIAAgARDaHQsJACAAIAEQ2x0LCQAgACABENwdCwkAIAAgARDdHQsJACAAIAEQ3h0LCQAgACABEN8dCwkAIAAgARDgHQsJACAAIAEQ4R0LCQAgACABEOIdCxAAIAEgACgCAGotAAAQ8hYLFQEBf0EEEOAsIgEgACgCADYCACABCxYAIAIQlRchAiABIAAoAgBqIAI6AAALCwAgACABIAIQ4x0LQgEBfyMAQRBrIgIkACACIAE2AgwQ/BAgACACQQhqEOwdIAJBCGoQ7R0QthRBjAMgAkEMahDvHUEAEBEgAkEQaiQACwsAIAAgASACEPIdC0IBAX8jAEEQayICJAAgAiABNgIMEPwQIAAgAkEIahDzHSACQQhqEPQdEP8TQY0DIAJBDGoQ9h1BABARIAJBEGokAAsKAEGUCBDgLBAuCzEBAX8jAEEQayIBJAAQ/BAgAUEIahD4HSABQQhqEPkdELEMQY4DIAAQEiABQRBqJAALPwEBfyMAQRBrIgIkACACIAEpAgA3AwgQ/BAgACACEP0dIAIQ/h0Q4gxBjwMgAkEIahCAHkEAEBEgAkEQaiQACwoAQYWTBxCgERoLqxsBAn8jAEEQayIBJABB9Y0CIAFB2bsCEKERIgIQohEgAhD7LBpBg44CQZADEKQRIAFBkCo2AgBBzbcBIAEQpREgAUGUCDYCAEGytwEgARClESABQQg2AgBB5LcBIAEQpREgAUEQNgIAQdm3ASABEKURIAFBFDYCAEHFtQEgARClESABQQI2AgBB/LQBIAEQpREgAUEANgIAQas4IAEQpREgAUEINgIAQaE5IAEQpREgAUEQNgIAQfY4IAEQpRFBhx9BkQMQpxFBwx5BkgMQqRFB5B5BkwMQqxFB0h5BlAMQqRFB140CQZUDEK4RQfTQAUGWAxCuEUHnzgFBlwMQsBFB884BQZgDELARQcnqAEGZAxCwEUGt/QFBmgMQrhFB6hhBmwMQsxFBpRhBnAMQsxFBwRZBnQMQsxFB8eIAQZ4DELMRQbHjAEGfAxC4EUGg4wBBoAMQuBFBj9sBQaEDELARQbGAAUGiAxC7EUHwjAFBowMQvRFB5jZBpAMQvRFB8fkBQaUDEL0RQfOBAUGmAxDBEUHH4QFBpwMQsBFBgOMBQagDEMMRQYvjAUGpAxCwEUHAmwFBqgMQpBFBoucBQasDEKQRQbzmAUGsAxDEEUHF6AFBrQMQxBFByChBrgMQrhFB+ckAQa8DEMcRQaq1AUGwAxDHEUHGkAFBsQMQyRFBgDVBsgMQyRFB28kAQbMDEMsRQYq1AUG0AxDNEUGYwgBBtQMQzxFB4LUBQbYDELMRQfjmAUG3AxDREUHlP0G4AxCwEUGNgAJBuQMQ0hFB7MkAQboDEM0RQZy1AUG7AxDNEUGP5wFBvAMQ0RFB+D9BvQMQsBFB3NcBQb4DENIRQdjLAEG/AxDYEUGgtwFBwAMQ2BFBxecBQcEDENsRQZvAAEHCAxC4EUGmigFBwwMQxxFByRJBxAMQxxFBnIIBQcUDEMcRQa8SQcYDEMcRQeSQAUHHAxDJEUGnhAJByAMQyRFB+oECQckDEMkRQZyEAkHKAxDSEUHvgQJBywMQ0hFBjoMCQcwDEMkRQamBAkHNAxDJEUHchAJBzgMQ0hFBnYICQc8DENIRQbiDAkHQAxDhEUHdgQJB0QMQ4RFBiTBB0gMQsxFB+i9B0wMQsBFB0OUAQdQDEOQRQcLlAEHVAxDlEUHR7ABB1gMQ5BFBxewAQdcDEOURQcTAAEHYAxDnEUGuwABB2QMQsBFBmz5B2gMQ5xFBiz5B2wMQsBFB45EBQdwDENIRQdaRAUHdAxCwEUHFkQFB3gMQ0hFB8ZEBQd8DEMkRQcHKAEHgAxDSEUGyygBB4QMQsBFB8i9B4gMQrhFB1LUBQeMDEMkRQcyKAUHkAxDHEUGhmwJB5QMQ6xFBgZkCQeYDEO0RQbyXAkHnAxDvEUGvrAJB6AMQ8RFB5OMAQekDELARQcfNAUHqAxDhEUG/zQFB6wMQsBFBtKEBQewDELARQfcJQe0DELMRQeoxQe4DENIRQeExQe8DENIRQbzwAEHwAxCwEUHH8ABB8QMQsBFBpcoAQfIDEMcRQaqDAkHzAxDJEUHPgQJB9AMQyRFBmMoAQfUDELMRQZyDAkH2AxDSEUHBgQJB9wMQ0hFBhsoAQfgDEMcRQeTKAEH5AxDHEUHRygBB+gMQsxFByZ8BQfsDELARQZw1QfwDEMkRQfOgAUH9AxDJEUGuNUH+AxDJEUGQoQFB/wMQyRFBv5UCQYAEELMRQbmVAkGBBBCwEUGblQJBggQQ7RFBmeUBQYMEELgRQaohQYQEELgRQaXoAUGFBBD9EUH16wFBhgQQuBFBseoBQYcEELgRQbkgQYgEEIESQZYgQYkEELgRQZD8AEGKBBCEEkHu+gBBiwQQhhJBwvsAQYwEEMERQZf6AEGNBBCJEkG02QFBjgQQixJB0vsAQY8EEI0SQZQQQZAEEIQSQcDTAEGRBBCQEkHNmgJBkgQQkhJBrZgCQZMEEMERQc3tAEGUBBCVEkHdOUGVBBCwEUGr9wBBlgQQwRFBtvcAQZcEELARQcX3AEGYBBCYEkHgPUGZBBCaEkHCsAJBmgQQmhJB0q4CQZsEEJoSQZesAkGcBBCaEkHisAJBnQQQnxJBmjJBngQQoRJB7a8CQZ8EEKESQfOtAkGgBBChEkGlqwJBoQQQoRJB1LACQaIEEJ8SQa7rAEGjBBCnEkHUPUGkBBCpEkG1sAJBpQQQqRJBxa4CQaYEEKkSQfKrAkGnBBCpEkHV0gFBqAQQqRJBkDJBqQQQrxJB4q8CQaoEEK8SQeitAkGrBBCvEkGaqwJBrAQQrxJBoesAQa0EELQSQcE9Qa4EEJoSQY8yQa8EEKESQaDrAEGwBBC4EkGMIEGxBBC6EkHUygFBsgQQvBJBvDBBswQQvhJBtj1BtAQQqRJBqbACQbUEEMESQbmuAkG2BBDBEkHmqwJBtwQQwRJBhjJBuAQQxRJB2K8CQbkEEMERQd6tAkG6BBDBEUGQqwJBuwQQwRFBhNMBQbwEEMoSQZTrAEG9BBC0EkH8rQJBvgQQwRFBtKsCQb8EEMERQe+uAkHABBDBEUGirAJBwQQQ0BJBpfoAQcIEENASQdfMAEHDBBDlEUGWmwJBxAQQhhJB9pgCQcUEENQSQbGXAkHGBBDWEkGTmgJBxwQQiRJB85cCQcgEENkSQZyXAkHJBBDbEkHmmgJBygQQuBFBxpgCQcsEEOURQcryAEHMBBCwEUHZoAFBzQQQyRFBupoCQc4EEIkSQZqYAkHPBBDBEUG7gwFB0AQQ0RFBiZsCQdEEEOESQemYAkHSBBDQEkGJmgJB0wQQ5BJB6ZcCQdQEEJgSQaqaAkHVBBCEEkGKmAJB1gQQ6BJBmecAQdcEELARQeLXAEHYBBDqEkHrhgFB2QQQ6hJB8ZoCQdoEEO0SQdGYAkHbBBDvEkGplwJB3AQQ8RJB8pQCQd0EEPMSQd7sAEHeBBCkEUGZ7QBB3wQQsBFB6+wAQeAEEKQRQfzsAEHhBBCwEUHSHUHiBBCSEkHcHUHjBBCwEUHbmgJB5AQQ9hJBu5gCQeUEEPgSQbHzAEHmBBCwEUG+8wBB5wQQsBFBpvMAQegEELgRQenvAEHpBBCJEkHAjAFB6gQQwRFB/u8AQesEELARQfTvAEHsBBDvEkHOjQFB7QQQzRFBve8AQe4EELARQbCGAUHvBBD/EkGpFkHwBBD/EkGw4wFB8QQQ/xJBr4MBQfIEEIkSQaPXAUHzBBCEE0Gu1wFB9AQQsBFBkBpB9QQQhxNB/YABQfYEEKQRQbsRQfcEEMQRQY2BAUH4BBCLE0GcvgFB+QQQjRNBnRpB+gQQsBFB+OoAQfsEELgRQbXbAEH8BBCuEUGtLkH9BBCSE0HPEUH+BBCSE0GhEUH/BBCSE0Gj0AFBgAUQlhNB3tMAQYEFEJgTQaflAEGCBRCaE0GJzgBBgwUQnBNBgoEBQYQFELARQdQRQYUFEJITQZSRAUGGBRCdE0GFkQFBhwUQhxNBzzhBiAUQnRNBvzhBiQUQhxNB/StBigUQkhNB4u0AQYsFEIkSQe7tAEGMBRCwEUHThgFBjQUQwRFB4IYBQY4FELARQdX6AEGPBRCJEkHc5wFBkAUQuBFByoICQZEFEOURQabSAUGSBRDkEUGs3wFBkwUQ5RFB35IBQZQFELARQb3MAEGVBRCwEUHDIEGWBRC4EUHi3AFBlwUQxBFBiu4BQZgFEKUTQfbcAUGZBRCwEUHyOUGaBRCkEUH07QFBmwUQiRJBhjpBnAUQsBFBne4BQZ0FEK4MQd87QZ4FEKkTQdM7QZ8FELARQYfAAEGgBRCwEUGaxwFBoQUQ5RFBwekBQaIFEMQRQe2/AUGjBRCkEUHd5gFBpAUQpBFBjewBQaUFEMQRQdfTAUGmBRCkEUHL5QFBpwUQpBFBhuYBQagFEKQRQfTlAUGpBRCkEUGwM0GqBRCkEUHLgwFBqwUQpBFBsOkBQawFEKQRQd2/AUGtBRCkEUHM5gFBrgUQpBFBjYIBQa8FEMcRQaASQbAFEMcRQYW2AUGxBRDHEUHP9ABBsgUQsBFB+ZoCQbMFEK4TQdmYAkG0BRCwE0GpzgFBtQUQsRNB8C5BtgUQkhNB5ShBtwUQrhFB+yhBuAUQrhFBif8BQbkFEK4RQf3PAUG6BRCWE0GK2QFBuwUQsxFBmtkBQbwFEK4MQfSbAUG9BRC5E0H8zgFBvgUQuxNBjM8BQb8FELARQbi1AUHABRC9E0H/qwJBwQUQvxNB0rECQcIFEO0RQfGJAkHDBRDCE0GPmQJBxAUQwhNBlRFBxQUQmBNBrfgAQcYFEMQRQevmAUHHBRDEE0Ht5wFByAUQxBFBzipByQUQxRNB6vEAQcoFEOcRQY/5AEHLBRDEEUGb7AFBzAUQxBNB++cBQc0FEMQRQarsAUHOBRDEEUHGPEHPBRDHE0HG4wFB0AUQrhNBgPkAQdEFEKQRQczLAEHSBRDHEUGc7wBB0wUQxxFBu50BQdQFEMsTQZD9AUHVBRDNE0H8/AFB1gUQ5RFBkOQAQdcFEJITQYHkAEHYBRDlEUHW8QBB2QUQ5xFB3CBB2gUQuxFByyBB2wUQsxFB0QlB3AUQuBFBpglB3QUQuxFB9iJB3gUQ0xNB68wAQd8FENUTQcr5AUHgBRDXE0H52QFB4QUQsxEgAUEQaiQAIAALLwEBfyMAQRBrIgIkACAAIAJBCGogAhDcExogACABIAEQ3RMQ/CwgAkEQaiQAIAALEgAgABDZEyABENoTENsTuBAMCwUAEIMeCzABAX8jAEEQayICJAAgACACQQhqEN4TIAJBCGoQzA8QsQxB4gUgARAFIAJBEGokAAsRACAAEOATIAEQ4RMQ4hMQDAsHACAAEIUeCzABAX8jAEEQayICJAAgACACQQhqEOMTIAJBCGoQ5BMQiQ1B4wUgARAFIAJBEGokAAsHACAAEJ4eCzABAX8jAEEQayICJAAgACACQQhqEOYTIAJBCGoQ5xMQ6BNB5AUgARAFIAJBEGokAAsFABCiHgswAQF/IwBBEGsiAiQAIAAgAkEIahDqEyACQQhqEOsTELEMQeUFIAEQBSACQRBqJAALBwAgABCkHgsHACAAEKYeCy8BAX8jAEEQayICJAAgACACQQhqEO0TIAJBCGoQ7hMQsQxBGCABEAUgAkEQaiQACwcAIAAQrx4LMAEBfyMAQRBrIgIkACAAIAJBCGoQ7xMgAkEIahDwExC+DEHmBSABEAUgAkEQaiQACwcAIAAQuB4LBwAgABDBHgswAQF/IwBBEGsiAiQAIAAgAkEIahDyEyACQQhqEPMTEOgTQecFIAEQBSACQRBqJAALBwAgABDYHgsHACAAENkeCwcAIAAQ2h4LBwAgABDeHgswAQF/IwBBEGsiAiQAIAAgAkEIahD1EyACQQhqEPYTEOgTQegFIAEQBSACQRBqJAALBwAgABDgHgsHACAAEOEeCzABAX8jAEEQayICJAAgACACQQhqEPgTIAJBCGoQ1A8QsQxB6QUgARAFIAJBEGokAAsHACAAEOIeCzABAX8jAEEQayICJAAgACACQQhqEPoTIAJBCGoQ+xMQ6BNB6gUgARAFIAJBEGokAAsHACAAEOQeCwcAIAAQ5R4LCwAgACABIAIQ5h4LMAEBfyMAQRBrIgIkACAAIAJBCGoQ/RMgAkEIahD+ExD/E0HrBSABEAUgAkEQaiQACw0AIAAgASACIAMQ6B4LMAEBfyMAQRBrIgIkACAAIAJBCGoQgRQgAkEIahCCFBCDFEHsBSABEAUgAkEQaiQACzABAX8jAEEQayICJAAgACACQQhqEIUUIAJBCGoQhhQQiQ1B7QUgARAFIAJBEGokAAsHACAAEOweCwkAIAAgARD1HgswAQF/IwBBEGsiAiQAIAAgAkEIahCIFCACQQhqEIkUEIkNQe4FIAEQBSACQRBqJAALCQAgACABEPYeCzABAX8jAEEQayICJAAgACACQQhqEIsUIAJBCGoQjBQQjRRB7wUgARAFIAJBEGokAAsLACAAIAEgAhD3HgswAQF/IwBBEGsiAiQAIAAgAkEIahCPFCACQQhqEJAUEJEUQfAFIAEQBSACQRBqJAALCQAgACABEPkeCzABAX8jAEEQayICJAAgACACQQhqEJMUIAJBCGoQlBQQjA1B8QUgARAFIAJBEGokAAsLACAAIAEgAhD7HgswAQF/IwBBEGsiAiQAIAAgAkEIahCWFCACQQhqEJcUEJgUQfIFIAEQBSACQRBqJAALBwAgABCHHwswAQF/IwBBEGsiAiQAIAAgAkEIahCaFCACQQhqEJsUEIwNQfMFIAEQBSACQRBqJAALMAEBfyMAQRBrIgIkACAAIAJBCGoQnRQgAkEIahCeFBCfFEH0BSABEAUgAkEQaiQACwkAIAAgARCKHwsJACAAIAEQix8LCQAgACABEIwfCwUAEI0fCwsAIAAgASACEI4fCzABAX8jAEEQayICJAAgACACQQhqEKEUIAJBCGoQohQQkRRB9QUgARAFIAJBEGokAAsLACAAIAEgAhCQHwsLACAAIAEgAhCRHwswAQF/IwBBEGsiAiQAIAAgAkEIahCkFCACQQhqEKUUEJEUQfYFIAEQBSACQRBqJAALBwAgABCTHwsJACAAIAEQlB8LCQAgACABEJUfCwkAIAAgARCWHwsJACAAIAEQlx8LMAEBfyMAQRBrIgIkACAAIAJBCGoQpxQgAkEIahCoFBCpFEH3BSABEAUgAkEQaiQACwcAIAAQmR8LCQAgACABEJofCzABAX8jAEEQayICJAAgACACQQhqEKsUIAJBCGoQrBQQjA1B+AUgARAFIAJBEGokAAswAQF/IwBBEGsiAiQAIAAgAkEIahCuFCACQQhqEK8UEOgTQfkFIAEQBSACQRBqJAALCQAgACABEJ0fCzABAX8jAEEQayICJAAgACACQQhqELEUIAJBCGoQshQQ6BNB+gUgARAFIAJBEGokAAsHACAAEJ8fCwkAIAAgARCgHwsJACAAIAEQoR8LMAEBfyMAQRBrIgIkACAAIAJBCGoQtBQgAkEIahC1FBC2FEH7BSABEAUgAkEQaiQACwcAIAAQox8LMAEBfyMAQRBrIgIkACAAIAJBCGoQuBQgAkEIahC5FBCJDUH8BSABEAUgAkEQaiQACwcAIAAQpR8LMAEBfyMAQRBrIgIkACAAIAJBCGoQuxQgAkEIahC8FBCJDUH9BSABEAUgAkEQaiQACwkAIAAgARCnHwswAQF/IwBBEGsiAiQAIAAgAkEIahC+FCACQQhqEL8UEIkNQf4FIAEQBSACQRBqJAALBwAgABCpHwsJACAAIAEQqh8LBwAgABCrHwsJACAAIAEQrB8LCQAgACABEK0fCwcAIAAQrh8LBwAgABCvHwsHACAAELAfCwcAIAAQsR8LBwAgABCyHwsJACAAIAEQsx8LMAEBfyMAQRBrIgIkACAAIAJBCGoQwRQgAkEIahDCFBCMDUH/BSABEAUgAkEQaiQACwcAIAAQtR8LBwAgABC2HwsJACAAIAEQtx8LMAEBfyMAQRBrIgIkACAAIAJBCGoQxBQgAkEIahDFFBCMDUGABiABEAUgAkEQaiQACwcAIAAQuR8LCQAgACABELofCzABAX8jAEEQayICJAAgACACQQhqEMcUIAJBCGoQyBQQthRBgQYgARAFIAJBEGokAAsHACAAELwfCzABAX8jAEEQayICJAAgACACQQhqEMoUIAJBCGoQyxQQiQ1BggYgARAFIAJBEGokAAsLACAAIAEgAhC+HwsJACAAIAEQvx8LMAEBfyMAQRBrIgIkACAAIAJBCGoQzRQgAkEIahDOFBC2FEGDBiABEAUgAkEQaiQACxEAIAAgASACIAMgBCAFEMEfCzABAX8jAEEQayICJAAgACACQQhqENAUIAJBCGoQ0RQQ0hRBhAYgARAFIAJBEGokAAsTACAAIAEgAiADIAQgBSAGEMMfCzABAX8jAEEQayICJAAgACACQQhqENQUIAJBCGoQ1RQQ1hRBhQYgARAFIAJBEGokAAsJACAAIAEQxR8LCwAgACABIAIQzB8LMAEBfyMAQRBrIgIkACAAIAJBCGoQ2BQgAkEIahDZFBD/E0GGBiABEAUgAkEQaiQACwkAIAAgARDWHwswAQF/IwBBEGsiAiQAIAAgAkEIahDbFCACQQhqENwUELYUQYcGIAEQBSACQRBqJAALCwAgACABIAIQ2B8LCwAgACABIAIQ4R8LMAEBfyMAQRBrIgIkACAAIAJBCGoQ3hQgAkEIahDfFBDgFEGIBiABEAUgAkEQaiQACwsAIAAgASACEOsfCxEAIAAgASACIAMgBCAFEOwfCzABAX8jAEEQayICJAAgACACQQhqEOIUIAJBCGoQ4xQQ5BRBiQYgARAFIAJBEGokAAsTACAAIAEgAiADIAQgBSAGEIAgCzABAX8jAEEQayICJAAgACACQQhqEOYUIAJBCGoQ5xQQ1hRBigYgARAFIAJBEGokAAsTACAAIAEgAiADIAQgBSAGEIggCxMAIAAgASACIAMgBCAFIAYQjyALEwAgACABIAIgAyAEIAUgBhCWIAsXACAAIAEgAiADIAQgBSAGIAcgCBCdIAswAQF/IwBBEGsiAiQAIAAgAkEIahDpFCACQQhqEOoUEOsUQYsGIAEQBSACQRBqJAALEwAgACABIAIgAyAEIAUgBhCfIAswAQF/IwBBEGsiAiQAIAAgAkEIahDtFCACQQhqEO4UENYUQYwGIAEQBSACQRBqJAALEwAgACABIAIgAyAEIAUgBhChIAsTACAAIAEgAiADIAQgBSAGEKggCxMAIAAgASACIAMgBCAFIAYQryALFwAgACABIAIgAyAEIAUgBiAHIAgQtiALFQAgACABIAIgAyAEIAUgBiAHELcgCzABAX8jAEEQayICJAAgACACQQhqEPAUIAJBCGoQ8RQQ8hRBjQYgARAFIAJBEGokAAsRACAAIAEgAiADIAQgBRDyJgswAQF/IwBBEGsiAiQAIAAgAkEIahD0FCACQQhqEPUUEOQUQY4GIAEQBSACQRBqJAALEQAgACABIAIgAyAEIAUQ9CYLEQAgACABIAIgAyAEIAUQ9SYLEQAgACABIAIgAyAEIAUQ9iYLEQAgACABIAIgAyAEIAUQ9yYLEQAgACABIAIgAyAEIAUQ+CYLMAEBfyMAQRBrIgIkACAAIAJBCGoQ9xQgAkEIahD4FBDkFEGPBiABEAUgAkEQaiQACxEAIAAgASACIAMgBCAFEPomCxEAIAAgASACIAMgBCAFEPsmCxEAIAAgASACIAMgBCAFEPwmCxMAIAAgASACIAMgBCAFIAYQ/SYLMAEBfyMAQRBrIgIkACAAIAJBCGoQ+hQgAkEIahD7FBDWFEGQBiABEAUgAkEQaiQACxMAIAAgASACIAMgBCAFIAYQhycLEwAgACABIAIgAyAEIAUgBhCIJwsVACAAIAEgAiADIAQgBSAGIAcQiScLMAEBfyMAQRBrIgIkACAAIAJBCGoQ/RQgAkEIahD+FBDyFEGRBiABEAUgAkEQaiQACw8AIAAgASACIAMgBBCTJwswAQF/IwBBEGsiAiQAIAAgAkEIahCAFSACQQhqEIEVEOQUQZIGIAEQBSACQRBqJAALEQAgACABIAIgAyAEIAUQpCcLMAEBfyMAQRBrIgIkACAAIAJBCGoQgxUgAkEIahCEFRDWFEGTBiABEAUgAkEQaiQACxEAIAAgASACIAMgBCAFEKgnCzABAX8jAEEQayICJAAgACACQQhqEIYVIAJBCGoQhxUQ1hRBlAYgARAFIAJBEGokAAsRACAAIAEgAiADIAQgBRCsJwsNACAAIAEgAiADEK0nCzABAX8jAEEQayICJAAgACACQQhqEIkVIAJBCGoQihUQgxRBlQYgARAFIAJBEGokAAsNACAAIAEgAiADEK8nCw0AIAAgASACIAMQsCcLDwAgACABIAIgAyAEELEnCzABAX8jAEEQayICJAAgACACQQhqEIwVIAJBCGoQjRUQjhVBlgYgARAFIAJBEGokAAsLACAAIAEgAhCzJwsLACAAIAEgAhC0JwsLACAAIAEgAhC1JwsRACAAIAEgAiADIAQgBRC2JwswAQF/IwBBEGsiAiQAIAAgAkEIahCQFSACQQhqEJEVEJIVQZcGIAEQBSACQRBqJAALEwAgACABIAIgAyAEIAUgBhDHJwsLACAAIAEgAhDQJwsLACAAIAEgAhDRJwsLACAAIAEgAhDSJwsNACAAIAEgAiADENMnCzABAX8jAEEQayICJAAgACACQQhqEJQVIAJBCGoQlRUQgxRBmAYgARAFIAJBEGokAAsNACAAIAEgAiADENsnCwcAIAAQ3CcLCQAgACABEN0nCzABAX8jAEEQayICJAAgACACQQhqEJcVIAJBCGoQmBUQthRBmQYgARAFIAJBEGokAAsJACAAIAEQ3ycLMAEBfyMAQRBrIgIkACAAIAJBCGoQmhUgAkEIahCbFRC2FEGaBiABEAUgAkEQaiQACwkAIAAgARDhJwsLACAAIAEgAhDiJwswAQF/IwBBEGsiAiQAIAAgAkEIahCdFSACQQhqEJ4VEP8TQZsGIAEQBSACQRBqJAALCwAgACABIAIQ5CcLMAEBfyMAQRBrIgIkACAAIAJBCGoQoBUgAkEIahChFRD/E0GcBiABEAUgAkEQaiQACwcAIAAQ5icLBwAgABDnJwsJACAAIAEQ6CcLCwAgACABIAIQ6ScLDQAgACABIAIgAxDqJwswAQF/IwBBEGsiAiQAIAAgAkEIahCjFSACQQhqEKQVEIMUQZ0GIAEQBSACQRBqJAALDQAgACABIAIgAxDsJwsPACAAIAEgAiADIAQQ7ScLMAEBfyMAQRBrIgIkACAAIAJBCGoQphUgAkEIahCnFRCOFUGeBiABEAUgAkEQaiQACxEAIAAgASACIAMgBCAFEPEnCwkAIAAgARD0JwsLACAAIAEgAhD1JwswAQF/IwBBEGsiAiQAIAAgAkEIahCpFSACQQhqEKoVEP8TQZ8GIAEQBSACQRBqJAALFwAgACABIAIgAyAEIAUgBiAHIAgQ9ycLMAEBfyMAQRBrIgIkACAAIAJBCGoQrBUgAkEIahCtFRCuFUGgBiABEAUgAkEQaiQACxcAIAAgASACIAMgBCAFIAYgByAIEIIoCwkAIAAgARCFKAswAQF/IwBBEGsiAiQAIAAgAkEIahCwFSACQQhqELEVEIwNQaEGIAEQBSACQRBqJAALCQAgACABEIcoCzABAX8jAEEQayICJAAgACACQQhqELMVIAJBCGoQtBUQjA1BogYgARAFIAJBEGokAAsJACAAIAEQiSgLMAEBfyMAQRBrIgIkACAAIAJBCGoQthUgAkEIahC3FRCMDUGjBiABEAUgAkEQaiQACwsAIAAgASACEIsoCzABAX8jAEEQayICJAAgACACQQhqELkVIAJBCGoQuhUQuxVBpAYgARAFIAJBEGokAAsJACAAIAEQjSgLDQAgACABIAIgAxCOKAswAQF/IwBBEGsiAiQAIAAgAkEIahC9FSACQQhqEL4VEIMUQaUGIAEQBSACQRBqJAALDQAgACABIAIgAxCQKAswAQF/IwBBEGsiAiQAIAAgAkEIahDAFSACQQhqEMEVEIMUQaYGIAEQBSACQRBqJAALBwAgABCSKAsJACAAIAEQkygLCwAgACABIAIQlCgLCQAgACABEJUoCwkAIAAgARCWKAsJACAAIAEQlygLMAEBfyMAQRBrIgIkACAAIAJBCGoQwxUgAkEIahDEFRC2FEGnBiABEAUgAkEQaiQACwkAIAAgARCZKAsJACAAIAEQmigLCQAgACABEJsoCw8AIAAgASACIAMgBBCcKAswAQF/IwBBEGsiAiQAIAAgAkEIahDGFSACQQhqEMcVEMgVQagGIAEQBSACQRBqJAALBQAQnigLCQAgACABEJ8oCzABAX8jAEEQayICJAAgACACQQhqEMoVIAJBCGoQyxUQ4gxBqQYgARAFIAJBEGokAAsFABChKAsHACAAEKIoCw0AIAAgASACIAMQoygLMAEBfyMAQRBrIgIkACAAIAJBCGoQzRUgAkEIahDOFRDPFUGqBiABEAUgAkEQaiQACwkAIAAgARClKAswAQF/IwBBEGsiAiQAIAAgAkEIahDRFSACQQhqENIVEIwNQasGIAEQBSACQRBqJAALBQAQpygLBwAgABCoKAsHACAAEKkoCwUAELIoCzABAX8jAEEQayICJAAgACACQQhqENQVIAJBCGoQzg8QsQxBrAYgARAFIAJBEGokAAsFABCzKAsFABC0KAsJACAAIAEQtSgLMAEBfyMAQRBrIgIkACAAIAJBCGoQ1hUgAkEIahDXFRCJDUGtBiABEAUgAkEQaiQACwcAIAAQtygLMAEBfyMAQRBrIgIkACAAIAJBCGoQ2RUgAkEIahDaFRCJDUGuBiABEAUgAkEQaiQACwsAIAAgASACELkoCzABAX8jAEEQayICJAAgACACQQhqENwVIAJBCGoQ3RUQkRRBrwYgARAFIAJBEGokAAsLACAAIAEgAhC7KAswAQF/IwBBEGsiAiQAIAAgAkEIahDfFSACQQhqEOAVEJEUQbAGIAEQBSACQRBqJAALMAEBfyMAQRBrIgIkACAAIAJBCGoQ4hUgAkEIahDjFRDfDEGxBiABEAUgAkEQaiQACwkAIAAgARC+KAsLACAAIAEgAhC/KAsJACAAIAEQwCgLBwAgABDBKAsJACAAIAEQwigLBwAgABDDKAsJACAAIAMQxCgLMAEBfyMAQRBrIgIkACAAIAJBCGoQ5RUgAkEIahDmFRCDFEGyBiABEAUgAkEQaiQACwkAIAAgARDGKAsHACAAEMcoCwsAIAAgASACEMgoCzABAX8jAEEQayICJAAgACACQQhqEOgVIAJBCGoQ6RUQkRRBswYgARAFIAJBEGokAAsJACAAIAEQyigLCQAgACABEMsoCwkAIAAgARDMKAsHACAAEM0oCzABAX8jAEEQayICJAAgACACQQhqEOsVIAJBCGoQ7BUQiQ1BtAYgARAFIAJBEGokAAsJACAAIAEQzygLMAEBfyMAQRBrIgIkACAAIAJBCGoQ7hUgAkEIahDvFRC2FEG1BiABEAUgAkEQaiQACzABAX8jAEEQayICJAAgACACQQhqEPEVIAJBCGoQwgwQ8hVBtgYgARAFIAJBEGokAAsHACAAENAoCwcAIAAQ0SgLBwAgABDSKAsJACAAIAEQ2ygLBQAQ3CgLBwAgABDdKAsNACAAIAEgAiADEN4oCzABAX8jAEEQayICJAAgACACQQhqEPQVIAJBCGoQ9RUQ9hVBtwYgARAFIAJBEGokAAsLACAAIAEgAhDgKAswAQF/IwBBEGsiAiQAIAAgAkEIahD4FSACQQhqEPkVEP8TQbgGIAEQBSACQRBqJAALDwAgACABIAIgAyAEEOIoCzABAX8jAEEQayICJAAgACACQQhqEPsVIAJBCGoQ/BUQ/RVBuQYgARAFIAJBEGokAAsLACAAIAEgAhDkKAswAQF/IwBBEGsiAiQAIAAgAkEIahD/FSACQQhqEIAWELYUQboGIAEQBSACQRBqJAALBwAgABDmKAsRACAAIAEgAiADIAQgBRDnKAswAQF/IwBBEGsiAiQAIAAgAkEIahCCFiACQQhqEIMWEIQWQbsGIAEQBSACQRBqJAALEQAgACABIAIgAyAEIAUQ6igLMAEBfyMAQRBrIgIkACAAIAJBCGoQhhYgAkEIahCHFhC2FEG8BiABEAUgAkEQaiQACzABAX8jAEEQayICJAAgACACQQhqEIkWIAJBCGoQihYQixZBvQYgARAFIAJBEGokAAsLACAAIAEgAhDtKAswAQF/IwBBEGsiAiQAIAAgAkEIahCNFiACQQhqEI4WEP8TQb4GIAEQBSACQRBqJAALBwAgABDvKAsJACAAIAEQ8ygLCQAgACABEPQoCzABAX8jAEEQayICJAAgACACQQhqEJAWIAJBCGoQkRYQkhZBvwYgARAFIAJBEGokAAsNACAAIAEgAiADEPYoCzABAX8jAEEQayICJAAgACACQQhqEJQWIAJBCGoQlRYQlhZBwAYgARAFIAJBEGokAAsHACAAEPgoCwcAIAAQ+SgLBwAgABD6KAsHACAAEPsoCxMAIAAgASACIAMgBCAFIAYQ/CgLMAEBfyMAQRBrIgIkACAAIAJBCGoQmBYgAkEIahCZFhDWFEHBBiABEAUgAkEQaiQACwsAIAAgASACEP4oCzABAX8jAEEQayICJAAgACACQQhqEJsWIAJBCGoQnBYQkRRBwgYgARAFIAJBEGokAAsJACAAIAEQnykLMAEBfyMAQRBrIgIkACAAIAJBCGoQnhYgAkEIahCfFhCJDUHDBiABEAUgAkEQaiQACwcAIAAQoSkLBQAQgh4LLgEBfyAAEI0XQQRqEMQtIgEgABCNFzYCACABQQRqIAAQ1g8gABCNFxDQLRogAQsEACAACxwAIAEQvhYaIAAQvxYaIAIQvhYaIAAQwBYaIAALBwAgABDZLQsEAEEBCwoAIAARAgAQ8hYLBQAQhB4LBwAgACgCAAsFACAAuAsEAEECCwUAEJ0eCw8AIAEQ0xsgABEAABCcHgsEAEECCwUAEKEeCwYAQbD/BAsMACABEKAeIAARBAALBABBAQsFABCjHgsKACAAEQIAEJweCwQAQQELBQAQvRYLBABBAQsFABC3HgsHACAAEQcACwQAQQILBQAQ1x4LMQEBfyMAQRBrIgIkACACQQhqIAEQ6BYgAkEIaiAAEQQAIAJBCGoQogwaIAJBEGokAAsEAEECCwUAEN8eCygBAX8jAEEQayICJAAgAiABEM0WIAIgABEEACACEPssGiACQRBqJAALBABBAQsqAQF/IwBBEGsiASQAIAEgABEEACABENoTIQAgARD7LBogAUEQaiQAIAALBABBAgsFABDjHgsMACABEPAdIAARBAALBABBBAsFABDnHgsGAEHA+gQLVQEBfyMAQSBrIgQkACAEQRBqIAEQzRYgBEEIaiACEOgWIARBEGogBEEIaiADEIEXIAARBgAQ8hYhAyAEQQhqEKIMGiAEQRBqEPssGiAEQSBqJAAgAwsEAEEFCwUAEOoeCwYAQbSYBQtRAQF/IwBBEGsiBSQAIAVBCGogARDoFiAFIAIQ6BYgBUEIaiAFIAMQlRcgBBCBFyAAEQgAEPIWIQMgBRCiDBogBUEIahCiDBogBUEQaiQAIAMLBABBAgsFABDrHgsPACABEIEXIAARAAAQ8hYLBABBAgsFABCdGAtCAQF/IwBBEGsiAiQAIAIgARDoFiACQQhqIAIgABEBACACQQhqELwWIQAgAkEIahCiDBogAhCiDBogAkEQaiQAIAALBABBAQsFABDlGwsGAEHEmAULLAIBfwF9IwBBEGsiASQAIAEgABESADgCDCABQQxqENsWIQIgAUEQaiQAIAILBABBBAsFABD4HgsGAEGA/QQLSQEBfyMAQRBrIgQkACAEQQhqIAEQ6BYgAhCBFyECIAQgAxDoFiAEQQhqIAIgBCAAEQUAIAQQogwaIARBCGoQogwaIARBEGokAAsEAEEDCwUAEPoeCzYBAX8jAEEQayIDJAAgA0EIaiABEOgWIANBCGogAhCBFyAAEQEAIANBCGoQogwaIANBEGokAAsEAEEFCwUAEIYfCwYAQbSDBQtwAQF/IwBBIGsiBSQAIAVBGGogARDoFiAFQRBqIAIQ6BYgBUEIaiADEOgWIAUgBBDoFiAFQRhqIAVBEGogBUEIaiAFIAARCQAgBRCiDBogBUEIahCiDBogBUEQahCiDBogBUEYahCiDBogBUEgaiQACwQAQQMLBQAQiB8LEQAgARCVFyACEIEXIAARAQALBABBAgsFABCJHwsGAEGYmQULDAAgARDiFiAAERgACwQAQQQLBQAQjx8LTgEBfyMAQSBrIgQkACAEQRBqIAEQzRYgBEEIaiACEOgWIARBEGogBEEIaiADEIEXIAARBQAgBEEIahCiDBogBEEQahD7LBogBEEgaiQACwQAQQQLBQAQkh8LMgEBfyMAQRBrIgQkACAEIAEQzRYgBCACEJUXIAMQgRcgABEFACAEEPssGiAEQRBqJAALBABBAwsFABCYHwsGAEHMmQULEQAgARDiFiACEOIWIAARMQALBABBAwsFABCbHws6AQF/IwBBEGsiAyQAIAEQgRchASADQQhqIAIQ6BYgASADQQhqIAARAQAgA0EIahCiDBogA0EQaiQACwQAQQILBQAQnB8LDAAgARCBFyAAEQQACwQAQQILBQAQnh8LDAAgARCVFyAAEQQACwQAQQMLBQAQoh8LBgBB1PoEC0sBAX8jAEEQayIDJAAgARCBFyEBIANBCGogAhDoFiADIAEgA0EIaiAAEQMANgIMIANBDGoQ2BchACADQQhqEKIMGiADQRBqJAAgAAsEAEECCwUAEKQfC0IBAX8jAEEQayICJAAgAkEIaiABEOgWIAIgAkEIaiAAEQAANgIMIAJBDGoQ2BchACACQQhqEKIMGiACQRBqJAAgAAsEAEECCwUAEKYfCy8BAX8jAEEQayICJAAgAiABENkXIAARAAA2AgwgAkEMahDYFyEBIAJBEGokACABCwQAQQILBQAQqB8LOAEBfyMAQRBrIgIkACACQQhqIAEQgRcgABEBACACQQhqELwWIQEgAkEIahCiDBogAkEQaiQAIAELBABBAwsFABC0HwtJAQF/IwBBIGsiAyQAIANBGGogARDoFiADQQhqIAIQzRYgA0EYaiADQQhqIAARAQAgA0EIahD7LBogA0EYahCiDBogA0EgaiQACwQAQQMLBQAQuB8LQAEBfyMAQSBrIgMkACADQRBqIAEQzRYgAyACEM0WIANBEGogAyAAEQEAIAMQ+ywaIANBEGoQ+ywaIANBIGokAAsEAEEDCwUAELsfC1ABAX8jAEEgayIDJAAgA0EQaiABEM0WIANBCGogAhDoFiADQRBqIANBCGogABEDABDyFiEAIANBCGoQogwaIANBEGoQ+ywaIANBIGokACAACwQAQQILBQAQvR8LLwEBfyMAQRBrIgIkACACIAEQzRYgAiAAEQAAEPIWIQAgAhD7LBogAkEQaiQAIAALBABBAwsFABDAHws0AQF/IwBBEGsiAyQAIAMgARDNFiADIAIQgRcgABEDABDyFiECIAMQ+ywaIANBEGokACACCwQAQQcLBQAQwh8LBgBB3IUFC6ABAQF/IwBBMGsiByQAIAdBKGogARDoFiAHQSBqIAIQ6BYgB0EYaiADEOgWIAdBEGogBBDoFiAHQQhqIAUQ6BYgByAGEOgWIAdBKGogB0EgaiAHQRhqIAdBEGogB0EIaiAHIAARDwAgBxCiDBogB0EIahCiDBogB0EQahCiDBogB0EYahCiDBogB0EgahCiDBogB0EoahCiDBogB0EwaiQACwQAQQgLBQAQxB8LBgBBkJsFC7ABAQF/IwBBMGsiCCQAIAhBKGogARDoFiAIQSBqIAIQ6BYgCEEYaiADEOgWIAhBEGogBBDoFiAFEIEXIQUgCEEIaiAGEOgWIAggBxDoFiAIQShqIAhBIGogCEEYaiAIQRBqIAUgCEEIaiAIIAARCgAQ8hYhACAIEKIMGiAIQQhqEKIMGiAIQRBqEKIMGiAIQRhqEKIMGiAIQSBqEKIMGiAIQShqEKIMGiAIQTBqJAAgAAsEAEEECwUAENUfC1UBAX8jAEEgayIEJAAgBEEQaiABEM0WIARBCGogAhDoFiAEQRBqIARBCGogAxDZFyAAEQYAEPIWIQMgBEEIahCiDBogBEEQahD7LBogBEEgaiQAIAMLBABBAwsFABDXHws0AQF/IwBBEGsiAyQAIAMgARDNFiADIAIQlRcgABEDABDyFiECIAMQ+ywaIANBEGokACACCwQAQQQLBQAQ6h8LBgBBoJ4FC0kBAX8jAEEQayIEJAAgARDiFiEBIARBCGogAhDoFiAEIAMQ6BYgASAEQQhqIAQgABFCACAEEKIMGiAEQQhqEKIMGiAEQRBqJAALBABBBwsFABD/HwsGAEHcngULigEBAX8jAEEwayIHJAAgB0EgaiABEM0WIAdBGGogAhDoFiAHQRBqIAMQ6BYgB0EIaiAEEOgWIAdBIGogB0EYaiAHQRBqIAdBCGogBRCBFyAGEIEXIAARDAAQ8hYhBSAHQQhqEKIMGiAHQRBqEKIMGiAHQRhqEKIMGiAHQSBqEPssGiAHQTBqJAAgBQsEAEEICwUAEIcgC7cBAQF/IwBBwABrIggkACAIQTBqIAEQzRYgCEEoaiACEOgWIAhBIGogAxDoFiAIQRhqIAQQ6BYgCEEQaiAFEOgWIAhBCGogBhDoFiAIQTBqIAhBKGogCEEgaiAIQRhqIAhBEGogCEEIaiAHEIEXIAARCgAQ8hYhByAIQQhqEKIMGiAIQRBqEKIMGiAIQRhqEKIMGiAIQSBqEKIMGiAIQShqEKIMGiAIQTBqEPssGiAIQcAAaiQAIAcLBABBCgsFABCeIAsGAEGYoQUL6gEBAX8jAEHQAGsiCiQAIApBwABqIAEQzRYgCkE4aiACEOgWIApBMGogAxDoFiAKQShqIAQQ6BYgCkEgaiAFEOgWIApBGGogBhDoFiAKQRBqIAcQ6BYgCkEIaiAIEOgWIApBwABqIApBOGogCkEwaiAKQShqIApBIGogCkEYaiAKQRBqIApBCGogCRCBFyAAER0AEPIWIQkgCkEIahCiDBogCkEQahCiDBogCkEYahCiDBogCkEgahCiDBogCkEoahCiDBogCkEwahCiDBogCkE4ahCiDBogCkHAAGoQ+ywaIApB0ABqJAAgCQsEAEEICwUAEKAgC5cBAQF/IwBBMGsiCCQAIAhBIGogARDNFiAIQRhqIAIQ6BYgCEEQaiADEOgWIAQQgRchBCAFEIEXIQUgCEEIaiAGEOgWIAhBIGogCEEYaiAIQRBqIAQgBSAIQQhqIAcQgRcgABEKABDyFiEHIAhBCGoQogwaIAhBEGoQogwaIAhBGGoQogwaIAhBIGoQ+ywaIAhBMGokACAHCwQAQQkLBQAQ8SYLBgBBtKkFC8ABAQF/IwBBwABrIgkkACAJQTBqIAEQzRYgAhCBFyECIAlBKGogAxDoFiAJQSBqIAQQ6BYgCUEYaiAFEOgWIAlBEGogBhDoFiAJQQhqIAcQ6BYgCUEwaiACIAlBKGogCUEgaiAJQRhqIAlBEGogCUEIaiAIEIEXIAARFQAQ8hYhCCAJQQhqEKIMGiAJQRBqEKIMGiAJQRhqEKIMGiAJQSBqEKIMGiAJQShqEKIMGiAJQTBqEPssGiAJQcAAaiQAIAgLBABBBwsFABDzJguUAQEBfyMAQTBrIgckACAHQSBqIAEQzRYgB0EYaiACEOgWIAdBEGogAxDoFiAHQQhqIAQQ6BYgByAFEOgWIAdBIGogB0EYaiAHQRBqIAdBCGogByAGEIEXIAARDAAQ8hYhBiAHEKIMGiAHQQhqEKIMGiAHQRBqEKIMGiAHQRhqEKIMGiAHQSBqEPssGiAHQTBqJAAgBgsEAEEHCwUAEPkmC3YBAX8jAEEgayIHJAAgB0EQaiABEM0WIAdBCGogAhDoFiADEIEXIQMgBBCBFyEEIAcgBRDoFiAHQRBqIAdBCGogAyAEIAcgBhCBFyAAEQwAEPIWIQYgBxCiDBogB0EIahCiDBogB0EQahD7LBogB0EgaiQAIAYLBABBCAsFABCGJwudAQEBfyMAQTBrIggkACAIQSBqIAEQzRYgAhCBFyECIAhBGGogAxDoFiAIQRBqIAQQ6BYgCEEIaiAFEOgWIAggBhDoFiAIQSBqIAIgCEEYaiAIQRBqIAhBCGogCCAHEIEXIAARCgAQ8hYhByAIEKIMGiAIQQhqEKIMGiAIQRBqEKIMGiAIQRhqEKIMGiAIQSBqEPssGiAIQTBqJAAgBwsEAEEJCwUAEJInC8ABAQF/IwBBwABrIgkkACAJQTBqIAEQzRYgCUEoaiACEOgWIAMQgRchAyAJQSBqIAQQ6BYgCUEYaiAFEOgWIAlBEGogBhDoFiAJQQhqIAcQ6BYgCUEwaiAJQShqIAMgCUEgaiAJQRhqIAlBEGogCUEIaiAIEIEXIAARFQAQ8hYhCCAJQQhqEKIMGiAJQRBqEKIMGiAJQRhqEKIMGiAJQSBqEKIMGiAJQShqEKIMGiAJQTBqEPssGiAJQcAAaiQAIAgLBABBBwsFABCjJwuSAQEBfyMAQTBrIgckACAHQSBqIAEQzRYgB0EYaiACEOgWIAMQmRshAyAEEIEXIQQgB0EQaiAFEOgWIAdBCGogBhDoFiAHQSBqIAdBGGogAyAEIAdBEGogB0EIaiAAEQwAEPIWIQAgB0EIahCiDBogB0EQahCiDBogB0EYahCiDBogB0EgahD7LBogB0EwaiQAIAALBABBCAsFABCnJwuhAQEBfyMAQTBrIggkACAIQSBqIAEQzRYgCEEYaiACEOgWIAMQmRshAyAIQRBqIAQQ6BYgBRCBFyEFIAhBCGogBhDoFiAIIAcQ6BYgCEEgaiAIQRhqIAMgCEEQaiAFIAhBCGogCCAAEQoAEPIWIQAgCBCiDBogCEEIahCiDBogCEEQahCiDBogCEEYahCiDBogCEEgahD7LBogCEEwaiQAIAALBABBCAsFABCrJwusAQEBfyMAQcAAayIIJAAgCEEwaiABEM0WIAhBIGogAhDNFiAIQRhqIAMQ6BYgBBCZGyEEIAUQgRchBSAIQRBqIAYQ6BYgCEEIaiAHEOgWIAhBMGogCEEgaiAIQRhqIAQgBSAIQRBqIAhBCGogABEKABDyFiEAIAhBCGoQogwaIAhBEGoQogwaIAhBGGoQogwaIAhBIGoQ+ywaIAhBMGoQ+ywaIAhBwABqJAAgAAsEAEEFCwUAEK4nC2QBAX8jAEEgayIFJAAgBUEQaiABEM0WIAVBCGogAhDoFiAFIAMQ6BYgBUEQaiAFQQhqIAUgBBCBFyAAEQgAEPIWIQQgBRCiDBogBUEIahCiDBogBUEQahD7LBogBUEgaiQAIAQLBABBBgsFABCyJwsGAEHI+wQLXwEBfyMAQSBrIgYkACAGQRBqIAEQzRYgBkEIaiACEOgWIAZBEGogBkEIaiADEIEXIAQQgRcgBRCBFyAAERAAEPIWIQMgBkEIahCiDBogBkEQahD7LBogBkEgaiQAIAMLBABBBwsFABDGJwsGAEG8rAULdgEBfyMAQSBrIgckACAHQRBqIAEQzRYgB0EIaiACEOgWIAMQ1hYhAyAEENYWIQQgByAFEOgWIAdBEGogB0EIaiADIAQgByAGEIEXIAARQwAQ8hYhBiAHEKIMGiAHQQhqEKIMGiAHQRBqEPssGiAHQSBqJAAgBgsEAEEFCwUAENonC2gBAX8jAEEgayIFJAAgBUEQaiABEM0WIAVBCGogAhDoFiADEIEXIQMgBSAEEOgWIAVBEGogBUEIaiADIAUgABEIABDyFiEAIAUQogwaIAVBCGoQogwaIAVBEGoQ+ywaIAVBIGokACAACwQAQQMLBQAQ3icLRwEBfyMAQSBrIgMkACADQRBqIAEQzRYgAyACEM0WIANBEGogAyAAEQMAEPIWIQAgAxD7LBogA0EQahD7LBogA0EgaiQAIAALBABBAwsFABDgJws4AQF/IwBBEGsiAyQAIAEQgRchASADIAIQzRYgASADIAARAwAQ8hYhACADEPssGiADQRBqJAAgAAsEAEEECwUAEOMnC1ABAX8jAEEgayIEJAAgBEEQaiABEM0WIAIQgRchAiAEIAMQzRYgBEEQaiACIAQgABEGABDyFiEAIAQQ+ywaIARBEGoQ+ywaIARBIGokACAACwQAQQQLBQAQ5ScLQQEBfyMAQRBrIgQkACABEIEXIQEgAhCBFyECIAQgAxDNFiABIAIgBCAAEQYAEPIWIQAgBBD7LBogBEEQaiQAIAALBABBBQsFABDrJwtiAQF/IwBBIGsiBSQAIAVBEGogARDNFiACEJUXIQIgAxCBFyEDIAVBCGogBBDoFiAFQRBqIAIgAyAFQQhqIAARCAAQ8hYhACAFQQhqEKIMGiAFQRBqEPssGiAFQSBqJAAgAAsEAEEGCwUAEPAnC2kBAX8jAEEgayIGJAAgBkEQaiABEM0WIAZBCGogAhDoFiAGIAMQ6BYgBkEQaiAGQQhqIAYgBBCBFyAFEIEXIAAREAAQ8hYhBCAGEKIMGiAGQQhqEKIMGiAGQRBqEPssGiAGQSBqJAAgBAsEAEEECwUAEPYnCzkBAX8jAEEQayIEJAAgBCABEM0WIAQgAhCBFyADEIEXIAARBgAQ8hYhAiAEEPssGiAEQRBqJAAgAgsEAEEKCwUAEIEoCwYAQeiuBQvMAQEBfyMAQcAAayIKJAAgCkEwaiABEM0WIApBKGogAhDoFiAKQSBqIAMQ6BYgBBCBFyEEIAUQgRchBSAKQRhqIAYQ6BYgCkEQaiAHEOgWIApBCGogCBDoFiAKIAkQ6BYgCkEwaiAKQShqIApBIGogBCAFIApBGGogCkEQaiAKQQhqIAogABE5ACAKEKIMGiAKQQhqEKIMGiAKQRBqEKIMGiAKQRhqEKIMGiAKQSBqEKIMGiAKQShqEKIMGiAKQTBqEPssGiAKQcAAaiQACwQAQQMLBQAQhigLLQEBfyMAQRBrIgMkACADIAEQzRYgAyACEJUXIAARAQAgAxD7LBogA0EQaiQACwQAQQMLBQAQiCgLLQEBfyMAQRBrIgMkACADIAEQzRYgAyACEIEXIAARAQAgAxD7LBogA0EQaiQACwQAQQMLBQAQiigLLQEBfyMAQRBrIgMkACADIAEQzRYgAyACENkXIAARAQAgAxD7LBogA0EQaiQACwQAQQQLBQAQjCgLBgBBsK8FC1IBAX8jAEEgayIEJAAgBEEQaiABEM0WIAIQ4hYhAiAEQQhqIAMQ6BYgBEEQaiACIARBCGogABFEACAEQQhqEKIMGiAEQRBqEPssGiAEQSBqJAALBABBBQsFABCPKAtaAQF/IwBBIGsiBSQAIAVBEGogARDNFiAFQQhqIAIQ6BYgBUEQaiAFQQhqIAMQlRcgBBCVFyAAEQgAEPIWIQMgBUEIahCiDBogBUEQahD7LBogBUEgaiQAIAMLBABBBQsFABCRKAtkAQF/IwBBIGsiBSQAIAVBEGogARDNFiAFQQhqIAIQ6BYgBSADEOgWIAVBEGogBUEIaiAFIAQQlRcgABEIABDyFiEEIAUQogwaIAVBCGoQogwaIAVBEGoQ+ywaIAVBIGokACAECwQAQQMLBQAQmCgLPQEBfyMAQRBrIgMkACADQQhqIAEQ6BYgA0EIaiACEIEXIAARAwAQ8hYhAiADQQhqEKIMGiADQRBqJAAgAgsEAEEGCwUAEJ0oCwYAQZiwBQtnAQF/IwBBIGsiBiQAIAZBEGogARDNFiACEIEXIQIgAxCBFyEDIAZBCGogBBDoFiAGQRBqIAIgAyAGQQhqIAUQ4hYgABFBABDyFiEAIAZBCGoQogwaIAZBEGoQ+ywaIAZBIGokACAACwQAQQMLBQAQoCgLEQAgARCBFyACEOIWIAAREQALBABBBQsFABCkKAsGAEHEsAULNwEBfyMAQRBrIgUkACAFIAEQzRYgBSACEIEXIAMQ4hYgBBDZFyAAESIAIAUQ+ywaIAVBEGokAAsEAEEDCwUAEKYoCxEAIAEQgRcgAhCBFyAAEQEACwQAQQELKgEBfyMAQRBrIgEkACABIAARAgA2AgwgAUEMahC3FiEAIAFBEGokACAACwQAQQILBQAQtigLLwEBfyMAQRBrIgIkACACIAEQgRcgABEBACACENoTIQEgAhD7LBogAkEQaiQAIAELBABBAgsFABC4KAsvAQF/IwBBEGsiAiQAIAIgARCBFyAAEQAANgIMIAJBDGoQtxYhASACQRBqJAAgAQsEAEEECwUAELooCxYAIAEQgRcgAhDZFyADEIEXIAARBQALBABBBAsFABC8KAs/AQF/IwBBEGsiBCQAIAEQgRchASAEQQhqIAIQ6BYgASAEQQhqIAMQlRcgABEFACAEQQhqEKIMGiAEQRBqJAALBABBAgsFABC9KAsxAgF/AX0jAEEQayICJAAgAiABEIEXIAARFAA4AgwgAkEMahDbFiEDIAJBEGokACADCwQAQQULBQAQxSgLWgEBfyMAQSBrIgUkACAFQRBqIAEQzRYgBUEIaiACEOgWIAVBEGogBUEIaiADEJkbIAQQgRcgABEIABDyFiEDIAVBCGoQogwaIAVBEGoQ+ywaIAVBIGokACADCwQAQQQLBQAQySgLRQEBfyMAQRBrIgQkACAEQQhqIAEQ6BYgBCACEOgWIARBCGogBCADEJUXIAARBQAgBBCiDBogBEEIahCiDBogBEEQaiQACwQAQQILBQAQzigLOAEBfyMAQRBrIgIkACACQQhqIAEQ6BYgAkEIaiAAEQAAEPIWIQAgAkEIahCiDBogAkEQaiQAIAALBABBAwsFABDzFgtHAQF/IwBBEGsiAyQAIANBCGogARDoFiADIAIQ6BYgA0EIaiADIAARAwAQ8hYhACADEKIMGiADQQhqEKIMGiADQRBqJAAgAAsEAEEBCwYAQdixBQssAgF/AXwjAEEQayIBJAAgASAAEVIAOQMIIAFBCGoQwychAiABQRBqJAAgAgsEAEEFCwUAEN8oCwYAQcSyBQtSAQF/IwBBEGsiBSQAIAEQgRchASACEOIWIQIgBUEIaiADEOgWIAUgBBDoFiABIAIgBUEIaiAFIAARMAAgBRCiDBogBUEIahCiDBogBUEQaiQACwQAQQQLBQAQ4SgLTAEBfyMAQRBrIgQkACAEQQhqIAEQ6BYgBCACEOgWIARBCGogBCADEIEXIAARBgAQ8hYhAyAEEKIMGiAEQQhqEKIMGiAEQRBqJAAgAwsEAEEFCwUAEOMoCwYAQfSyBQtsAQF/IwBBIGsiBSQAIAVBCGogARDNFiACEJUXIQIgAxDiFiEDIAUgBBDoFiAFQRhqIAVBCGogAiADIAUgABEkACAFQRhqELwWIQAgBUEYahCiDBogBRCiDBogBUEIahD7LBogBUEgaiQAIAALBABBAwsFABDlKAtLAQF/IwBBEGsiAyQAIAEQ2RchASADIAIQ6BYgA0EIaiABIAMgABEFACADQQhqELwWIQAgA0EIahCiDBogAxCiDBogA0EQaiQAIAALBABBBwsFABDpKAsGAEGsswULfAEBfyMAQSBrIgckACABEOIWIQEgAhDiFiECIAMQ4hYhAyAHQRhqIAQQ6BYgB0EQaiAFEOgWIAdBCGogBhDoFiABIAIgAyAHQRhqIAdBEGogB0EIaiAAEScAIAdBCGoQogwaIAdBEGoQogwaIAdBGGoQogwaIAdBIGokAAsEAEEDCwUAEOsoCxQAIAEQgRcgAhCVFyAAEQMAEPIWCwQAQQQLBQAQ7CgLBgBB4LMFCzkBAX8jAEEQayIEJAAgBCABEIEXIAIQ4hYgAxDiFiAAEToANgIMIARBDGoQtxYhASAEQRBqJAAgAQsEAEEECwUAEO4oC0wBAX8jAEEQayIEJAAgBEEIaiABEOgWIAQgAhDoFiAEQQhqIAQgAxCVFyAAEQYAEPIWIQMgBBCiDBogBEEIahCiDBogBEEQaiQAIAMLBABBAwsFABD1KAsGAEHEtAULFAAgARCBFyACEOIWIAAROwAQ8hYLBABBBAsFABD3KAsGAEHgtAULVAEBfyMAQRBrIgQkACABEIEXIQEgAhDiFiECIAQgAxDoFiAEQQhqIAEgAiAEIAARIgAgBEEIahC8FiEAIARBCGoQogwaIAQQogwaIARBEGokACAACwQAQQgLBQAQ/SgLTQEBfyMAQRBrIggkACAIIAEQzRYgCCACEJkbIAMQmRsgBBCZGyAFEJkbIAYQmRsgBxCZGyAAEQoAEPIWIQIgCBD7LBogCEEQaiQAIAILBABBBAsFABCeKQthAQF/IwBBIGsiBCQAIARBGGogARDoFiAEQRBqIAIQ6BYgBEEIaiADEOgWIARBGGogBEEQaiAEQQhqIAARBQAgBEEIahCiDBogBEEQahCiDBogBEEYahCiDBogBEEgaiQACwQAQQILBQAQoCkLOAEBfyMAQRBrIgIkACACQQhqIAEQmRsgABEBACACQQhqELwWIQEgAkEIahCiDBogAkEQaiQAIAELDQAgABCiFi0AC0EHdgsHACAAEKoWCwsAIAAgASACEKQWCwsAIAEgAkEBEKsWCwcAIAAQphYLBwAgABCuFgsKACAAEKgWKAIACwcAIAAQrxYLEQAgABCiFigCCEH/////B3ELBAAgAAsJACAAIAEQrBYLBwAgABCtFgsHACAAEOEsCwQAIAALBAAgAAsYAAJAIAAQoRZFDQAgABCyFg8LIAAQsxYLBAAgAAsKACAAEKIWKAIACwoAIAAQohYQtBYLBwAgABC1FgsEACAACwQAIAALBwAgACgCAAsZACAAKAIAIAE2AgAgACAAKAIAQQhqNgIACwIACwYAQcyABgsEACAACw4AIAAoAgAQDSAAKAIACwYAQbj3BAsEACAACwQAIAALCgAgABDBFhogAAsEACAACwwAIAAQqBYgAToACwsKACAAEKgWEMQWCwcAIAAQxhYLDAAgACABLQAAOgAACwQAIAALHAEBf0EIEA4iASAAEMgWGiABQbD8BUHEBhAPAAsYACAAIAEQ5SwaIABBiPwFQQhqNgIAIAALBwAgABDKFgsHACAAEOAsCwYAQdz3BAsnAAJAIABEAAAAAAAA8EFjIABEAAAAAAAAAABmcUUNACAAqw8LQQALEgAgACABQQRqIAEoAgAQzhYaCywBAX8jAEEQayIDJAAgACADQQhqIAMQ3BMaIAAgASACEPwsIANBEGokACAACwYAQfz4BAvkAgECfxCpAiEBIAAoAgAQqgIQ6gIiAkEANgLQASACQgA3A8gBIAJCADcDGCABEKoCIAAoAgAQ0QIgAEEANgIAIABBtAFqEKIMGiAAQbABahCiDBogAEGsAWoQogwaIABBoAFqEPssGiAAQZgBahCiDBogAEGUAWoQogwaIABBiAFqEPssGiAAQYABahCiDBogAEH8AGoQogwaIABB+ABqEKIMGiAAQewAahD7LBogAEHkAGoQogwaIABB4ABqEKIMGiAAQdwAahCiDBogAEHYAGoQogwaIABB1ABqEKIMGiAAQdAAahCiDBogAEHMAGoQogwaIABByABqEKIMGiAAQcQAahCiDBogAEHAAGoQogwaIABBNGoQ+ywaIABBMGoQogwaIABBLGoQogwaIABBKGoQogwaIABBJGoQogwaIABBIGoQogwaIABBHGoQogwaIABBEGoQ+ywaIABBBGoQ+ywaIAALBgBB/PgECwYAQZj5BAsGAEHA+QQLBgBB2PkECwQAIAALBAAgAAsEACAACzsBAX8jAEEQayICJAAgAiAAELYWNgIMIAJBDGogARDXFhDXFhDbFhDcFiACQQxqELkWIAJBEGokACAACwUA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C0QBAX8jAEEQayIDJAAgACgCACEAIANBCGogARDxFyACEIEXIAARBQAgA0EIahC8FiEBIANBCGoQogwaIANBEGokACABCxUBAX9BBBDgLCIBIAAoAgA2AgAgAQsEACAACwYAQbCBBQsGAEHIgQULBgBByIEFCwYAQdyBBQsGAEH8gQULJgEBfyMAQRBrIgIkACACIAE2AgwgACACQQxqEPgXGiACQRBqJAALNAEBfyMAQRBrIgIkACACQQhqIAEQ+RcQ+hchASAAEPsXIAEQ/BcQAzYCACACQRBqJAAgAAsEACAACz4BAX8jAEEQayICJAAgAiAAELYWNgIMIAJBDGogARD5FxD5FygCABD9FxD+FyACQQxqELkWIAJBEGokACAACwUAEP8XCwcAIAAQuxYLBAAgAAsZACAAKAIAIAE2AgAgACAAKAIAQQhqNgIACwYAQaD7BAsVAQF/QQQQ4CwiASAAKAIANgIAIAELKQEBfyMAQRBrIgIkACACIAEoAhA2AgwgACACQQxqEIIYGiACQRBqJAALNAEBfyMAQRBrIgIkACACQQhqIAEQgxgQhBghASAAEIgNIAEQhRgQAzYCACACQRBqJAAgAAsEACAACzsBAX8jAEEQayICJAAgAiAAELYWNgIMIAJBDGogARCDGBCDGBC3FhC4FiACQQxqELkWIAJBEGokACAACwcAIAAQuxYLBgBBnIIFCwYAQZyCBQsGAEG0ggULBgBB1IIFC5wBAQN/IwBBIGsiAiQAIAJBADYCHCACIAAQpgYiAzYCGAJAIAMgABCLGEYNAANAIAJBEGogASACQQhqIAJBGGoQjBgiAyACIAJBHGoQjRgiBBCOGCACQRBqEKIMGiAEEKIMGiADEKIMGiACIAIoAhwgAigCGCIDKAIcajYCHCACIANBKGoiAzYCGCADIAAQixhHDQALCyACQSBqJAALEAAgACgCCCAAKAIAQShsags0AQF/IwBBEGsiAiQAIAJBCGogARCRGBCSGCEBIAAQkxggARCUGBADNgIAIAJBEGokACAACzQBAX8jAEEQayICJAAgAkEIaiABEJUYEJYYIQEgABCXGCABEJgYEAM2AgAgAkEQaiQAIAALFgAgACABQcUGIAIQjxggAxCPGBCQGAsEACAAC00BAX8jAEEgayIFJAAgBUEIaiADEI8YIAQQjxgQmRghAyAAIAEoAgAgBUEYahCIFCAFQRhqEIkUIAMQmhggAhEIABCmDBogBUEgaiQACwQAIAALPgEBfyMAQRBrIgIkACACIAAQthY2AgwgAkEMaiABEJEYEJEYKAIAEJ8YEKAYIAJBDGoQuRYgAkEQaiQAIAALBQAQoRgLBwAgABC7FgsEACAACzsBAX8jAEEQayICJAAgAiAAELYWNgIMIAJBDGogARCVGBCVGBDYFxCiGCACQQxqELkWIAJBEGokACAACwUAEKMYCwcAIAAQuxYLWQEBfyMAQRBrIgMkACADIAAQmxg2AgwgARCPGCEBIAIQjxghAiADQQxqIAEQjxgQvBYQnBggA0EMaiACEI8YEI8YELwWEJwYIANBDGoQuRYgA0EQaiQAIAALBwAgABCeGAsEACAACxkAIAAoAgAgATYCACAAIAAoAgBBCGo2AgALBgBB5IIFCwQAIAALBAAgAAsZACAAKAIAIAE2AgAgACAAKAIAQQhqNgIACwYAQfyBBQsZACAAKAIAIAE2AgAgACAAKAIAQQhqNgIACwYAQdiABgsEAEEDCwUAEKkYC0EBAX8jAEEQayIDJAAgACgCACEAIAEQqBghASADQQhqIAIQ6BYgASADQQhqIAARAQAgA0EIahCiDBogA0EQaiQACxUBAX9BBBDgLCIBIAAoAgA2AgAgAQsEACAACwYAQeyCBQtOAQF/IwBBEGsiAiQAAkACQCABQQxqIgEQqxhFDQAgAkEIaiABEKsYQQF0IAEQrBgQrRggACACQQhqEK4YGgwBCyAAEMYMCyACQRBqJAALBwAgACgCAAslAAJAIAAoAgBBAEoNAEHXvgJBipcBQeUMQdUvEAAACyAAKAIICwwAIAAgASACEK8YGgs0AQF/IwBBEGsiAiQAIAJBCGogARCwGBCxGCEBIAAQshggARCzGBADNgIAIAJBEGokACAACxIAIAAgAjYCBCAAIAE2AgAgAAsEACAAC0UBAX8jAEEQayICJAAgAiAAELYWNgIEIAJBCGogARCwGBCwGBC0GCACQQRqIAJBCGoQtRggAkEEahC5FiACQRBqJAAgAAsFABC2GAsHACAAELsWCwwAIAAgASkCADcCAAspACAAKAIAIAEoAgA2AgAgACgCACABKAIENgIEIAAgACgCAEEIajYCAAsGAEGYgwULFQEBf0EEEOAsIgEgACgCADYCACABC04BAX8jAEEQayICJAACQAJAIAFBGGoiARC5GEUNACACQQhqIAEQuRhBFGwgARC6GBCtGCAAIAJBCGoQrhgaDAELIAAQxgwLIAJBEGokAAsHACAAKAIACyUAAkAgACgCAEEASg0AQde+AkGKlwFB5QxB1S8QAAALIAAoAggLSgEBfyMAQSBrIgQkACAEQRhqIAEQyQwgBEEQaiACEMkMIAQgBCkDGDcDCCAEIAQpAxA3AwAgACAEQQhqIAQgAxCDByAEQSBqJAALBABBBQsFABDBGAtVAQF/IwBBEGsiBSQAIAAoAgAhACABEMAYIQEgBUEIaiACEOgWIAUgAxDoFiABIAVBCGogBSAEEJUXIAARCQAgBRCiDBogBUEIahCiDBogBUEQaiQACxUBAX9BBBDgLCIBIAAoAgA2AgAgAQsEACAACwYAQaCDBQsEAEECCwUAEMcYCzwBAX8gARDGGCAAKAIEIgJBAXVqIQEgACgCACEAAkAgAkEBcUUNACABKAIAIABqKAIAIQALIAEgABEEAAsVAQF/QQgQ4CwiASAAKQIANwMAIAELBAAgAAsGAEG8gwULBgBBxIMFCx8AAkAgAJlEAAAAAAAA4EFjRQ0AIACqDwtBgICAgHgLDAAgACABEL4PEIkHCwQAQQMLBQAQzxgLQQEBfyMAQRBrIgMkACAAKAIAIQAgARDAGCEBIANBCGogAhDoFiABIANBCGogABEBACADQQhqEKIMGiADQRBqJAALFQEBf0EEEOAsIgEgACgCADYCACABCwYAQciDBQs3AQF/IwBBEGsiAyQAIANBCGogARDRGCAAIANBCGogAyACENIYIgIQygwgAhCiDBogA0EQaiQACxkAIAAgAUE8ahDTGCIBKgIAIAEqAgQQMRoLFAAgACABKAIAIgE2AgAgARANIAALMwEBfwJAIAAoAgAiAUEASg0AQde+AkGKlwFB5wxB5Y4BEAAACyABQQR0IAAoAghqQXBqCwQAQQMLBQAQ2BgLUgEBfyMAQRBrIgMkACAAKAIAIQAgARDAGCEBIAMgAhDoFiADQQhqIAEgAyAAEQUAIANBCGoQvBYhASADQQhqEKIMGiADEKIMGiADQRBqJAAgAQsVAQF/QQQQ4CwiASAAKAIANgIAIAELBgBB1IMFCzcBAX8jAEEQayIDJAAgA0EIaiABENoYIAAgA0EIaiADIAIQ0hgiAhDKDCACEKIMGiADQRBqJAALGQAgACABQTxqENMYIgEqAgggASoCDBAxGgs1AQF/IwBBEGsiBSQAIAVBCGogARDJDCAFIAIQyQwgACAFQQhqIAUgAyAEEKQHIAVBEGokAAsEAEEGCwUAEOEYCwYAQfiDBQtaAQF/IwBBEGsiBiQAIAAoAgAhACABEMAYIQEgBkEIaiACEOgWIAYgAxDoFiABIAZBCGogBiAEENkXIAUQ4hYgABEgACAGEKIMGiAGQQhqEKIMGiAGQRBqJAALFQEBf0EEEOAsIgEgACgCADYCACABCwYAQeCDBQs5AQF/IwBBEGsiByQAIAdBCGogARDJDCAHIAIQyQwgACAHQQhqIAcgAyAEIAUgBhClByAHQRBqJAALBABBCAsFABDoGAsGAEGghAULZAEBfyMAQRBrIggkACAAKAIAIQAgARDAGCEBIAhBCGogAhDoFiAIIAMQ6BYgASAIQQhqIAggBBDZFyAFEOIWIAYQgRcgBxDiFiAAEUAAIAgQogwaIAhBCGoQogwaIAhBEGokAAsVAQF/QQQQ4CwiASAAKAIANgIAIAELBgBBgIQFCzcBAX8jAEEQayIGJAAgBkEIaiABEMkMIAYgAhDJDCAAIAZBCGogBiADIAQgBRCmByAGQRBqJAALBABBBwsFABDvGAsGAEHMhAULXwEBfyMAQRBrIgckACAAKAIAIQAgARDAGCEBIAdBCGogAhDoFiAHIAMQ6BYgASAHQQhqIAcgBBDZFyAFEOIWIAYQgRcgABEyACAHEKIMGiAHQQhqEKIMGiAHQRBqJAALFQEBf0EEEOAsIgEgACgCADYCACABCwYAQbCEBQs5AQF/IwBBEGsiByQAIAdBCGogARDJDCAHIAIQyQwgACAHQQhqIAcgAyAEIAUgBhCnByAHQRBqJAALBABBCAsFABD2GAsGAEGAhQULZAEBfyMAQRBrIggkACAAKAIAIQAgARDAGCEBIAhBCGogAhDoFiAIIAMQ6BYgASAIQQhqIAggBBDZFyAFENkXIAYQ2RcgBxDZFyAAERcAIAgQogwaIAhBCGoQogwaIAhBEGokAAsVAQF/QQQQ4CwiASAAKAIANgIAIAELBgBB4IQFC1MBAX8jAEEgayIHJAAgB0EYaiABEMkMIAdBEGogAhDJDCAHQQhqIAMQyQwgByAEEMkMIAAgB0EYaiAHQRBqIAdBCGogByAFIAYQqgcgB0EgaiQACwQAQQgLBQAQ/RgLBgBBsIUFC4oBAQF/IwBBIGsiCCQAIAAoAgAhACABEMAYIQEgCEEYaiACEOgWIAhBEGogAxDoFiAIQQhqIAQQ6BYgCCAFEOgWIAEgCEEYaiAIQRBqIAhBCGogCCAGENkXIAcQ4hYgABErACAIEKIMGiAIQQhqEKIMGiAIQRBqEKIMGiAIQRhqEKIMGiAIQSBqJAALFQEBf0EEEOAsIgEgACgCADYCACABCwYAQZCFBQtRAQF/IwBBIGsiBiQAIAZBGGogARDJDCAGQRBqIAIQyQwgBkEIaiADEMkMIAYgBBDJDCAAIAZBGGogBkEQaiAGQQhqIAYgBRCrByAGQSBqJAALBABBBwsFABCDGQuFAQEBfyMAQSBrIgckACAAKAIAIQAgARDAGCEBIAdBGGogAhDoFiAHQRBqIAMQ6BYgB0EIaiAEEOgWIAcgBRDoFiABIAdBGGogB0EQaiAHQQhqIAcgBhDZFyAAEQ8AIAcQogwaIAdBCGoQogwaIAdBEGoQogwaIAdBGGoQogwaIAdBIGokAAsVAQF/QQQQ4CwiASAAKAIANgIAIAELBgBBwIUFC0oBAX8jAEEgayIGJAAgBkEYaiABEMkMIAZBEGogAhDJDCAGQQhqIAMQyQwgACAGQRhqIAZBEGogBkEIaiAEIAUQrAcgBkEgaiQACwQAQQcLBQAQihkLBgBBjIYFC3sBAX8jAEEgayIHJAAgACgCACEAIAEQwBghASAHQRhqIAIQ6BYgB0EQaiADEOgWIAdBCGogBBDoFiABIAdBGGogB0EQaiAHQQhqIAUQ2RcgBhDiFiAAERsAIAdBCGoQogwaIAdBEGoQogwaIAdBGGoQogwaIAdBIGokAAsVAQF/QQQQ4CwiASAAKAIANgIAIAELBgBB8IUFC0gBAX8jAEEgayIFJAAgBUEYaiABEMkMIAVBEGogAhDJDCAFQQhqIAMQyQwgACAFQRhqIAVBEGogBUEIaiAEEK0HIAVBIGokAAsEAEEGCwUAEJEZCwYAQbiGBQt2AQF/IwBBIGsiBiQAIAAoAgAhACABEMAYIQEgBkEYaiACEOgWIAZBEGogAxDoFiAGQQhqIAQQ6BYgASAGQRhqIAZBEGogBkEIaiAFENkXIAARCwAgBkEIahCiDBogBkEQahCiDBogBkEYahCiDBogBkEgaiQACxUBAX9BBBDgLCIBIAAoAgA2AgAgAQsGAEGghgULMAEBfyMAQRBrIgYkACAGQQhqIAEQyQwgACAGQQhqIAIgAyAEIAUQrgcgBkEQaiQACwQAQQcLBQAQmBkLBgBB3IYFC1UBAX8jAEEQayIHJAAgACgCACEAIAEQwBghASAHQQhqIAIQ6BYgASAHQQhqIAMQ4hYgBBDZFyAFEIEXIAYQ4hYgABEoACAHQQhqEKIMGiAHQRBqJAALFQEBf0EEEOAsIgEgACgCADYCACABCwYAQcCGBQsuAQF/IwBBEGsiBSQAIAVBCGogARDJDCAAIAVBCGogAiADIAQQrwcgBUEQaiQACwQAQQYLBQAQnxkLBgBBiIcFC1ABAX8jAEEQayIGJAAgACgCACEAIAEQwBghASAGQQhqIAIQ6BYgASAGQQhqIAMQ4hYgBBDZFyAFEIEXIAARGgAgBkEIahCiDBogBkEQaiQACxUBAX9BBBDgLCIBIAAoAgA2AgAgAQsGAEHwhgULMAEBfyMAQRBrIgYkACAGQQhqIAEQyQwgACAGQQhqIAIgAyAEIAUQsAcgBkEQaiQACy4BAX8jAEEQayIFJAAgBUEIaiABEMkMIAAgBUEIaiACIAMgBBCxByAFQRBqJAALMQEBfyMAQRBrIgQkACAEQQhqIAEQyQwgACAEQQhqIAIgAxDJD0EAELUHIARBEGokAAsEAEEFCwUAEKcZC2IBAX8jAEEgayIFJAAgACgCACEAIAEQwBghASAFQRhqIAIQ6BYgAxDZFyEDIAVBCGogBBDNFiABIAVBGGogAyAFQQhqIAARCQAgBUEIahD7LBogBUEYahCiDBogBUEgaiQACxUBAX9BBBDgLCIBIAAoAgA2AgAgAQsGAEGQhwULSAEBfyMAQSBrIggkACABEKkZIQEgCEEYaiADEMkMIAAgASACIAhBGGogBCAFEMkPQQAgBiAIIAcQqhkQqxkQtAcgCEEgaiQAC0oCAn8BfCMAQRBrIgEkACAAKAIAIAFBCGoQrBkoAgAgAUEEahAHIQMgASABKAIEEMMMIQAgAxCtGSECIAAQxQwaIAFBEGokACACCzMAIABB3IcFNgIAIABBBGoQMBogACABNgIUAkAgARC4Dw0AIAAgACgCACgCABEEAAsgAAsSAEEAIABBBGogACgCFBC4DxsLBQAQrhkLCgAgABCvGRCwGQsGAEGkhwULJwACQCAARAAAAAAAAPBBYyAARAAAAAAAAAAAZnFFDQAgAKsPC0EACwQAIAALOAEBfyMAQRBrIgEkACABIAAoAhQQ6gwgAEEMaiABQQhqKQMANwIAIAAgASkDADcCBCABQRBqJAALBABBCQsFABC3GQsGAEG0iAULpAEBAX8jAEEwayIJJAAgACgCACEAIAEQwBghASAJQShqIAIQ6BYgAxDiFiEDIAlBIGogBBDoFiAFENkXIQUgCUEQaiAGEM0WIAcQ4hYhByAJQQhqIAgQ6BYgASAJQShqIAMgCUEgaiAFIAlBEGogByAJQQhqIAARTQAgCUEIahCiDBogCUEQahD7LBogCUEgahCiDBogCUEoahCiDBogCUEwaiQACxUBAX9BBBDgLCIBIAAoAgA2AgAgAQsGAEGQiAULWgEBfyMAQSBrIgckACABEL4PIQEgB0EYaiACEMkMIAdBEGogAxDJDCAHQQhqIAQQyQwgByAFEMkMIAAgASAHQRhqIAdBEGogB0EIaiAHIAYQtgcgB0EgaiQACwQAQQgLBQAQvRkLpgEBAX8jAEEwayIIJAAgACgCACEAIAEQwBghASAIQShqIAIQ6BYgCEEgaiADEOgWIAhBGGogBBDoFiAIQRBqIAUQ6BYgCEEIaiAGEOgWIAEgCEEoaiAIQSBqIAhBGGogCEEQaiAIQQhqIAcQ2RcgABEXACAIQQhqEKIMGiAIQRBqEKIMGiAIQRhqEKIMGiAIQSBqEKIMGiAIQShqEKIMGiAIQTBqJAALFQEBf0EEEOAsIgEgACgCADYCACABCwYAQcCIBQuYAQEBfyMAQcAAayILJAAgARC+DyEBIAtBOGogAhDJDCALQTBqIAMQyQwgC0EoaiAEEMkMIAtBIGogBRDJDCALQRhqIAYQyQwgC0EQaiAHEMkMIAtBCGogCBDJDCALIAkQyQwgACABIAtBOGogC0EwaiALQShqIAtBIGogC0EYaiALQRBqIAtBCGogCyAKELcHIAtBwABqJAALBABBDAsFABDEGQsGAEGQiQULjgIBAX8jAEHQAGsiDCQAIAAoAgAhACABEMAYIQEgDEHIAGogAhDoFiAMQcAAaiADEOgWIAxBOGogBBDoFiAMQTBqIAUQ6BYgDEEoaiAGEOgWIAxBIGogBxDoFiAMQRhqIAgQ6BYgDEEQaiAJEOgWIAxBCGogChDoFiABIAxByABqIAxBwABqIAxBOGogDEEwaiAMQShqIAxBIGogDEEYaiAMQRBqIAxBCGogCxDZFyAAETUAIAxBCGoQogwaIAxBEGoQogwaIAxBGGoQogwaIAxBIGoQogwaIAxBKGoQogwaIAxBMGoQogwaIAxBOGoQogwaIAxBwABqEKIMGiAMQcgAahCiDBogDEHQAGokAAsVAQF/QQQQ4CwiASAAKAIANgIAIAELBgBB4IgFC14BAX8jAEEgayIJJAAgARC+DyEBIAlBGGogAhDJDCAJQRBqIAMQyQwgCUEIaiAEEMkMIAkgBRDJDCAAIAEgCUEYaiAJQRBqIAlBCGogCSAGIAcgCBC4ByAJQSBqJAALBABBCgsFABDLGQsGAEHIiQULsAEBAX8jAEEwayIKJAAgACgCACEAIAEQwBghASAKQShqIAIQ6BYgCkEgaiADEOgWIApBGGogBBDoFiAKQRBqIAUQ6BYgCkEIaiAGEOgWIAEgCkEoaiAKQSBqIApBGGogCkEQaiAKQQhqIAcQ2RcgCBDiFiAJEIEXIAARNgAgCkEIahCiDBogCkEQahCiDBogCkEYahCiDBogCkEgahCiDBogCkEoahCiDBogCkEwaiQACxUBAX9BBBDgLCIBIAAoAgA2AgAgAQsGAEGgiQULyQEBBH8jAEEgayIGIQcgBiQAIAYgAkEDdCIIQQ9qQXBxayIJJAACQAJAIAINACAHQQA2AhwMAQsgCSAIaiEIIAkhBgNAIAYQL0EIaiIGIAhHDQALIAdBADYCHCACQQBMDQADQCAHQQhqIAEgB0EcahDNGSAHQRBqIAdBCGoQyQwgCSAHKAIcQQN0aiAHKQMQNwMAIAdBCGoQogwaIAcgBygCHEEBaiIGNgIcIAYgAkgNAAsLIAAgCSACIAMgBCAFEJQHIAdBIGokAAs2AQF/IwBBEGsiAyQAIAAgASgCACADQQhqIAIQoAwiAigCABAJEKYMGiACEKIMGiADQRBqJAALBABBBwsFABDSGQtVAQF/IwBBEGsiByQAIAAoAgAhACABEMAYIQEgB0EIaiACEOgWIAEgB0EIaiADEIEXIAQQ2RcgBRCVFyAGEOIWIAARGwAgB0EIahCiDBogB0EQaiQACxUBAX9BBBDgLCIBIAAoAgA2AgAgAQsGAEHgiQULxQEBBH8jAEEgayIEIQUgBCQAIAQgAkEDdCIGQQ9qQXBxayIHJAACQAJAIAINACAFQQA2AhwMAQsgByAGaiEGIAchBANAIAQQL0EIaiIEIAZHDQALIAVBADYCHCACQQBMDQADQCAFQQhqIAEgBUEcahDNGSAFQRBqIAVBCGoQyQwgByAFKAIcQQN0aiAFKQMQNwMAIAVBCGoQogwaIAUgBSgCHEEBaiIENgIcIAQgAkgNAAsLIAAgByACIAMQmAcgBUEgaiQACwQAQQULBQAQ2BkLSwEBfyMAQRBrIgUkACAAKAIAIQAgARDAGCEBIAVBCGogAhDoFiABIAVBCGogAxCBFyAEENkXIAARCQAgBUEIahCiDBogBUEQaiQACxUBAX9BBBDgLCIBIAAoAgA2AgAgAQsGAEGAigULVQEBfyMAQSBrIggkACAIQRhqIAEQyQwgCEEQaiACEMkMIAhBCGogAxDJDCAIIAQQyQwgACAIQRhqIAhBEGogCEEIaiAIIAUgBiAHELIHIAhBIGokAAsEAEEJCwUAEN8ZCwYAQcSKBQuPAQEBfyMAQSBrIgkkACAAKAIAIQAgARDAGCEBIAlBGGogAhDoFiAJQRBqIAMQ6BYgCUEIaiAEEOgWIAkgBRDoFiABIAlBGGogCUEQaiAJQQhqIAkgBhDZFyAHEOIWIAgQgRcgABEzACAJEKIMGiAJQQhqEKIMGiAJQRBqEKIMGiAJQRhqEKIMGiAJQSBqJAALFQEBf0EEEOAsIgEgACgCADYCACABCwYAQaCKBQtMAQF/IwBBIGsiByQAIAdBGGogARDJDCAHQRBqIAIQyQwgB0EIaiADEMkMIAAgB0EYaiAHQRBqIAdBCGogBCAFIAYQswcgB0EgaiQACwQAQQgLBQAQ5hkLBgBB8IoFC4ABAQF/IwBBIGsiCCQAIAAoAgAhACABEMAYIQEgCEEYaiACEOgWIAhBEGogAxDoFiAIQQhqIAQQ6BYgASAIQRhqIAhBEGogCEEIaiAFENkXIAYQ4hYgBxCBFyAAETQAIAhBCGoQogwaIAhBEGoQogwaIAhBGGoQogwaIAhBIGokAAsVAQF/QQQQ4CwiASAAKAIANgIAIAELBgBB0IoFCygBAX8jAEEQayICJAAgAkEIaiABEMkMIAAgAkEIahDyBCACQRBqJAALKAEBfyMAQRBrIgIkACACQQhqIAEQyQwgACACQQhqEOkZIAJBEGokAAs8AQF/AkACQCAAKAJUIgJFDQAgAkEDdCAAQdwAaigCAGpBeGopAAAgASkAAFENAQsgAEHUAGogARC6BgsLCQAgACABEPMECwQAQQMLBQAQ7xkLGAAgACgCACEAIAEQwBggAhDZFyAAEQEACxUBAX9BBBDgLCIBIAAoAgA2AgAgAQsGAEH8igULDQAgACABIAIgAxC7BgsEAEEFCwUAEPYZCwYAQaSLBQsiACAAKAIAIQAgARDAGCACENkXIAMQlRcgBBDiFiAAER8ACxUBAX9BBBDgLCIBIAAoAgA2AgAgAQsGAEGQiwULMAEBfyMAQRBrIgYkACAGQQhqIAEQyQwgACAGQQhqIAIgAyAEIAUQmgcgBkEQaiQACwQAQQcLBQAQ/RkLBgBBzIsFC1UBAX8jAEEQayIHJAAgACgCACEAIAEQwBghASAHQQhqIAIQ6BYgASAHQQhqIAMQ4hYgBBDiFiAFEOIWIAYQgRcgABE/ACAHQQhqEKIMGiAHQRBqJAALFQEBf0EEEOAsIgEgACgCADYCACABCwYAQbCLBQsuAQF/IwBBEGsiBSQAIAVBCGogARDJDCAAIAVBCGogAiADIAQQmQcgBUEQaiQACwQAQQYLBQAQgxoLUAEBfyMAQRBrIgYkACAAKAIAIQAgARDAGCEBIAZBCGogAhDoFiABIAZBCGogAxDiFiAEEIEXIAUQgRcgABEaACAGQQhqEKIMGiAGQRBqJAALFQEBf0EEEOAsIgEgACgCADYCACABCwYAQeCLBQtIAQF/IwBBIGsiBSQAIAVBGGogARDJDCAFQRBqIAIQyQwgBUEIaiADEMkMIAAgBUEYaiAFQRBqIAVBCGogBBCdByAFQSBqJAALBABBBgsFABCJGgt2AQF/IwBBIGsiBiQAIAAoAgAhACABEMAYIQEgBkEYaiACEOgWIAZBEGogAxDoFiAGQQhqIAQQ6BYgASAGQRhqIAZBEGogBkEIaiAFEIEXIAARCwAgBkEIahCiDBogBkEQahCiDBogBkEYahCiDBogBkEgaiQACxUBAX9BBBDgLCIBIAAoAgA2AgAgAQsGAEGAjAULMwEBfyMAQRBrIgQkACAEQQhqIAEQyQwgBCACEMkMIAAgBEEIaiAEIAMQoAcgBEEQaiQACwQAQQULBQAQjxoLVQEBfyMAQRBrIgUkACAAKAIAIQAgARDAGCEBIAVBCGogAhDoFiAFIAMQ6BYgASAFQQhqIAUgBBCBFyAAEQkAIAUQogwaIAVBCGoQogwaIAVBEGokAAsVAQF/QQQQ4CwiASAAKAIANgIAIAELBgBBoIwFCzUBAX8jAEEQayIFJAAgBUEIaiABEMkMIAUgAhDJDCAAIAVBCGogBSADIAQQogcgBUEQaiQACwQAQQYLBQAQlhoLBgBB2IwFC1oBAX8jAEEQayIGJAAgACgCACEAIAEQwBghASAGQQhqIAIQ6BYgBiADEOgWIAEgBkEIaiAGIAQQ4hYgBRCBFyAAESQAIAYQogwaIAZBCGoQogwaIAZBEGokAAsVAQF/QQQQ4CwiASAAKAIANgIAIAELBgBBwIwFCwQAQQMLBQAQmxoLQQEBfyABEMYYIAAoAgQiA0EBdWohASAAKAIAIQACQCADQQFxRQ0AIAEoAgAgAGooAgAhAAsgASACEIEXIAARAQALFQEBf0EIEOAsIgEgACkCADcDACABCwYAQeCMBQsEAEEECwUAEKAaC1ABAX8jAEEQayIEJAAgACgCACEAIAEQwBghASAEQQhqIAIQ6BYgBCADEOgWIAEgBEEIaiAEIAARBQAgBBCiDBogBEEIahCiDBogBEEQaiQACxUBAX9BBBDgLCIBIAAoAgA2AgAgAQsGAEHwjAULBABBBAsFABClGgtGAQF/IAEQxhggACgCBCIEQQF1aiEBIAAoAgAhAAJAIARBAXFFDQAgASgCACAAaigCACEACyABIAIQgRcgAxCBFyAAEQUACxUBAX9BCBDgLCIBIAApAgA3AwAgAQsGAEGAjQULMwEBfyMAQRBrIgQkACAEQQhqIAEQyQwgBCACEMkMIAAgBEEIaiAEIAMQkQcgBEEQaiQACwQAQQULBQAQqxoLVQEBfyMAQRBrIgUkACAAKAIAIQAgARDAGCEBIAVBCGogAhDoFiAFIAMQ6BYgASAFQQhqIAUgBBDZFyAAEQkAIAUQogwaIAVBCGoQogwaIAVBEGokAAsVAQF/QQQQ4CwiASAAKAIANgIAIAELBgBBkI0FC1EBAX8jAEEgayIGJAAgBkEYaiABEMkMIAZBEGogAhDJDCAGQQhqIAMQyQwgBiAEEMkMIAAgBkEYaiAGQRBqIAZBCGogBiAFEJIHIAZBIGokAAuPAQEBfyMAQcAAayIKJAAgCkE4aiABEMkMIApBMGogAhDJDCAKQShqIAMQyQwgCkEgaiAEEMkMIApBGGogBRDJDCAKQRBqIAYQyQwgCkEIaiAHEMkMIAogCBDJDCAAIApBOGogCkEwaiAKQShqIApBIGogCkEYaiAKQRBqIApBCGogCiAJEJMHIApBwABqJAALBABBCwsFABCzGgsGAEHcjQUL5wEBAX8jAEHAAGsiCyQAIAAoAgAhACABEMAYIQEgC0E4aiACEOgWIAtBMGogAxDoFiALQShqIAQQ6BYgC0EgaiAFEOgWIAtBGGogBhDoFiALQRBqIAcQ6BYgC0EIaiAIEOgWIAsgCRDoFiABIAtBOGogC0EwaiALQShqIAtBIGogC0EYaiALQRBqIAtBCGogCyAKENkXIAARJgAgCxCiDBogC0EIahCiDBogC0EQahCiDBogC0EYahCiDBogC0EgahCiDBogC0EoahCiDBogC0EwahCiDBogC0E4ahCiDBogC0HAAGokAAsVAQF/QQQQ4CwiASAAKAIANgIAIAELBgBBsI0FCzMBAX8jAEEQayIEJAAgBEEIaiABEMkMIAQgAhDJDCAAIARBCGogBCADEKkHIARBEGokAAsJACAAIAEQqAcLBABBAwsFABC6GgsYACAAKAIAIQAgARDAGCACEIQXIAARAQALFQEBf0EEEOAsIgEgACgCADYCACABCwYAQeyNBQszAQF/IwBBEGsiBCQAIARBCGogARDJDCAEIAIQyQwgACAEQQhqIAQgAxCPCyAEQRBqJAALBgBBiI4FCwYAQYiOBQsGAEGgjgULBgBBwI4FC28BA38jAEEQayICJABBACEDAkAgACgCCEEATA0AA0AgAiAAKAIEIANBAnRqKAIANgIMIAJBCGogASACIAJBDGoQwRoiBBDCGiACQQhqEKIMGiAEEKIMGiADQQFqIgMgACgCCEgNAAsLIAJBEGokAAs0AQF/IwBBEGsiAiQAIAJBCGogARDEGhDFGiEBIAAQxhogARDHGhADNgIAIAJBEGokACAACxEAIAAgAUHFBiACEI8YEMMaC0UBAX8jAEEQayIEJAAgBCADEI8YEMgaIQMgACABKAIAIARBCGoQrwwgBEEIahCwDCADEMkaIAIRCAAQpgwaIARBEGokAAsEACAACz4BAX8jAEEQayICJAAgAiAAELYWNgIMIAJBDGogARDEGhDEGigCABDKGhDLGiACQQxqELkWIAJBEGokACAACwUAEMwaCwcAIAAQuxYLOwEBfyMAQRBrIgIkACACIAAQthY2AgwgAkEMaiABEI8YEI8YELwWEJwYIAJBDGoQuRYgAkEQaiQAIAALBwAgABC7FgsEACAACxkAIAAoAgAgATYCACAAIAAoAgBBCGo2AgALBgBB1IIFCwQAQQMLBQAQ0hoLQQEBfyMAQRBrIgMkACAAKAIAIQAgARDRGiEBIANBCGogAhDoFiABIANBCGogABEBACADQQhqEKIMGiADQRBqJAALFQEBf0EEEOAsIgEgACgCADYCACABCwQAIAALBgBB0I4FCykBAX8jAEEQayICJAAgAiABQRRqNgIMIAAgAkEMahCvFxogAkEQaiQACxUBAX9BBBDgLCIBIAAoAgA2AgAgAQspAQF/IwBBEGsiAiQAIAIgAUEcajYCDCAAIAJBDGoQrxcaIAJBEGokAAspAQF/IwBBEGsiAiQAIAIgAUEkajYCDCAAIAJBDGoQrxcaIAJBEGokAAsEAEECCwUAENwaCzwBAX8gARDbGiAAKAIEIgJBAXVqIQEgACgCACEAAkAgAkEBcUUNACABKAIAIABqKAIAIQALIAEgABEEAAsVAQF/QQgQ4CwiASAAKQIANwMAIAELBAAgAAsGAEHcjgULKAEBfyMAQRBrIgIkACACQQhqIAEQyQwgACACQQhqEM0HIAJBEGokAAsEAEEDCwUAEOMaC0EBAX8jAEEQayIDJAAgACgCACEAIAEQ4hohASADQQhqIAIQ6BYgASADQQhqIAARAQAgA0EIahCiDBogA0EQaiQACxUBAX9BBBDgLCIBIAAoAgA2AgAgAQsEACAACwYAQeSOBQsGAEGAjwULBgBBgI8FCwYAQZiPBQsGAEG4jwULMAEBfyMAQRBrIgIkACACIAEoAgBB/////wdxNgIMIAAgAkEMahDpGhogAkEQaiQACzQBAX8jAEEQayICJAAgAkEIaiABEOoaEOsaIQEgABDsGiABEO0aEAM2AgAgAkEQaiQAIAALBAAgAAs7AQF/IwBBEGsiAiQAIAIgABC2FjYCDCACQQxqIAEQ6hoQ6hoQ2BcQohggAkEMahC5FiACQRBqJAAgAAsFABDuGgsHACAAELsWCwYAQdiABgsVAQF/QQQQ4CwiASAAKAIANgIAIAELLAEBfyMAQRBrIgIkACACIAEoAgBBH3Y6AA8gACACQQ9qEPEaGiACQRBqJAALNAEBfyMAQRBrIgIkACACQQhqIAEQ8hoQ8xohASAAEJkNIAEQ9BoQAzYCACACQRBqJAAgAAsEACAACz4BAX8jAEEQayICJAAgAiAAELYWNgIMIAJBDGogARDyGhDyGi0AABDyFhD1GiACQQxqELkWIAJBEGokACAACwcAIAAQuxYLGQAgACgCACABNgIAIAAgACgCAEEIajYCAAspAQF/IwBBEGsiAiQAIAIgASgCKDYCDCAAIAJBDGoQghgaIAJBEGokAAsMACAAIAEQvg82AigLFQEBf0EEEOAsIgEgACgCADYCACABCwYAQdiPBQsGAEHYjwULBgBB8I8FCwYAQZSQBQsrAQF/IwBBEGsiASQAIAFB3SY2AgBBztcEIAEQ1i0aIAAQxgwgAUEQaiQACyYBAX8jAEEQayIAJAAgAEHGJDYCAEHO1wQgABDWLRogAEEQaiQACxUBAX9BBBDgLCIBIAAoAgA2AgAgAQsVAQF/QQQQ4CwiASAAKAIANgIAIAELKQEBfyMAQRBrIgIkACACIAFBIGo2AgwgACACQQxqEK8XGiACQRBqJAALKQEBfyMAQRBrIgIkACACIAFBKGo2AgwgACACQQxqEK8XGiACQRBqJAALPAEBfyMAQRBrIgIkAAJAAkAgASgCMCIBDQAgABDGDAwBCyACIAE2AgwgACACQQxqEIQbGgsgAkEQaiQACzQBAX8jAEEQayICJAAgAkEIaiABEIUbEIYbIQEgABCHGyABEIgbEAM2AgAgAkEQaiQAIAALBAAgAAs7AQF/IwBBEGsiAiQAIAIgABC2FjYCDCACQQxqIAEQhRsQhRsQiRsQihsgAkEMahC5FiACQRBqJAAgAAsFABCLGwsHACAAELsWCwcAIAAoAgALGQAgACgCACABNgIAIAAgACgCAEEIajYCAAsGAEHkgAYLLQEBfyMAQRBrIgIkACAAIAIgAUHKAGoQoREiARCHFxogARD7LBogAkEQaiQACzIBAX8jAEEQayICJAAgAiABEMgPIABBygBqIAIQyQ9BJxDDLBogAhD7LBogAkEQaiQACzwBAX8jAEEQayICJAAgAiABKAJ0IgE2AgwCQAJAIAENACAAEMYMDAELIAAgAkEMahCPGxoLIAJBEGokAAs0AQF/IwBBEGsiAiQAIAJBCGogARCQGxCRGyEBIAAQkhsgARCTGxADNgIAIAJBEGokACAACwQAIAALPgEBfyMAQRBrIgIkACACIAAQthY2AgwgAkEMaiABEJAbEJAbKAIAEJQbEJUbIAJBDGoQuRYgAkEQaiQAIAALBQAQlhsLBwAgABC7FgsEACAACxkAIAAoAgAgATYCACAAIAAoAgBBCGo2AgALBgBBxIcFCwYAQaSQBQsnAAJAIABEAAAAAAAA8EFjIABEAAAAAAAAAABmcUUNACAAqw8LQQALBAAgAAsGAEGokAULDgAgAEQAAAAAAAAAAGILBgBBrJAFCx8AAkAgAJlEAAAAAAAA4EFjRQ0AIACqDwtBgICAgHgLBAAgAAsGAEGwkAULJwACQCAARAAAAAAAAPBBYyAARAAAAAAAAAAAZnFFDQAgAKsPC0EACwYAQcSQBQsGAEHEkAULBgBB3JAFCwYAQfyQBQtrAQJ/IwBBkAFrIgMkAAJAAkAgAhC4D0UNACADQRhqENIHGgwBCyADQRhqIANBEGogAhDSGCIEELYPIAQQogwaCyADIAFBACADQRhqIAIQuA8bEIwqNgIMIAAgA0EMahCPGxogA0GQAWokAAsEAEEDCwUAEKsbC1IBAX8jAEEQayIDJAAgACgCACEAIAEQqhshASADIAIQ6BYgA0EIaiABIAMgABEFACADQQhqELwWIQEgA0EIahCiDBogAxCiDBogA0EQaiQAIAELFQEBf0EEEOAsIgEgACgCADYCACABCwQAIAALBgBBjJEFCwQAQQILBQAQsRsLPwEBfyABELAbIAAoAgQiAkEBdWohASAAKAIAIQACQCACQQFxRQ0AIAEoAgAgAGooAgAhAAsgASAAEQAAEPIWCxUBAX9BCBDgLCIBIAApAgA3AwAgAQsEACAACwYAQZiRBQulAgECfyMAQTBrIgIkACACQQA2AiwgAkF/NgIoIAJBfzYCJCACQX82AiAgASACQSxqIAJBKGogAkEkaiACQSBqEJUqIAAQnwwgAkEYakGnzwAQpwwhASACQQhqIAIoAiQgAigCKGwgAigCIGwgAigCLBCzGyAAIAEgAkEQaiACQQhqELQbIgMQtRsgAxCiDBogARCiDBogACACQQhqQbeQARCnDCIBIAJBGGogAkEoahC2GyIDELUbIAMQogwaIAEQogwaIAAgAkEIakHoNBCnDCIBIAJBGGogAkEkahC2GyIDELUbIAMQogwaIAEQogwaIAAgAkEIakG8igEQpwwiASACQRhqIAJBIGoQthsiAxC1GyADEKIMGiABEKIMGiACQTBqJAALDAAgACABIAIQtxsaCzQBAX8jAEEQayICJAAgAkEIaiABELgbELkbIQEgABC6GyABELsbEAM2AgAgAkEQaiQAIAALNQEBfyMAQRBrIgMkACAAKAIAIANBCGogARDSGCIBKAIAIAIoAgAQAiABEKIMGiADQRBqJAALNAEBfyMAQRBrIgIkACACQQhqIAEQvBsQvRshASAAEL4bIAEQvxsQAzYCACACQRBqJAAgAAsSACAAIAI2AgQgACABNgIAIAALBAAgAAtFAQF/IwBBEGsiAiQAIAIgABC2FjYCBCACQQhqIAEQuBsQuBsQwBsgAkEEaiACQQhqEMEbIAJBBGoQuRYgAkEQaiQAIAALBQAQwhsLBwAgABC7FgsEACAACzsBAX8jAEEQayICJAAgAiAAELYWNgIMIAJBDGogARC8GxC8GxC3FhC4FiACQQxqELkWIAJBEGokACAACwUAEMMbCwcAIAAQuxYLDAAgACABKQIANwIACykAIAAoAgAgASgCADYCACAAKAIAIAEoAgQ2AgQgACAAKAIAQQhqNgIACwYAQcCRBQsGAEHMgAYLBABBAgsFABDIGws/AQF/IwBBEGsiAiQAIAAoAgAhACACQQhqIAEQqhsgABEBACACQQhqELwWIQEgAkEIahCiDBogAkEQaiQAIAELFQEBf0EEEOAsIgEgACgCADYCACABCwYAQciRBQspAQF/IwBBEGsiAiQAIAIgASgCBDYCDCAAIAJBDGoQghgaIAJBEGokAAsMACAAIAEQvg82AgQLFQEBf0EEEOAsIgEgACgCADYCACABCxUBAX9BBBDgLCIBIAAoAgA2AgAgAQspAQF/IwBBEGsiAiQAIAIgAUEgajYCDCAAIAJBDGoQrxcaIAJBEGokAAtyAQN/IwBBEGsi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CQAgACABEJkFCwUAEJ0FCzEBAX8jAEEQayIDJAAgABDJDyEAIANBCGogARDJDCAAIANBCGogAhCVBSADQRBqJAALBgBBoJkFCzEBAX8jAEEQayIDJAAgABDJDyEAIANBCGogARDJDCAAIANBCGogAhCYBSADQRBqJAALDgAgABDJDyABIAIQnAULBgBBsJkFCwoAIAAQyQ8QngULNQEBfyMAQRBrIgIkACACQQhqENYEIAAgAkEIaiACIAEQ0hgiARDKDCABEKIMGiACQRBqJAALNQEBfyMAQRBrIgIkACACQQhqENMFIAAgAkEIaiACIAEQ0hgiARDKDCABEKIMGiACQRBqJAALNQEBfyMAQRBrIgIkACACQQhqENQFIAAgAkEIaiACIAEQ0hgiARDKDCABEKIMGiACQRBqJAALNQEBfyMAQRBrIgIkACACQQhqENUFIAAgAkEIaiACIAEQ0hgiARDKDCABEKIMGiACQRBqJAALBgBBwJkFCx4BAX9BACEBAkAgABC4Dw0AIAAQqRkhAQsgARD5BAtwAQN/IwBBIGsiAiQAIAJBCGogARDpHiACQQhqIAJBGGpBhOsAEKcMIgMQ0wwhBCADEKIMGiACQQhqEKIMGgJAAkAgBEUNACAAIAEQxQ8QrwEMAQsgAkEIaiABEOgMIAAgAkEIahC0AQsgAkEgaiQACwYAQdSZBQsGAEHgmQULYQEDfyMAQRBrIgIkACACIAEQ6R4gAiACQQhqQYTrABCnDCIDENMMIQQgAxCiDBogAhCiDBoCQAJAIARFDQAgACABEMAMELgBDAELIAIgARDJDCAAIAIQvwELIAJBEGokAAsGAEHomQULJwEBfyMAQRBrIgEkACABEKYFNgIMIAAgAUEMahCPGxogAUEQaiQACzUBAX8jAEEQayICJAAgAkEIahCoBSAAIAJBCGogAiABENIYIgEQygwgARCiDBogAkEQaiQACwwAIAAgARDADBCrAQsGAEHwmQULJAEBfyMAQRBrIgEkACABIAAQ6AwgARCsASEAIAFBEGokACAACwYAQfyZBQsHACAAEK4BCwYAQYSaBQspAQF/IwBBEGsiAiQAIAIgARCtATYCDCAAIAJBDGoQ+BcaIAJBEGokAAsGAEGMmgULJgEBfyMAQRBrIgEkACABQQhqIAAQyQwgAUEIahDACSABQRBq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ACgCABCbJgsQACAAKAIEIAAoAgBrQQN1CwoAIAAQnCYaIAALOAEBfwJAIAAQoCEiAiABTw0AIAAgASACaxCdJg8LAkAgAiABTQ0AIAAgACgCACABQQN0ahCeJgsLDAAgACABIAIQnyYaCzQBAX8jAEEQayICJAAgAkEIaiABEKAmEKEmIQEgABCiJiABEKMmEAM2AgAgAkEQaiQAIAALEQAgACgCACABIAIQoCYQ6SYLDwAgABDAJiAAEOomGiAACwQAIAALPQEBfyMAQRBrIgEkACAAELEhGiAAQgA3AgAgAUEANgIMIABBCGogAUEMaiABQQhqELIhGiABQRBqJAAgAAttAQJ/IwBBIGsiAiQAAkACQCAAELchKAIAIAAoAgRrIAFJDQAgACABELghDAELIAAQuSEhAyACQQhqIAAgABDpICABahC6ISAAEOkgIAMQuyEiAyABELwhIAAgAxC9ISADEL4hGgsgAkEgaiQACyABAX8gACABEL8hIAAQ6SAhAiAAIAEQwCEgACACEMEhCxIAIAAgAjYCBCAAIAE2AgAgAAsEACAAC0UBAX8jAEEQayICJAAgAiAAELYWNgIEIAJBCGogARCsIRCsIRD6ISACQQRqIAJBCGoQ+yEgAkEEahC5FiACQRBqJAAgAAsFABD8IQsHACAAELsWCy0BAX8jAEEQayIDJAAQ/SEgACABIANBCGogAhCNHhCPHhCSHhAWIANBEGokAAsEACAACxsAIAAgARCzIRC0IRogAhC+FhogABC1IRogAAsEACAACxEAIAEQsyEaIABBADYCACAACwoAIAAQtiEaIAALBAAgAAsKACAAQQhqEMIhC1oBA38jAEEQayICJAACQCACIAAgARDDISIDKAIEIgEgAygCCCIERg0AA0AgABC5ISABEKchEMQhIAMgAUEBaiIBNgIEIAEgBEcNAAsLIAMQxSEaIAJBEGokAAsKACAAQQhqEMYhC2EBAn8jAEEQayICJAAgAiABNgIMAkAgABDHISIDIAFJDQACQCAAEMghIgAgA0EBdk8NACACIABBAXQ2AgggAkEIaiACQQxqEMkhKAIAIQMLIAJBEGokACADDwsgABCELQALbAECfyMAQRBrIgQkAEEAIQUgBEEANgIMIABBDGogBEEMaiADEMohGgJAIAFFDQAgABDLISABEMwhIQULIAAgBTYCACAAIAUgAmoiAjYCCCAAIAI2AgQgABDNISAFIAFqNgIAIARBEGokACAAC2IBAn8jAEEQayICJAACQCACIABBCGogARDOISIBKAIAIAEoAgRGDQADQCAAEMshIAEoAgAQpyEQxCEgASABKAIAQQFqIgM2AgAgAyABKAIERw0ACwsgARDPIRogAkEQaiQAC1wBAX8gABDQISAAELkhIAAoAgAgACgCBCABQQRqIgIQ0SEgACACENIhIABBBGogAUEIahDSISAAELchIAEQzSEQ0iEgASABKAIENgIAIAAgABDpIBDTISAAENQhCyYAIAAQ1SECQCAAKAIARQ0AIAAQyyEgACgCACAAENYhENchCyAACwIACzYBAX8CQCAAKAIEIgIgAUYNAANAIAAQuSEgAkF/aiICEKchEPchIAIgAUcNAAsLIAAgATYCBAsqACAAIAAQ8CEgABDwISAAEMghaiAAEPAhIAFqIAAQ8CEgABDpIGoQ8SELBwAgABDYIQshACAAIAE2AgAgACABKAIEIgE2AgQgACABIAJqNgIIIAALCQAgACABENkhCxEAIAAoAgAgACgCBDYCBCAACwcAIAAQ2iELPQEBfyMAQRBrIgEkACABIAAQ2yEQ3CE2AgwgARDdITYCCCABQQxqIAFBCGoQ3iEoAgAhACABQRBqJAAgAAsHACAAEN8hCwkAIAAgARDgIQsdACAAIAEQsyEQtCEaIABBBGogAhDqIRDrIRogAAsKACAAQQxqEO0hCwkAIAAgARDsIQsKACAAQQxqEO4hCygBAX8gACABKAIANgIAIAEoAgAhAyAAIAE2AgggACADIAJqNgIEIAALEQAgACgCCCAAKAIANgIAIAALLQAgACAAEPAhIAAQ8CEgABDIIWogABDwISAAEOkgaiAAEPAhIAAQyCFqEPEhCywBAX8gAyADKAIAIAIgAWsiAmsiBDYCAAJAIAJBAUgNACAEIAEgAhDQLRoLCz4BAX8jAEEQayICJAAgAiAAEPIhKAIANgIMIAAgARDyISgCADYCACABIAJBDGoQ8iEoAgA2AgAgAkEQaiQACyoAIAAgABDwISAAEPAhIAAQyCFqIAAQ8CEgABDIIWogABDwISABahDxIQsCAAsMACAAIAAoAgQQ8yELEAAgABD1ISgCACAAKAIAawsLACAAIAEgAhD0IQsEACAACwkAIAFBADoAAAsEACAACwoAIABBCGoQ4yELBwAgABDiIQsFABDkIQsJACAAIAEQ4SELEAAgABDnISgCACAAKAIAawspAQJ/IwBBEGsiAiQAIAJBCGogACABEOUhIQMgAkEQaiQAIAEgACADGwspAQJ/IwBBEGsiAiQAIAJBCGogASAAEOUhIQMgAkEQaiQAIAEgACADGwsEAEF/CwcAIAAQ5iELCABB/////wcLDQAgASgCACACKAIASQsEACAACwoAIABBCGoQ6CELBwAgABDpIQsEACAACwQAIAALDgAgACABEOohNgIAIAALHgACQCAAENwhIAFPDQBBobQBEMcWAAsgAUEBEMkWCwoAIABBBGoQ7yELBwAgABDYIQsHACAAKAIACwoAIAAoAgAQpyELAgALBAAgAAsJACAAIAEQ9iELCwAgASACQQEQqxYLCgAgAEEMahD5IQs+AQJ/AkAgACgCCCABRg0AA0AgABDLISECIAAgACgCCEF/aiIDNgIIIAIgAxCnIRD3ISAAKAIIIAFHDQALCwsJACAAIAEQ+CELAgALBwAgABDpIQsMACAAIAEpAgA3AgALKQAgACgCACABKAIANgIAIAAoAgAgASgCBDYCBCAAIAAoAgBBCGo2AgALBgBBmKMFCzMAAkBBAC0AjJMHQQFxDQBBjJMHEIYtRQ0AQQAQ/iE2AoiTB0GMkwcQji0LQQAoAoiTBwsqAQJ/IwBBEGsiACQAIABBCGoQ/yEgAEEIahCAIhAXIQEgAEEQaiQAIAELBABBAgsFABCBIgsGAEGgowULDwAgACAAKAIIEIMiOgAECwcAIAAQhCILSgICfwF8IwBBEGsiASQAIAAoAgAgAUEIahCFIigCACABQQRqEAchAyABIAEoAgQQwwwhACADEIYiIQIgABDFDBogAUEQaiQAIAILBQAQhyILCgAgABCIIhCJIgsGAEHcowULHwACQCAAmUQAAAAAAADgQWNFDQAgAKoPC0GAgICAeAsEACAACy0BAX8jAEEQayIDJAAQjCIgACABIANBCGogAhCsIRCtIRCvIRAWIANBEGokAAsmAAJAIAAoAgBFDQAgABCRIiAAELkhIAAoAgAgABDfIRDXIQsgAAszAAJAQQAtAJSTB0EBcQ0AQZSTBxCGLUUNAEEAEI0iNgKQkwdBlJMHEI4tC0EAKAKQkwcLKgECfyMAQRBrIgAkACAAQQhqEI4iIABBCGoQjyIQFyEBIABBEGokACABCwQAQQILBQAQkCILBgBB4KMFCwwAIAAgACgCABDAIQsEACAACz0BAX8jAEEQayIBJAAgABCxIRogAEIANwIAIAFBADYCDCAAQQhqIAFBDGogAUEIahCWIhogAUEQaiQAIAALbQECfyMAQSBrIgIkAAJAAkAgABCaIigCACAAKAIEayABSQ0AIAAgARCbIgwBCyAAEJwiIQMgAkEIaiAAIAAQ8iAgAWoQnSIgABDyICADEJ4iIgMgARCfIiAAIAMQoCIgAxChIhoLIAJBIGokAAsgAQF/IAAgARCiIiAAEPIgIQIgACABEKMiIAAgAhCkIgsbACAAIAEQsyEQlyIaIAIQvhYaIAAQmCIaIAALEQAgARCzIRogAEEANgIAIAALCgAgABCZIhogAAsEACAACwoAIABBCGoQpSILWgEDfyMAQRBrIgIkAAJAIAIgACABEKYiIgMoAgQiASADKAIIIgRGDQADQCAAEJwiIAEQkiIQpyIgAyABQQFqIgE2AgQgASAERw0ACwsgAxCoIhogAkEQaiQACwoAIABBCGoQqSILYQECfyMAQRBrIgIkACACIAE2AgwCQCAAEKoiIgMgAUkNAAJAIAAQqyIiACADQQF2Tw0AIAIgAEEBdDYCCCACQQhqIAJBDGoQySEoAgAhAwsgAkEQaiQAIAMPCyAAEIQtAAtsAQJ/IwBBEGsiBCQAQQAhBSAEQQA2AgwgAEEMaiAEQQxqIAMQrCIaAkAgAUUNACAAEK0iIAEQriIhBQsgACAFNgIAIAAgBSACaiICNgIIIAAgAjYCBCAAEK8iIAUgAWo2AgAgBEEQaiQAIAALYgECfyMAQRBrIgIkAAJAIAIgAEEIaiABELAiIgEoAgAgASgCBEYNAANAIAAQrSIgASgCABCSIhCnIiABIAEoAgBBAWoiAzYCACADIAEoAgRHDQALCyABELEiGiACQRBqJAALXAEBfyAAELIiIAAQnCIgACgCACAAKAIEIAFBBGoiAhCzIiAAIAIQtCIgAEEEaiABQQhqELQiIAAQmiIgARCvIhC0IiABIAEoAgQ2AgAgACAAEPIgELUiIAAQtiILJgAgABC3IgJAIAAoAgBFDQAgABCtIiAAKAIAIAAQuCIQuSILIAALAgALNgEBfwJAIAAoAgQiAiABRg0AA0AgABCcIiACQX9qIgIQkiIQ0yIgAiABRw0ACwsgACABNgIECyoAIAAgABDMIiAAEMwiIAAQqyJqIAAQzCIgAWogABDMIiAAEPIgahDNIgsHACAAELoiCyEAIAAgATYCACAAIAEoAgQiATYCBCAAIAEgAmo2AgggAAsJACAAIAEQuyILEQAgACgCACAAKAIENgIEIAALBwAgABC8Igs9AQF/IwBBEGsiASQAIAEgABC9IhC+IjYCDCABEN0hNgIIIAFBDGogAUEIahDeISgCACEAIAFBEGokACAACwcAIAAQvyILHQAgACABELMhEJciGiAAQQRqIAIQxiIQxyIaIAALCgAgAEEMahDJIgsJACAAIAEQyCILCgAgAEEMahDKIgsoAQF/IAAgASgCADYCACABKAIAIQMgACABNgIIIAAgAyACajYCBCAACxEAIAAoAgggACgCADYCACAACy0AIAAgABDMIiAAEMwiIAAQqyJqIAAQzCIgABDyIGogABDMIiAAEKsiahDNIgssAQF/IAMgAygCACACIAFrIgJrIgQ2AgACQCACQQFIDQAgBCABIAIQ0C0aCws+AQF/IwBBEGsiAiQAIAIgABDOIigCADYCDCAAIAEQziIoAgA2AgAgASACQQxqEM4iKAIANgIAIAJBEGokAAsqACAAIAAQzCIgABDMIiAAEKsiaiAAEMwiIAAQqyJqIAAQzCIgAWoQzSILAgALDAAgACAAKAIEEM8iCxAAIAAQ0SIoAgAgACgCAGsLCwAgACABIAIQ0CILBAAgAAsJACABQQA6AAALBAAgAAsKACAAQQhqEMEiCwcAIAAQwCILEAAgABDDIigCACAAKAIAawsEAEF/CwcAIAAQwiILBAAgAAsKACAAQQhqEMQiCwcAIAAQxSILBAAgAAsEACAACw4AIAAgARDGIjYCACAACx4AAkAgABC+IiABTw0AQaG0ARDHFgALIAFBARDJFgsKACAAQQRqEMsiCwcAIAAQuiILBwAgACgCAAsKACAAKAIAEJIiCwIACwQAIAALCQAgACABENIiCwsAIAEgAkEBEKsWCwoAIABBDGoQ1SILPgECfwJAIAAoAgggAUYNAANAIAAQrSIhAiAAIAAoAghBf2oiAzYCCCACIAMQkiIQ0yIgACgC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GiACQRBqJAALXAEBfyAAEJYlIAAQgCUgACgCACAAKAIEIAFBBGoiAhCXJSAAIAIQmCUgAEEEaiABQQhqEJglIAAQ/iQgARCTJRCYJSABIAEoAgQ2AgAgACAAEJAhEJklIAAQmiULJgAgABCbJQJAIAAoAgBFDQAgABCRJSAAKAIAIAAQnCUQnSULIAALAgALNgEBfwJAIAAoAgQiAiABRg0AA0AgABCAJSACQXxqIgIQ8SQQtyUgAiABRw0ACwsgACABNgIECzMAIAAgABCwJSAAELAlIAAQjyVBAnRqIAAQsCUgAUECdGogABCwJSAAEJAhQQJ0ahCxJQsHACAAEJ4lCyQAIAAgATYCACAAIAEoAgQiATYCBCAAIAEgAkECdGo2AgggAAsJACAAIAEQnyULEQAgACgCACAAKAIENgIEIAALBwAgABCgJQs9AQF/IwBBEGsiASQAIAEgABChJRCiJTYCDCABEN0hNgIIIAFBDGogAUEIahDeISgCACEAIAFBEGokACAACwcAIAAQoyULHQAgACABELMhEPskGiAAQQRqIAIQqiUQqyUaIAALCgAgAEEMahCtJQsJACAAIAEQrCULCgAgAEEMahCuJQsrAQF/IAAgASgCADYCACABKAIAIQMgACABNgIIIAAgAyACQQJ0ajYCBCAACxEAIAAoAgggACgCADYCACAACzYAIAAgABCwJSAAELAlIAAQjyVBAnRqIAAQsCUgABCQIUECdGogABCwJSAAEI8lQQJ0ahCxJQssAQF/IAMgAygCACACIAFrIgJrIgQ2AgACQCACQQFIDQAgBCABIAIQ0C0aCws+AQF/IwBBEGsiAiQAIAIgABCyJSgCADYCDCAAIAEQsiUoAgA2AgAgASACQQxqELIlKAIANgIAIAJBEGokAAszACAAIAAQsCUgABCwJSAAEI8lQQJ0aiAAELAlIAAQjyVBAnRqIAAQsCUgAUECdGoQsSULAgALDAAgACAAKAIEELMlCxMAIAAQtSUoAgAgACgCAGtBAnULCwAgACABIAIQtCULBAAgAAsJACABQQA2AgALBAAgAAsKACAAQQhqEKUlCwcAIAAQpCULEwAgABCnJSgCACAAKAIAa0ECdQsIAEH/////AwsHACAAEKYlCwQAIAALCgAgAEEIahCoJQsHACAAEKklCwQAIAALBAAgAAsO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IAVBCGogAxDJDCAAIAEgAiAFQQhqIAQQ3wchASAFQRBqJAAgAQsGAEGAsAULBQAQmggLCQAgACABELgICwYAQaCwBQsFABC9CAsHACAAELsICxAAIAAQyQ8gASACIAMQrwgLBgBBsLAFCwkAIAAgARCwCAsGAEHMsAULBQAQzAgLCgAgABDJDxDNCAsnAQF/IwBBEGsiASQAIAEQxAg2AgwgACABQQxqEKooGiABQRBqJAALNAEBfyMAQRBrIgIkACACQQhqIAEQqygQrCghASAAEK0oIAEQrigQAzYCACACQRBqJAAgAAsEACAACz4BAX8jAEEQayICJAAgAiAAELYWNgIMIAJBDGogARCrKBCrKCgCABCvKBCwKCACQQxqELkWIAJBEGokACAACwUAELEoCwcAIAAQuxYLBAAgAAsZACAAKAIAIAE2AgAgACAAKAIAQQhqNgIACwYAQfiABQsFABCxCAsFABC6CAsFABC3CAsNACAAIAEQsggQoREaCwYAQdiwBQsHACAAELQICwYAQeCwBQsLACAAIAEgAhC2CAsGAEHwsAULMAEBfyMAQSBrIgMkACAAIANBCGogARDiHyIBEOMfIAIQgQkgARDkHxogA0EgaiQACwYAQYCxBQsGAEGQsQULDAAgABDJDyABEMoLCzQBAX8jAEEQayIDJAAgABDJDyADIAEQwh4iARDDHiACEOgLIQIgARDEHhogA0EQaiQAIAILDAAgABDJDyABEPELCwoAIAAQyQ8Q9QsLLgEBfyMAQSBrIgIkACAAIAJBCGogARDiHyIBEOMfEIQGIAEQ5B8aIAJBIGokAAsnAQF/IwBBEGsiASQAIAEgABDJDzYCAEGX4gAgARDIASABQRBqJAALEAAgABDJD0EAQQAgARD5BQsGAEGgsQULDwAgABDJDyABEP4FQQBHCwcAIAAQxgwLMQEBfyMAQRBrIgMkACADQQhqIAAQyQwgAyABEMkMIANBCGogAyACEOoDIANBEGokAAsGAEHAsQULNQEBfyMAQRBrIgIkACACQQhqENIEIAAgAkEIaiACIAEQ0hgiARDKDCABEKIMGiACQRBqJAALNQEBfyMAQRBrIgIkACACQQhqENMEIAAgAkEIaiACIAEQ0hgiARDKDCABEKIMGiACQRBqJAALNQEBfyMAQRBrIgIkACACQQhqENQE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rgcQpAoaQaf4A0GciAdDCtejO0MAAAAAQ///f39BvqYBQQAoAryuBxCkChpBvI0EQZyIB0MK16M7Q///f/9DAACAP0G+pgFBACgCvK4HEKQKGkGO+ANBnIgHQwrXoztD//9//0P//39/Qb6mAUEAKAK8rgcQpAoaQfKOBEGgiAdDAAAAP0EAQeQAQcP5AUEAKAK8rgcQqQoaIABBACoCpIgHuzkDkAJBqbIBIABBkAJqEJEJQdKNBEGkiAdDAAAAAEMAAIA/Qb6mAUEAKAK8rgcQugoaQd2OBEGoiAdBAEHkAEHD+QFBACgCvK4HEL8KGhChCwsCQEHcxAAQmQtFDQBBpD1BrIgHQbCIB0MAAIA+QwAAAABDAADIQkH2ngRB6Z4EQRAQqAoaQfIwQbSIB0G4iAdDAACgQEEAQegHQdPDAEHFwwBBABCtChpBiO0DQbSIB0G4iAdDAACgQEEAQQBB08MAQcXDAEEAEK0KGhChCwsCQEGE1wAQmQtFDQAgAEEAOgC/ByAAQQE6AL4HIABBMjoAvQcgAEGAAToAvAcgAEH/ADoAuwcgAEEAOgC6ByAAQQE6ALkHIABBMjoAuAcgAEEAOgC3ByAAQf8BOgC2ByAAQQA7AbQHIABBATsBsgcgAEEyOwGwByAAQYCAAjsBrgcgAEH//wE7AawHIABBADsBqgcgAEEBOwGoByAAQTI7AaYHIABBADsBpAcgAEH//wM7AaIHIABBADYCnAcgAEEBNgKYByAAQTI2ApQHIABBgICAgHw2ApAHIABB/////wM2AowHIABBm////wM2AogHIABB/////wM2AoQHIABBADYCgAcgAEEBNgL8BiAAQTI2AvgGIABBADYC9AYgAEH/////BzYC8AYgAEGb////BzYC7AYgAEH/////BzYC6AYgAEIANwOQCCAAQgE3A4AJIABCMjcD8AggAEKAgICAgICAgEA3A+gIIABC//////////8/NwPgCCAAQpv/////////PzcD2AggAEL//////////z83A9AIIABCADcDyAggAEIBNwPgBiAAQjI3A9gGIABCADcD0AYgAEL///////////8ANwPIBiAAQpv//////////wA3A8AGIABC////////////ADcDuAYgAEEANgK0BiAAQYCAgPwDNgKwBiAAQfmF1IB9NgKsBiAAQfmF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IgIgAUsNACACIAAoAgAiA0ECdGoiBCABTQ0AIAEgAmtBAnUhBQJAIARBfGoiBCABTQ0AIAIgBUECdGogBCgCADYCACAAKAIIIQIgACgCACEDCyAAIANBf2o2AgAgAiAFQQJ0ag8LQf29AUGVlwFB9gxBqeUBEAAACxIAIABBADYCCCAAQgA3AgAgAAsSACAAQQA2AgggAEIANwIAIAALQgECfyAAQYACaiEBQQAhAgJAIAAoAoACQQBMDQADQCABIAIQuiooAgAQxS0gAkEBaiICIAEoAgBIDQALCyABEMAqC0wBAX8CQCAAKAIAIgIgACgCBEcNACAAIAAgAkEBahDBKhDCKiAAKAIAIQILIAAoAgggAkECdGogASgCADYCACAAIAAoAgBBAWo2AgALUAEBfyMAQZAIayIDJAAgAyACNgIMIANBEGpBgAggASACEI4sGiADQQA6AI8IIAMgA0EQahDDKjYCCCAAQYACaiADQQhqEMQqIANBkAhqJAALaAECfyAAELYqIABBmAJqIQFBACECAkAgACgCmAJBAEwNAANAIAEgAhC6KigCABDFLSACQQFqIgIgASgCAEgNAAsLIABBqAJqEIAqGiABELsqGiAAQYwCahC8KhogAEGAAmoQuyoaIAALNgACQAJAIAFBAEgNACAAKAIAIAFKDQELQcq9AUGVlwFB3AxB/4ACEAAACyAAKAIIIAFBAnRqCxcBAX8CQCAAKAIIIgFFDQAgARBXCyAACxcBAX8CQCAAKAIIIgFFDQAgARBXCyAACwwAIAAoAgggABDHKgszAQJ/IAAgABDZLWohAQJAA0AgASICIABNDQEgAkF/aiIBLQAAQSBGDQALCyACQQA6AAALjgMBA38jAEHAAGsiAiQAIAIgATYCMCAAQd7XBCACQTBqELgqIABBfzYCpAIgAEGYAmohAyAAKAKYAiEEAkADQCAEQQFIDQEgAyAEQX9qIgQQuiooAgAgARDIKg0ACyADIAQQuiooAgAQxS0gAyADEMkqIARBAnRqEMoqGgsgAiABEMMqNgI8IAMgAkE8ahDEKgJAAkAgAUHEjQIQyCoNACAAELYqDAELAkAgAUHKjQIQyCoNAEEAIQQgAEHlowJBABC4KiAAKAKMAkEBSA0BIABBjAJqIQMDQCACIAMgBBDLKigCADYCACAAQePhACACELgqIARBAWoiBCAAKAKMAkgNAAwCCwALAkAgAUHeggIQyCoNACADKAIAIgFBCiABQQpKG0F2aiIEIAFODQEDQCACIAMgBBC6KigCADYCFCACIAQ2AhAgAEHF1wQgAkEQahC4KiAEQQFqIgQgACgCmAJIDQAMAgsACyACIAE2AiAgAEHd4wQgAkEgahC4KgsgAEEBOgC5BCACQcAAaiQACyMBAX8CQCAAKAIIIgFFDQAgAEIANwIAIAEQVyAAQQA2AggLCysAAkACQCAAKAIEIgANAEEIIQAMAQsgAEECbSAAaiEACyAAIAEgACABShsLTAECfwJAIAAoAgQgAU4NACABQQJ0EFUhAgJAIAAoAggiA0UNACACIAMgACgCAEECdBDQLRogACgCCBBXCyAAIAE2AgQgACACNgIICwtPAQJ/AkACQCAARQ0AIAAQ2S1BAWoiARDELSICRQ0BIAIgACABENAtDwtBmOIAQZLxAEGdMEHQ8AAQAAALQbmkAUGS8QBBnTBB0PAAEAAAC0wBAX8CQCAAKAIAIgIgACgCBEcNACAAIAAgAkEBahDFKhDGKiAAKAIAIQILIAAoAgggAkECdGogASgCADYCACAAIAAoAgBBAWo2AgALKwACQAJAIAAoAgQiAA0AQQghAAwBCyAAQQJtIABqIQALIAAgASAAIAFKGwtMAQJ/AkAgACgCBCABTg0AIAFBAnQQVSECAkAgACgCCCIDRQ0AIAIgAyAAKAIAQQJ0ENAtGiAAKAIIEFcLIAAgATYCBCAAIAI2AggLC4IGAQh/IwBBMGsiAiQAAkACQAJAIAEoAgAiA0GAAUYNACADQcAARw0CIAEoAhQiBCABKAIkaiIFIQMCQANAIAMiBiAETQ0BAkAgBkF/aiIDLQAAIgdBYGoiCEEbSw0AQQEgCHRBgaCAwABxDQILIAdBCUcNAAsLIAUgBmshBCACQSBqELUqIQhBACEDAkAgACgCjAJBAEwNACAAQYwCaiEHA0ACQCAHIAMQyyooAgAgBiAEEMwqDQAgCCAHIAMQyyoQtyoLIANBAWoiAyAHKAIASA0ACwsgBCEFAkACQAJAIAgoAgAiCQ4CAAECCyACIAY2AhQgAiAENgIQIABB9OMEIAJBEGoQuCoMAwsgASAGIAEoAhRrIAQQ/wogASABKAIkIAhBABDLKigCAEEAEIALIAEgASgCJEGr1wRBABCACwwCCwNAQQAhA0EAIQcCQCAJQQBMDQACQANAAkACQCADDQAgCEEAEMsqKAIAIAVqLAAAEM0rIQcMAQsgB0UNAiAHIAggAxDLKigCACAFaiwAABDNK0cNAgsgA0EBaiIDIAgoAgAiCU4NAgwACwALAkAgBUEBSA0AIAEgBiABKAIUayAEEP8KIAEgASgCJCAIQQAQyyooAgAgCEEAEMsqKAIAIAVqEIALC0EAIQMgAEGa3gRBABC4KiAIKAIAQQFIDQMDQCACIAggAxDLKigCADYCACAAQdjXBCACELgqIANBAWoiAyAIKAIASA0ADAQLAAsgBUEBaiEFDAALAAsgACgCpAIhAwJAAkACQAJAAkAgASgCEEF9ag4CAAEGCwJAIANBf0cNACAAKAKYAkF/aiEHDAILIANBAUgNBSAAIANBf2oiBzYCpAIMAgsgA0F/Rg0EIANBAWoiB0F/IAcgACgCmAJIGyEHCyAAIAc2AqQCIAMgB0YNAyAHQQBODQBB1+QEIQMMAQsgAEGYAmogBxC6KigCACEDCyABQQAgASgCGBD/CiABQQAgA0EAEIALDAELIAgQvCoaCyACQTBqJABBAAtRAQJ/AkAgASwAABDNKyAALAAAIgIQzStrIgMNACACRQ0AA0AgASwAARDNKyAALAABIgIQzStrIgMNASABQQFqIQEgAEEBaiEAIAINAAsLIAMLBwAgACgCCAttAQJ/AkACQCAAKAIIIgIgAUsNACACIAAoAgAiA0ECdGogAUsNAQtB/b0BQZWXAUH0DEG7xgEQAAALIAEgAUEEaiADIAEgAmsiAkECdkF/c2pBAnQQ0i0aIAAgACgCAEF/ajYCACAAKAIIIAJqCzYAAkACQCABQQBIDQAgACgCACABSg0BC0HKvQFBlZcBQdwMQf+AAhAAAAsgACgCCCABQQJ0agtWAQJ/AkACQCACQQFIDQADQCABLAAAEM0rIAAsAAAiAxDNK2siBA0CIANFDQEgAUEBaiEBIABBAWohACACQQFKIQMgAkF/aiECIAMNAAsLQQAhBAsgBAs1AQF/IwBBEGsiASQAIAAQ5wIgAEGcAmoiABCMAiABQQA2AgwgACABQQxqEJkDIAFBEGokAAsdACAAQZwCahDTBhogAEEMahCAKhogABDDBhogAAsoAAJAIAAoAggiAA0AQcyRAkGVlwFBgRBB/4ACEAAACyAAIAFqLAAACw4AIABBgAJqEJcBQQFzCzABAX8CQCAAKAIAIgFBAEoNAEHXvgJBlZcBQecMQeWOARAAAAsgASAAKAIIakF/agsSACAAQQA2AgggAEIANwIAIAALRQEBfyAAQQhqEDAhBCAAIAI6AAUgACABNgIAIABBADsBBiAAIAI6AAQgBCADKQIANwIAIARBCGogA0EIaikCADcCACAAC24BAX8CQCAAKAIAIgIgACgCBEcNACAAIAAgAkEBahDaKhDbKiAAKAIAIQILIAAoAgggAkEYbGoiAiABKQIANwIAIAJBEGogAUEQaikCADcCACACQQhqIAFBCGopAgA3AgAgACAAKAIAQQFqNgIACwoAIAAQ1ioaIAALFwEBfwJAIAAoAggiAUUNACABEFcLIAALFwEBfwJAIAAoAggiAUUNACABEFcLIAALKwACQAJAIAAoAgQiAA0AQQghAAwBCyAAQQJtIABqIQALIAAgASAAIAFKGwtMAQJ/AkAgACgCBCABTg0AIAFBAnQQVSECAkAgACgCCCIDRQ0AIAIgAyAAKAIAQQJ0ENAtGiAAKAIIEFcLIAAgATYCBCAAIAI2AggLCysAAkACQCAAKAIEIgANAEEIIQAMAQsgAEECbSAAaiEACyAAIAEgACABShsLTAECfwJAIAAoAgQgAU4NACABQRhsEFUhAgJAIAAoAggiA0UNACACIAMgACgCAEEYbBDQLRogACgCCBBXCyAAIAE2AgQgACACNgIICwsFABCGKgtFAQh/IwAhAUEQIQIgASACayEDIAMkACADIAA2AgwgAygCDCEEIAQQ3iohBSAFEMAsIQZBECEHIAMgB2ohCCAIJAAgBg8LOQEGfyMAIQFBECECIAEgAmshAyADIAA2AgggAygCCCEEIAQoAgQhBSADIAU2AgwgAygCDCEGIAYPC4oEATh/EOAqIQBBq+MBIQEgACABEBkQmQ0hAkGHhwEhA0EBIQRBASEFQQAhBkEBIQcgBSAHcSEIQQEhCSAGIAlxIQogAiADIAQgCCAKEBpBwusAIQsgCxDhKkG76wAhDCAMEOIqQbnrACENIA0Q4ypB7CkhDiAOEOQqQeMpIQ8gDxDlKkGFMSEQIBAQ5ipB/DAhESAREOcqQZeZASESIBIQ6CpBjpkBIRMgExDpKkGxPiEUIBQQ6ipBsD4hFSAVEOsqQao9IRYgFhDsKkH90gEhFyAXEO0qEP8PIRhBhZoBIRkgGCAZEBsQ7iohGkGqnwIhGyAaIBsQGxDvKiEcQQQhHUHrmQEhHiAcIB0gHhAcEPAqIR9BAiEgQZGaASEhIB8gICAhEBwQ8SohIkEEISNBoJoBISQgIiAjICQQHBCSDSElQd2LASEmICUgJhAdQeWeAiEnICcQ8ipBy58CISggKBDzKkGDnwIhKSApEPQqQfWbAiEqICoQ9SpBlJwCISsgKxD2KkG8nAIhLCAsEPcqQdmcAiEtIC0Q+CpB+p8CIS4gLhD5KkGYoAIhLyAvEPoqQb+dAiEwIDAQ8ypBnp0CITEgMRD0KkGBngIhMiAyEPUqQd+dAiEzIDMQ9ipBxJ4CITQgNBD3KkGingIhNSA1EPgqQf+cAiE2IDYQ+ypB7aACITcgNxD8Kg8LDAEBfxD9KiEAIAAPC3gBEH8jACEBQRAhAiABIAJrIQMgAyQAIAMgADYCDBD+KiEEIAMoAgwhBRD/KiEGQRghByAGIAd0IQggCCAHdSEJEIArIQpBGCELIAogC3QhDCAMIAt1IQ1BASEOIAQgBSAOIAkgDRAeQRAhDyADIA9qIRAgECQADwt4ARB/IwAhAUEQIQIgASACayEDIAMkACADIAA2AgwQgSshBCADKAIMIQUQgishBkEYIQcgBiAHdCEIIAggB3UhCRCDKyEKQRghCyAKIAt0IQwgDCALdSENQQEhDiAEIAUgDiAJIA0QHkEQIQ8gAyAPaiEQIBAkAA8LbAEOfyMAIQFBECECIAEgAmshAyADJAAgAyAANgIMEIQrIQQgAygCDCEFEIUrIQZB/wEhByAGIAdxIQgQhishCUH/ASEKIAkgCnEhC0EBIQwgBCAFIAwgCCALEB5BECENIAMgDWohDiAOJAAPC3gBEH8jACEBQRAhAiABIAJrIQMgAyQAIAMgADYCDBDUDSEEIAMoAgwhBRCHKyEGQRAhByAGIAd0IQggCCAHdSEJEIgrIQpBECELIAogC3QhDCAMIAt1IQ1BAiEOIAQgBSAOIAkgDRAeQRAhDyADIA9qIRAgECQADwtuAQ5/IwAhAUEQIQIgASACayEDIAMkACADIAA2AgwQjg0hBCADKAIMIQUQiSshBkH//wMhByAGIAdxIQgQiishCUH//wMhCiAJIApxIQtBAiEMIAQgBSAMIAggCxAeQRAhDSADIA1qIQ4gDiQADwtUAQp/IwAhAUEQIQIgASACayEDIAMkACADIAA2AgwQiA0hBCADKAIMIQUQiyshBhCMKyEHQQQhCCAEIAUgCCAGIAcQHkEQIQkgAyAJaiEKIAokAA8LVAEKfyMAIQFBECECIAEgAmshAyADJAAgAyAANgIMENANIQQgAygCDCEFEI0rIQYQjishB0EEIQggBCAFIAggBiAHEB5BECEJIAMgCWohCiAKJAAPC1QBCn8jACEBQRAhAiABIAJrIQMgAyQAIAMgADYCDBCHGyEEIAMoAgwhBRCPKyEGEN0hIQdBBCEIIAQgBSAIIAYgBxAeQRAhCSADIAlqIQogCiQADwtUAQp/IwAhAUEQIQIgASACayEDIAMkACADIAA2AgwQkCshBCADKAIMIQUQkSshBhCSKyEHQQQhCCAEIAUgCCAGIAcQHkEQIQkgAyAJaiEKIAokAA8LVwIIfwJ+IwAhAUEQIQIgASACayEDIAMkACADIAA2AgwQkyshBCADKAIMIQUQlCshCRCVKyEKQQghBiAEIAUgBiAJIAoQ3y1BECEHIAMgB2ohCCAIJAAPC1cCCH8CfiMAIQFBECECIAEgAmshAyADJAAgAyAANgIMEJYrIQQgAygCDCEFEJcrIQkQmCshCkEIIQYgBCAFIAYgCSAKEN8tQRAhByADIAdqIQggCCQADwtGAQh/IwAhAUEQIQIgASACayEDIAMkACADIAA2AgwQ3gwhBCADKAIMIQVBBCEGIAQgBSAGEB9BECEHIAMgB2ohCCAIJAAPC0YBCH8jACEBQRAhAiABIAJrIQMgAyQAIAMgADYCDBCZKyEEIAMoAgwhBUEIIQYgBCAFIAYQH0EQIQcgAyAHaiEIIAgkAA8LDAEBfxCaKyEAIAAPCwwBAX8QmyshACAADwsMAQF/EJwrIQAgAA8LDAEBfxCdKyEAIAAPC0cBCH8jACEBQRAhAiABIAJrIQMgAyQAIAMgADYCDBCyGCEEEJ4rIQUgAygCDCEGIAQgBSAGECBBECEHIAMgB2ohCCAIJAAPC0cBCH8jACEBQRAhAiABIAJrIQMgAyQAIAMgADYCDBCuISEEEJ8rIQUgAygCDCEGIAQgBSAGECBBECEHIAMgB2ohCCAIJAAPC0cBCH8jACEBQRAhAiABIAJrIQMgAyQAIAMgADYCDBC6GyEEEKArIQUgAygCDCEGIAQgBSAGECBBECEHIAMgB2ohCCAIJAAPC0cBCH8jACEBQRAhAiABIAJrIQMgAyQAIAMgADYCDBDtIiEEEKErIQUgAygCDCEGIAQgBSAGECBBECEHIAMgB2ohCCAIJAAPC0cBCH8jACEBQRAhAiABIAJrIQMgAyQAIAMgADYCDBDIIyEEEKIrIQUgAygCDCEGIAQgBSAGECBBECEHIAMgB2ohCCAIJAAPC0cBCH8jACEBQRAhAiABIAJrIQMgAyQAIAMgADYCDBCjJCEEEKMrIQUgAygCDCEGIAQgBSAGECBBECEHIAMgB2ohCCAIJAAPC0cBCH8jACEBQRAhAiABIAJrIQMgAyQAIAMgADYCDBD4JCEEEKQrIQUgAygCDCEGIAQgBSAGECBBECEHIAMgB2ohCCAIJAAPC0cBCH8jACEBQRAhAiABIAJrIQMgAyQAIAMgADYCDBClKyEEEKYrIQUgAygCDCEGIAQgBSAGECBBECEHIAMgB2ohCCAIJAAPC0cBCH8jACEBQRAhAiABIAJrIQMgAyQAIAMgADYCDBCnKyEEEKgrIQUgAygCDCEGIAQgBSAGECBBECEHIAMgB2ohCCAIJAAPC0cBCH8jACEBQRAhAiABIAJrIQMgAyQAIAMgADYCDBDNJSEEEKkrIQUgAygCDCEGIAQgBSAGECBBECEHIAMgB2ohCCAIJAAPC0cBCH8jACEBQRAhAiABIAJrIQMgAyQAIAMgADYCDBCiJiEEEKorIQUgAygCDCEGIAQgBSAGECBBECEHIAMgB2ohCCAIJAAPCxEBAn9B2P8FIQAgACEBIAEPCwwBAX8QrSshACAADwseAQR/EK4rIQBBGCEBIAAgAXQhAiACIAF1IQMgAw8LHgEEfxCvKyEAQRghASAAIAF0IQIgAiABdSEDIAMPCwwBAX8QsCshACAADwseAQR/ELErIQBBGCEBIAAgAXQhAiACIAF1IQMgAw8LHgEEfxCyKyEAQRghASAAIAF0IQIgAiABdSEDIAMPCwwBAX8QsyshACAADwsYAQN/ELQrIQBB/wEhASAAIAFxIQIgAg8LGAEDfxC1KyEAQf8BIQEgACABcSECIAIPCx4BBH8QtishAEEQIQEgACABdCECIAIgAXUhAyADDwseAQR/ELcrIQBBECEBIAAgAXQhAiACIAF1IQMgAw8LGQEDfxC4KyEAQf//AyEBIAAgAXEhAiACDwsZAQN/ELkrIQBB//8DIQEgACABcSECIAIPCwwBAX8QuishACAADwsMAQF/ELsrIQAgAA8LDAEBfxC8KyEAIAAPCwwBAX8QvSshACAADwsMAQF/EL4rIQAgAA8LDAEBfxC/KyEAIAAPCwwBAX8QwCshACAADwsMAQF/EMErIQAgAA8LDAEBfxDCKyEAIAAPCwwBAX4QwyshACAADwsMAQF+EMQrIQAgAA8LDAEBfxDFKyEAIAAPCwwBAX4QxishACAADwsMAQF+EMcrIQAgAA8LDAEBfxDIKyEAIAAPCxEBAn9BzNcFIQAgACEBIAEPCxEBAn9BpNgFIQAgACEBIAEPCxEBAn9BgNkFIQAgACEBIAEPCxEBAn9B3NkFIQAgACEBIAEPCwsBAX9BACEAIAAPCwsBAX9BACEAIAAPCwsBAX9BASEAIAAPCwsBAX9BAiEAIAAPCwsBAX9BAyEAIAAPCwsBAX9BBCEAIAAPCwsBAX9BBSEAIAAPCwwBAX8QySshACAADwsLAQF/QQQhACAADwsMAQF/EMorIQAgAA8LCwEBf0EFIQAgAA8LCwEBf0EGIQAgAA8LCwEBf0EHIQAgAA8LGAECf0HUvAchAEGpByEBIAAgAREAABoPCzoBBn8jACEBQRAhAiABIAJrIQMgAyQAIAMgADYCDCADKAIMIQQQ3ypBECEFIAMgBWohBiAGJAAgBA8LEQECf0GQgAYhACAAIQEgAQ8LHgEEf0GAASEAQRghASAAIAF0IQIgAiABdSEDIAMPCx4BBH9B/wAhAEEYIQEgACABdCECIAIgAXUhAyADDwsRAQJ/QaiABiEAIAAhASABDwseAQR/QYABIQBBGCEBIAAgAXQhAiACIAF1IQMgAw8LHgEEf0H/ACEAQRghASAAIAF0IQIgAiABdSEDIAMPCxEBAn9BnIAGIQAgACEBIAEPCxcBA39BACEAQf8BIQEgACABcSECIAIPCxgBA39B/wEhAEH/ASEBIAAgAXEhAiACDwsfAQR/QYCAAiEAQRAhASAAIAF0IQIgAiABdSEDIAMPCx8BBH9B//8BIQBBECEBIAAgAXQhAiACIAF1IQMgAw8LGAEDf0EAIQBB//8DIQEgACABcSECIAIPCxoBA39B//8DIQBB//8DIQEgACABcSECIAIPCw8BAX9BgICAgHghACAADwsPAQF/Qf////8HIQAgAA8LCwEBf0EAIQAgAA8LCwEBf0F/IQAgAA8LDwEBf0GAgICAeCEAIAAPCxEBAn9B8IAGIQAgACEBIAEPCwsBAX9BACEAIAAPCwsBAX9BfyEAIAAPCxEBAn9B/IAGIQAgACEBIAEPCxQBAX5CgICAgICAgICAfyEAIAAPCxQBAX5C////////////ACEAIAAPCxEBAn9BiIEGIQAgACEBIAEPCwsBAX5CACEAIAAPCwsBAX5CfyEAIAAPCxEBAn9BoIEGIQAgACEBIAEPCxEBAn9BlNoFIQAgACEBIAEPCxEBAn9BvNoFIQAgACEBIAEPCwYAEKsrDwsLACAAQZ9/akEaSQsQACAAQd8AcSAAIAAQzCsbC4ECAgJ/An0CQCAAvCIBQf////8HcSICQYCAgPwDSQ0AAkAgAkGAgID8A0cNAEMAAAAAQ9oPSUAgAUF/ShsPC0MAAAAAIAAgAJOVDwsCQAJAIAJB////9wNLDQBD2g/JPyEDIAJBgYCAlANJDQFDaCGiMyAAIACUEM8rIACUkyAAk0PaD8k/kg8LAkAgAUF/Sg0AQ9oPyT8gAEMAAIA/kkMAAAA/lCIAEN4rIgMgAyAAEM8rlENoIaKzkpKTIgAgAJIPC0MAAIA/IACTQwAAAD+UIgMQ3isiBCADEM8rlCADIAS8QYBgcb4iACAAlJMgBCAAkpWSIACSIgAgAJIhAwsgAwsrACAAQ2vTDbyUQ7oTL72SIACUQ3WqKj6SIACUIABDruU0v5RDAACAP5KVC/YCAgR/AX0CQAJAIAEQ0StB/////wdxQYCAgPwHSw0AIAAQ0StB/////wdxQYGAgPwHSQ0BCyAAIAGSDwsCQCABvCICQYCAgPwDRw0AIAAQ0isPCyACQR52QQJxIgMgALwiBEEfdnIhBQJAAkACQCAEQf////8HcSIEDQAgACEGAkACQCAFDgQDAwABAwtD2w9JQA8LQ9sPScAPCyACQf////8HcSICQYCAgPwHRg0BAkAgAg0AQ9sPyT8gAJgPCwJAAkAgBEGAgID8B0YNACACQYCAgOgAaiAETw0BC0PbD8k/IACYDwsCQAJAIANFDQBDAAAAACEGIARBgICA6ABqIAJJDQELIAAgAZUQ1SsQ0ishBgsCQAJAAkAgBQ4DAwABAgsgBowPC0PbD0lAIAZDLr27M5KTDwsgBkMuvbszkkPbD0nAkiEGCyAGDwsCQCAEQYCAgPwHRg0AIAVBAnRB1NoFaioCAA8LIAVBAnRBxNoFaioCAAsFACAAvAuIAwIDfwN9AkAgALwiAUH/////B3EiAkGAgIDkBEkNACAAQ9oPyT8gAJggABDTK0H/////B3FBgICA/AdLGw8LAkACQAJAIAJB////9gNLDQAgAkGAgIDMA0kNAkF/IQNBASECDAELIAAQ1SshAAJAAkAgAkH//9/8A0sNAAJAIAJB//+/+QNLDQAgACAAkkMAAIC/kiAAQwAAAECSlSEAQQAhAkEAIQMMAwsgAEMAAIC/kiAAQwAAgD+SlSEAQQEhAwwBCwJAIAJB///vgARLDQAgAEMAAMC/kiAAQwAAwD+UQwAAgD+SlSEAQQIhAwwBC0MAAIC/IACVIQBBAyEDC0EAIQILIAAgAJQiBCAElCIFIAVDRxLavZRDmMpMvpKUIQYgBCAFIAVDJax8PZRDDfURPpKUQ6mqqj6SlCEFAkAgAkUNACAAIAAgBiAFkpSTDwsgA0ECdCICQfDaBWoqAgAgACAGIAWSlCACQYDbBWoqAgCTIACTkyIAIACMIAFBf0obIQALIAALBQAgALwLngMDA38BfQF8IwBBEGsiASQAAkACQCAAvCICQf////8HcSIDQdqfpPoDSw0AQwAAgD8hBCADQYCAgMwDSQ0BIAC7EN8rIQQMAQsCQCADQdGn7YMESw0AIAC7IQUCQCADQeSX24AESQ0ARBgtRFT7IQnARBgtRFT7IQlAIAJBf0obIAWgEN8rjCEEDAILAkAgAkF/Sg0AIAVEGC1EVPsh+T+gEOMrIQQMAgtEGC1EVPsh+T8gBaEQ4yshBAwBCwJAIANB1eOIhwRLDQACQCADQeDbv4UESQ0ARBgtRFT7IRnARBgtRFT7IRlAIAJBf0obIAC7oBDfKyEEDAILAkAgAkF/Sg0ARNIhM3982RLAIAC7oRDjKyEEDAILIAC7RNIhM3982RLAoBDjKyEEDAELAkAgA0GAgID8B0kNACAAIACTIQQMAQsCQAJAAkACQCAAIAFBCGoQ4CtBA3EOAwABAgMLIAErAwgQ3yshBAwDCyABKwMImhDjKyEEDAILIAErAwgQ3yuMIQQMAQsgASsDCBDjKyEECyABQRBqJAAgBAsFACAAiwumAwMBfgN/AnwCQAJAAkACQAJAIAC9IgFCIIinIgJBgIDAAEkNACABQn9VDQELAkAgAUL///////////8Ag0IAUg0ARAAAAAAAAPC/IAAgAKKjDwsgAUJ/VQ0BIAAgAKFEAAAAAAAAAACjDwsgAkH//7//B0sNAkGAgMD/AyEDQYF4IQQCQCACQYCAwP8DRg0AIAIhAwwCCyABpw0BRAAAAAAAAAAADwsgAEQAAAAAAABQQ6K9IgFCIIinIQNBy3chBAsgBCADQeK+JWoiAkEUdmq3IgVEAADg/kIu5j+iIAJB//8/cUGewZr/A2qtQiCGIAFC/////w+DhL9EAAAAAAAA8L+gIgAgBUR2PHk17znqPaIgACAARAAAAAAAAABAoKMiBSAAIABEAAAAAAAA4D+ioiIGIAUgBaIiBSAFoiIAIAAgAESfxnjQCZrDP6JEr3iOHcVxzD+gokQE+peZmZnZP6CiIAUgACAAIABERFI+3xLxwj+iRN4Dy5ZkRsc/oKJEWZMilCRJ0j+gokSTVVVVVVXlP6CioKCioCAGoaCgIQALIAALlgICAn8CfQJAAkACQAJAIAC8IgFBgICABEkNACABQX9KDQELAkAgAUH/////B3ENAEMAAIC/IAAgAJSVDwsCQCABQX9KDQAgACAAk0MAAAAAlQ8LIABDAAAATJS8IQFB6H4hAgwBCyABQf////sHSw0BQYF/IQJDAAAAACEAIAFBgICA/ANGDQELIAIgAUGN9qsCaiIBQRd2arIiA0OAcTE/lCABQf///wNxQfOJ1PkDar5DAACAv5IiACADQ9H3FzeUIAAgAEMAAABAkpUiAyAAIABDAAAAP5SUIgQgAyADlCIAIAAgAJQiAEPu6ZE+lEOqqio/kpQgACAAQyaeeD6UQxPOzD6SlJKSlJIgBJOSkiEACyAACwUAIACZC7sQAwV8An4Jf0QAAAAAAADwPyECAkAgAb0iB0IgiKciCUH/////B3EiCiAHpyILckUNACAAvSIIpyEMAkAgCEIgiKciDUGAgMD/A0cNACAMRQ0BCwJAAkAgDUH/////B3EiDkGAgMD/B0sNACAOQYCAwP8HRiAMQQBHcQ0AIApBgIDA/wdLDQAgCkGAgMD/B0cNASALRQ0BCyAAIAGgDwsCQAJAAkACQCAIQn9VDQBBAiEPIApB////mQRLDQEgCkGAgMD/A0kNACAKQRR2IRACQCAKQYCAgIoESQ0AQQAhDyALQbMIIBBrIhB2IhEgEHQgC0cNAkECIBFBAXFrIQ8MAgtBACEPIAsNA0EAIQ8gCkGTCCAQayILdiIQIAt0IApHDQJBAiAQQQFxayEPDAILQQAhDwsgCw0BCwJAIApBgIDA/wdHDQAgDkGAgMCAfGogDHJFDQICQCAOQYCAwP8DSQ0AIAFEAAAAAAAAAAAgB0J/VRsPC0QAAAAAAAAAACABmiAHQn9VGw8LAkAgCkGAgMD/A0cNAAJAIAdCf1cNACAADwtEAAAAAAAA8D8gAKMPCwJAIAlBgICAgARHDQAgACAAog8LIAlBgICA/wNHDQAgCEIAUw0AIAAQ3SsPCyAAENgrIQICQCAMDQACQCANQf////8DcUGAgMD/A0YNACAODQELRAAAAAAAAPA/IAKjIAIgB0IAUxshAiAIQn9VDQECQCAPIA5BgIDAgHxqcg0AIAIgAqEiASABow8LIAKaIAIgD0EBRhsPC0QAAAAAAADwPyEDAkAgCEJ/VQ0AAkACQCAPDgIAAQILIAAgAKEiASABow8LRAAAAAAAAPC/IQMLAkACQCAKQYGAgI8ESQ0AAkAgCkGBgMCfBEkNAAJAIA5B//+//wNLDQBEAAAAAAAA8H9EAAAAAAAAAAAgB0IAUxsPC0QAAAAAAADwf0QAAAAAAAAAACAJQQBKGw8LAkAgDkH+/7//A0sNACADRJx1AIg85Dd+okScdQCIPOQ3fqIgA0RZ8/jCH26lAaJEWfP4wh9upQGiIAdCAFMbDwsCQCAOQYGAwP8DSQ0AIANEnHUAiDzkN36iRJx1AIg85Dd+oiADRFnz+MIfbqUBokRZ8/jCH26lAaIgCUEAShsPCyACRAAAAAAAAPC/oCIARETfXfgLrlQ+oiAAIACiRAAAAAAAAOA/IAAgAEQAAAAAAADQv6JEVVVVVVVV1T+goqGiRP6CK2VHFfe/oqAiAiACIABEAAAAYEcV9z+iIgSgvUKAgICAcIO/IgAgBKGhIQQMAQsgAkQAAAAAAABAQ6IiACACIA5BgIDAAEkiChshAiAAvUIgiKcgDiAKGyIJQf//P3EiC0GAgMD/A3IhDEHMd0GBeCAKGyAJQRR1aiEJQQAhCgJAIAtBj7EOSQ0AAkAgC0H67C5PDQBBASEKDAELIAtBgICA/wNyIQwgCUEBaiEJCyAKQQN0IgtBoNsFaisDAEQAAAAAAADwPyALQZDbBWorAwAiACAMrUIghiACvUL/////D4OEvyIFoKMiAiAFIAChIgQgCkESdCAMQQF2akGAgKCAAmqtQiCGvyIGIAQgAqIiBL1CgICAgHCDvyICoqEgBSAGIAChoSACoqGiIgAgAiACoiIFRAAAAAAAAAhAoCAAIAQgAqCiIAQgBKIiACAAoiAAIAAgACAAIABE705FSih+yj+iRGXbyZNKhs0/oKJEAUEdqWB00T+gokRNJo9RVVXVP6CiRP+rb9u2bds/oKJEAzMzMzMz4z+goqAiBqC9QoCAgIBwg78iAKIgBCAGIABEAAAAAAAACMCgIAWhoaKgIgQgBCACIACiIgKgvUKAgICAcIO/IgAgAqGhRP0DOtwJx+4/oiAARPUBWxTgLz6+oqCgIgIgC0Gw2wVqKwMAIgQgAiAARAAAAOAJx+4/oiIFoKAgCbciAqC9QoCAgIBwg78iACACoSAEoSAFoaEhBAsgACAHQoCAgIBwg78iBaIiAiAEIAGiIAEgBaEgAKKgIgGgIgC9IgenIQoCQAJAIAdCIIinIgxBgIDAhARIDQACQCAMQYCAwPt7aiAKckUNACADRJx1AIg85Dd+okScdQCIPOQ3fqIPCyABRP6CK2VHFZc8oCAAIAKhZEUNASADRJx1AIg85Dd+okScdQCIPOQ3fqIPCyAMQYD4//8HcUGAmMOEBEkNAAJAIAxBgOi8+wNqIApyRQ0AIANEWfP4wh9upQGiRFnz+MIfbqUBog8LIAEgACACoWVFDQAgA0RZ8/jCH26lAaJEWfP4wh9upQGiDwtBACEKAkAgDEH/////B3EiC0GBgID/A0kNAEEAQYCAwAAgC0EUdkGCeGp2IAxqIgxB//8/cUGAgMAAckGTCCAMQRR2Qf8PcSILa3YiCmsgCiAHQgBTGyEKIAEgAkGAgEAgC0GBeGp1IAxxrUIghr+hIgKgvSEHCwJAAkAgCkEUdCAHQoCAgIBwg78iAEQAAAAAQy7mP6IiBCABIAAgAqGhRO85+v5CLuY/oiAARDlsqAxhXCC+oqAiAqAiASABIAEgASABoiIAIAAgACAAIABE0KS+cmk3Zj6iRPFr0sVBvbu+oKJELN4lr2pWET+gokSTvb4WbMFmv6CiRD5VVVVVVcU/oKKhIgCiIABEAAAAAAAAAMCgoyACIAEgBKGhIgAgASAAoqChoUQAAAAAAADwP6AiAb0iB0IgiKdqIgxB//8/Sg0AIAEgChDOLSEBDAELIAytQiCGIAdC/////w+DhL8hAQsgAyABoiECCyACC7AMAgV9B39DAACAPyECAkAgAbwiB0H/////B3EiCEUNACAAvCIJQYCAgPwDRg0AAkACQCAJQf////8HcSIKQYCAgPwHSw0AIAhBgYCA/AdJDQELIAAgAZIPCwJAAkAgCUF/Sg0AQQIhCyAIQf///9sESw0BIAhBgICA/ANJDQBBACELIAhBlgEgCEEXdmsiDHYiDSAMdCAIRw0BQQIgDUEBcWshCwwBC0EAIQsLAkACQCAIQYCAgPwDRg0AIAhBgICA/AdHDQEgCkGAgID8A0YNAgJAIApBgYCA/ANJDQAgAUMAAAAAIAdBf0obDwtDAAAAACABjCAHQX9KGw8LIABDAACAPyAAlSAHQX9KGw8LAkAgB0GAgICABEcNACAAIACUDwsCQCAHQYCAgPgDRw0AIAlBAEgNACAAEN4rDwsgABDVKyECAkACQCAJQf////8DcUGAgID8A0YNACAKDQELQwAAgD8gApUgAiAHQQBIGyECIAlBf0oNAQJAIAsgCkGAgICEfGpyDQAgAiACkyIBIAGVDwsgAowgAiALQQFGGw8LQwAAgD8hAwJAIAlBf0oNAAJAAkAgCw4CAAECCyAAIACTIgEgAZUPC0MAAIC/IQMLAkACQCAIQYGAgOgESQ0AAkAgCkH3///7A0sNACADQ8rySXGUQ8rySXGUIANDYEKiDZRDYEKiDZQgB0EASBsPCwJAIApBiICA/ANJDQAgA0PK8klxlEPK8klxlCADQ2BCog2UQ2BCog2UIAdBAEobDwsgAkMAAIC/kiIAQ3Cl7DaUIAAgAJRDAAAAPyAAIABDAACAvpRDq6qqPpKUk5RDO6q4v5SSIgIgAiAAQwCquD+UIgSSvEGAYHG+IgAgBJOTIQQMAQsgAkMAAIBLlLwgCiAKQYCAgARJIgkbIgtB////A3EiCkGAgID8A3IhCEHpfkGBfyAJGyALQRd1aiELQQAhCQJAIApB8ojzAEkNAAJAIApB1+f2Ak8NAEEBIQkMAQsgCkGAgID4A3IhCCALQQFqIQsLIAlBAnQiCkHI2wVqKgIAQwAAgD8gCkHA2wVqKgIAIgAgCL4iBZKVIgIgBSAAkyIEIAhBAXZBgOD//wFxIAlBFXRqQYCAgIICar4iBiAEIAKUIgS8QYBgcb4iApSTIAUgBiAAk5MgApSTlCIAIAIgApQiBUMAAEBAkiAAIAQgApKUIAQgBJQiACAAlCAAIAAgACAAIABDQvFTPpRDVTJsPpKUQwWjiz6SlEOrqqo+kpRDt23bPpKUQ5qZGT+SlJIiBpK8QYBgcb4iAJQgBCAGIABDAABAwJIgBZOTlJIiBCAEIAIgAJQiApK8QYBgcb4iACACk5NDTzh2P5QgAEPGI/a4lJKSIgIgCkHQ2wVqKgIAIgQgAiAAQwBAdj+UIgWSkiALsiICkrxBgGBxviIAIAKTIASTIAWTkyEECwJAIAAgB0GAYHG+IgKUIgUgBCABlCABIAKTIACUkiIBkiIAvCIIQYGAgJgESA0AIANDyvJJcZRDyvJJcZQPC0GAgICYBCEJAkACQAJAIAhBgICAmARHDQAgAUM8qjgzkiAAIAWTXkUNASADQ8rySXGUQ8rySXGUDwsCQCAIQf////8HcSIJQYGA2JgESQ0AIANDYEKiDZRDYEKiDZQPCwJAIAhBgIDYmHxHDQAgASAAIAWTX0UNACADQ2BCog2UQ2BCog2UDwtBACEHIAlBgYCA+ANJDQELQQBBgICABCAJQRd2QYJ/anYgCGoiCUH///8DcUGAgIAEckGWASAJQRd2Qf8BcSIKa3YiB2sgByAIQQBIGyEHIAEgBUGAgIB8IApBgX9qdSAJcb6TIgWSvCEICwJAAkAgB0EXdCAIQYCAfnG+IgBDAHIxP5QiAiAAQ4y+vzWUIAEgACAFk5NDGHIxP5SSIgSSIgEgASABIAEgAZQiACAAIAAgACAAQ0y7MTOUQw7q3bWSlENVs4o4kpRDYQs2u5KUQ6uqKj6SlJMiAJQgAEMAAADAkpUgBCABIAKTkyIAIAEgAJSSk5NDAACAP5IiAbxqIghB////A0oNACABIAcQ2yshAQwBCyAIviEBCyADIAGUIQILIAILoAEAAkACQCABQYABSA0AIABDAAAAf5QhAAJAIAFB/wFODQAgAUGBf2ohAQwCCyAAQwAAAH+UIQAgAUH9AiABQf0CSBtBgn5qIQEMAQsgAUGBf0oNACAAQwAAgACUIQACQCABQYN+TA0AIAFB/gBqIQEMAQsgAEMAAIAAlCEAIAFBhn0gAUGGfUobQfwBaiEBCyAAIAFBF3RBgICA/ANqvpQLmQMCA38BfCMAQRBrIgEkAAJAAkAgALwiAkH/////B3EiA0Han6T6A0sNACADQYCAgMwDSQ0BIAC7EOMrIQAMAQsCQCADQdGn7YMESw0AIAC7IQQCQCADQeOX24AESw0AAkAgAkF/Sg0AIAREGC1EVPsh+T+gEN8rjCEADAMLIAREGC1EVPsh+b+gEN8rIQAMAgtEGC1EVPshCcBEGC1EVPshCUAgAkF/ShsgBKCaEOMrIQAMAQsCQCADQdXjiIcESw0AIAC7IQQCQCADQd/bv4UESw0AAkAgAkF/Sg0AIARE0iEzf3zZEkCgEN8rIQAMAwsgBETSITN/fNkSwKAQ3yuMIQAMAgtEGC1EVPshGcBEGC1EVPshGUAgAkF/ShsgBKAQ4yshAAwBCwJAIANBgICA/AdJDQAgACAAkyEADAELAkACQAJAAkAgACABQQhqEOArQQNxDgMAAQIDCyABKwMIEOMrIQAMAwsgASsDCBDfKyEADAILIAErAwiaEOMrIQAMAQsgASsDCBDfK4whAAsgAUEQaiQAIAALBQAgAJ8LBQAgAJELTwEBfCAAIACiIgBEgV4M/f//37+iRAAAAAAAAPA/oCAAIACiIgFEQjoF4VNVpT+ioCAAIAGiIABEaVDu4EKT+T6iRCceD+iHwFa/oKKgtguPAgIEfwF8IwBBEGsiAiQAAkACQCAAvCIDQf////8HcSIEQdqfpO4ESw0AIAEgALsiBiAGRIPIyW0wX+Q/okQAAAAAAAA4Q6BEAAAAAAAAOMOgIgZEAAAAUPsh+b+ioCAGRGNiGmG0EFG+oqA5AwACQCAGmUQAAAAAAADgQWNFDQAgBqohBAwCC0GAgICAeCEEDAELAkAgBEGAgID8B0kNACABIAAgAJO7OQMAQQAhBAwBCyACIAQgBEEXdkHqfmoiBUEXdGu+uzkDCCACQQhqIAIgBUEBQQAQ4ishBCACKwMAIQYCQCADQX9KDQAgASAGmjkDAEEAIARrIQQMAQsgASAGOQMACyACQRBqJAAgBAsFACAAnAvGEgIQfwN8IwBBsARrIgUkACACQX1qQRhtIgZBACAGQQBKGyIHQWhsIAJqIQgCQCAEQQJ0QeDbBWooAgAiCSADQX9qIgpqQQBIDQAgCSADaiELIAcgCmshAkEAIQYDQAJAAkAgAkEATg0ARAAAAAAAAAAAIRUMAQsgAkECdEHw2wVqKAIAtyEVCyAFQcACaiAGQQN0aiAVOQMAIAJBAWohAiAGQQFqIgYgC0cNAAsLIAhBaGohDCAJQQAgCUEAShshDUEAIQsDQEQAAAAAAAAAACEVAkAgA0EATA0AIAsgCmohBkEAIQIDQCAVIAAgAkEDdGorAwAgBUHAAmogBiACa0EDdGorAwCioCEVIAJBAWoiAiADRw0ACwsgBSALQQN0aiAVOQMAIAsgDUYhAiALQQFqIQsgAkUNAAtBLyAIayEOQTAgCGshDyAIQWdqIRAgCSELAkADQCAFIAtBA3RqKwMAIRVBACECIAshBgJAIAtBAUgiEQ0AA0AgAkECdCENAkACQCAVRAAAAAAAAHA+oiIWmUQAAAAAAADgQWNFDQAgFqohCgwBC0GAgICAeCEKCyAFQeADaiANaiENAkACQCAVIAq3IhZEAAAAAAAAcMGioCIVmUQAAAAAAADgQWNFDQAgFaohCgwBC0GAgICAeCEKCyANIAo2AgAgBSAGQX9qIgZBA3RqKwMAIBagIRUgAkEBaiICIAtHDQALCyAVIAwQzi0hFQJAAkAgFSAVRAAAAAAAAMA/ohDhK0QAAAAAAAAgwKKgIhWZRAAAAAAAAOBBY0UNACAVqiESDAELQYCAgIB4IRILIBUgErehIRUCQAJAAkACQAJAIAxBAUgiEw0AIAtBAnQgBUHgA2pqQXxqIgIgAigCACICIAIgD3UiAiAPdGsiBjYCACAGIA51IRQgAiASaiESDAELIAwNASALQQJ0IAVB4ANqakF8aigCAEEXdSEUCyAUQQFIDQIMAQtBAiEUIBVEAAAAAAAA4D9mDQBBACEUDAELQQAhAkEAIQoCQCARDQADQCAFQeADaiACQQJ0aiIRKAIAIQZB////ByENAkACQCAKDQBBgICACCENIAYNAEEAIQoMAQsgESANIAZrNgIAQQEhCgsgAkEBaiICIAtHDQALCwJAIBMNAEH///8DIQICQAJAIBAOAgEAAgtB////ASECCyALQQJ0IAVB4ANqakF8aiIGIAYoAgAgAnE2AgALIBJBAWohEiAUQQJHDQBEAAAAAAAA8D8gFaEhFUECIRQgCkUNACAVRAAAAAAAAPA/IAwQzi2hIRULAkAgFUQAAAAAAAAAAGINAEEAIQYgCyECAkAgCyAJTA0AA0AgBUHgA2ogAkF/aiICQQJ0aigCACAGciEGIAIgCUoNAAsgBkUNACAMIQgDQCAIQWhqIQggBUHgA2ogC0F/aiILQQJ0aigCAEUNAAwECwALQQEhAgNAIAIiBkEBaiECIAVB4ANqIAkgBmtBAnRqKAIARQ0ACyAGIAtqIQ0DQCAFQcACaiALIANqIgZBA3RqIAtBAWoiCyAHakECdEHw2wVqKAIAtzkDAEEAIQJEAAAAAAAAAAAhFQJAIANBAUgNAANAIBUgACACQQN0aisDACAFQcACaiAGIAJrQQN0aisDAKKgIRUgAkEBaiICIANHDQALCyAFIAtBA3RqIBU5AwAgCyANSA0ACyANIQsMAQsLAkACQCAVQRggCGsQzi0iFUQAAAAAAABwQWZFDQAgC0ECdCEDAkACQCAVRAAAAAAAAHA+oiIWmUQAAAAAAADgQWNFDQAgFqohAgwBC0GAgICAeCECCyAFQeADaiADaiEDAkACQCAVIAK3RAAAAAAAAHDBoqAiFZlEAAAAAAAA4EFjRQ0AIBWqIQYMAQtBgICAgHghBgsgAyAGNgIAIAtBAWohCwwBCwJAAkAgFZlEAAAAAAAA4EFjRQ0AIBWqIQIMAQtBgICAgHghAgsgDCEICyAFQeADaiALQQJ0aiACNgIAC0QAAAAAAADwPyAIEM4tIRUCQCALQX9MDQAgCyECA0AgBSACQQN0aiAVIAVB4ANqIAJBAnRqKAIAt6I5AwAgFUQAAAAAAABwPqIhFSACQQBKIQMgAkF/aiECIAMNAAsgC0F/TA0AIAshAgNAIAsgAiIGayEARAAAAAAAAAAAIRVBACECAkADQCAVIAJBA3RBwPEFaisDACAFIAIgBmpBA3RqKwMAoqAhFSACIAlODQEgAiAASSEDIAJBAWohAiADDQALCyAFQaABaiAAQQN0aiAVOQMAIAZBf2ohAiAGQQBKDQALCwJAAkACQAJAAkAgBA4EAQICAAQLRAAAAAAAAAAAIRcCQCALQQFIDQAgBUGgAWogC0EDdGorAwAhFSALIQIDQCAFQaABaiACQQN0aiAVIAVBoAFqIAJBf2oiA0EDdGoiBisDACIWIBYgFaAiFqGgOQMAIAYgFjkDACACQQFKIQYgFiEVIAMhAiAGDQALIAtBAkgNACAFQaABaiALQQN0aisDACEVIAshAgNAIAVBoAFqIAJBA3RqIBUgBUGgAWogAkF/aiIDQQN0aiIGKwMAIhYgFiAVoCIWoaA5AwAgBiAWOQMAIAJBAkohBiAWIRUgAyECIAYNAAtEAAAAAAAAAAAhFyALQQFMDQADQCAXIAVBoAFqIAtBA3RqKwMAoCEXIAtBAkohAiALQX9qIQsgAg0ACwsgBSsDoAEhFSAUDQIgASAVOQMAIAUrA6gBIRUgASAXOQMQIAEgFTkDCAwDC0QAAAAAAAAAACEVAkAgC0EASA0AA0AgFSAFQaABaiALQQN0aisDAKAhFSALQQBKIQIgC0F/aiELIAINAAsLIAEgFZogFSAUGzkDAAwCC0QAAAAAAAAAACEVAkAgC0EASA0AIAshAgNAIBUgBUGgAWogAkEDdGorAwCgIRUgAkEASiEDIAJBf2ohAiADDQALCyABIBWaIBUgFBs5AwAgBSsDoAEgFaEhFUEBIQICQCALQQFIDQADQCAVIAVBoAFqIAJBA3RqKwMAoCEVIAIgC0chAyACQQFqIQIgAw0ACwsgASAVmiAVIBQbOQMIDAELIAEgFZo5AwAgBSsDqAEhFSABIBeaOQMQIAEgFZo5AwgLIAVBsARqJAAgEkEHcQtLAQJ8IAAgAKIiASAAoiICIAEgAaKiIAFEp0Y7jIfNxj6iRHTnyuL5ACq/oKIgAiABRLL7bokQEYE/okR3rMtUVVXFv6CiIACgoLYLAgALvAEBBX9BACEBAkAgACgCTEEASA0AIAAQ1y0hAQsgABDkKwJAIAAoAgBBAXEiAg0AEPIrIQMCQCAAKAI0IgRFDQAgBCAAKAI4NgI4CwJAIAAoAjgiBUUNACAFIAQ2AjQLAkAgAygCACAARw0AIAMgBTYCAAsQ8ysLIAAQ5ishAyAAIAAoAgwRAAAhBAJAIAAoAmAiBUUNACAFEMUtCwJAAkAgAg0AIAAQxS0MAQsgAUUNACAAENgtCyAEIANyC7gBAQJ/AkACQCAARQ0AAkAgACgCTEF/Sg0AIAAQ5ysPCyAAENctIQEgABDnKyECIAFFDQEgABDYLSACDwtBACECAkBBACgC8JAHRQ0AQQAoAvCQBxDmKyECCwJAEPIrKAIAIgBFDQADQEEAIQECQCAAKAJMQQBIDQAgABDXLSEBCwJAIAAoAhQgACgCHE0NACAAEOcrIAJyIQILAkAgAUUNACAAENgtCyAAKAI4IgANAAsLEPMrCyACC2sBAn8CQCAAKAIUIAAoAhxNDQAgAEEAQQAgACgCJBEGABogACgCFA0AQX8PCwJAIAAoAgQiASAAKAIIIgJPDQAgACABIAJrrEEBIAAoAigRLwAaCyAAQQA2AhwgAEIANwMQIABCADcCBEEACwYAQdi8BwseAAJAIABBgWBJDQAQ6CtBACAAazYCAEF/IQALIAALdQEDfyMAQRBrIgIkAAJAAkACQEH4/AEgASwAABC9LA0AEOgrQRw2AgAMAQsgARCoLCEDIAJBtgM2AgBBACEEIAAgA0GAgAJyIAIQIRDpKyIAQQBIDQEgACABEKcsIgQNASAAECIaC0EAIQQLIAJBEGokACAEC/IBAQV/QQAhBAJAIAMoAkxBAEgNACADENctIQQLIAIgAWwhBSADIAMtAEoiBkF/aiAGcjoASgJAAkAgAygCCCADKAIEIgdrIgZBAU4NACAFIQYMAQsgACAHIAYgBSAGIAVJGyIIENAtGiADIAMoAgQgCGo2AgQgBSAIayEGIAAgCGohAAsCQCAGRQ0AA0ACQAJAIAMQrywNACADIAAgBiADKAIgEQYAIghBAWpBAUsNAQsCQCAERQ0AIAMQ2C0LIAUgBmsgAW4PCyAAIAhqIQAgBiAIayIGDQALCyACQQAgARshAAJAIARFDQAgAxDYLQsgAAuBAQACQCACQQFHDQAgASAAKAIIIAAoAgRrrH0hAQsCQAJAIAAoAhQgACgCHE0NACAAQQBBACAAKAIkEQYAGiAAKAIURQ0BCyAAQQA2AhwgAEIANwMQIAAgASACIAAoAigRLwBCAFMNACAAQgA3AgQgACAAKAIAQW9xNgIAQQAPC0F/CzwBAX8CQCAAKAJMQX9KDQAgACABIAIQ7CsPCyAAENctIQMgACABIAIQ7CshAgJAIANFDQAgABDYLQsgAgsMACAAIAGsIAIQ7SsLZwICfwF+IAAoAighAUEBIQICQCAALQAAQYABcUUNAEECQQEgACgCFCAAKAIcSxshAgsCQCAAQgAgAiABES8AIgNCAFMNACADIAAoAgggACgCBGusfSAAKAIUIAAoAhxrrHwhAwsgAws2AgF/AX4CQCAAKAJMQX9KDQAgABDvKw8LIAAQ1y0hASAAEO8rIQICQCABRQ0AIAAQ2C0LIAILJQEBfgJAIAAQ8CsiAUKAgICACFMNABDoK0E9NgIAQX8PCyABpwsNAEHcvAcQySxB5LwHCwkAQdy8BxDKLAsqAQF/IwBBEGsiBCQAIAQgAzYCDCAAIAEgAiADEI4sIQMgBEEQaiQAIAMLKAEBfyMAQRBrIgMkACADIAI2AgwgACABIAIQkiwhAiADQRBqJAAgAgsoAQF/IwBBEGsiAyQAIAMgAjYCDCAAIAEgAhCTLCECIANBEGokACACCygBAX8jAEEQayIDJAAgAyACNgIMIAAgASACEKQsIQIgA0EQaiQAIAILBABBAAsEAEIACwoAIABBUGpBCkkLBgBB9JAHC6QCAQF/QQEhAwJAAkAgAEUNACABQf8ATQ0BAkACQBD7KygCrAEoAgANACABQYB/cUGAvwNGDQMQ6CtBGTYCAAwBCwJAIAFB/w9LDQAgACABQT9xQYABcjoAASAAIAFBBnZBwAFyOgAAQQIPCwJAAkAgAUGAsANJDQAgAUGAQHFBgMADRw0BCyAAIAFBP3FBgAFyOgACIAAgAUEMdkHgAXI6AAAgACABQQZ2QT9xQYABcjoAAUEDDwsCQCABQYCAfGpB//8/Sw0AIAAgAUE/cUGAAXI6AAMgACABQRJ2QfABcjoAACAAIAFBBnZBP3FBgAFyOgACIAAgAUEMdkE/cUGAAXI6AAFBBA8LEOgrQRk2AgALQX8hAwsgAw8LIAAgAToAAEEBCxUAAkAgAA0AQQAPCyAAIAFBABD8KwuPAQIBfgF/AkAgAL0iAkI0iKdB/w9xIgNB/w9GDQACQCADDQACQAJAIABEAAAAAAAAAABiDQBBACEDDAELIABEAAAAAAAA8EOiIAEQ/ishACABKAIAQUBqIQMLIAEgAzYCACAADwsgASADQYJ4ajYCACACQv////////+HgH+DQoCAgICAgIDwP4S/IQALIAALjgMBA38jAEHQAWsiBSQAIAUgAjYCzAFBACECIAVBoAFqQQBBKBDRLRogBSAFKALMATYCyAECQAJAQQAgASAFQcgBaiAFQdAAaiAFQaABaiADIAQQgCxBAE4NAEF/IQEMAQsCQCAAKAJMQQBIDQAgABDXLSECCyAAKAIAIQYCQCAALABKQQBKDQAgACAGQV9xNgIACyAGQSBxIQYCQAJAIAAoAjBFDQAgACABIAVByAFqIAVB0ABqIAVBoAFqIAMgBBCALCEBDAELIABB0AA2AjAgACAFQdAAajYCECAAIAU2AhwgACAFNgIUIAAoAiwhByAAIAU2AiwgACABIAVByAFqIAVB0ABqIAVBoAFqIAMgBBCALCEBIAdFDQAgAEEAQQAgACgCJBEGABogAEEANgIwIAAgBzYCLCAAQQA2AhwgAEEANgIQIAAoAhQhAyAAQQA2AhQgAUF/IAMbIQELIAAgACgCACIDIAZyNgIAQX8gASADQSBxGyEBIAJFDQAgABDYLQsgBUHQAWokACABC58SAg9/AX4jAEHQAGsiByQAIAcgATYCTCAHQTdqIQggB0E4aiEJQQAhCkEAIQtBACEBAkADQAJAIAtBAEgNAAJAIAFB/////wcgC2tMDQAQ6CtBPTYCAEF/IQsMAQsgASALaiELCyAHKAJMIgwhAQJAAkACQAJAAkAgDC0AACINRQ0AA0ACQAJAAkAgDUH/AXEiDQ0AIAEhDQwBCyANQSVHDQEgASENA0AgAS0AAUElRw0BIAcgAUECaiIONgJMIA1BAWohDSABLQACIQ8gDiEBIA9BJUYNAAsLIA0gDGshAQJAIABFDQAgACAMIAEQgSwLIAENB0F/IRBBASENIAcoAkwsAAEQ+ishDiAHKAJMIQECQCAORQ0AIAEtAAJBJEcNACABLAABQVBqIRBBASEKQQMhDQsgByABIA1qIgE2AkxBACERAkACQCABLAAAIg9BYGoiDkEfTQ0AIAEhDQwBC0EAIREgASENQQEgDnQiDkGJ0QRxRQ0AA0AgByABQQFqIg02AkwgDiARciERIAEsAAEiD0FgaiIOQSBPDQEgDSEBQQEgDnQiDkGJ0QRxDQALCwJAAkAgD0EqRw0AAkACQCANLAABEPorRQ0AIAcoAkwiDS0AAkEkRw0AIA0sAAFBAnQgBGpBwH5qQQo2AgAgDUEDaiEBIA0sAAFBA3QgA2pBgH1qKAIAIRJBASEKDAELIAoNBkEAIQpBACESAkAgAEUNACACIAIoAgAiAUEEajYCACABKAIAIRILIAcoAkxBAWohAQsgByABNgJMIBJBf0oNAUEAIBJrIRIgEUGAwAByIREMAQsgB0HMAGoQgiwiEkEASA0EIAcoAkwhAQtBfyETAkAgAS0AAEEuRw0AAkAgAS0AAUEqRw0AAkAgASwAAhD6K0UNACAHKAJMIgEtAANBJEcNACABLAACQQJ0IARqQcB+akEKNgIAIAEsAAJBA3QgA2pBgH1qKAIAIRMgByABQQRqIgE2AkwMAgsgCg0FAkACQCAADQBBACETDAELIAIgAigCACIBQQRqNgIAIAEoAgAhEwsgByAHKAJMQQJqIgE2AkwMAQsgByABQQFqNgJMIAdBzABqEIIsIRMgBygCTCEBC0EAIQ0DQCANIQ5BfyEUIAEsAABBv39qQTlLDQkgByABQQFqIg82AkwgASwAACENIA8hASANIA5BOmxqQc/xBWotAAAiDUF/akEISQ0ACwJAAkACQCANQRNGDQAgDUUNCwJAIBBBAEgNACAEIBBBAnRqIA02AgAgByADIBBBA3RqKQMANwNADAILIABFDQkgB0HAAGogDSACIAYQgywgBygCTCEPDAILQX8hFCAQQX9KDQoLQQAhASAARQ0ICyARQf//e3EiFSARIBFBgMAAcRshDUEAIRRBrBMhECAJIRECQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQCAPQX9qLAAAIgFBX3EgASABQQ9xQQNGGyABIA4bIgFBqH9qDiEEFRUVFRUVFRUOFQ8GDg4OFQYVFRUVAgUDFRUJFQEVFQQACyAJIRECQCABQb9/ag4HDhULFQ4ODgALIAFB0wBGDQkMEwtBACEUQawTIRAgBykDQCEWDAULQQAhAQJAAkACQAJAAkACQAJAIA5B/wFxDggAAQIDBBsFBhsLIAcoAkAgCzYCAAwaCyAHKAJAIAs2AgAMGQsgBygCQCALrDcDAAwYCyAHKAJAIAs7AQAMFwsgBygCQCALOgAADBYLIAcoAkAgCzYCAAwVCyAHKAJAIAusNwMADBQLIBNBCCATQQhLGyETIA1BCHIhDUH4ACEBCyAHKQNAIAkgAUEgcRCELCEMQQAhFEGsEyEQIAcpA0BQDQMgDUEIcUUNAyABQQR2QawTaiEQQQIhFAwDC0EAIRRBrBMhECAHKQNAIAkQhSwhDCANQQhxRQ0CIBMgCSAMayIBQQFqIBMgAUobIRMMAgsCQCAHKQNAIhZCf1UNACAHQgAgFn0iFjcDQEEBIRRBrBMhEAwBCwJAIA1BgBBxRQ0AQQEhFEGtEyEQDAELQa4TQawTIA1BAXEiFBshEAsgFiAJEIYsIQwLIA1B//97cSANIBNBf0obIQ0CQCAHKQNAIhZCAFINACATDQBBACETIAkhDAwMCyATIAkgDGsgFlBqIgEgEyABShshEwwLC0EAIRQgBygCQCIBQeryAyABGyIMQQAgExC7LCIBIAwgE2ogARshESAVIQ0gASAMayATIAEbIRMMCwsCQCATRQ0AIAcoAkAhDgwCC0EAIQEgAEEgIBJBACANEIcsDAILIAdBADYCDCAHIAcpA0A+AgggByAHQQhqNgJAQX8hEyAHQQhqIQ4LQQAhAQJAA0AgDigCACIPRQ0BAkAgB0EEaiAPEP0rIg9BAEgiDA0AIA8gEyABa0sNACAOQQRqIQ4gEyAPIAFqIgFLDQEMAgsLQX8hFCAMDQwLIABBICASIAEgDRCHLAJAIAENAEEAIQEMAQtBACEOIAcoAkAhDwNAIA8oAgAiDEUNASAHQQRqIAwQ/SsiDCAOaiIOIAFKDQEgACAHQQRqIAwQgSwgD0EEaiEPIA4gAUkNAAsLIABBICASIAEgDUGAwABzEIcsIBIgASASIAFKGyEBDAkLIAAgBysDQCASIBMgDSABIAURZQAhAQwICyAHIAcpA0A8ADdBASETIAghDCAJIREgFSENDAULIAcgAUEBaiIONgJMIAEtAAEhDSAOIQEMAAsACyALIRQgAA0FIApFDQNBASEBAkADQCAEIAFBAnRqKAIAIg1FDQEgAyABQQN0aiANIAIgBhCDLEEBIRQgAUEBaiIBQQpHDQAMBwsAC0EBIRQgAUEKTw0FA0AgBCABQQJ0aigCAA0BQQEhFCABQQFqIgFBCkYNBgwACwALQX8hFAwECyAJIRELIABBICAUIBEgDGsiDyATIBMgD0gbIhFqIg4gEiASIA5IGyIBIA4gDRCHLCAAIBAgFBCBLCAAQTAgASAOIA1BgIAEcxCHLCAAQTAgESAPQQAQhywgACAMIA8QgSwgAEEgIAEgDiANQYDAAHMQhywMAQsLQQAhFAsgB0HQAGokACAUCxkAAkAgAC0AAEEgcQ0AIAEgAiAAENQtGgsLSwEDf0EAIQECQCAAKAIALAAAEPorRQ0AA0AgACgCACICLAAAIQMgACACQQFqNgIAIAMgAUEKbGpBUGohASACLAABEPorDQALCyABC7sCAAJAIAFBFEsNAAJAAkACQAJAAkACQAJAAkACQAJAIAFBd2oOCgABAgMEBQYHCAkKCyACIAIoAgAiAUEEajYCACAAIAEoAgA2AgAPCyACIAIoAgAiAUEEajYCACAAIAE0AgA3AwAPCyACIAIoAgAiAUEEajYCACAAIAE1AgA3AwAPCyACIAIoAgBBB2pBeHEiAUEIajYCACAAIAEpAwA3AwAPCyACIAIoAgAiAUEEajYCACAAIAEyAQA3AwAPCyACIAIoAgAiAUEEajYCACAAIAEzAQA3AwAPCyACIAIoAgAiAUEEajYCACAAIAEwAAA3AwAPCyACIAIoAgAiAUEEajYCACAAIAExAAA3AwAPCyACIAIoAgBBB2pBeHEiAUEIajYCACAAIAErAwA5AwAPCyAAIAIgAxEBAAsLPgEBfwJAIABQDQADQCABQX9qIgEgAKdBD3FB4PUFai0AACACcjoAACAAQg9WIQMgAEIEiCEAIAMNAAsLIAELNgEBfwJAIABQDQADQCABQX9qIgEgAKdBB3FBMHI6AAAgAEIHViECIABCA4ghACACDQALCyABC4gBAgF+A38CQAJAIABCgICAgBBaDQAgACECDAELA0AgAUF/aiIBIAAgAEIKgCICQgp+fadBMHI6AAAgAEL/////nwFWIQMgAiEAIAMNAAsLAkAgAqciA0UNAANAIAFBf2oiASADIANBCm4iBEEKbGtBMHI6AAAgA0EJSyEFIAQhAyAFDQALCyABC3MBAX8jAEGAAmsiBSQAAkAgBEGAwARxDQAgAiADTA0AIAUgAUH/AXEgAiADayICQYACIAJBgAJJIgMbENEtGgJAIAMNAANAIAAgBUGAAhCBLCACQYB+aiICQf8BSw0ACwsgACAFIAIQgSwLIAVBgAJqJAALEQAgACABIAJBrQdBrgcQ/ysLlhgDEX8CfgF8IwBBsARrIgYkAEEAIQcgBkEANgIsAkACQCABEIssIhdCf1UNAEEBIQhBthMhCSABmiIBEIssIRcMAQsCQCAEQYAQcUUNAEEBIQhBuRMhCQwBC0G8E0G3EyAEQQFxIggbIQkgCEUhBwsCQAJAIBdCgICAgICAgPj/AINCgICAgICAgPj/AFINACAAQSAgAiAIQQNqIgogBEH//3txEIcsIAAgCSAIEIEsIABBq4QBQe6OAiAFQSBxIgsbQdqkAUGilAIgCxsgASABYhtBAxCBLCAAQSAgAiAKIARBgMAAcxCHLAwBCyAGQRBqIQwCQAJAAkACQCABIAZBLGoQ/isiASABoCIBRAAAAAAAAAAAYQ0AIAYgBigCLCILQX9qNgIsIAVBIHIiDUHhAEcNAQwDCyAFQSByIg1B4QBGDQJBBiADIANBAEgbIQ4gBigCLCEPDAELIAYgC0FjaiIPNgIsQQYgAyADQQBIGyEOIAFEAAAAAAAAsEGiIQELIAZBMGogBkHQAmogD0EASBsiECERA0ACQAJAIAFEAAAAAAAA8EFjIAFEAAAAAAAAAABmcUUNACABqyELDAELQQAhCwsgESALNgIAIBFBBGohESABIAu4oUQAAAAAZc3NQaIiAUQAAAAAAAAAAGINAAsCQAJAIA9BAU4NACARIQsgECESDAELIBAhEgNAIA9BHSAPQR1IGyEPAkAgEUF8aiILIBJJDQAgD60hGEIAIRcDQCALIAs1AgAgGIYgF0L/////D4N8IhcgF0KAlOvcA4AiF0KAlOvcA359PgIAIAtBfGoiCyASTw0ACyAXpyILRQ0AIBJBfGoiEiALNgIACwJAA0AgESILIBJNDQEgC0F8aiIRKAIARQ0ACwsgBiAGKAIsIA9rIg82AiwgCyERIA9BAEoNAAsLIA5BGWpBCW0hEQJAIA9Bf0oNACARQQFqIRMgDUHmAEYhFANAQQlBACAPayAPQXdIGyEKAkACQCASIAtPDQBBgJTr3AMgCnYhFUF/IAp0QX9zIRZBACEPIBIhEQNAIBEgESgCACIDIAp2IA9qNgIAIAMgFnEgFWwhDyARQQRqIhEgC0kNAAsgEigCACERIA9FDQEgCyAPNgIAIAtBBGohCwwBCyASKAIAIRELIAYgBigCLCAKaiIPNgIsIBAgEiARRUECdGoiEiAUGyIRIBNBAnRqIAsgCyARa0ECdSATShshCyAPQQBIDQALC0EAIRECQCASIAtPDQAgECASa0ECdUEJbCERQQohDyASKAIAIgNBCkkNAANAIBFBAWohESADIA9BCmwiD08NAAsLAkAgDkEAIBEgDUHmAEYbayANQecARiAOQQBHcWsiDyALIBBrQQJ1QQlsQXdqTg0AIA9BgMgAaiIDQQltIhVBAnQgEGpBhGBqIQpBCiEPAkAgAyAVQQlsayIDQQdKDQADQCAPQQpsIQ8gA0EBaiIDQQhHDQALCyAKQQRqIRYCQAJAIAooAgAiAyADIA9uIhMgD2xrIhUNACAWIAtGDQELRAAAAAAAAOA/RAAAAAAAAPA/RAAAAAAAAPg/IBYgC0YbRAAAAAAAAPg/IBUgD0EBdiIWRhsgFSAWSRshGUQBAAAAAABAQ0QAAAAAAABAQyATQQFxGyEBAkAgBw0AIAktAABBLUcNACAZmiEZIAGaIQELIAogAyAVayIDNgIAIAEgGaAgAWENACAKIAMgD2oiETYCAAJAIBFBgJTr3ANJDQADQCAKQQA2AgACQCAKQXxqIgogEk8NACASQXxqIhJBADYCAAsgCiAKKAIAQQFqIhE2AgAgEUH/k+vcA0sNAAsLIBAgEmtBAnVBCWwhEUEKIQ8gEigCACIDQQpJDQADQCARQQFqIREgAyAPQQpsIg9PDQALCyAKQQRqIg8gCyALIA9LGyELCwJAA0AgCyIDIBJNIg8NASADQXxqIgsoAgBFDQALCwJAAkAgDUHnAEYNACAEQQhxIRYMAQsgEUF/c0F/IA5BASAOGyILIBFKIBFBe0pxIgobIAtqIQ5Bf0F+IAobIAVqIQUgBEEIcSIWDQBBdyELAkAgDw0AIANBfGooAgAiCkUNAEEKIQ9BACELIApBCnANAANAIAsiFUEBaiELIAogD0EKbCIPcEUNAAsgFUF/cyELCyADIBBrQQJ1QQlsIQ8CQCAFQV9xQcYARw0AQQAhFiAOIA8gC2pBd2oiC0EAIAtBAEobIgsgDiALSBshDgwBC0EAIRYgDiARIA9qIAtqQXdqIgtBACALQQBKGyILIA4gC0gbIQ4LIA4gFnJBAEchEwJAAkAgBUFfcSIPQcYARw0AIBFBACARQQBKGyELDAELAkAgDCARIBFBH3UiC2ogC3OtIAwQhiwiC2tBAUoNAANAIAtBf2oiC0EwOgAAIAwgC2tBAkgNAAsLIAtBfmoiFCAFOgAAIAtBf2pBLUErIBFBAEgbOgAAIAwgFGshCwsgAEEgIAIgCCAOaiATaiALakEBaiIKIAQQhywgACAJIAgQgSwgAEEwIAIgCiAEQYCABHMQhywCQAJAAkACQCAPQcYARw0AIAZBEGpBCHIhFSAGQRBqQQlyIQ8gECASIBIgEEsbIhIhEQNAIBE1AgAgDxCGLCELAkACQCARIBJGDQAgCyAGQRBqTQ0BA0AgC0F/aiILQTA6AAAgCyAGQRBqSw0ADAILAAsgCyAPRw0AIAZBMDoAGCAVIQsLIAAgCyAPIAtrEIEsIBFBBGoiESAQTQ0AC0EAIQsgE0UNAiAAQYrgA0EBEIEsIBEgA08NASAOQQFIDQEDQAJAIBE1AgAgDxCGLCILIAZBEGpNDQADQCALQX9qIgtBMDoAACALIAZBEGpLDQALCyAAIAsgDkEJIA5BCUgbEIEsIA5Bd2ohCyARQQRqIhEgA08NAyAOQQlKIRIgCyEOIBINAAwDCwALAkAgDkEASA0AIAMgEkEEaiADIBJLGyEVIAZBEGpBCXIhDyAGQRBqQQhyIRAgEiERA0ACQCARNQIAIA8QhiwiCyAPRw0AIAZBMDoAGCAQIQsLAkACQCARIBJGDQAgCyAGQRBqTQ0BA0AgC0F/aiILQTA6AAAgCyAGQRBqSw0ADAILAAsgACALQQEQgSwgC0EBaiELAkAgDkEASg0AIBZFDQELIABBiuADQQEQgSwLIAAgCyAPIAtrIgMgDiAOIANKGxCBLCAOIANrIQ4gEUEEaiIRIBVPDQEgDkF/Sg0ACwsgAEEwIA5BEmpBEkEAEIcsIAAgFCAMIBRrEIEsDAILIA4hCwsgAEEwIAtBCWpBCUEAEIcsCyAAQSAgAiAKIARBgMAAcxCHLAwBCyAJIAVBGnRBH3VBCXFqIQ4CQCADQQtLDQBBDCADayILRQ0ARAAAAAAAACBAIRkDQCAZRAAAAAAAADBAoiEZIAtBf2oiCw0ACwJAIA4tAABBLUcNACAZIAGaIBmhoJohAQwBCyABIBmgIBmhIQELAkAgBigCLCILIAtBH3UiC2ogC3OtIAwQhiwiCyAMRw0AIAZBMDoADyAGQQ9qIQsLIAhBAnIhFiAFQSBxIRIgBigCLCERIAtBfmoiFSAFQQ9qOgAAIAtBf2pBLUErIBFBAEgbOgAAIARBCHEhDyAGQRBqIREDQCARIQsCQAJAIAGZRAAAAAAAAOBBY0UNACABqiERDAELQYCAgIB4IRELIAsgEUHg9QVqLQAAIBJyOgAAIAEgEbehRAAAAAAAADBAoiEBAkAgC0EBaiIRIAZBEGprQQFHDQACQCABRAAAAAAAAAAAYg0AIANBAEoNACAPRQ0BCyALQS46AAEgC0ECaiERCyABRAAAAAAAAAAAYg0ACwJAAkAgA0UNACARIAZBEGprQX5qIANODQAgAyAMaiAVa0ECaiELDAELIAwgBkEQaiAVamsgEWohCwsgAEEgIAIgCyAWaiIKIAQQhywgACAOIBYQgSwgAEEwIAIgCiAEQYCABHMQhywgACAGQRBqIBEgBkEQamsiERCBLCAAQTAgCyARIAwgFWsiEmprQQBBABCHLCAAIBUgEhCBLCAAQSAgAiAKIARBgMAAcxCHLAsgBkGwBGokACACIAogCiACSBsLLgEBfyABIAEoAgBBB2pBeHEiAkEQajYCACAAIAIpAwAgAkEIaikDABDbLDkDAAsFACAAvQsPACAAIAEgAkEAQQAQ/ysLEAAgACABIAJBrQdBABD/Kwu1AQECfyMAQaABayIEJAAgBEEIakHw9QVBkAEQ0C0aAkACQAJAIAFBAEoNACABDQEgBEGfAWohAEEBIQELIAQgADYCNCAEIAA2AhwgBEF+IABrIgUgASABIAVLGyIBNgI4IAQgACABaiIANgIkIAQgADYCGCAEQQhqIAIgAxCILCEAIAFFDQEgBCgCHCIBIAEgBCgCGEZrQQA6AAAMAQsQ6CtBPTYCAEF/IQALIARBoAFqJAAgAAs0AQF/IAAoAhQiAyABIAIgACgCECADayIDIAMgAksbIgMQ0C0aIAAgACgCFCADajYCFCACC7UBAQJ/IwBBoAFrIgQkACAEQQhqQfD1BUGQARDQLRoCQAJAAkAgAUEASg0AIAENASAEQZ8BaiEAQQEhAQsgBCAANgI0IAQgADYCHCAEQX4gAGsiBSABIAEgBUsbIgE2AjggBCAAIAFqIgA2AiQgBCAANgIYIARBCGogAiADEIwsIQAgAUUNASAEKAIcIgEgASAEKAIYRmtBADoAAAwBCxDoK0E9NgIAQX8hAAsgBEGgAWokACAAC7UBAQJ/IwBBoAFrIgQkACAEQQhqQfD1BUGQARDQLRoCQAJAAkAgAUEASg0AIAENASAEQZ8BaiEAQQEhAQsgBCAANgI0IAQgADYCHCAEQX4gAGsiBSABIAEgBUsbIgE2AjggBCAAIAFqIgA2AiQgBCAANgIYIARBCGogAiADEI0sIQAgAUUNASAEKAIcIgEgASAEKAIYRmtBADoAAAwBCxDoK0E9NgIAQX8hAAsgBEGgAWokACAACxEAIABB/////wcgASACEJAsCxEAIABB/////wcgASACEJEsCxAAIABBIEYgAEF3akEFSXILPwICfwF+IAAgATcDcCAAIAAoAggiAiAAKAIEIgNrrCIENwN4IAAgAyABp2ogAiAEIAFVGyACIAFCAFIbNgJoC7sBAgF+BH8CQAJAAkAgACkDcCIBUA0AIAApA3ggAVkNAQsgABCwLCICQX9KDQELIABBADYCaEF/DwsgACgCCCIDIQQCQCAAKQNwIgFQDQAgAyEEIAEgACkDeEJ/hXwiASADIAAoAgQiBWusWQ0AIAUgAadqIQQLIAAgBDYCaCAAKAIEIQQCQCADRQ0AIAAgACkDeCADIARrQQFqrHw3A3gLAkAgAiAEQX9qIgAtAABGDQAgACACOgAACyACCzUAIAAgATcDACAAIARCMIinQYCAAnEgAkIwiKdB//8BcXKtQjCGIAJC////////P4OENwMIC+cCAQF/IwBB0ABrIgQkAAJAAkAgA0GAgAFIDQAgBEEgaiABIAJCAEKAgICAgICA//8AENgsIARBIGpBCGopAwAhAiAEKQMgIQECQCADQf//AU4NACADQYGAf2ohAwwCCyAEQRBqIAEgAkIAQoCAgICAgID//wAQ2CwgA0H9/wIgA0H9/wJIG0GCgH5qIQMgBEEQakEIaikDACECIAQpAxAhAQwBCyADQYGAf0oNACAEQcAAaiABIAJCAEKAgICAgIDAABDYLCAEQcAAakEIaikDACECIAQpA0AhAQJAIANBg4B+TA0AIANB/v8AaiEDDAELIARBMGogASACQgBCgICAgICAwAAQ2CwgA0GGgH0gA0GGgH1KG0H8/wFqIQMgBEEwakEIaikDACECIAQpAzAhAQsgBCABIAJCACADQf//AGqtQjCGENgsIAAgBEEIaikDADcDCCAAIAQpAwA3AwAgBEHQAGokAAscACAAIAJC////////////AIM3AwggACABNwMAC+cIAgZ/An4jAEEwayIEJABCACEKAkACQCACQQJLDQAgAUEEaiEFIAJBAnQiAkG89wVqKAIAIQYgAkGw9wVqKAIAIQcDQAJAAkAgASgCBCICIAEoAmhPDQAgBSACQQFqNgIAIAItAAAhAgwBCyABEJYsIQILIAIQlCwNAAtBASEIAkACQCACQVVqDgMAAQABC0F/QQEgAkEtRhshCAJAIAEoAgQiAiABKAJoTw0AIAUgAkEBajYCACACLQAAIQIMAQsgARCWLCECC0EAIQkCQAJAAkADQCACQSByIAlB5AhqLAAARw0BAkAgCUEGSw0AAkAgASgCBCICIAEoAmhPDQAgBSACQQFqNgIAIAItAAAhAgwBCyABEJYsIQILIAlBAWoiCUEIRw0ADAILAAsCQCAJQQNGDQAgCUEIRg0BIAlBBEkNAiADRQ0CIAlBCEYNAQsCQCABKAJoIgFFDQAgBSAFKAIAQX9qNgIACyADRQ0AIAlBBEkNAANAAkAgAUUNACAFIAUoAgBBf2o2AgALIAlBf2oiCUEDSw0ACwsgBCAIskMAAIB/lBDSLCAEQQhqKQMAIQsgBCkDACEKDAILAkACQAJAIAkNAEEAIQkDQCACQSByIAlBq4QBaiwAAEcNAQJAIAlBAUsNAAJAIAEoAgQiAiABKAJoTw0AIAUgAkEBajYCACACLQAAIQIMAQsgARCWLCECCyAJQQFqIglBA0cNAAwCCwALAkACQCAJDgQAAQECAQsCQCACQTBHDQACQAJAIAEoAgQiCSABKAJoTw0AIAUgCUEBajYCACAJLQAAIQkMAQsgARCWLCEJCwJAIAlBX3FB2ABHDQAgBEEQaiABIAcgBiAIIAMQmywgBEEYaikDACELIAQpAxAhCgwGCyABKAJoRQ0AIAUgBSgCAEF/ajYCAAsgBEEgaiABIAIgByAGIAggAxCcLCAEQShqKQMAIQsgBCkDICEKDAQLAkAgASgCaEUNACAFIAUoAgBBf2o2AgALEOgrQRw2AgAMAQsCQAJAIAEoAgQiAiABKAJoTw0AIAUgAkEBajYCACACLQAAIQIMAQsgARCWLCECCwJAAkAgAkEoRw0AQQEhCQwBC0KAgICAgIDg//8AIQsgASgCaEUNAyAFIAUoAgBBf2o2AgAMAwsDQAJAAkAgASgCBCICIAEoAmhPDQAgBSACQQFqNgIAIAItAAAhAgwBCyABEJYsIQILIAJBv39qIQgCQAJAIAJBUGpBCkkNACAIQRpJDQAgAkGff2ohCCACQd8ARg0AIAhBGk8NAQsgCUEBaiEJDAELC0KAgICAgIDg//8AIQsgAkEpRg0CAkAgASgCaCICRQ0AIAUgBSgCAEF/ajYCAAsCQCADRQ0AIAlFDQMDQCAJQX9qIQkCQCACRQ0AIAUgBSgCAEF/ajYCAAsgCQ0ADAQLAAsQ6CtBHDYCAAtCACEKIAFCABCVLAtCACELCyAAIAo3AwAgACALNwMIIARBMGokAAvCDwIIfwd+IwBBsANrIgYkAAJAAkAgASgCBCIHIAEoAmhPDQAgASAHQQFqNgIEIActAAAhBwwBCyABEJYsIQcLQQAhCEIAIQ5BACEJAkACQAJAA0ACQCAHQTBGDQAgB0EuRw0EIAEoAgQiByABKAJoTw0CIAEgB0EBajYCBCAHLQAAIQcMAwsCQCABKAIEIgcgASgCaE8NAEEBIQkgASAHQQFqNgIEIActAAAhBwwBC0EBIQkgARCWLCEHDAALAAsgARCWLCEHC0EBIQhCACEOIAdBMEcNAANAAkACQCABKAIEIgcgASgCaE8NACABIAdBAWo2AgQgBy0AACEHDAELIAEQliwhBwsgDkJ/fCEOIAdBMEYNAAtBASEIQQEhCQtCgICAgICAwP8/IQ9BACEKQgAhEEIAIRFCACESQQAhC0IAIRMCQAJAA0AgB0EgciEMAkACQCAHQVBqIg1BCkkNAAJAIAxBn39qQQZJDQAgB0EuRw0FCyAHQS5HDQAgCA0DQQEhCCATIQ4MAQsgDEGpf2ogDSAHQTlKGyEHAkACQCATQgdVDQAgByAKQQR0aiEKDAELAkAgE0IcVQ0AIAZBMGogBxDTLCAGQSBqIBIgD0IAQoCAgICAgMD9PxDYLCAGQRBqIAYpAyAiEiAGQSBqQQhqKQMAIg8gBikDMCAGQTBqQQhqKQMAENgsIAYgECARIAYpAxAgBkEQakEIaikDABDMLCAGQQhqKQMAIREgBikDACEQDAELIAdFDQAgCw0AIAZB0ABqIBIgD0IAQoCAgICAgID/PxDYLCAGQcAAaiAQIBEgBikDUCAGQdAAakEIaikDABDMLCAGQcAAakEIaikDACERQQEhCyAGKQNAIRALIBNCAXwhE0EBIQkLAkAgASgCBCIHIAEoAmhPDQAgASAHQQFqNgIEIActAAAhBwwBCyABEJYsIQcMAAsAC0EuIQcLAkACQAJAAkAgCQ0AAkAgASgCaA0AIAUNAwwCCyABIAEoAgQiB0F/ajYCBCAFRQ0BIAEgB0F+ajYCBCAIRQ0CIAEgB0F9ajYCBAwCCwJAIBNCB1UNACATIQ8DQCAKQQR0IQogD0IBfCIPQghSDQALCwJAAkACQAJAIAdBX3FB0ABHDQAgASAFEJ0sIg9CgICAgICAgICAf1INAwJAIAVFDQAgASgCaA0CDAMLQgAhECABQgAQlSxCACETDAYLIAEoAmhFDQELIAEgASgCBEF/ajYCBAtCACEPCwJAIAoNACAGQfAAaiAEt0QAAAAAAAAAAKIQ0SwgBkH4AGopAwAhEyAGKQNwIRAMAwsCQCAOIBMgCBtCAoYgD3xCYHwiE0EAIANrrVcNABDoK0HEADYCACAGQaABaiAEENMsIAZBkAFqIAYpA6ABIAZBoAFqQQhqKQMAQn9C////////v///ABDYLCAGQYABaiAGKQOQASAGQZABakEIaikDAEJ/Qv///////7///wAQ2CwgBkGAAWpBCGopAwAhEyAGKQOAASEQDAMLAkAgEyADQZ5+aqxTDQACQCAKQX9MDQADQCAGQaADaiAQIBFCAEKAgICAgIDA/79/EMwsIBAgEUIAQoCAgICAgID/PxDPLCEHIAZBkANqIBAgESAQIAYpA6ADIAdBAEgiARsgESAGQaADakEIaikDACABGxDMLCATQn98IRMgBkGQA2pBCGopAwAhESAGKQOQAyEQIApBAXQgB0F/SnIiCkF/Sg0ACwsCQAJAIBMgA6x9QiB8Ig6nIgdBACAHQQBKGyACIA4gAq1TGyIHQfEASA0AIAZBgANqIAQQ0ywgBkGIA2opAwAhDkIAIQ8gBikDgAMhEkIAIRQMAQsgBkHgAmpEAAAAAAAA8D9BkAEgB2sQzi0Q0SwgBkHQAmogBBDTLCAGQfACaiAGKQPgAiAGQeACakEIaikDACAGKQPQAiISIAZB0AJqQQhqKQMAIg4QlywgBkHwAmpBCGopAwAhFCAGKQPwAiEPCyAGQcACaiAKIAdBIEggECARQgBCABDOLEEAR3EgCkEBcUVxIgdqENQsIAZBsAJqIBIgDiAGKQPAAiAGQcACakEIaikDABDYLCAGQZACaiAGKQOwAiAGQbACakEIaikDACAPIBQQzCwgBkGgAmpCACAQIAcbQgAgESAHGyASIA4Q2CwgBkGAAmogBikDoAIgBkGgAmpBCGopAwAgBikDkAIgBkGQAmpBCGopAwAQzCwgBkHwAWogBikDgAIgBkGAAmpBCGopAwAgDyAUENosAkAgBikD8AEiECAGQfABakEIaikDACIRQgBCABDOLA0AEOgrQcQANgIACyAGQeABaiAQIBEgE6cQmCwgBkHgAWpBCGopAwAhEyAGKQPgASEQDAMLEOgrQcQANgIAIAZB0AFqIAQQ0ywgBkHAAWogBikD0AEgBkHQAWpBCGopAwBCAEKAgICAgIDAABDYLCAGQbABaiAGKQPAASAGQcABakEIaikDAEIAQoCAgICAgMAAENgsIAZBsAFqQQhqKQMAIRMgBikDsAEhEAwCCyABQgAQlSwLIAZB4ABqIAS3RAAAAAAAAAAAohDRLCAGQegAaikDACETIAYpA2AhEAsgACAQNwMAIAAgEzcDCCAGQbADaiQAC5MgAwx/Bn4BfCMAQZDGAGsiByQAQQAhCEEAIAQgA2oiCWshCkIAIRNBACELAkACQAJAA0ACQCACQTBGDQAgAkEuRw0EIAEoAgQiAiABKAJoTw0CIAEgAkEBajYCBCACLQAAIQIMAwsCQCABKAIEIgIgASgCaE8NAEEBIQsgASACQQFqNgIEIAItAAAhAgwBC0EBIQsgARCWLCECDAALAAsgARCWLCECC0EBIQhCACETIAJBMEcNAANAAkACQCABKAIEIgIgASgCaE8NACABIAJBAWo2AgQgAi0AACECDAELIAEQliwhAgsgE0J/fCETIAJBMEYNAAtBASELQQEhCAtBACEMIAdBADYCkAYgAkFQaiENQgAhFAJAAkACQAJAAkACQAJAAkACQCACQS5GIg5FDQBBACEPQQAhEAwBC0EAIQ9BACEQIA1BCUsNAQsDQAJAAkAgDkEBcUUNAAJAIAgNACAUIRNBASEIDAILIAtFIQ4MBAsgFEIBfCEUAkAgD0H8D0oNACACQTBGIQsgFKchESAHQZAGaiAPQQJ0aiEOAkAgDEUNACACIA4oAgBBCmxqQVBqIQ0LIBAgESALGyEQIA4gDTYCAEEBIQtBACAMQQFqIgIgAkEJRiICGyEMIA8gAmohDwwBCyACQTBGDQAgByAHKAKARkEBcjYCgEZB3I8BIRALAkACQCABKAIEIgIgASgCaE8NACABIAJBAWo2AgQgAi0AACECDAELIAEQliwhAgsgAkFQaiENIAJBLkYiDg0AIA1BCkkNAAsLIBMgFCAIGyETAkAgC0UNACACQV9xQcUARw0AAkAgASAGEJ0sIhVCgICAgICAgICAf1INACAGRQ0FQgAhFSABKAJoRQ0AIAEgASgCBEF/ajYCBAsgC0UNAyAVIBN8IRMMBQsgC0UhDiACQQBIDQELIAEoAmhFDQAgASABKAIEQX9qNgIECyAORQ0CCxDoK0EcNgIAC0IAIRQgAUIAEJUsQgAhEwwBCwJAIAcoApAGIgENACAHIAW3RAAAAAAAAAAAohDRLCAHQQhqKQMAIRMgBykDACEUDAELAkAgFEIJVQ0AIBMgFFINAAJAIANBHkoNACABIAN2DQELIAdBMGogBRDTLCAHQSBqIAEQ1CwgB0EQaiAHKQMwIAdBMGpBCGopAwAgBykDICAHQSBqQQhqKQMAENgsIAdBEGpBCGopAwAhEyAHKQMQIRQMAQsCQCATIARBfm2tVw0AEOgrQcQANgIAIAdB4ABqIAUQ0ywgB0HQAGogBykDYCAHQeAAakEIaikDAEJ/Qv///////7///wAQ2CwgB0HAAGogBykDUCAHQdAAakEIaikDAEJ/Qv///////7///wAQ2CwgB0HAAGpBCGopAwAhEyAHKQNAIRQMAQsCQCATIARBnn5qrFkNABDoK0HEADYCACAHQZABaiAFENMsIAdBgAFqIAcpA5ABIAdBkAFqQQhqKQMAQgBCgICAgICAwAAQ2CwgB0HwAGogBykDgAEgB0GAAWpBCGopAwBCAEKAgICAgIDAABDYLCAHQfAAakEIaikDACETIAcpA3AhFAwBCwJAIAxFDQACQCAMQQhKDQAgB0GQBmogD0ECdGoiAigCACEBA0AgAUEKbCEBIAxBAWoiDEEJRw0ACyACIAE2AgALIA9BAWohDwsgE6chCAJAIBBBCU4NACAQIAhKDQAgCEERSg0AAkAgCEEJRw0AIAdBwAFqIAUQ0ywgB0GwAWogBygCkAYQ1CwgB0GgAWogBykDwAEgB0HAAWpBCGopAwAgBykDsAEgB0GwAWpBCGopAwAQ2CwgB0GgAWpBCGopAwAhEyAHKQOgASEUDAILAkAgCEEISg0AIAdBkAJqIAUQ0ywgB0GAAmogBygCkAYQ1CwgB0HwAWogBykDkAIgB0GQAmpBCGopAwAgBykDgAIgB0GAAmpBCGopAwAQ2CwgB0HgAWpBCCAIa0ECdEGQ9wVqKAIAENMsIAdB0AFqIAcpA/ABIAdB8AFqQQhqKQMAIAcpA+ABIAdB4AFqQQhqKQMAENAsIAdB0AFqQQhqKQMAIRMgBykD0AEhFAwCCyAHKAKQBiEBAkAgAyAIQX1sakEbaiICQR5KDQAgASACdg0BCyAHQeACaiAFENMsIAdB0AJqIAEQ1CwgB0HAAmogBykD4AIgB0HgAmpBCGopAwAgBykD0AIgB0HQAmpBCGopAwAQ2CwgB0GwAmogCEECdEHo9gVqKAIAENMsIAdBoAJqIAcpA8ACIAdBwAJqQQhqKQMAIAcpA7ACIAdBsAJqQQhqKQMAENgsIAdBoAJqQQhqKQMAIRMgBykDoAIhFAwBCwNAIAdBkAZqIA8iAkF/aiIPQQJ0aigCAEUNAAtBACEMAkACQCAIQQlvIgENAEEAIQ4MAQsgASABQQlqIAhBf0obIQYCQAJAIAINAEEAIQ5BACECDAELQYCU69wDQQggBmtBAnRBkPcFaigCACILbSERQQAhDUEAIQFBACEOA0AgB0GQBmogAUECdGoiDyAPKAIAIg8gC24iECANaiINNgIAIA5BAWpB/w9xIA4gASAORiANRXEiDRshDiAIQXdqIAggDRshCCARIA8gECALbGtsIQ0gAUEBaiIBIAJHDQALIA1FDQAgB0GQBmogAkECdGogDTYCACACQQFqIQILIAggBmtBCWohCAsDQCAHQZAGaiAOQQJ0aiEQAkADQAJAIAhBJEgNACAIQSRHDQIgECgCAEHR6fkETw0CCyACQf8PaiELQQAhDQNAAkACQCAHQZAGaiALQf8PcSIBQQJ0aiILNQIAQh2GIA2tfCITQoGU69wDWg0AQQAhDQwBCyATIBNCgJTr3AOAIhRCgJTr3AN+fSETIBSnIQ0LIAsgE6ciDzYCACACIAIgAiABIA8bIAEgDkYbIAEgAkF/akH/D3FHGyECIAFBf2ohCyABIA5HDQALIAxBY2ohDCANRQ0ACwJAIA5Bf2pB/w9xIg4gAkcNACAHQZAGaiACQf4PakH/D3FBAnRqIgEgASgCACAHQZAGaiACQX9qQf8PcSIBQQJ0aigCAHI2AgAgASECCyAIQQlqIQggB0GQBmogDkECdGogDTYCAAwBCwsCQANAIAJBAWpB/w9xIQYgB0GQBmogAkF/akH/D3FBAnRqIRIDQEEJQQEgCEEtShshDwJAA0AgDiELQQAhAQJAAkADQCABIAtqQf8PcSIOIAJGDQEgB0GQBmogDkECdGooAgAiDiABQQJ0QYD3BWooAgAiDUkNASAOIA1LDQIgAUEBaiIBQQRHDQALCyAIQSRHDQBCACETQQAhAUIAIRQDQAJAIAEgC2pB/w9xIg4gAkcNACACQQFqQf8PcSICQQJ0IAdBkAZqakF8akEANgIACyAHQYAGaiATIBRCAEKAgICA5Zq3jsAAENgsIAdB8AVqIAdBkAZqIA5BAnRqKAIAENQsIAdB4AVqIAcpA4AGIAdBgAZqQQhqKQMAIAcpA/AFIAdB8AVqQQhqKQMAEMwsIAdB4AVqQQhqKQMAIRQgBykD4AUhEyABQQFqIgFBBEcNAAsgB0HQBWogBRDTLCAHQcAFaiATIBQgBykD0AUgB0HQBWpBCGopAwAQ2CwgB0HABWpBCGopAwAhFEIAIRMgBykDwAUhFSAMQfEAaiINIARrIgFBACABQQBKGyADIAEgA0giCBsiDkHwAEwNAkIAIRZCACEXQgAhGAwFCyAPIAxqIQwgAiEOIAsgAkYNAAtBgJTr3AMgD3YhEEF/IA90QX9zIRFBACEBIAshDgNAIAdBkAZqIAtBAnRqIg0gDSgCACINIA92IAFqIgE2AgAgDkEBakH/D3EgDiALIA5GIAFFcSIBGyEOIAhBd2ogCCABGyEIIA0gEXEgEGwhASALQQFqQf8PcSILIAJHDQALIAFFDQECQCAGIA5GDQAgB0GQBmogAkECdGogATYCACAGIQIMAwsgEiASKAIAQQFyNgIAIAYhDgwBCwsLIAdBkAVqRAAAAAAAAPA/QeEBIA5rEM4tENEsIAdBsAVqIAcpA5AFIAdBkAVqQQhqKQMAIBUgFBCXLCAHQbAFakEIaikDACEYIAcpA7AFIRcgB0GABWpEAAAAAAAA8D9B8QAgDmsQzi0Q0SwgB0GgBWogFSAUIAcpA4AFIAdBgAVqQQhqKQMAEM0tIAdB8ARqIBUgFCAHKQOgBSITIAdBoAVqQQhqKQMAIhYQ2iwgB0HgBGogFyAYIAcpA/AEIAdB8ARqQQhqKQMAEMwsIAdB4ARqQQhqKQMAIRQgBykD4AQhFQsCQCALQQRqQf8PcSIPIAJGDQACQAJAIAdBkAZqIA9BAnRqKAIAIg9B/8m17gFLDQACQCAPDQAgC0EFakH/D3EgAkYNAgsgB0HwA2ogBbdEAAAAAAAA0D+iENEsIAdB4ANqIBMgFiAHKQPwAyAHQfADakEIaikDABDMLCAHQeADakEIaikDACEWIAcpA+ADIRMMAQsCQCAPQYDKte4BRg0AIAdB0ARqIAW3RAAAAAAAAOg/ohDRLCAHQcAEaiATIBYgBykD0AQgB0HQBGpBCGopAwAQzCwgB0HABGpBCGopAwAhFiAHKQPABCETDAELIAW3IRkCQCALQQVqQf8PcSACRw0AIAdBkARqIBlEAAAAAAAA4D+iENEsIAdBgARqIBMgFiAHKQOQBCAHQZAEakEIaikDABDMLCAHQYAEakEIaikDACEWIAcpA4AEIRMMAQsgB0GwBGogGUQAAAAAAADoP6IQ0SwgB0GgBGogEyAWIAcpA7AEIAdBsARqQQhqKQMAEMwsIAdBoARqQQhqKQMAIRYgBykDoAQhEwsgDkHvAEoNACAHQdADaiATIBZCAEKAgICAgIDA/z8QzS0gBykD0AMgB0HQA2pBCGopAwBCAEIAEM4sDQAgB0HAA2ogEyAWQgBCgICAgICAwP8/EMwsIAdBwANqQQhqKQMAIRYgBykDwAMhEwsgB0GwA2ogFSAUIBMgFhDMLCAHQaADaiAHKQOwAyAHQbADakEIaikDACAXIBgQ2iwgB0GgA2pBCGopAwAhFCAHKQOgAyEVAkAgDUH/////B3FBfiAJa0wNACAHQZADaiAVIBQQmSwgB0GAA2ogFSAUQgBCgICAgICAgP8/ENgsIAcpA5ADIhcgB0GQA2pBCGopAwAiGEIAQoCAgICAgIC4wAAQzywhAiAUIAdBgANqQQhqKQMAIAJBAEgiDRshFCAVIAcpA4ADIA0bIRUCQCAMIAJBf0pqIgxB7gBqIApKDQAgCCAIIA4gAUdxIBcgGEIAQoCAgICAgIC4wAAQzyxBAEgbQQFHDQEgEyAWQgBCABDOLEUNAQsQ6CtBxAA2AgALIAdB8AJqIBUgFCAMEJgsIAdB8AJqQQhqKQMAIRMgBykD8AIhFAsgACAUNwMAIAAgEzcDCCAHQZDGAGokAAuxBAIEfwF+AkACQCAAKAIEIgIgACgCaE8NACAAIAJBAWo2AgQgAi0AACECDAELIAAQliwhAgsCQAJAAkAgAkFVag4DAQABAAsgAkFQaiEDQQAhBAwBCwJAAkAgACgCBCIFIAAoAmhPDQAgACAFQQFqNgIEIAUtAAAhBQwBCyAAEJYsIQULIAJBLUYhBAJAIAVBUGoiA0EKSQ0AIAFFDQAgACgCaEUNACAAIAAoAgRBf2o2AgQLIAUhAgsCQAJAIANBCk8NAEEAIQUDQCACIAVBCmxqIQUCQAJAIAAoAgQiAiAAKAJoTw0AIAAgAkEBajYCBCACLQAAIQIMAQsgABCWLCECCyAFQVBqIQUCQCACQVBqIgNBCUsNACAFQcyZs+YASA0BCwsgBawhBgJAIANBCk8NAANAIAKtIAZCCn58IQYCQAJAIAAoAgQiAiAAKAJoTw0AIAAgAkEBajYCBCACLQAAIQIMAQsgABCWLCECCyAGQlB8IQYgAkFQaiIDQQlLDQEgBkKuj4XXx8LrowFTDQALCwJAIANBCk8NAANAAkACQCAAKAIEIgIgACgCaE8NACAAIAJBAWo2AgQgAi0AACECDAELIAAQliwhAgsgAkFQakEKSQ0ACwsCQCAAKAJoRQ0AIAAgACgCBEF/ajYCBAtCACAGfSAGIAQbIQYMAQtCgICAgICAgICAfyEGIAAoAmhFDQAgACAAKAIEQX9qNgIEQoCAgICAgICAgH8PCyAGC+ELAgV/BH4jAEEQayIEJAACQAJAAkACQAJAAkACQCABQSRLDQADQAJAAkAgACgCBCIFIAAoAmhPDQAgACAFQQFqNgIEIAUtAAAhBQwBCyAAEJYsIQULIAUQlCwNAAtBACEGAkACQCAFQVVqDgMAAQABC0F/QQAgBUEtRhshBgJAIAAoAgQiBSAAKAJoTw0AIAAgBUEBajYCBCAFLQAAIQUMAQsgABCWLCEFCwJAAkAgAUFvcQ0AIAVBMEcNAAJAAkAgACgCBCIFIAAoAmhPDQAgACAFQQFqNgIEIAUtAAAhBQwBCyAAEJYsIQULAkAgBUFfcUHYAEcNAAJAAkAgACgCBCIFIAAoAmhPDQAgACAFQQFqNgIEIAUtAAAhBQwBCyAAEJYsIQULQRAhASAFQdH3BWotAABBEEkNBQJAIAAoAmgNAEIAIQMgAg0KDAkLIAAgACgCBCIFQX9qNgIEIAJFDQggACAFQX5qNgIEQgAhAwwJCyABDQFBCCEBDAQLIAFBCiABGyIBIAVB0fcFai0AAEsNAAJAIAAoAmhFDQAgACAAKAIEQX9qNgIEC0IAIQMgAEIAEJUsEOgrQRw2AgAMBwsgAUEKRw0CQgAhCQJAIAVBUGoiAkEJSw0AQQAhAQNAIAFBCmwhAQJAAkAgACgCBCIFIAAoAmhPDQAgACAFQQFqNgIEIAUtAAAhBQwBCyAAEJYsIQULIAEgAmohAQJAIAVBUGoiAkEJSw0AIAFBmbPmzAFJDQELCyABrSEJCyACQQlLDQEgCUIKfiEKIAKtIQsDQAJAAkAgACgCBCIFIAAoAmhPDQAgACAFQQFqNgIEIAUtAAAhBQwBCyAAEJYsIQULIAogC3whCSAFQVBqIgJBCUsNAiAJQpqz5syZs+bMGVoNAiAJQgp+IgogAq0iC0J/hVgNAAtBCiEBDAMLEOgrQRw2AgBCACEDDAULQQohASACQQlNDQEMAgsCQCABIAFBf2pxRQ0AQgAhCQJAIAEgBUHR9wVqLQAAIgdNDQBBACECA0AgAiABbCECAkACQCAAKAIEIgUgACgCaE8NACAAIAVBAWo2AgQgBS0AACEFDAELIAAQliwhBQsgByACaiECAkAgASAFQdH3BWotAAAiB00NACACQcfj8ThJDQELCyACrSEJCyABIAdNDQEgAa0hCgNAIAkgCn4iCyAHrUL/AYMiDEJ/hVYNAgJAAkAgACgCBCIFIAAoAmhPDQAgACAFQQFqNgIEIAUtAAAhBQwBCyAAEJYsIQULIAsgDHwhCSABIAVB0fcFai0AACIHTQ0CIAQgCkIAIAlCABDZLCAEKQMIQgBSDQIMAAsACyABQRdsQQV2QQdxQdH5BWosAAAhCEIAIQkCQCABIAVB0fcFai0AACICTQ0AQQAhBwNAIAcgCHQhBwJAAkAgACgCBCIFIAAoAmhPDQAgACAFQQFqNgIEIAUtAAAhBQwBCyAAEJYsIQULIAIgB3IhBwJAIAEgBUHR9wVqLQAAIgJNDQAgB0GAgIDAAEkNAQsLIAetIQkLIAEgAk0NAEJ/IAitIguIIgwgCVQNAANAIAkgC4YhCSACrUL/AYMhCgJAAkAgACgCBCIFIAAoAmhPDQAgACAFQQFqNgIEIAUtAAAhBQwBCyAAEJYsIQULIAkgCoQhCSABIAVB0fcFai0AACICTQ0BIAkgDFgNAAsLIAEgBUHR9wVqLQAATQ0AA0ACQAJAIAAoAgQiBSAAKAJoTw0AIAAgBUEBajYCBCAFLQAAIQUMAQsgABCWLCEFCyABIAVB0fcFai0AAEsNAAsQ6CtBxAA2AgAgBkEAIANCAYNQGyEGIAMhCQsCQCAAKAJoRQ0AIAAgACgCBEF/ajYCBAsCQCAJIANUDQACQCADp0EBcQ0AIAYNABDoK0HEADYCACADQn98IQMMAwsgCSADWA0AEOgrQcQANgIADAILIAkgBqwiA4UgA30hAwwBC0IAIQMgAEIAEJUsCyAEQRBqJAAgAwv5AgEGfyMAQRBrIgQkACADQbjFByADGyIFKAIAIQMCQAJAAkACQCABDQAgAw0BQQAhBgwDC0F+IQYgAkUNAiAAIARBDGogABshBwJAAkAgA0UNACACIQAMAQsCQCABLQAAIgNBGHRBGHUiAEEASA0AIAcgAzYCACAAQQBHIQYMBAsQ+ysoAqwBKAIAIQMgASwAACEAAkAgAw0AIAcgAEH/vwNxNgIAQQEhBgwECyAAQf8BcUG+fmoiA0EySw0BQeD5BSADQQJ0aigCACEDIAJBf2oiAEUNAiABQQFqIQELIAEtAAAiCEEDdiIJQXBqIANBGnUgCWpyQQdLDQADQCAAQX9qIQACQCAIQf8BcUGAf2ogA0EGdHIiA0EASA0AIAVBADYCACAHIAM2AgAgAiAAayEGDAQLIABFDQIgAUEBaiIBLQAAIghBwAFxQYABRg0ACwsgBUEANgIAEOgrQRk2AgBBfyEGDAELIAUgAzYCAAsgBEEQaiQAIAYLEgACQCAADQBBAQ8LIAAoAgBFC70UAg9/A34jAEGwAmsiAyQAQQAhBEEAIQUCQCAAKAJMQQBIDQAgABDXLSEFCwJAIAEtAAAiBkUNAEIAIRIgA0EQaiEHAkACQAJAAkACQANAAkACQCAGQf8BcRCULEUNAANAIAEiBkEBaiEBIAYtAAEQlCwNAAsgAEIAEJUsA0ACQAJAIAAoAgQiASAAKAJoTw0AIAAgAUEBajYCBCABLQAAIQEMAQsgABCWLCEBCyABEJQsDQALIAAoAgQhAQJAIAAoAmhFDQAgACABQX9qIgE2AgQLIAApA3ggEnwgASAAKAIIa6x8IRIMAQsCQAJAAkACQCABLQAAIgZBJUcNACABLQABIghBKkYNASAIQSVHDQILIABCABCVLCABIAZBJUZqIQYCQAJAIAAoAgQiASAAKAJoTw0AIAAgAUEBajYCBCABLQAAIQEMAQsgABCWLCEBCwJAIAEgBi0AAEYNAAJAIAAoAmhFDQAgACAAKAIEQX9qNgIECyABQX9KDQtBACEJIAQNCwwJCyASQgF8IRIMAwsgAUECaiEGQQAhCgwBCwJAIAgQ+itFDQAgAS0AAkEkRw0AIAFBA2ohBiACIAEtAAFBUGoQoiwhCgwBCyABQQFqIQYgAigCACEKIAJBBGohAgtBACEJQQAhAQJAIAYtAAAQ+itFDQADQCABQQpsIAYtAABqQVBqIQEgBi0AASEIIAZBAWohBiAIEPorDQALCwJAAkAgBi0AACILQe0ARg0AIAYhCAwBCyAGQQFqIQhBACEMIApBAEchCSAGLQABIQtBACENCyAIQQFqIQZBAyEOAkACQAJAAkACQAJAIAtB/wFxQb9/ag46BAoECgQEBAoKCgoDCgoKCgoKBAoKCgoECgoECgoKCgoECgQEBAQEAAQFCgEKBAQECgoEAgQKCgQKAgoLIAhBAmogBiAILQABQegARiIIGyEGQX5BfyAIGyEODAQLIAhBAmogBiAILQABQewARiIIGyEGQQNBASAIGyEODAMLQQEhDgwCC0ECIQ4MAQtBACEOIAghBgtBASAOIAYtAAAiCEEvcUEDRiILGyEPAkAgCEEgciAIIAsbIhBB2wBGDQACQAJAIBBB7gBGDQAgEEHjAEcNASABQQEgAUEBShshAQwCCyAKIA8gEhCjLAwCCyAAQgAQlSwDQAJAAkAgACgCBCIIIAAoAmhPDQAgACAIQQFqNgIEIAgtAAAhCAwBCyAAEJYsIQgLIAgQlCwNAAsgACgCBCEIAkAgACgCaEUNACAAIAhBf2oiCDYCBAsgACkDeCASfCAIIAAoAghrrHwhEgsgACABrCITEJUsAkACQCAAKAIEIg4gACgCaCIITw0AIAAgDkEBajYCBAwBCyAAEJYsQQBIDQUgACgCaCEICwJAIAhFDQAgACAAKAIEQX9qNgIEC0EQIQgCQAJAAkACQAJAAkACQAJAAkACQAJAAkAgEEGof2oOIQYLCwILCwsLCwELAgQBAQELBQsLCwsLAwYLCwILBAsLBgALIBBBv39qIgFBBksNCkEBIAF0QfEAcUUNCgsgA0EIaiAAIA9BABCaLCAAKQN4QgAgACgCBCAAKAIIa6x9UQ0QIApFDQkgBykDACETIAMpAwghFCAPDgMFBgcJCwJAIBBB7wFxQeMARw0AIANBIGpBf0GBAhDRLRogA0EAOgAgIBBB8wBHDQggA0EAOgBBIANBADoALiADQQA2ASoMCAsgA0EgaiAGLQABIg5B3gBGIghBgQIQ0S0aIANBADoAICAGQQJqIAZBAWogCBshCwJAAkACQAJAIAZBAkEBIAgbai0AACIGQS1GDQAgBkHdAEYNASAOQd4ARyEOIAshBgwDCyADIA5B3gBHIg46AE4MAQsgAyAOQd4ARyIOOgB+CyALQQFqIQYLA0ACQAJAIAYtAAAiCEEtRg0AIAhFDRAgCEHdAEcNAQwKC0EtIQggBi0AASIRRQ0AIBFB3QBGDQAgBkEBaiELAkACQCAGQX9qLQAAIgYgEUkNACARIQgMAQsDQCADQSBqIAZBAWoiBmogDjoAACAGIAstAAAiCEkNAAsLIAshBgsgCCADQSBqakEBaiAOOgAAIAZBAWohBgwACwALQQghCAwCC0EKIQgMAQtBACEICyAAIAhBAEJ/EJ4sIRMgACkDeEIAIAAoAgQgACgCCGusfVENCwJAIBBB8ABHDQAgCkUNACAKIBM+AgAMBQsgCiAPIBMQoywMBAsgCiAUIBMQ3Cw4AgAMAwsgCiAUIBMQ2yw5AwAMAgsgCiAUNwMAIAogEzcDCAwBCyABQQFqQR8gEEHjAEYiCxshDgJAAkAgD0EBRyIRDQAgCiEIAkAgCUUNACAOQQJ0EMQtIghFDQcLIANCADcDqAJBACEBIAlBAEchDANAIAghDQJAA0ACQAJAIAAoAgQiCCAAKAJoTw0AIAAgCEEBajYCBCAILQAAIQgMAQsgABCWLCEICyAIIANBIGpqQQFqLQAARQ0BIAMgCDoAGyADQRxqIANBG2pBASADQagCahCfLCIIQX5GDQAgCEF/Rg0IAkAgDUUNACANIAFBAnRqIAMoAhw2AgAgAUEBaiEBCyAMIAEgDkZxQQFHDQALIA0gDkEBdEEBciIOQQJ0EMYtIggNAQwHCwsgA0GoAmoQoCxFDQVBACEMDAELAkAgCUUNAEEAIQEgDhDELSIIRQ0GA0AgCCEMA0ACQAJAIAAoAgQiCCAAKAJoTw0AIAAgCEEBajYCBCAILQAAIQgMAQsgABCWLCEICwJAIAggA0EgampBAWotAAANAEEAIQ0MBAsgDCABaiAIOgAAIAFBAWoiASAORw0AC0EAIQ0gDCAOQQF0QQFyIg4Qxi0iCA0ADAgLAAtBACEBAkAgCkUNAANAAkACQCAAKAIEIgggACgCaE8NACAAIAhBAWo2AgQgCC0AACEIDAELIAAQliwhCAsCQCAIIANBIGpqQQFqLQAADQBBACENIAohDAwDCyAKIAFqIAg6AAAgAUEBaiEBDAALAAsDQAJAAkAgACgCBCIBIAAoAmhPDQAgACABQQFqNgIEIAEtAAAhAQwBCyAAEJYsIQELIAEgA0EgampBAWotAAANAAtBACEMQQAhDUEAIQELIAAoAgQhCAJAIAAoAmhFDQAgACAIQX9qIgg2AgQLIAApA3ggCCAAKAIIa6x8IhRQDQcCQCAQQeMARw0AIBQgE1INCAsCQCAJRQ0AAkAgEQ0AIAogDTYCAAwBCyAKIAw2AgALIAsNAAJAIA1FDQAgDSABQQJ0akEANgIACwJAIAwNAEEAIQwMAQsgDCABakEAOgAACyAAKQN4IBJ8IAAoAgQgACgCCGusfCESIAQgCkEAR2ohBAsgBkEBaiEBIAYtAAEiBg0ADAYLAAtBACEMDAELQQAhDEEAIQ0LIAQNAQtBfyEECyAJRQ0AIAwQxS0gDRDFLQsCQCAFRQ0AIAAQ2C0LIANBsAJqJAAgBAsyAQF/IwBBEGsiAiAANgIMIAIgACABQQJ0QXxqQQAgAUEBSxtqIgBBBGo2AgggACgCAAtDAAJAIABFDQACQAJAAkACQCABQQJqDgYAAQICBAMECyAAIAI8AAAPCyAAIAI9AQAPCyAAIAI+AgAPCyAAIAI3AwALC0oBAX8jAEGQAWsiAyQAIANBAEGQARDRLSIDQX82AkwgAyAANgIsIANBsAc2AiAgAyAANgJUIAMgASACEKEsIQAgA0GQAWokACAACwsAIAAgASACEK4sCzEBAn8gABDyKyIBKAIANgI4AkAgASgCACICRQ0AIAIgADYCNAsgASAANgIAEPMrIAALywIBAn8jAEEgayICJAACQAJAAkACQEH4/AEgASwAABC9LA0AEOgrQRw2AgAMAQtBmAkQxC0iAw0BC0EAIQMMAQsgA0EAQZABENEtGgJAIAFBKxC9LA0AIANBCEEEIAEtAABB8gBGGzYCAAsCQAJAIAEtAABB4QBGDQAgAygCACEBDAELAkAgAEEDQQAQIyIBQYAIcQ0AIAIgAUGACHI2AhAgAEEEIAJBEGoQIxoLIAMgAygCAEGAAXIiATYCAAsgA0H/AToASyADQYAINgIwIAMgADYCPCADIANBmAFqNgIsAkAgAUEIcQ0AIAIgAkEYajYCACAAQZOoASACECQNACADQQo6AEsLIANBsQc2AiggA0GrBzYCJCADQbIHNgIgIANBswc2AgwCQEH4xAcoAgQNACADQX82AkwLIAMQpiwhAwsgAkEgaiQAIAMLdAEBf0ECIQECQCAAQSsQvSwNACAALQAAQfIARyEBCyABQYABciABIABB+AAQvSwbIgFBgIAgciABIABB5QAQvSwbIgEgAUHAAHIgAC0AACIAQfIARhsiAUGABHIgASAAQfcARhsiAUGACHIgASAAQeEARhsLBAAgAAsMACAAKAI8EKksECIL2AEBBH8jAEEgayIDJAAgAyABNgIQIAMgAiAAKAIwIgRBAEdrNgIUIAAoAiwhBSADIAQ2AhwgAyAFNgIYQX8hBAJAAkACQCAAKAI8IANBEGpBAiADQQxqECUQyywNACADKAIMIgRBAEoNAQsgACAEQTBxQRBzIAAoAgByNgIADAELIAQgAygCFCIGTQ0AIAAgACgCLCIFNgIEIAAgBSAEIAZrajYCCAJAIAAoAjBFDQAgACAFQQFqNgIEIAIgAWpBf2ogBS0AADoAAAsgAiEECyADQSBqJAAgBAs8AQF/IwBBEGsiAyQAIAAoAjwgASACQf8BcSADQQhqEOAtEMssIQAgAykDCCEBIANBEGokAEJ/IAEgABsL2AIBB38jAEEgayIDJAAgAyAAKAIcIgQ2AhAgACgCFCEFIAMgAjYCHCADIAE2AhggAyAFIARrIgE2AhQgASACaiEGQQIhByADQRBqIQECQAJAAkACQCAAKAI8IANBEGpBAiADQQxqECYQyywNAANAIAYgAygCDCIERg0CIARBf0wNAyABIAQgASgCBCIISyIFQQN0aiIJIAkoAgAgBCAIQQAgBRtrIghqNgIAIAFBDEEEIAUbaiIJIAkoAgAgCGs2AgAgBiAEayEGIAAoAjwgAUEIaiABIAUbIgEgByAFayIHIANBDGoQJhDLLEUNAAsLIAZBf0cNAQsgACAAKAIsIgE2AhwgACABNgIUIAAgASAAKAIwajYCECACIQQMAQtBACEEIABBADYCHCAAQgA3AxAgACAAKAIAQSByNgIAIAdBAkYNACACIAEoAgRrIQQLIANBIGokACAEC1cBA38gACgCVCEDIAEgAyADQQAgAkGAAmoiBBC7LCIFIANrIAQgBRsiBCACIAQgAkkbIgIQ0C0aIAAgAyAEaiIENgJUIAAgBDYCCCAAIAMgAmo2AgQgAguBAQECfyAAIAAtAEoiAUF/aiABcjoASgJAIAAoAhQgACgCHE0NACAAQQBBACAAKAIkEQYAGgsgAEEANgIcIABCADcDEAJAIAAoAgAiAUEEcUUNACAAIAFBIHI2AgBBfw8LIAAgACgCLCAAKAIwaiICNgIIIAAgAjYCBCABQRt0QR91C0EBAn8jAEEQayIBJABBfyECAkAgABCvLA0AIAAgAUEPakEBIAAoAiARBgBBAUcNACABLQAPIQILIAFBEGokACACCwkAIABBABC6LAvjBAEFfyMAQdABayIEJAAgBEIBNwMIAkAgAiABbCIFRQ0AIAQgAjYCECAEIAI2AhQgBSACayEGIAIhASACIQdBAiEIA0AgBEEQaiAIQQJ0aiAHIAJqIAEiB2oiATYCACAIQQFqIQggByEHIAEgBUkNAAsCQAJAIAZBAU4NAEEBIQhBASEBDAELIAAgBmohB0EBIQhBASEBA0ACQAJAIAhBA3FBA0cNACAAIAIgAyABIARBEGoQsywgBEEIakECELQsIAFBAmohAQwBCwJAAkAgBEEQaiABQX9qIghBAnRqKAIAIAcgAGtJDQAgACACIAMgBEEIaiABQQAgBEEQahC1LAwBCyAAIAIgAyABIARBEGoQsywLAkAgAUEBRw0AIARBCGpBARC2LEEAIQEMAQsgBEEIaiAIELYsQQEhAQsgBCAEKAIIQQFyIgg2AgggACACaiIAIAdJDQALC0EAIAJrIQcgACACIAMgBEEIaiABQQAgBEEQahC1LANAAkACQAJAAkAgAUEBRw0AIAhBAUcNACAEKAIMDQEMBQsgAUEBSg0BCyAEQQhqIARBCGoQtywiCBC0LCAIIAFqIQEgBCgCCCEIDAELIARBCGpBAhC2LCAEIAQoAghBB3M2AgggBEEIakEBELQsIAFBf2ohCCAAIARBEGogAUF+aiIBQQJ0aigCACACamsgAiADIARBCGogCEEBIARBEGoQtSwgBEEIakEBELYsIAQgBCgCCEEBciIINgIIIAAgB2ogAiADIARBCGogAUEBIARBEGoQtSwLIAAgB2ohAAwACwALIARB0AFqJAALsQEBB38jAEHwAWsiBSQAIAUgADYCAEEBIQYCQCADQQJIDQBBACABayEHIAAhCANAAkAgACAIIAdqIgggBCADQX5qIglBAnRqKAIAayIKIAIRAwBBAEgNACAAIAggAhEDAEF/Sg0CCyAFIAZBAnRqIAogCCAKIAggAhEDAEF/SiILGyIINgIAIAZBAWohBiADQX9qIAkgCxsiA0EBSg0ACwsgASAFIAYQuCwgBUHwAWokAAtUAQJ/AkACQCABQR9LDQAgACgCBCECIAAhAwwBCyAAQQRqIQMgAUFgaiEBQQAhAgsgAygCACEDIAAgAiABdjYCBCAAIAJBICABa3QgAyABdnI2AgAL0wIBBX8jAEHwAWsiByQAIAcgAygCACIINgLoASADKAIEIQMgByAANgIAIAcgAzYC7AFBACABayEJAkACQAJAAkACQCAIQQFGDQAgACEKQQEhCAwBCyAAIQpBASEIIAMNAEEBIQggACEDDAELA0ACQCAKIAYgBEECdGooAgBrIgMgACACEQMAQQFODQAgCiEDDAILAkACQCAFDQAgBEECSA0AIARBAnQgBmpBeGooAgAhBSAKIAlqIgsgAyACEQMAQX9KDQEgCyAFayADIAIRAwBBf0oNAQsgByAIQQJ0aiADNgIAIAdB6AFqIAdB6AFqELcsIgoQtCwgCEEBaiEIIAogBGohBEEAIQUgAyEKIAcoAugBQQFHDQEgAyEKIAcoAuwBDQEMAwsLIAohAwwBCyAFDQELIAEgByAIELgsIAMgASACIAQgBhCzLAsgB0HwAWokAAtUAQJ/AkACQCABQR9LDQAgAEEEaiECIAAoAgAhAwwBCyABQWBqIQFBACEDIAAhAgsgAigCACECIAAgAyABdDYCACAAIANBICABa3YgAiABdHI2AgQLKAEBfwJAIAAoAgBBf2poIgENACAAKAIEaCIAQSBqQQAgABshAQsgAQumAQEFfyMAQYACayIDJAACQCACQQJIDQAgASACQQJ0aiIEIAM2AgAgAEUNACADIQUDQCAFIAEoAgAgAEGAAiAAQYACSRsiBhDQLRpBACEFA0AgASAFQQJ0aiIHKAIAIAEgBUEBaiIFQQJ0aigCACAGENAtGiAHIAcoAgAgBmo2AgAgBSACRw0ACyAAIAZrIgBFDQEgBCgCACEFDAALAAsgA0GAAmokAAubAQIBfwJ+IwBBoAFrIgQkACAEQRBqQQBBkAEQ0S0aIARBfzYCXCAEIAE2AjwgBEF/NgIYIAQgATYCFCAEQRBqQgAQlSwgBCAEQRBqIANBARCaLCAEQQhqKQMAIQUgBCkDACEGAkAgAkUNACACIAEgBCgCFCAEKAKIAWogBCgCGGtqNgIACyAAIAY3AwAgACAFNwMIIARBoAFqJAALNQIBfwF8IwBBEGsiAiQAIAIgACABQQEQuSwgAikDACACQQhqKQMAENssIQMgAkEQaiQAIAML5QEBAn8gAkEARyEDAkACQAJAIABBA3FFDQAgAkUNACABQf8BcSEEA0AgAC0AACAERg0CIAJBf2oiAkEARyEDIABBAWoiAEEDcUUNASACDQALCyADRQ0BCwJAIAAtAAAgAUH/AXFGDQAgAkEESQ0AIAFB/wFxQYGChAhsIQQDQCAAKAIAIARzIgNBf3MgA0H//ft3anFBgIGChHhxDQEgAEEEaiEAIAJBfGoiAkEDSw0ACwsgAkUNACABQf8BcSEDA0ACQCAALQAAIANHDQAgAA8LIABBAWohACACQX9qIgINAAsLQQALhwEBAn8CQAJAAkAgAkEESQ0AIAEgAHJBA3ENAQNAIAAoAgAgASgCAEcNAiABQQRqIQEgAEEEaiEAIAJBfGoiAkEDSw0ACwsgAkUNAQsCQANAIAAtAAAiAyABLQAAIgRHDQEgAUEBaiEBIABBAWohACACQX9qIgJFDQIMAAsACyADIARrDwtBAAsaACAAIAEQviwiAEEAIAAtAAAgAUH/AXFGGwvkAQECfwJAAkAgAUH/AXEiAkUNAAJAIABBA3FFDQADQCAALQAAIgNFDQMgAyABQf8BcUYNAyAAQQFqIgBBA3ENAAsLAkAgACgCACIDQX9zIANB//37d2pxQYCBgoR4cQ0AIAJBgYKECGwhAgNAIAMgAnMiA0F/cyADQf/9+3dqcUGAgYKEeHENASAAKAIEIQMgAEEEaiEAIANBf3MgA0H//ft3anFBgIGChHhxRQ0ACwsCQANAIAAiAy0AACICRQ0BIANBAWohACACIAFB/wFxRw0ACwsgAw8LIAAgABDZLWoPCyAAC1kBAn8gAS0AACECAkAgAC0AACIDRQ0AIAMgAkH/AXFHDQADQCABLQABIQIgAC0AASIDRQ0BIAFBAWohASAAQQFqIQAgAyACQf8BcUYNAAsLIAMgAkH/AXFrCyQBAn8CQCAAENktQQFqIgEQxC0iAg0AQQAPCyACIAAgARDQLQtwAQN/AkAgAg0AQQAPC0EAIQMCQCAALQAAIgRFDQACQANAIAEtAAAiBUUNASACQX9qIgJFDQEgBEH/AXEgBUcNASABQQFqIQEgAC0AASEEIABBAWohACAEDQAMAgsACyAEIQMLIANB/wFxIAEtAABrC/oBAQF/AkACQAJAIAEgAHNBA3ENACACQQBHIQMCQCABQQNxRQ0AIAJFDQADQCAAIAEtAAAiAzoAACADRQ0EIABBAWohACACQX9qIgJBAEchAyABQQFqIgFBA3FFDQEgAg0ACwsgA0UNASABLQAARQ0CIAJBBEkNAANAIAEoAgAiA0F/cyADQf/9+3dqcUGAgYKEeHENASAAIAM2AgAgAEEEaiEAIAFBBGohASACQXxqIgJBA0sNAAsLIAJFDQADQCAAIAEtAAAiAzoAACADRQ0CIABBAWohACABQQFqIQEgAkF/aiICDQALC0EAIQILIABBACACENEtGiAACw4AIAAgASACEMIsGiAAC4wBAQJ/AkAgASwAACICDQAgAA8LQQAhAwJAIAAgAhC9LCIARQ0AAkAgAS0AAQ0AIAAPCyAALQABRQ0AAkAgAS0AAg0AIAAgARDFLA8LIAAtAAJFDQACQCABLQADDQAgACABEMYsDwsgAC0AA0UNAAJAIAEtAAQNACAAIAEQxywPCyAAIAEQyCwhAwsgAwt3AQR/IAAtAAEiAkEARyEDAkAgAkUNACAALQAAQQh0IAJyIgQgAS0AAEEIdCABLQABciIFRg0AIABBAWohAQNAIAEiAC0AASICQQBHIQMgAkUNASAAQQFqIQEgBEEIdEGA/gNxIAJyIgQgBUcNAAsLIABBACADGwuZAQEEfyAAQQJqIQIgAC0AAiIDQQBHIQQCQAJAIANFDQAgAC0AAUEQdCAALQAAQRh0ciADQQh0ciIDIAEtAAFBEHQgAS0AAEEYdHIgAS0AAkEIdHIiBUYNAANAIAJBAWohASACLQABIgBBAEchBCAARQ0CIAEhAiADIAByQQh0IgMgBUcNAAwCCwALIAIhAQsgAUF+akEAIAQbC6wBAQR/IABBA2ohAiAALQADIgNBAEchBAJAAkAgA0UNACAALQABQRB0IAAtAABBGHRyIAAtAAJBCHRyIANyIgUgASgAACIAQRh0IABBCHRBgID8B3FyIABBCHZBgP4DcSAAQRh2cnIiAUYNAANAIAJBAWohAyACLQABIgBBAEchBCAARQ0CIAMhAiAFQQh0IAByIgUgAUcNAAwCCwALIAIhAwsgA0F9akEAIAQbC50HAQ5/IwBBoAhrIgIkACACQZgIakIANwMAIAJBkAhqQgA3AwAgAkIANwOICCACQgA3A4AIQQAhAwJAAkACQAJAAkACQCABLQAAIgQNAEF/IQVBASEGDAELA0AgACADai0AAEUNBCACIARB/wFxIgRBAnRqIANBAWoiAzYCACACQYAIaiAEQQN2QRxxaiIGIAYoAgBBASAEdHI2AgAgASADai0AACIEDQALQQEhBkF/IQUgA0EBSw0BC0F/IQdBASEIDAELQQAhCEEBIQlBASEEA0ACQAJAIAEgBCAFamotAAAiByABIAZqLQAAIgpHDQACQCAEIAlHDQAgCSAIaiEIQQEhBAwCCyAEQQFqIQQMAQsCQCAHIApNDQAgBiAFayEJQQEhBCAGIQgMAQtBASEEIAghBSAIQQFqIQhBASEJCyAEIAhqIgYgA0kNAAtBASEIQX8hBwJAIANBAUsNACAJIQYMAQtBACEGQQEhC0EBIQQDQAJAAkAgASAEIAdqai0AACIKIAEgCGotAAAiDEcNAAJAIAQgC0cNACALIAZqIQZBASEEDAILIARBAWohBAwBCwJAIAogDE8NACAIIAdrIQtBASEEIAghBgwBC0EBIQQgBiEHIAZBAWohBkEBIQsLIAQgBmoiCCADSQ0ACyAJIQYgCyEICwJAAkAgASABIAggBiAHQQFqIAVBAWpLIgQbIgtqIAcgBSAEGyINQQFqIgkQvCxFDQAgAyANIAMgDUF/c2oiBCANIARLG0EBaiILayEOQQAhDwwBCyADIAtrIg4hDwsgA0F/aiEKIANBP3IhDEEAIQcgACEGA0ACQCAAIAZrIANPDQACQCAAQQAgDBC7LCIERQ0AIAQhACAEIAZrIANJDQMMAQsgACAMaiEACwJAAkACQCACQYAIaiAGIApqLQAAIgRBA3ZBHHFqKAIAIAR2QQFxDQAgAyEEDAELAkAgAyACIARBAnRqKAIAayIERQ0AIA4gBCAEIAtJGyAEIAcbIAQgDxshBAwBCyAJIQQCQAJAIAEgCSAHIAkgB0sbIghqLQAAIgVFDQADQCAFQf8BcSAGIAhqLQAARw0CIAEgCEEBaiIIai0AACIFDQALIAkhBAsDQCAEIAdNDQYgASAEQX9qIgRqLQAAIAYgBGotAABGDQALIAshBCAPIQcMAgsgCCANayEEC0EAIQcLIAYgBGohBgwACwALQQAhBgsgAkGgCGokACAGCwIACwIACxYAAkAgAA0AQQAPCxDoKyAANgIAQX8L+AoCBH8EfiMAQfAAayIFJAAgBEL///////////8AgyEJAkACQAJAIAFCf3wiCkJ/USACQv///////////wCDIgsgCiABVK18Qn98IgpC////////v///AFYgCkL///////+///8AURsNACADQn98IgpCf1IgCSAKIANUrXxCf3wiCkL///////+///8AVCAKQv///////7///wBRGw0BCwJAIAFQIAtCgICAgICAwP//AFQgC0KAgICAgIDA//8AURsNACACQoCAgICAgCCEIQQgASEDDAILAkAgA1AgCUKAgICAgIDA//8AVCAJQoCAgICAgMD//wBRGw0AIARCgICAgICAIIQhBAwCCwJAIAEgC0KAgICAgIDA//8AhYRCAFINAEKAgICAgIDg//8AIAIgAyABhSAEIAKFQoCAgICAgICAgH+FhFAiBhshBEIAIAEgBhshAwwCCyADIAlCgICAgICAwP//AIWEUA0BAkAgASALhEIAUg0AIAMgCYRCAFINAiADIAGDIQMgBCACgyEEDAILIAMgCYRQRQ0AIAEhAyACIQQMAQsgAyABIAMgAVYgCSALViAJIAtRGyIHGyEJIAQgAiAHGyILQv///////z+DIQogAiAEIAcbIgJCMIinQf//AXEhCAJAIAtCMIinQf//AXEiBg0AIAVB4ABqIAkgCiAJIAogClAiBht5IAZBBnStfKciBkFxahDNLEEQIAZrIQYgBUHoAGopAwAhCiAFKQNgIQkLIAEgAyAHGyEDIAJC////////P4MhBAJAIAgNACAFQdAAaiADIAQgAyAEIARQIgcbeSAHQQZ0rXynIgdBcWoQzSxBECAHayEIIAVB2ABqKQMAIQQgBSkDUCEDCyAEQgOGIANCPYiEQoCAgICAgIAEhCEEIApCA4YgCUI9iIQhASADQgOGIQMgCyAChSEKAkAgBiAIayIHRQ0AAkAgB0H/AE0NAEIAIQRCASEDDAELIAVBwABqIAMgBEGAASAHaxDNLCAFQTBqIAMgBCAHENcsIAUpAzAgBSkDQCAFQcAAakEIaikDAIRCAFKthCEDIAVBMGpBCGopAwAhBAsgAUKAgICAgICABIQhDCAJQgOGIQICQAJAIApCf1UNAAJAIAIgA30iASAMIAR9IAIgA1StfSIEhFBFDQBCACEDQgAhBAwDCyAEQv////////8DVg0BIAVBIGogASAEIAEgBCAEUCIHG3kgB0EGdK18p0F0aiIHEM0sIAYgB2shBiAFQShqKQMAIQQgBSkDICEBDAELIAQgDHwgAyACfCIBIANUrXwiBEKAgICAgICACINQDQAgAUIBiCAEQj+GhCABQgGDhCEBIAZBAWohBiAEQgGIIQQLIAtCgICAgICAgICAf4MhAgJAIAZB//8BSA0AIAJCgICAgICAwP//AIQhBEIAIQMMAQtBACEHAkACQCAGQQBMDQAgBiEHDAELIAVBEGogASAEIAZB/wBqEM0sIAUgASAEQQEgBmsQ1ywgBSkDACAFKQMQIAVBEGpBCGopAwCEQgBSrYQhASAFQQhqKQMAIQQLIAFCA4ggBEI9hoQhAyAHrUIwhiAEQgOIQv///////z+DhCAChCEEIAGnQQdxIQYCQAJAAkACQAJAENUsDgMAAQIDCyAEIAMgBkEES618IgEgA1StfCEEAkAgBkEERg0AIAEhAwwDCyAEIAFCAYMiAiABfCIDIAJUrXwhBAwDCyAEIAMgAkIAUiAGQQBHca18IgEgA1StfCEEIAEhAwwBCyAEIAMgAlAgBkEAR3GtfCIBIANUrXwhBCABIQMLIAZFDQELENYsGgsgACADNwMAIAAgBDcDCCAFQfAAaiQAC1MBAX4CQAJAIANBwABxRQ0AIAEgA0FAaq2GIQJCACEBDAELIANFDQAgAUHAACADa62IIAIgA60iBIaEIQIgASAEhiEBCyAAIAE3AwAgACACNwMIC+ABAgF/An5BASEEAkAgAEIAUiABQv///////////wCDIgVCgICAgICAwP//AFYgBUKAgICAgIDA//8AURsNACACQgBSIANC////////////AIMiBkKAgICAgIDA//8AViAGQoCAgICAgMD//wBRGw0AAkAgAiAAhCAGIAWEhFBFDQBBAA8LAkAgAyABg0IAUw0AQX8hBCAAIAJUIAEgA1MgASADURsNASAAIAKFIAEgA4WEQgBSDwtBfyEEIAAgAlYgASADVSABIANRGw0AIAAgAoUgASADhYRCAFIhBAsgBAvYAQIBfwJ+QX8hBAJAIABCAFIgAUL///////////8AgyIFQoCAgICAgMD//wBWIAVCgICAgICAwP//AFEbDQAgAkIAUiADQv///////////wCDIgZCgICAgICAwP//AFYgBkKAgICAgIDA//8AURsNAAJAIAIgAIQgBiAFhIRQRQ0AQQAPCwJAIAMgAYNCAFMNACAAIAJUIAEgA1MgASADURsNASAAIAKFIAEgA4WEQgBSDwsgACACViABIANVIAEgA1EbDQAgACAChSABIAOFhEIAUiEECyAEC+8QAgV/Dn4jAEHQAmsiBSQAIARC////////P4MhCiACQv///////z+DIQsgBCAChUKAgICAgICAgIB/gyEMIARCMIinQf//AXEhBgJAAkACQCACQjCIp0H//wFxIgdBf2pB/f8BSw0AQQAhCCAGQX9qQf7/AUkNAQsCQCABUCACQv///////////wCDIg1CgICAgICAwP//AFQgDUKAgICAgIDA//8AURsNACACQoCAgICAgCCEIQwMAgsCQCADUCAEQv///////////wCDIgJCgICAgICAwP//AFQgAkKAgICAgIDA//8AURsNACAEQoCAgICAgCCEIQwgAyEBDAILAkAgASANQoCAgICAgMD//wCFhEIAUg0AAkAgAyACQoCAgICAgMD//wCFhFBFDQBCACEBQoCAgICAgOD//wAhDAwDCyAMQoCAgICAgMD//wCEIQxCACEBDAILAkAgAyACQoCAgICAgMD//wCFhEIAUg0AQgAhAQwCCwJAIAEgDYRCAFINAEKAgICAgIDg//8AIAwgAyAChFAbIQxCACEBDAILAkAgAyAChEIAUg0AIAxCgICAgICAwP//AIQhDEIAIQEMAgtBACEIAkAgDUL///////8/Vg0AIAVBwAJqIAEgCyABIAsgC1AiCBt5IAhBBnStfKciCEFxahDNLEEQIAhrIQggBUHIAmopAwAhCyAFKQPAAiEBCyACQv///////z9WDQAgBUGwAmogAyAKIAMgCiAKUCIJG3kgCUEGdK18pyIJQXFqEM0sIAkgCGpBcGohCCAFQbgCaikDACEKIAUpA7ACIQMLIAVBoAJqIANCMYggCkKAgICAgIDAAIQiDkIPhoQiAkIAQoCAgICw5ryC9QAgAn0iBEIAENksIAVBkAJqQgAgBUGgAmpBCGopAwB9QgAgBEIAENksIAVBgAJqIAUpA5ACQj+IIAVBkAJqQQhqKQMAQgGGhCIEQgAgAkIAENksIAVB8AFqIARCAEIAIAVBgAJqQQhqKQMAfUIAENksIAVB4AFqIAUpA/ABQj+IIAVB8AFqQQhqKQMAQgGGhCIEQgAgAkIAENksIAVB0AFqIARCAEIAIAVB4AFqQQhqKQMAfUIAENksIAVBwAFqIAUpA9ABQj+IIAVB0AFqQQhqKQMAQgGGhCIEQgAgAkIAENksIAVBsAFqIARCAEIAIAVBwAFqQQhqKQMAfUIAENksIAVBoAFqIAJCACAFKQOwAUI/iCAFQbABakEIaikDAEIBhoRCf3wiBEIAENksIAVBkAFqIANCD4ZCACAEQgAQ2SwgBUHwAGogBEIAQgAgBUGgAWpBCGopAwAgBSkDoAEiCiAFQZABakEIaikDAHwiAiAKVK18IAJCAVatfH1CABDZLCAFQYABakIBIAJ9QgAgBEIAENksIAggByAGa2ohBgJAAkAgBSkDcCIPQgGGIhAgBSkDgAFCP4ggBUGAAWpBCGopAwAiEUIBhoR8Ig1CmZN/fCISQiCIIgIgC0KAgICAgIDAAIQiE0IfiEL/////D4MiBH4iFCABQh+IQv////8PgyIKIAVB8ABqQQhqKQMAQgGGIA9CP4iEIBFCP4h8IA0gEFStfCASIA1UrXxCf3wiD0IgiCINfnwiECAUVK0gECAPQv////8PgyIPIAFCP4giFSALQgGGhEL/////D4MiC358IhEgEFStfCAEIA1+fCAPIAR+IhQgCyANfnwiECAUVK1CIIYgEEIgiIR8IBEgEEIghnwiECARVK18IBAgDyABQgGGIhZC/v///w+DIhF+IhcgEkL/////D4MiEiALfnwiFCAXVK0gFCACIAp+fCIXIBRUrXx8IhQgEFStfCAUIBIgBH4iECARIA1+fCIEIA8gCn58Ig0gAiALfnwiD0IgiCAEIBBUrSANIARUrXwgDyANVK18QiCGhHwiBCAUVK18IAQgFyACIBF+IgIgEiAKfnwiCkIgiCAKIAJUrUIghoR8IgIgF1StIAIgD0IghnwgAlStfHwiAiAEVK18IgRC/////////wBWDQAgE0IBhiAVhCETIAVB0ABqIAIgBCADIA4Q2SwgAUIxhiAFQdAAakEIaikDAH0gBSkDUCIBQgBSrX0hDSAGQf7/AGohBkIAIAF9IQoMAQsgBUHgAGogAkIBiCAEQj+GhCICIARCAYgiBCADIA4Q2SwgAUIwhiAFQeAAakEIaikDAH0gBSkDYCIKQgBSrX0hDSAGQf//AGohBkIAIAp9IQogASEWCwJAIAZB//8BSA0AIAxCgICAgICAwP//AIQhDEIAIQEMAQsCQAJAIAZBAUgNACANQgGGIApCP4iEIQ0gBq1CMIYgBEL///////8/g4QhDyAKQgGGIQQMAQsCQCAGQY9/Sg0AQgAhAQwCCyAFQcAAaiACIARBASAGaxDXLCAFQTBqIBYgEyAGQfAAahDNLCAFQSBqIAMgDiAFKQNAIgIgBUHAAGpBCGopAwAiDxDZLCAFQTBqQQhqKQMAIAVBIGpBCGopAwBCAYYgBSkDICIBQj+IhH0gBSkDMCIEIAFCAYYiAVStfSENIAQgAX0hBAsgBUEQaiADIA5CA0IAENksIAUgAyAOQgVCABDZLCAPIAIgAkIBgyIBIAR8IgQgA1YgDSAEIAFUrXwiASAOViABIA5RG618IgMgAlStfCICIAMgAkKAgICAgIDA//8AVCAEIAUpAxBWIAEgBUEQakEIaikDACICViABIAJRG3GtfCICIANUrXwiAyACIANCgICAgICAwP//AFQgBCAFKQMAViABIAVBCGopAwAiBFYgASAEURtxrXwiASACVK18IAyEIQwLIAAgATcDACAAIAw3AwggBUHQAmokAAuOAgICfwN+IwBBEGsiAiQAAkACQCABvSIEQv///////////wCDIgVCgICAgICAgHh8Qv/////////v/wBWDQAgBUI8hiEGIAVCBIhCgICAgICAgIA8fCEFDAELAkAgBUKAgICAgICA+P8AVA0AIARCPIYhBiAEQgSIQoCAgICAgMD//wCEIQUMAQsCQCAFUEUNAEIAIQZCACEFDAELIAIgBUIAIASnZ0EgaiAFQiCIp2cgBUKAgICAEFQbIgNBMWoQzSwgAkEIaikDAEKAgICAgIDAAIVBjPgAIANrrUIwhoQhBSACKQMAIQYLIAAgBjcDACAAIAUgBEKAgICAgICAgIB/g4Q3AwggAkEQaiQAC+EBAgN/An4jAEEQayICJAACQAJAIAG8IgNB/////wdxIgRBgICAfGpB////9wdLDQAgBK1CGYZCgICAgICAgMA/fCEFQgAhBgwBCwJAIARBgICA/AdJDQAgA61CGYZCgICAgICAwP//AIQhBUIAIQYMAQsCQCAEDQBCACEGQgAhBQwBCyACIAStQgAgBGciBEHRAGoQzSwgAkEIaikDAEKAgICAgIDAAIVBif8AIARrrUIwhoQhBSACKQMAIQYLIAAgBjcDACAAIAUgA0GAgICAeHGtQiCGhDcDCCACQRBqJAALjQECAn8CfiMAQRBrIgIkAAJAAkAgAQ0AQgAhBEIAIQUMAQsgAiABIAFBH3UiA2ogA3MiA61CACADZyIDQdEAahDNLCACQQhqKQMAQoCAgICAgMAAhUGegAEgA2utQjCGfCABQYCAgIB4ca1CIIaEIQUgAikDACEECyAAIAQ3AwAgACAFNwMIIAJBEGokAAtyAgF/An4jAEEQayICJAACQAJAIAENAEIAIQNCACEEDAELIAIgAa1CACABZyIBQdEAahDNLCACQQhqKQMAQoCAgICAgMAAhUGegAEgAWutQjCGfCEEIAIpAwAhAwsgACADNwMAIAAgBDcDCCACQRBqJAALBABBAAsEAEEAC1MBAX4CQAJAIANBwABxRQ0AIAIgA0FAaq2IIQFCACECDAELIANFDQAgAkHAACADa62GIAEgA60iBIiEIQEgAiAEiCECCyAAIAE3AwAgACACNwMIC+sLAgV/D34jAEHgAGsiBSQAIAFCIIggAkIghoQhCiADQhGIIARCL4aEIQsgA0IxiCAEQv///////z+DIgxCD4aEIQ0gBCAChUKAgICAgICAgIB/gyEOIAJC////////P4MiD0IgiCEQIAxCEYghESAEQjCIp0H//wFxIQYCQAJAAkAgAkIwiKdB//8BcSIHQX9qQf3/AUsNAEEAIQggBkF/akH+/wFJDQELAkAgAVAgAkL///////////8AgyISQoCAgICAgMD//wBUIBJCgICAgICAwP//AFEbDQAgAkKAgICAgIAghCEODAILAkAgA1AgBEL///////////8AgyICQoCAgICAgMD//wBUIAJCgICAgICAwP//AFEbDQAgBEKAgICAgIAghCEOIAMhAQwCCwJAIAEgEkKAgICAgIDA//8AhYRCAFINAAJAIAMgAoRQRQ0AQoCAgICAgOD//wAhDkIAIQEMAwsgDkKAgICAgIDA//8AhCEOQgAhAQwCCwJAIAMgAkKAgICAgIDA//8AhYRCAFINACABIBKEIQJCACEBAkAgAlBFDQBCgICAgICA4P//ACEODAMLIA5CgICAgICAwP//AIQhDgwCCwJAIAEgEoRCAFINAEIAIQEMAgsCQCADIAKEQgBSDQBCACEBDAILQQAhCAJAIBJC////////P1YNACAFQdAAaiABIA8gASAPIA9QIggbeSAIQQZ0rXynIghBcWoQzSxBECAIayEIIAUpA1AiAUIgiCAFQdgAaikDACIPQiCGhCEKIA9CIIghEAsgAkL///////8/Vg0AIAVBwABqIAMgDCADIAwgDFAiCRt5IAlBBnStfKciCUFxahDNLCAIIAlrQRBqIQggBSkDQCIDQjGIIAVByABqKQMAIgJCD4aEIQ0gA0IRiCACQi+GhCELIAJCEYghEQsgC0L/////D4MiAiABQv////8PgyIEfiITIANCD4ZCgID+/w+DIgEgCkL/////D4MiA358IgpCIIYiDCABIAR+fCILIAxUrSACIAN+IhQgASAPQv////8PgyIMfnwiEiANQv////8PgyIPIAR+fCINIApCIIggCiATVK1CIIaEfCITIAIgDH4iFSABIBBCgIAEhCIKfnwiECAPIAN+fCIWIBFC/////weDQoCAgIAIhCIBIAR+fCIRQiCGfCIXfCEEIAcgBmogCGpBgYB/aiEGAkACQCAPIAx+IhggAiAKfnwiAiAYVK0gAiABIAN+fCIDIAJUrXwgAyASIBRUrSANIBJUrXx8IgIgA1StfCABIAp+fCABIAx+IgMgDyAKfnwiASADVK1CIIYgAUIgiIR8IAIgAUIghnwiASACVK18IAEgEUIgiCAQIBVUrSAWIBBUrXwgESAWVK18QiCGhHwiAyABVK18IAMgEyANVK0gFyATVK18fCICIANUrXwiAUKAgICAgIDAAINQDQAgBkEBaiEGDAELIAtCP4ghAyABQgGGIAJCP4iEIQEgAkIBhiAEQj+IhCECIAtCAYYhCyADIARCAYaEIQQLAkAgBkH//wFIDQAgDkKAgICAgIDA//8AhCEOQgAhAQwBCwJAAkAgBkEASg0AAkBBASAGayIHQYABSQ0AQgAhAQwDCyAFQTBqIAsgBCAGQf8AaiIGEM0sIAVBIGogAiABIAYQzSwgBUEQaiALIAQgBxDXLCAFIAIgASAHENcsIAUpAyAgBSkDEIQgBSkDMCAFQTBqQQhqKQMAhEIAUq2EIQsgBUEgakEIaikDACAFQRBqQQhqKQMAhCEEIAVBCGopAwAhASAFKQMAIQIMAQsgBq1CMIYgAUL///////8/g4QhAQsgASAOhCEOAkAgC1AgBEJ/VSAEQoCAgICAgICAgH9RGw0AIA4gAkIBfCIBIAJUrXwhDgwBCwJAIAsgBEKAgICAgICAgIB/hYRCAFENACACIQEMAQsgDiACIAJCAYN8IgEgAlStfCEOCyAAIAE3AwAgACAONwMIIAVB4ABqJAALdQEBfiAAIAQgAX4gAiADfnwgA0IgiCIEIAFCIIgiAn58IANC/////w+DIgMgAUL/////D4MiAX4iBUIgiCADIAJ+fCIDQiCIfCADQv////8PgyAEIAF+fCIDQiCIfDcDCCAAIANCIIYgBUL/////D4OENwMAC0gBAX8jAEEQayIFJAAgBSABIAIgAyAEQoCAgICAgICAgH+FEMwsIAUpAwAhASAAIAVBCGopAwA3AwggACABNwMAIAVBEGokAAvqAwICfwJ+IwBBIGsiAiQAAkACQCABQv///////////wCDIgRCgICAgICAwP9DfCAEQoCAgICAgMCAvH98Wg0AIABCPIggAUIEhoQhBAJAIABC//////////8PgyIAQoGAgICAgICACFQNACAEQoGAgICAgICAwAB8IQUMAgsgBEKAgICAgICAgMAAfCEFIABCgICAgICAgIAIhUIAUg0BIAUgBEIBg3whBQwBCwJAIABQIARCgICAgICAwP//AFQgBEKAgICAgIDA//8AURsNACAAQjyIIAFCBIaEQv////////8Dg0KAgICAgICA/P8AhCEFDAELQoCAgICAgID4/wAhBSAEQv///////7//wwBWDQBCACEFIARCMIinIgNBkfcASQ0AIAJBEGogACABQv///////z+DQoCAgICAgMAAhCIEIANB/4h/ahDNLCACIAAgBEGB+AAgA2sQ1ywgAikDACIEQjyIIAJBCGopAwBCBIaEIQUCQCAEQv//////////D4MgAikDECACQRBqQQhqKQMAhEIAUq2EIgRCgYCAgICAgIAIVA0AIAVCAXwhBQwBCyAEQoCAgICAgICACIVCAFINACAFQgGDIAV8IQULIAJBIGokACAFIAFCgICAgICAgICAf4OEvwvEAwIDfwF+IwBBIGsiAiQAAkACQCABQv///////////wCDIgVCgICAgICAwL9AfCAFQoCAgICAgMDAv398Wg0AIAFCGYinIQMCQCAAUCABQv///w+DIgVCgICACFQgBUKAgIAIURsNACADQYGAgIAEaiEEDAILIANBgICAgARqIQQgACAFQoCAgAiFhEIAUg0BIAQgA0EBcWohBAwBCwJAIABQIAVCgICAgICAwP//AFQgBUKAgICAgIDA//8AURsNACABQhmIp0H///8BcUGAgID+B3IhBAwBC0GAgID8ByEEIAVC////////v7/AAFYNAEEAIQQgBUIwiKciA0GR/gBJDQAgAkEQaiAAIAFC////////P4NCgICAgICAwACEIgUgA0H/gX9qEM0sIAIgACAFQYH/ACADaxDXLCACQQhqKQMAIgVCGYinIQQCQCACKQMAIAIpAxAgAkEQakEIaikDAIRCAFKthCIAUCAFQv///w+DIgVCgICACFQgBUKAgIAIURsNACAEQQFqIQQMAQsgACAFQoCAgAiFhEIAUg0AIARBAXEgBGohBAsgAkEgaiQAIAQgAUIgiKdBgICAgHhxcr4LFQBBsMnHAiQCQbDJB0EPakFwcSQBCwcAIwAjAWsLBAAjAQszAQF/IABBASAAGyEBAkADQCABEMQtIgANAQJAEJUtIgBFDQAgABEHAAwBCwsQJwALIAALBwAgABDFLQsQACAAQaz7BUEIajYCACAACzwBAn8gARDZLSICQQ1qEOAsIgNBADYCCCADIAI2AgQgAyACNgIAIAAgAxDkLCABIAJBAWoQ0C02AgAgAAsHACAAQQxqCyEAIAAQ4iwaIABB2PsFQQhqNgIAIABBBGogARDjLBogAAsEAEEBCwoA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CyAEQYCAgIB4cSEDAkACQCAFQQFIDQAgB0GAgIB8aiAFQRd0ciEFDAELIAdBASAFa3YhBQsgBSADcr4L2AYCBH8DfiMAQYABayIFJAACQAJAAkAgAyAEQgBCABDOLEUNACADIAQQzy1FDQAgAkIwiKciBkH//wFxIgdB//8BRw0BCyAFQRBqIAEgAiADIAQQ2CwgBSAFKQMQIgQgBUEQakEIaikDACIDIAQgAxDQLCAFQQhqKQMAIQIgBSkDACEEDAELAkAgASAHrUIwhiACQv///////z+DhCIJIAMgBEIwiKdB//8BcSIIrUIwhiAEQv///////z+DhCIKEM4sQQBKDQACQCABIAkgAyAKEM4sRQ0AIAEhBAwCCyAFQfAAaiABIAJCAEIAENgsIAVB+ABqKQMAIQIgBSkDcCEEDAELAkACQCAHRQ0AIAEhBAwBCyAFQeAAaiABIAlCAEKAgICAgIDAu8AAENgsIAVB6ABqKQMAIglCMIinQYh/aiEHIAUpA2AhBAsCQCAIDQAgBUHQAGogAyAKQgBCgICAgICAwLvAABDYLCAFQdgAaikDACIKQjCIp0GIf2ohCCAFKQNQIQMLIApC////////P4NCgICAgICAwACEIQsgCUL///////8/g0KAgICAgIDAAIQhCQJAIAcgCEwNAANAAkACQCAJIAt9IAQgA1StfSIKQgBTDQACQCAKIAQgA30iBIRCAFINACAFQSBqIAEgAkIAQgAQ2CwgBUEoaikDACECIAUpAyAhBAwFCyAKQgGGIARCP4iEIQkMAQsgCUIBhiAEQj+IhCEJCyAEQgGGIQQgB0F/aiIHIAhKDQALIAghBwsCQAJAIAkgC30gBCADVK19IgpCAFkNACAJIQoMAQsgCiAEIAN9IgSEQgBSDQAgBUEwaiABIAJCAEIAENgsIAVBOGopAwAhAiAFKQMwIQQMAQsCQCAKQv///////z9WDQADQCAEQj+IIQMgB0F/aiEHIARCAYYhBCADIApCAYaEIgpCgICAgICAwABUDQALCyAGQYCAAnEhCAJAIAdBAEoNACAFQcAAaiAEIApC////////P4MgB0H4AGogCHKtQjCGhEIAQoCAgICAgMDDPxDYLCAFQcgAaikDACECIAUpA0AhBAwBCyAKQv///////z+DIAcgCHKtQjCGhCECCyAAIAQ3AwAgACACNwMIIAVBgAFqJAALrgEAAkACQCABQYAISA0AIABEAAAAAAAA4H+iIQACQCABQf8PTg0AIAFBgXhqIQEMAgsgAEQAAAAAAADgf6IhACABQf0XIAFB/RdIG0GCcGohAQwBCyABQYF4Sg0AIABEAAAAAAAAEACiIQACQCABQYNwTA0AIAFB/gdqIQEMAQsgAEQAAAAAAAAQAKIhACABQYZoIAFBhmhKG0H8D2ohAQsgACABQf8Haq1CNIa/ogtLAgF+An8gAUL///////8/gyECAkACQCABQjCIp0H//wFxIgNB//8BRg0AQQQhBCADDQFBAkEDIAIgAIRQGw8LIAIgAIRQIQQLIAQLkgQBA38CQCACQYAESQ0AIAAgASACECkaIAAPCyAAIAJqIQMCQAJAIAEgAHNBA3ENAAJAAkAgAEEDcQ0AIAAhAgwBCwJAIAJBAU4NACAAIQIMAQsgACECA0AgAiABLQAAOgAAIAFBAWohASACQQFqIgJBA3FFDQEgAiADSQ0ACwsCQCADQXxxIgRBwABJDQAgAiAEQUBqIgVLDQADQCACIAEoAgA2AgAgAiABKAIENgIEIAIgASgCCDYCCCACIAEoAgw2AgwgAiABKAIQNgIQIAIgASgCFDYCFCACIAEoAhg2AhggAiABKAIcNgIcIAIgASgCIDYCICACIAEoAiQ2AiQgAiABKAIoNgIoIAIgASgCLDYCLCACIAEoAjA2AjAgAiABKAI0NgI0IAIgASgCODYCOCACIAEoAjw2AjwgAUHAAGohASACQcAAaiICIAVNDQALCyACIARPDQEDQCACIAEoAgA2AgAgAUEEaiEBIAJBBGoiAiAESQ0ADAILAAsCQCADQQRPDQAgACECDAELAkAgA0F8aiIEIABPDQAgACECDAELIAAhAgNAIAIgAS0AADoAACACIAEtAAE6AAEgAiABLQACOgACIAIgAS0AAzoAAyABQQRqIQEgAkEEaiICIARNDQALCwJAIAIgA08NAANAIAIgAS0AADoAACABQQFqIQEgAkEBaiICIANHDQALCyAAC/ICAgN/AX4CQCACRQ0AIAIgAGoiA0F/aiABOgAAIAAgAToAACACQQNJDQAgA0F+aiABOgAAIAAgAToAASADQX1qIAE6AAAgACABOgACIAJBB0kNACADQXxqIAE6AAAgACAB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ZUlkVXNpbmdLZXkASW1HdWlUYWJsZUZsYWdzX0NvbnRleHRNZW51SW5Cb2R5AEltR3VpVGFibGVGbGFnc19Ob0JvcmRlcnNJbkJvZHkAU2l6aW5nIFBvbGljeQBCb2JieQBFeGFtcGxlOiBTaW1wbGUgb3ZlcmxheQBOYXZVcGRhdGVXaW5kb3dpbmdPdmVybGF5AEV4YW1wbGU6IExvbmcgdGV4dCBkaXNwbGF5AEtleVJlcGVhdERlbGF5AE15AHRhYmxlLT5CZ0NsaXBSZWN0Lk1pbi55IDw9IHRhYmxlLT5CZ0NsaXBSZWN0Lk1heC55AHRhYmxlLT5CZzJDbGlwUmVjdEZvckRyYXdDbWQuTWluLnkgPD0gdGFibGUtPkJnMkNsaXBSZWN0Rm9yRHJhd0NtZC5NYXgueQB0YWJsZS0+Um93UG9zWTIgPT0gaW5uZXJfd2luZG93LT5EQy5DdXJzb3JQb3MueQBXZSBjYWxsIEFsaWduVGV4dFRvRnJhbWVQYWRkaW5nKCkgdG8gdmVydGljYWxseSBhbGlnbiB0aGUgdGV4dCBiYXNlbGluZSBieSArRnJhbWVQYWRkaW5nLnkAUHJpbVZ0eABQcmltV3JpdGVWdHgAIyNjc3gAKyUuMGYgcHgAWC9ZID0gJS4wZiBweABNZXNoOiBFbGVtQ291bnQ6ICVkLCBWdHhPZmZzZXQ6ICslZCwgSWR4T2Zmc2V0OiArJWQsIEFyZWE6IH4lMC5mIHB4AFRleHR1cmUgQXJlYTogYWJvdXQgJWQgcHggfiVkeCVkIHB4AGNoZWNrYm94AElURU06IENoZWNrYm94AElURU06IExpc3RCb3gARGVidWdOb2RlRHJhd0NtZFNob3dNZXNoQW5kQm91bmRpbmdCb3gAdGFibGVfc2Nyb2xseABTaXgAUGF0aEZpbGxDb252ZXgAIyNoZXgAaW5wdXQgdTMyIGhleABpbnB1dCBzMzIgaGV4AEdldEtleUluZGV4AFRhYmxlR2V0Um93SW5kZXgAR2V0SW5kZXgAVGFibGVTZXRDb2x1bW5JbmRleABUYWJsZUdldENvbHVtbkluZGV4AEFudGlBbGlhc2VkTGluZXNVc2VUZXgASGV4AFByaW1Xcml0ZUlkeAAjI21heABHZXRDbGlwUmVjdE1heABHZXRJdGVtUmVjdE1heABHZXRXaW5kb3dDb250ZW50UmVnaW9uTWF4AEdldENvbnRlbnRSZWdpb25NYXgASW5wdXRUZXh0RXgAUGxvdEV4AFNlcGFyYXRvckV4AFNjcm9sbGJhckV4AFRhYkl0ZW1FeABCZWdpblRhYmxlRXgAIyNQb3B1cF8lMDh4AC0rICAgMFgweAAtMFgrMFggMFgtMHgrMHggMHgAUmVuZGVyQXJyb3cASW1HdWlUcmVlTm9kZUZsYWdzX09wZW5PbkFycm93AFllbGxvdwBzbGlkZXIgZmxvYXQgbG93AHNsaWRlciBkb3VibGUgbG93AHNsaWRlciB1NjQgbG93AHNsaWRlciBzNjQgbG93AHNsaWRlciB1MzIgbG93AHNsaWRlciBzMzIgbG93AE1lbnUgaW5zaWRlIGEgcmVndWxhciB3aW5kb3cATWVudXMgaW5zaWRlIGEgcmVndWxhciB3aW5kb3cAU2hvdyBIb3Jpem9udGFsIGNvbnRlbnRzIHNpemUgZGVtbyB3aW5kb3cARXhhbXBsZTogQXV0by1yZXNpemluZyB3aW5kb3cAQ29uc3RyYWluZWQtcmVzaXppbmcgd2luZG93AGcuQ3VycmVudFdpbmRvdyA9PSB3aW5kb3cAd2luZG93ID09IGcuTmF2V2luZG93AEJlZ2luUG9wdXBDb250ZXh0V2luZG93AFNob3dBYm91dFdpbmRvdwBnLk1vdmluZ1dpbmRvdyAmJiBnLk1vdmluZ1dpbmRvdy0+Um9vdFdpbmRvdwBpbm5lcl93aW5kb3cgPT0gZy5DdXJyZW50V2luZG93AG91dGVyX3dpbmRvdyA9PSBpbm5lcl93aW5kb3cgfHwgb3V0ZXJfd2luZG93ID09IGlubmVyX3dpbmRvdy0+UGFyZW50V2luZG93AE5hdkluaXRXaW5kb3cATmF2VXBkYXRlV2luZG93aW5nSGlnaGxpZ2h0V2luZG93AEZvY3VzV2luZG93AFNob3dNZXRyaWNzV2luZG93AENsb3NlUG9wdXBzT3ZlcldpbmRvdwB3aW5kb3cgPT0gdGFibGUtPklubmVyV2luZG93AFNob3dEZW1vV2luZG93AH5JbUd1aVdpbmRvdwBmbGFncyAmIEltR3VpV2luZG93RmxhZ3NfQ2hpbGRXaW5kb3cAd2luZG93LT5GbGFncyAmIEltR3VpV2luZG93RmxhZ3NfQ2hpbGRXaW5kb3cAIENoaWxkV2luZG93AGcuTmF2V2luZG93ICYmIHJlc3VsdC0+V2luZG93AEJvcmRlclNoYWRvdwBUYWJsZU5leHRSb3cAVGFibGVIZWFkZXJzUm93AFRhYmxlQmVnaW5Sb3cAIXRhYmxlLT5Jc0luc2lkZVJvdwBUYWJsZUVuZFJvdwAjI3ByZXZpZXcASW1HdWlDb21ib0ZsYWdzX05vUHJldmlldwBXaXRoIFNpZGUgUHJldmlldwBXaXRoIEFscGhhIFByZXZpZXcAV2l0aCBIYWxmIEFscGhhIFByZXZpZXcAaXRlbSB2aWV3AFRyZWUgdmlldwBOZXcAZHJhd19jbWQuQ2xpcFJlY3QueCA8PSBkcmF3X2NtZC5DbGlwUmVjdC56ICYmIGRyYXdfY21kLkNsaXBSZWN0LnkgPD0gZHJhd19jbWQuQ2xpcFJlY3QudwAjI2hzdgBGaWxlMV9iLndhdgBGaWxlMV9hLndhdgBObyBuYXYATmF2ACMjdgB0YWJsZV9jb250ZXh0X21lbnUAU3ViLW1lbnUAaXRlbSBjb250ZXh0IG1lbnUARW5hYmxlIGNvbnRleHQgbWVudQBObyBtZW51AFRhYmxlT3BlbkNvbnRleHRNZW51ACMjQ29udGV4dE1lbnUATXlIZWxwTWVudQBCZWdpbk1lbnUARW5kTWVudQAgQ2hpbGRNZW51AFdpdGggT3B0aW9ucyBNZW51AERpc2FibGUgTWVudQAlbGx1ACVzXyV1AGltZ3VpX2xvZy50eHQAd2luZG93X2NvbnRleHQAdm9pZF9jb250ZXh0AERlc3Ryb3lDb250ZXh0AFNldEN1cnJlbnRDb250ZXh0AEdldEN1cnJlbnRDb250ZXh0AFdyYXBJbUd1aUNvbnRleHQAQ3JlYXRlQ29udGV4dABzaG93X3dyYXBwZWRfdGV4dABpbnB1dCB0ZXh0AEJ1bGxldCB0ZXh0AHNvbWUgbW9yZSB0ZXh0ACVkIHNvbWUgdGV4dABUZW1wSW5wdXRUZXh0AGlvLkNvbmZpZ0RyYWdDbGlja1RvSW5wdXRUZXh0AElURU06IElucHV0VGV4dABCdWxsZXRUZXh0AERhdGFUeXBlQXBwbHlPcEZyb21UZXh0AExhYmVsVGV4dABMb2dUZXh0AFNldENsaXBib2FyZFRleHQAR2V0Q2xpcGJvYXJkVGV4dABBZGRUZXh0ACMjVGV4dABDb2xvcmZ1bCBUZXh0AEFkZCBEZWJ1ZyBUZXh0AElURU06IFRleHQAVVRGLTggVGV4dAB3dABVVEYtOCBpbnB1dABXYW50VGV4dElucHV0AEltR3VpU2xpZGVyRmxhZ3NfTm9JbnB1dABJbUd1aUlucHV0VGV4dEZsYWdzX0FsbG93VGFiSW5wdXQATXVsdGktbGluZSBUZXh0IElucHV0AEZpbHRlcmVkIFRleHQgSW5wdXQAUGFzc3dvcmQgSW5wdXQARXhhbXBsZTogU2ltcGxlIGxheW91dABUYWJCYXJMYXlvdXQAVGFibGVVcGRhdGVMYXlvdXQARGVidWdDaGVja1ZlcnNpb25BbmREYXRhTGF5b3V0AEJhc2ljIEhvcml6b250YWwgTGF5b3V0AENvY29udXQAQ3V0AGtlZXBjb3N0AGF1dG8gRW1zY3JpcHRlbkJpbmRpbmdJbml0aWFsaXplcl9JbUd1aTo6RW1zY3JpcHRlbkJpbmRpbmdJbml0aWFsaXplcl9JbUd1aSgpOjooYW5vbnltb3VzIGNsYXNzKTo6b3BlcmF0b3IoKShlbXNjcmlwdGVuOjp2YWwpIGNvbnN0AGF1dG8gRW1zY3JpcHRlbkJpbmRpbmdJbml0aWFsaXplcl9JbUZvbnRDb25maWc6OkVtc2NyaXB0ZW5CaW5kaW5nSW5pdGlhbGl6ZXJfSW1Gb250Q29uZmlnKCk6Oihhbm9ueW1vdXMgY2xhc3MpOjpvcGVyYXRvcigpKEltRm9udENvbmZpZyAmLCBlbXNjcmlwdGVuOjp2YWwpIGNvbnN0AGF1dG8gRW1zY3JpcHRlbkJpbmRpbmdJbml0aWFsaXplcl9JbUd1aTo6RW1zY3JpcHRlbkJpbmRpbmdJbml0aWFsaXplcl9JbUd1aSgpOjooYW5vbnltb3VzIGNsYXNzKTo6b3BlcmF0b3IoKSgpIGNvbnN0AGF1dG8gRW1zY3JpcHRlbkJpbmRpbmdJbml0aWFsaXplcl9JbUZvbnRDb25maWc6OkVtc2NyaXB0ZW5CaW5kaW5nSW5pdGlhbGl6ZXJfSW1Gb250Q29uZmlnKCk6Oihhbm9ueW1vdXMgY2xhc3MpOjpvcGVyYXRvcigpKGNvbnN0IEltRm9udENvbmZpZyAmKSBjb25zdABEcmF3TGlzdCA9PSAmRHJhd0xpc3RJbnN0AERyYXcgaW4gQmFja2dyb3VuZCBkcmF3IGxpc3QARHJhdyBpbiBGb3JlZ3JvdW5kIGRyYXcgbGlzdABHZXRXaW5kb3dEcmF3TGlzdABJbURyYXdMaXN0AEdldEJhY2tncm91bmREcmF3TGlzdABHZXRGb3JlZ3JvdW5kRHJhd0xpc3QAIyMjTmF2V2luZG93aW5nTGlzdABNb3VzZURvdWJsZUNsaWNrTWF4RGlzdABnLk5hdk1vdmVSZXF1ZXN0AFBhdGhBcmNUb0Zhc3QARXhwb3J0AHVuc2lnbmVkIHNob3J0AF9EZWZhdWx0U29ydABfTm9Tb3J0AFJldmVydABpbnNlcnQARGlzcGxheVN0YXJ0AFNlbGVjdGlvblN0YXJ0AENhcnJvdABCZWV0cm9vdABSb290AEFwcmljb3QAR2V0S2V5UHJlc3NlZEFtb3VudAAjI2NvbHVtbnNfY291bnQAaXRlbXNfY291bnQAdl9pZHggPj0gMCAmJiB2X2lkeCA8IHZhbHVlc19jb3VudAB2MV9pZHggPj0gMCAmJiB2MV9pZHggPCB2YWx1ZXNfY291bnQAU2FtcGxlIGNvdW50AFRvdGFsVnR4Q291bnQAVG90YWxJZHhDb3VudABDbWRMaXN0c0NvdW50AEdldENvbHVtbnNDb3VudABzZXR0aW5ncy0+Q29sdW1uc0NvdW50ID09IHRhYmxlLT5Db2x1bW5zQ291bnQgJiYgc2V0dGluZ3MtPkNvbHVtbnNDb3VudE1heCA+PSBzZXR0aW5ncy0+Q29sdW1uc0NvdW50AGNvbHVtbl9uID49IC0xICYmIGNvbHVtbl9uIDwgdGFibGUtPkNvbHVtbnNDb3VudABjb2x1bW5fbiA+PSAwICYmIGNvbHVtbl9uIDwgdGFibGUtPkNvbHVtbnNDb3VudABjb2x1bW5fbiA+PSAwICYmIHRhYmxlLT5Db2x1bW5zQ291bnQASXRlbXNDb3VudABjb2x1bW4tPlNvcnRPcmRlciA8IHRhYmxlLT5Tb3J0U3BlY3NDb3VudABUYWJsZUdldENvbHVtbkNvdW50AEVsZW1Db3VudABuIDwgY29sdW1uLT5Tb3J0RGlyZWN0aW9uc0F2YWlsQ291bnQAR2V0RnJhbWVDb3VudABnLkZyYW1lQ291bnRFbmRlZCAhPSBnLkZyYW1lQ291bnQAQ29uZmlnRGF0YUNvdW50AGlkeCA+PSAwICYmIGlkeCA8IF9Db3VudABObyBicmluZyB0byBmcm9udABEc3RGb250AFNldEN1cnJlbnRGb250AEdldEZvbnQAUG9wRm9udABJbUZvbnQAUHVzaEZvbnQAQ29kZXBvaW50AEFub3RoZXIgYnVsbGV0IHBvaW50AENvbnN0cmFpbnQASW5wdXRUZXh0V2l0aEhpbnQAIyNpbnQAaW5wdXQgaW50AHNsaWRlciBpbnQAZHJhZyBpbnQAcmFuZ2UgaW50AHVuc2lnbmVkIGludABQYXVjaWxvcXVlbnQAQ29udGVudAAjI2N1cnJlbnQAQ2hhbm5lbHNTZXRDdXJyZW50AFNvbWUgRG9jdW1lbnQAVGV4dCBCYXNlbGluZSBBbGlnbm1lbnQAVW5pbmRlbnQASW5kZW50AE9wZW4gUmVjZW50AEVnZ3BsYW50AElucHV0SW50AFZTbGlkZXJJbnQARHJhZ0ludABOYXZVcGRhdGVNb3ZlUmVzdWx0AFNldCBhcyBkZWZhdWx0AEFkZEZvbnREZWZhdWx0AERlYnVnIyNEZWZhdWx0AElzQnVpbHQAS2V5QWx0AFRhYmxlUm93QmdBbHQARXhpdABHcmFwZWZydWl0AFF1aXQAc3BsaXQAQ2hhbm5lbHNTcGxpdAAjI2VkaXQASXNJdGVtRGVhY3RpdmF0ZWRBZnRlckVkaXQASW1HdWlUYWJsZUZsYWdzX1NpemluZ0ZpeGVkRml0AFRlc3RCaXQAU2V0Qml0AENsZWFyQml0AFRvcC1yaWdodABCb3R0b20tcmlnaHQAIyNyaWdodABOYXZIaWdobGlnaHQATmF2V2luZG93aW5nSGlnaGxpZ2h0AHRhYmxlX3Jvd19oZWlnaHQAcm93X21pbl9oZWlnaHQAUm93IGhlaWdodABXZWlnaHQAVGV4SGVpZ2h0AEdldFdpbmRvd0hlaWdodABJdGVtc0hlaWdodABHZXRUZXh0TGluZUhlaWdodABHZXRGcmFtZUhlaWdodABnLlN0eWxlLldpbmRvd01lbnVCdXR0b25Qb3NpdGlvbiA9PSBJbUd1aURpcl9Ob25lIHx8IGcuU3R5bGUuV2luZG93TWVudUJ1dHRvblBvc2l0aW9uID09IEltR3VpRGlyX0xlZnQgfHwgZy5TdHlsZS5XaW5kb3dNZW51QnV0dG9uUG9zaXRpb24gPT0gSW1HdWlEaXJfUmlnaHQASGVsbG8gUmlnaHQAU3R5bGVDb2xvcnNMaWdodABUYWJsZUJvcmRlckxpZ2h0AEtleVNoaWZ0AFRvcC1sZWZ0AEJvdHRvbS1sZWZ0ACMjbGVmdABJbUd1aUNvbWJvRmxhZ3NfUG9wdXBBbGlnbkxlZnQASGVsbG8gTGVmdABwdHJfZnJvbV9vZmZzZXQAaW8uQmFja2VuZEZsYWdzOiBSZW5kZXJlckhhc1Z0eE9mZnNldABfT25DaGFuZ2VkVnR4T2Zmc2V0AElkeE9mZnNldABJbURyYXdWZXJ0UG9zT2Zmc2V0AFNldENvbHVtbk9mZnNldABHZXRDb2x1bW5PZmZzZXQAR2V0RHJhZ2dlZENvbHVtbk9mZnNldABJbURyYXdWZXJ0Q29sT2Zmc2V0AEdseXBoT2Zmc2V0AGJ5dGVPZmZzZXQASW1EcmF3VmVydFVWT2Zmc2V0AFNjcm9sbCBPZmZzZXQATG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQAQnVsbGV0AHJvdyBiZyB0YXJnZXQAQmVnaW5EcmFnRHJvcFRhcmdldABFbmREcmFnRHJvcFRhcmdldABnLkRyYWdEcm9wV2l0aGluVGFyZ2V0AGcuTmF2V2luZG93aW5nVGFyZ2V0AFNldABPYmplY3QAR2V0V2luZG93UmVjdABDb2x1bW5zUmVjdABPdXRlclJlY3QASW5uZXJSZWN0AEdldFJlc2l6ZUJvcmRlclJlY3QAR2V0V2luZG93U2Nyb2xsYmFyUmVjdABIb3N0Q2xpcFJlY3QAQ29sdW1uc0NsaXBSZWN0AElubmVyQ2xpcFJlY3QAUG9wQ2xpcFJlY3QAUHVzaENsaXBSZWN0AEJhY2tncm91bmRDbGlwUmVjdABfT25DaGFuZ2VkQ2xpcFJlY3QAQ29udGVudFJlZ2lvblJlY3QAUHJpbVJlY3QAQ29sdW1uc1dvcmtSZWN0AFBhdGhSZWN0AElzTW91c2VIb3ZlcmluZ1JlY3QAR2V0VGFibGVSZWN0AEFkZFJlY3QAaW5wdXQgZmxvYXQAc2xpZGVyIGZsb2F0AGRyYWcgc21hbGwgZmxvYXQAZHJhZyBmbG9hdAByYW5nZSBmbG9hdABJVEVNOiBJbnB1dEZsb2F0AFZTbGlkZXJGbG9hdABJVEVNOiBTbGlkZXJGbG9hdABEcmFnRmxvYXQASW1HdWlTbGlkZXJGbGFnc19Ob1JvdW5kVG9Gb3JtYXQAUG9wQnV0dG9uUmVwZWF0AFB1c2hCdXR0b25SZXBlYXQARWF0AHVpbnQ2NF90ADN3YXlzAGZyZWV6ZV9yb3dzAFBvcHVwcyAmIE1vZGFsIHdpbmRvd3MAQ2hpbGQgd2luZG93cwBTZXR0aW5nc1dpbmRvd3MATWV0cmljc1JlbmRlcldpbmRvd3MATWV0cmljc0FjdGl2ZVdpbmRvd3MAQ2hpbGRXaW5kb3dzAENhdHR5d2FtcHVzACMjcHJldmlvdXMAUHJldmlvdXMAQ29udGV4dCBtZW51cwBTZXROZXh0V2luZG93Rm9jdXMAU2V0V2luZG93Rm9jdXMAU2V0SXRlbURlZmF1bHRGb2N1cwBTZXRXaW5kb3dOYW1lRm9jdXMAUG9wQWxsb3dLZXlib2FyZEZvY3VzAFB1c2hBbGxvd0tleWJvYXJkRm9jdXMASW5wdXRzLCBOYXZpZ2F0aW9uICYgRm9jdXMATm9OYXZJbnB1dHMAX3NldEF0X05hdklucHV0cwBfZ2V0QXRfTmF2SW5wdXRzAE5vTW91c2VJbnB1dHMAQkcvRkcgZHJhdyBsaXN0cwBJdGVyYXRlRHJhd0xpc3RzAFRhYmxlQmVnaW5BcHBseVJlcXVlc3RzAFRpdGxlIGJhciBIb3ZlcmVkL0FjdGl2ZSB0ZXN0cwBJdGVyYXRlRm9udHMAU2V0TmV4dFdpbmRvd1NpemVDb25zdHJhaW50cwBTb21lIG90aGVyIGNvbnRlbnRzAEV2ZW4gbW9yZSBjb250ZW50cwBTb21lIGNvbnRlbnRzAFNvbWUgdHJlZSBjb250ZW50cwBOb2RlIGNvbnRlbnRzAENvbnRlbnRzAENsb3NlIEFsbCBEb2N1bWVudHMARXhhbXBsZTogRG9jdW1lbnRzAEdyYWRpZW50cwBNYXg6ICVkIHVuaXRzAE1pbjogJWQgdW5pdHMAQnVsbGV0cwBEcmFnIGFuZCBkcm9wIGluIHN0YW5kYXJkIHdpZGdldHMAU2hvd0RlbW9XaW5kb3dXaWRnZXRzAE11bHRpLWNvbXBvbmVudCBXaWRnZXRzAFBsb3RzIFdpZGdldHMAQ29sb3IvUGlja2VyIFdpZGdldHMAUmFuZ2UgV2lkZ2V0cwBTY2FsZUNsaXBSZWN0cwBUaGlja25lc3MATW91c2UgY3Vyc29ycwBpby5CYWNrZW5kRmxhZ3M6IEhhc01vdXNlQ3Vyc29ycwAjI2NvbG9ycwBGaWx0ZXIgY29sb3JzAEhTViBlbmNvZGVkIGNvbG9ycwBfc2V0QXRfQ29sb3JzAF9nZXRBdF9Db2xvcnMAT25seSBNb2RpZmllZCBDb2xvcnMAaW8uQ29uZmlnTWFjT1NYQmVoYXZpb3JzACJpbWd1aSIgbGV0dGVycwBDbGVhcklucHV0Q2hhcmFjdGVycwBTZXR0aW5nc0hhbmRsZXJzAFRhYmxlR2NDb21wYWN0VHJhbnNpZW50QnVmZmVycwBEZUluZGV4QWxsQnVmZmVycwBUYWJsZVVwZGF0ZUJvcmRlcnMASW1HdWlUYWJsZUZsYWdzX0JvcmRlcnMAVmVydGljYWwgU2xpZGVycwBzaG93X2hlYWRlcnMAdGFibGVfY3VzdG9tX2hlYWRlcnMARGlzcGxheSBoZWFkZXJzAEN1c3RvbSBoZWFkZXJzAFJlb3JkZXJhYmxlLCBoaWRlYWJsZSwgd2l0aCBoZWFkZXJzAERpc2FibGUgdmVydGljYWwgYm9yZGVycyBpbiBjb2x1bW5zIEJvZHkgKGJvcmRlcnMgd2lsbCBhbHdheXMgYXBwZWFycyBpbiBIZWFkZXJzAENvbGxhcHNpbmcgSGVhZGVycwBJbnNlcnRDaGFycwBEZWxldGVDaGFycwBUYWJCYXJzAFBvcHVwcwBHcm91cHMAIyNwb3MAY2ZnX2luZm9zAERpc3BsYXlQb3MAU2V0TmV4dFdpbmRvd1BvcwBTZXRXaW5kb3dQb3MAR2V0V2luZG93UG9zAEdldEN1cnNvclN0YXJ0UG9zAFNldEN1cnNvclBvcwBHZXRDdXJzb3JQb3MAUG9wVGV4dFdyYXBQb3MAUHVzaFRleHRXcmFwUG9zAFNldEN1cnNvclNjcmVlblBvcwBHZXRDdXJzb3JTY3JlZW5Qb3MAV2FudFNldE1vdXNlUG9zAGlvLkJhY2tlbmRGbGFnczogSGFzU2V0TW91c2VQb3MAaW8uQ29uZmlnRmxhZ3M6IE5hdkVuYWJsZVNldE1vdXNlUG9zAEdldE1vdXNlUG9zAFNldFdpbmRvd05hbWVQb3MAX2dldEF0X01vdXNlQ2xpY2tlZFBvcwBTY3JvbGwgVG8gUG9zAFNob3cgc3RlcCBidXR0b25zAFNtYWxsIGJ1dHRvbnMATm9ybWFsIGJ1dHRvbnMATG9nQnV0dG9ucwBXaW5kb3cgb3B0aW9ucwBTZXRDb2xvckVkaXRPcHRpb25zAFNldEFsbG9jYXRvckZ1bmN0aW9ucwBSZW5kZXJXaW5kb3dEZWNvcmF0aW9ucwAlZCBhY3RpdmUgYWxsb2NhdGlvbnMATWV0cmljc0FjdGl2ZUFsbG9jYXRpb25zAG15Y29sdW1ucwBJbiBjb2x1bW5zACVkIGNvbHVtbnMAQmVnaW5Db2x1bW5zAEVuZENvbHVtbnMAVGFibGVzICYgQ29sdW1ucwAlLjA2ZiBucwBEcmFnIGFuZCBkcm9wIHRvIGNvcHkvc3dhcCBpdGVtcwBNaXhlZCBpdGVtcwBTaG93IGluZGVudGVkIGl0ZW1zACUuMTBmIGdyYW1zACVlIGdyYW1zACVJNjR1IG1zACV1IG1zAFRvb2xzAGZyZWV6ZV9jb2xzAERlYnVnIGRldGFpbHMARGV0YWlscwBwaXhlbHMAU2l6ZVBpeGVscwBUYWJsZVNldHVwRHJhd0NoYW5uZWxzAFRhYmxlTWVyZ2VEcmF3Q2hhbm5lbHMARXF1YWxzAE1vZGFscwBVcGRhdGVXaW5kb3dQYXJlbnRBbmRSb290TGlua3MAdXNtYmxrcwBmc21ibGtzAGhibGtzAHVvcmRibGtzAGZvcmRibGtzAEVycm9yQ2hlY2tOZXdGcmFtZVNhbml0eUNoZWNrcwBFcnJvckNoZWNrRW5kRnJhbWVTYW5pdHlDaGVja3MAQ29tcGxldGlvbiwgSGlzdG9yeSwgRWRpdCBDYWxsYmFja3MAQ29sdW1ucyB3aWR0aHMASW1HdWlUYWJsZUZsYWdzX1ByZWNpc2VXaWR0aHMAZ2x5cGhzAEl0ZXJhdGVHbHlwaHMAQ2xlYXIgc2V0dGluZ3MAV2FudFNhdmVJbmlTZXR0aW5ncwBUYWJsZVNhdmVTZXR0aW5ncwBVcGRhdGVTZXR0aW5ncwBUYWJsZUdldEJvdW5kU2V0dGluZ3MASW1HdWlUYWJsZUZsYWdzX05vU2F2ZWRTZXR0aW5ncwB0YWJsZV9jb2x1bW5zX2ZsYWdzAENvbHVtbnMgZmxhZ3MAVGFiSXRlbUJ1dHRvbiAmIExlYWRpbmcvVHJhaWxpbmcgZmxhZ3MAY2FsbGJhY2tfZGF0YS5GbGFncyA9PSBmbGFncwBDaGVja2JveEZsYWdzAFJhc3Rlcml6ZXJGbGFncwBUYWJsZUdldENvbHVtbkZsYWdzAFRhYmxlU2V0dXBDb2x1bW5GbGFncwBDb25maWdGbGFncwBCYWNrZW5kRmxhZ3MARHJhZy9TbGlkZXIgRmxhZ3MAQmFja2VuZCBGbGFncwBTY2FsZUFsbFNpemVzAHRhYmxlX2NvbHVtbnNfZmxhZ3NfY2hlY2tib3hlcwBBbGwgcHJpbWl0aXZlcwBQcmltaXRpdmVzACMjdmFsdWVzAFJhdyBIU1YgdmFsdWVzAFNldHRpbmdzIHBhY2tlZCBkYXRhOiBXaW5kb3dzOiAlZCBieXRlcwBTZXR0aW5ncyBwYWNrZWQgZGF0YTogVGFibGVzOiAlZCBieXRlcwBTZXR0aW5ncyB1bnBhY2tlZCBkYXRhICguaW5pKTogJWQgYnl0ZXMAQnVmZmVyIGNvbnRlbnRzOiAlZCBsaW5lcywgJWQgYnl0ZXMAJXM6ICVkIGVudHJpZXMsICVkIGJ5dGVzADEyLDM0NSBieXRlcwAgMiwzNDUgYnl0ZXMAUmVzZXJ2ZUJ5dGVzAFRleHR1cmVzAERhdGEgVHlwZXMATnVtYmVyIG9mIGxpbmVzAEJ1bGxldCBwb2ludCAyCk9uIG11bHRpcGxlIGxpbmVzAEFudGktYWxpYXNlZCBsaW5lcwBBZGQgMTAwMCBsaW5lcwBQbG90TGluZXMAQW50aUFsaWFzZWRMaW5lcwBGcmFtZSBUaW1lcwBNYW5pcHVsYXRpbmcgd2luZG93IHRpdGxlcwBFeGFtcGxlcwBTaG93IHdpbmRvd3MgcmVjdGFuZ2xlcwBTaG93IHRhYmxlcyByZWN0YW5nbGVzAFNlbGVjdGFibGVzAE5lc3RlZCB0YWJsZXMAU2hvd0RlbW9XaW5kb3dUYWJsZXMAU2V0dGluZ3NUYWJsZXMAW0RlYnVnXSBBZGQgNSBlbnRyaWVzAFNpemluZyBwb2xpY2llcwBHbHlwaFJhbmdlcwBpby5Db25maWdXaW5kb3dzUmVzaXplRnJvbUVkZ2VzAEltYWdlcwBCYXNpYyB0cmVlcwBUcmVlcwBBZHZhbmNlZCwgd2l0aCBTZWxlY3RhYmxlIG5vZGVzAFRyZWUgbm9kZXMATi1nb24gc2lkZXMAU3luY2VkIGluc3RhbmNlcwBNZXRyaWNzUmVuZGVyVmVydGljZXMATWV0cmljc1JlbmRlckluZGljZXMAWWVzAERlcwAlczogJyVzJyAlZCB2dHgsICVkIGluZGljZXMsICVkIGNtZHMASXRlcmF0ZURyYXdDbWRzAFRhYmxlR2V0U29ydFNwZWNzAENvbXBhcmVXaXRoU29ydFNwZWNzAEltR3VpVGFibGVTb3J0U3BlY3MASW1HdWlUYWJsZVNvcnRDb2x1bW5TcGVjcwAjI3RhYnMASW1HdWlUYWJCYXJGbGFnc19BdXRvU2VsZWN0TmV3VGFicwAjI1RhYnMAY2FudmFzAENhbnZhcwBGb250RGF0YU93bmVkQnlBdGxhcwBJbUZvbnRBdGxhcwBJcwAKJSpzJS4qcwAgJS4qcwBLZXlzIG1vZHM6ICVzJXMlcyVzAFNjcm9sbDogKCUuMmYvJS4yZiwlLjJmLyUuMmYpIFNjcm9sbGJhcjolcyVzAFBvcHVwSUQ6ICUwOHgsIFdpbmRvdzogJyVzJyVzJXMAQ29sdW1uc0dpdmVuV2lkdGg6ICUuMWYsIENvbHVtbnNBdXRvRml0V2lkdGg6ICUuMWYsIElubmVyV2lkdGg6ICUuMWYlcwAlLipzJSVkJXMAZGVmaW5lOiBfX2NsYW5nX3ZlcnNpb25fXz0lcwAlcyAweCUwOFggKCVkIHRhYnMpJXMAVGFibGUgMHglMDhYICglZCBjb2x1bW5zLCBpbiAnJXMnKSVzACVzICclcyclcwBDb3B5ICVzACVkcHggJXMAJXMgJXMAU3dhcCAlcwBEZWFyIEltR3VpICVzAE1vdmUgJXMAU2F2ZSAlcwAoJTYuMWYsJTYuMWYpICglNi4xZiwlNi4xZikgU2l6ZSAoJTYuMWYsJTYuMWYpIENvbCAlZCAlcwBOYXZMYXN0Q2hpbGROYXZXaW5kb3c6ICVzACUlczogJXMAaW8uQmFja2VuZFJlbmRlcmVyTmFtZTogJXMAaW8uQmFja2VuZFBsYXRmb3JtTmFtZTogJXMATmF2SW5wdXRTb3VyY2U6ICVzAEFjdGl2ZUlkOiAweCUwOFgvMHglMDhYICglLjJmIHNlYyksIEFsbG93T3ZlcmxhcDogJWQsIFNvdXJjZTogJXMATW91c2UgY3Vyc29yICVkOiAlcwBDdXJyZW50IG1vdXNlIGN1cnNvciA9ICVkOiAlcwAtICVzACglNi4xZiwlNi4xZikgKCU2LjFmLCU2LjFmKSBTaXplICglNi4xZiwlNi4xZikgJXMARm91ckZvdXJGb3VyAEl0ZW0gRm91cgBpbmRleF9mcm9tX3B0cgBvZmZzZXRfZnJvbV9wdHIAIyNNeVN0cgBFeGFtcGxlOiBQcm9wZXJ0eSBlZGl0b3IAU2hvd1N0eWxlRWRpdG9yAERlYXIgSW1HdWkgU3R5bGUgRWRpdG9yAHZlY3RvcgBTaG93Rm9udFNlbGVjdG9yAFNob3dTdHlsZVNlbGVjdG9yAEZvbnRzIyNTZWxlY3RvcgBDb2xvcnMjI1NlbGVjdG9yAFNlcGFyYXRvcgBpby5Nb3VzZURyYXdDdXJzb3IAU2V0TW91c2VDdXJzb3IAR2V0TW91c2VDdXJzb3IAUmVuZGVyTW91c2VDdXJzb3IAZXJyb3IAQ2lyY2xlU2VnbWVudE1heEVycm9yAENpcmNsZSBTZWdtZW50IE1heCBFcnJvcgBBZGQgRGVidWcgRXJyb3IAIyNjb2xvcgBCYWNrZ3JvdW5kIGNvbG9yAEFkZFJlY3RGaWxsZWRNdWx0aUNvbG9yAFRhYmxlU2V0QmdDb2xvcgAjI1JlZkNvbG9yAFBvcFN0eWxlQ29sb3IAUHVzaFN0eWxlQ29sb3IAV2l0aCBSZWYgQ29sb3IAVGFpbG9yAFNhaWxvcgBTbGlkZXJCZWhhdmlvcgBCdXR0b25CZWhhdmlvcgBEcmFnQmVoYXZpb3IAVHJlZU5vZGVCZWhhdmlvcgBkc3RfY29sdW1uLT5EaXNwbGF5T3JkZXIgPT0gZHN0X29yZGVyIC0gcmVvcmRlcl9kaXIAQWlyAENvcm5pZmxvd2VyAEltR3VpVGFibGVGbGFnc19Cb3JkZXJzT3V0ZXIATGlzdEJveEZvb3RlcgBDZW50ZXIARmlsdGVyAEFkZElucHV0Q2hhcmFjdGVyAFdhdGVyAEtleVN1cGVyAH5JbUd1aUxpc3RDbGlwcGVyAEltR3VpVGFibGVGbGFnc19Cb3JkZXJzSW5uZXIAQ29uZmlnTWVtb3J5Q29tcGFjdFRpbWVyAG15cGlja2VyACMjcHJldmlld2luZ19waWNrZXIAIyNwaWNrZXIARGVhciBJbUd1aSBNZXRyaWNzL0RlYnVnZ2VyAGJ1ZmZlcgBWdHhCdWZmZXIASWR4QnVmZmVyAGxvbmdlZWVyAF9Ob1Jlb3JkZXIAVGFiQmFyUXVldWVSZW9yZGVyAFdpbmRvd0JvcmRlcgBQb3B1cEJvcmRlcgBJbUd1aUNvbG9yRWRpdEZsYWdzX05vQm9yZGVyAEZyYW1lQm9yZGVyAFJlc2V0IG9yZGVyAFNob3cgd2luZG93cyBiZWdpbiBvcmRlcgBjb2x1bW4tPkluZGV4V2l0aGluRW5hYmxlZFNldCA8PSBjb2x1bW4tPkRpc3BsYXlPcmRlcgBTb3J0T3JkZXIAUmVuZGVyAEZvbGRlcgBTaG93IDJuZCBoZWFkZXIAQ29sbGFwc2luZ0hlYWRlcgBUYWJsZUhlYWRlcgBudW1iZXIAQ3VjdW1iZXIASW5wdXRTY2FsYXIAVlNsaWRlclNjYWxhcgBEcmFnU2NhbGFyAHVuc2lnbmVkIGNoYXIARXZlbnRDaGFyAEVsbGlwc2lzQ2hhcgBSZW5kZXJDaGFyAFBhdGhDbGVhcgBPaCBkZWFyAFBlYXIAIyNtZW51YmFyAEgtc2Nyb2xsYmFyAE5vIHNjcm9sbGJhcgBObyB0aXRsZWJhcgBNYWluIG1lbnUgYmFyAFRhYiBiYXIAUG9wU3R5bGVWYXIAUHVzaFN0eWxlVmFyAEJlZ2luTWVudUJhcgBCZWdpbk1haW5NZW51QmFyAEVuZE1haW5NZW51QmFyACMjTWFpbk1lbnVCYXIARW5kTWVudUJhcgB3aW5kb3ctPkZsYWdzICYgSW1HdWlXaW5kb3dGbGFnc19NZW51QmFyAFByb2dyZXNzQmFyAE15VGFiQmFyAEJlZ2luVGFiQmFyAEVuZFRhYkJhcgAjI1RhYkJhcgBQcm9ncmVzcyBCYXIARGVmYXVsdDogVWludDggKyBIU1YgKyBIdWUgQmFyAFdpdGggQWxwaGEgQmFyAG15X3NlbGVjdF9wb3B1cABteV9maWxlX3BvcHVwAG15X3RvZ2dsZV9wb3B1cABhbm90aGVyIHBvcHVwAEkgYW0gYSB0b29sdGlwIG92ZXIgYSBwb3B1cABNeVBvcHVwAEdldE1vdXNlUG9zT25PcGVuaW5nQ3VycmVudFBvcHVwAENsb3NlQ3VycmVudFBvcHVwAEZpbmRCZXN0V2luZG93UG9zRm9yUG9wdXAAQmVnaW5Qb3B1cABPcGVuUG9wdXAARW5kUG9wdXAAd2luZG93LT5GbGFncyAmIEltR3VpV2luZG93RmxhZ3NfUG9wdXAAU3RhY2tlZCBQb3B1cABCZWdpbkdyb3VwAEVuZEdyb3VwAFN0cmR1cAAuLi9pbWd1aV9kcmF3LmNwcAAuLi9pbWd1aV93aWRnZXRzLmNwcAAuLi9pbWd1aV90YWJsZXMuY3BwAC4uL2ltZ3VpX2RlbW8uY3BwAEhlbGxvLmNwcAAuLi9pbWd1aS5jcHAAY2NjMi5jcHAAYmJiMi5jcHAAYWFhMi5jcHAAQ2FwdHVyZU1vdXNlRnJvbUFwcABDYXB0dXJlS2V5Ym9hcmRGcm9tQXBwAEltR3VpVGFibGVGbGFnc19TaXppbmdTdHJldGNoUHJvcABXaXRoIERyYWcgYW5kIERyb3AATmluY29tcG9vcABDaG9wAFRvcABUcmVlUG9wAEltR3VpU2xpZGVyRmxhZ3NfQWx3YXlzQ2xhbXAARGF0YVR5cGVDbGFtcABIZWxwAEkgYW0gYSBmYW5jeSB0b29sdGlwAEkgYW0gYSB0b29sdGlwAFNldFRvb2x0aXAAQmVnaW5Ub29sdGlwAEVuZFRvb2x0aXAAR2V0Q3VycmVudFdpbmRvd1JlYWQoKS0+RmxhZ3MgJiBJbUd1aVdpbmRvd0ZsYWdzX1Rvb2x0aXAAUmVzaXplR3JpcABMb25nIHRleHQgdGhhdCBpcyBsaWtlbHkgdG8gY2xpcABJbUd1aVRhYmxlRmxhZ3NfTm9DbGlwAFN0ZXAAU3dhcABTZXRJdGVtQWxsb3dPdmVybGFwAF9zZXRBdF9LZXlNYXAAX2dldEF0X0tleU1hcABEYXRhVHlwZUFwcGx5T3AAQ2FsbGJhY2sgJXAsIHVzZXJfZGF0YSAlcAAvcGF0aC90d28AVHdvVHdvVHdvAEl0ZW0gVHdvAFRvbWF0bwBTZXQgdG8gemVybwBmb28ARGVhciBJbUd1aSBEZW1vAFR3byBpdGVtczogSGVsbG8ATW9yZSBzcGFjaW5nOiBIZWxsbwBNYW5nbwBtYWxsaW5mbwBEYXRhVHlwZUdldEluZm8AR2V0U3R5bGVWYXJJbmZvAFVuZG8Ac3RiX3RleHRlZGl0X2Rpc2NhcmRfcmVkbwBSZWRvAEF2b2NhZG8AT25seSBtYWtlcyBhIGRpZmZlcmVuY2UgaWYgdGhlIHBvcHVwIGlzIGxhcmdlciB0aGFuIHRoZSBjb21ibwBCZWdpbkNvbWJvAEVuZENvbWJvAElURU06IENvbWJvAFBhdGhCZXppZXJRdWFkcmF0aWNDdXJ2ZVRvAFBhdGhCZXppZXJDdWJpY0N1cnZlVG8AUGF0aExpbmVUbwBQYXRoQXJjVG8ARm9udE5vAFN0ZXBObwBCcnluAFVua25vd24ASXNLZXlEb3duAF9zZXRBdF9LZXlzRG93bgBfZ2V0QXRfS2V5c0Rvd24ASW1HdWlUYWJCYXJGbGFnc19GaXR0aW5nUG9saWN5UmVzaXplRG93bgBJc0FueU1vdXNlRG93bgBJc01vdXNlRG93bgBfc2V0QXRfTW91c2VEb3duAF9nZXRBdF9Nb3VzZURvd24AI1NvdXJjZUV4dGVybgB3YXJuAEhlYWRlciB3aXRoIGEgY2xvc2UgYnV0dG9uAHRoaXMgaXMgYSAzMDAtd2lkZSBidXR0b24ASW1HdWlDb21ib0ZsYWdzX05vQXJyb3dCdXR0b24AIyNDb2xvckJ1dHRvbgBJbUd1aVRhYkJhckZsYWdzX1RhYkxpc3RQb3B1cEJ1dHRvbgBUYWJJdGVtQnV0dG9uAEZpbGxCdXR0b24AU21hbGxCdXR0b24ASW1HdWlUYWJCYXJGbGFnc19Ob0Nsb3NlV2l0aE1pZGRsZU1vdXNlQnV0dG9uAFRhYk1pbldpZHRoRm9yQ2xvc2VCdXR0b24ASW52aXNpYmxlQnV0dG9uAEltYWdlQnV0dG9uAEJ1dHRvbjogJXMjIyNCdXR0b24AQWR2YW5jZWQgJiBDbG9zZSBCdXR0b24ASVRFTTogQnV0dG9uAFdhdGVybWVsb24ARGFpa29uAERlc2NyaXB0aW9uAHN0ZDo6ZXhjZXB0aW9uAFNvbWVPcHRpb24AQWxpZ24gbGFiZWwgd2l0aCBjdXJyZW50IFggcG9zaXRpb24AV2luZG93TWVudUJ1dHRvblBvc2l0aW9uAENvbG9yQnV0dG9uUG9zaXRpb24AQ29tcGxldGlvbgBUYWJsZUdldENvbHVtbk5leHRTb3J0RGlyZWN0aW9uAFRhYmxlU2V0Q29sdW1uU29ydERpcmVjdGlvbgBUYWJsZUdldENvbHVtbkF2YWlsU29ydERpcmVjdGlvbgBIYXNTZWxlY3Rpb24AU2VsZWN0aW9uIFN0YXRlOiBNdWx0aXBsZSBTZWxlY3Rpb24AU2VsZWN0aW9uIFN0YXRlOiBTaW5nbGUgU2VsZWN0aW9uAEFjdGlvbgBfX2N4YV9ndWFyZF9hY3F1aXJlIGRldGVjdGVkIHJlY3Vyc2l2ZSBpbml0aWFsaXphdGlvbgBEaXNhYmxlIHRyZWUgaW5kZW50YXRpb24AQ29uZmlndXJhdGlvbgBfZ2V0QXRfS2V5c0Rvd25EdXJhdGlvbgBfZ2V0QXRfTmF2SW5wdXRzRG93bkR1cmF0aW9uAF9nZXRBdF9Nb3VzZURvd25EdXJhdGlvbgBEZWNvcmF0aW9uAENvbmZpZy9CdWlsZCBJbmZvcm1hdGlvbgBHZXRWZXJzaW9uACUwNGQ6IHNjcm9sbGFibGUgcmVnaW9uACMjU2Nyb2xsaW5nUmVnaW9uAEFkZE5nb24AVHJlZSBpbiBjb2x1bW4AVGFibGVOZXh0Q29sdW1uAFRhYmxlU2V0dXBDb2x1bW4AIyNtaW4AKChjaGFyKikoc3RhdGUtPnVuZG9fcmVjICsgc3RhdGUtPnJlZG9fcG9pbnQpKSA+PSBidWZfYmVnaW4AR2V0U3BhblB0ckJlZ2luAExvZ0JlZ2luAE1haW4AR2V0Q2xpcFJlY3RNaW4AR2V0SXRlbVJlY3RNaW4AR2V0V2luZG93Q29udGVudFJlZ2lvbk1pbgByaWdodC1hbGlnbgBCdXR0b25UZXh0QWxpZ24AU2VsZWN0YWJsZVRleHRBbGlnbgBXaW5kb3dUaXRsZUFsaWduAENvbHVtbnNDb250ZW50VW5mcm96ZW4AQ29sdW1uc0NvbnRlbnRGcm96ZW4ASXRlbXNGcm96ZW4ASXNQb3B1cE9wZW4AU2V0TmV4dEl0ZW1PcGVuAElzSXRlbVRvZ2dsZWRPcGVuAHBvcyA8PSB0ZXh0X2xlbgBQdXNoQ2xpcFJlY3RGdWxsU2NyZWVuAEhpZGRlbgBwb3MgKyBieXRlc19jb3VudCA8PSBCdWZUZXh0TGVuAG5hbgBTZXRDbGlwYm9hcmRUZXh0Rm4AR2V0Q2xpcGJvYXJkVGV4dEZuAFdlaWdodD0lZiVuAE9yZGVyPSVkJW4AV2lkdGg9JWQlbgBWaXNpYmxlPSVkJW4AQ29sdW1uICVkJW4AU29ydD0lZCVjJW4AVXNlcklEPTB4JTA4WCVuAHNsaWRlciBlbnVtAFBsdW0AQXF1YXJpdW0AQm90dG9tAEN1c3RvbQAjI2l0ZW0AU29tZSBtZW51IGl0ZW0ATWVudSBpdGVtAFRleHQgYWxpZ25lZCB0byBmcmFtZWQgaXRlbQBTb21lIGZyYW1lZCBpdGVtAElURU06IE1lbnVJdGVtAEJlZ2luUG9wdXBDb250ZXh0SXRlbQBOYXZTY29yZUl0ZW0AQmVnaW5UYWJJdGVtAEVuZFRhYkl0ZW0AUGxvdEhpc3RvZ3JhbQBCcmVhbQBLZXlDdHJsAGJvb2wAQ3VydmVUZXNzZWxsYXRpb25Ub2wAZmlzaF9oYXQuaW5sAHNsaWRlciB1OCBmdWxsAHNsaWRlciBzOCBmdWxsAHNsaWRlciB1MTYgZnVsbABzbGlkZXIgczE2IGZ1bGwAc2xpZGVyIHU2NCBmdWxsAHNsaWRlciBzNjQgZnVsbABzbGlkZXIgdTMyIGZ1bGwAc2xpZGVyIHMzMiBmdWxsAEF1dG8tc2Nyb2xsAEltR3VpVGFiQmFyRmxhZ3NfRml0dGluZ1BvbGljeVNjcm9sbABBbnRpLWFsaWFzZWQgZmlsbABBbnRpQWxpYXNlZEZpbGwAIyNjZWxsAHNtYWxsACMjY2hlY2thbGwAT3BlbiBhbGwAUmVtb3ZlIGFsbABDbG9zZSBhbGwAUmVzaXplQWxsAFNpemUgYWxsIGNvbHVtbnMgdG8gZGVmYXVsdCMjI1NpemVBbGwAU2l6ZSBhbGwgY29sdW1ucyB0byBmaXQjIyNTaXplQWxsAFdpbmRvd1NldHRpbmdzSGFuZGxlcl9Xcml0ZUFsbABHZXRDb250ZW50UmVnaW9uQXZhaWwAYnl0ZXNfcGVyX3BpeGVsAEdldEZvbnRUZXhVdldoaXRlUGl4ZWwAQ2xvc2VQb3B1cFRvTGV2ZWwATWFja2VyZWwAU2V0Q3VycmVudENoYW5uZWwATW91c2VXaGVlbABEZWZhdWx0OiBGbG9hdCArIEhEUiArIEh1ZSBXaGVlbABEaXNhYmxlIE1vdXNlIFdoZWVsAENhbmNlbABsYWJlbABlbXNjcmlwdGVuOjp2YWwAaG9yaXpvbnRhbAAjI29yaWdpbmFsAE9yaWdpbmFsAGhleGFkZWNpbWFsAENvbnRlbnRJZGVhbABDb2x1bW5zQ29udGVudEhlYWRlcnNJZGVhbABCZWdpblBvcHVwTW9kYWwAdmVydGljYWwAU2F2ZSB0byBkaXNrAENoZWNrTWFyawBTdHlsZUNvbG9yc0RhcmsAbmV4dF9jaHVuawBzaHJpbmsAaW8uQ29uZmlnSW5wdXRUZXh0Q3Vyc29yQmxpbmsAUGluawBubyBibGFuawBQb2xsb2NrAEhhZGRvY2sAT3BlblBvcHVwT25JdGVtQ2xpY2sASVRFTTogVHJlZU5vZGUgdy8gSW1HdWlUcmVlTm9kZUZsYWdzX09wZW5PbkRvdWJsZUNsaWNrAFRyYWNrAEZpbmRHbHlwaE5vRmFsbGJhY2sATXlSZXNpemVDYWxsYmFjawBBZGRDYWxsYmFjawBSZXNpemUgQ2FsbGJhY2sAcG9wX2JhY2sAS2l3aQBpbWd1aQBBYm91dCBEZWFyIEltR3VpAEltR3VpVGFibGVGbGFnc19Tb3J0TXVsdGkAZGVza3RvcC5pbmkAaW1ndWkuaW5pACMjSW5pAEJyb2Njb2xpAEJpYmkAUG9zPSVpLCVpAFNpemU9JWksJWkARWFydGgARGVmYXVsdCBEZXB0aABCb3RoAGxlbmd0aABieXRlTGVuZ3RoAGlubmVyX3dpZHRoAHRhYmxlX2l0ZW1fd2lkdGgAV3JhcCB3aWR0aABJdGVtIHdpZHRoAFRleFdpZHRoAEdldFdpbmRvd1dpZHRoAF9Ob0hlYWRlcldpZHRoAEdldFdpbmRvd0NvbnRlbnRSZWdpb25XaWR0aABUYWJsZVNldENvbHVtbldpZHRoAEdldENvbHVtbldpZHRoAFRhYmxlVXBkYXRlQ29sdW1uc1dlaWdodEZyb21XaWR0aABTZXROZXh0SXRlbVdpZHRoAFBvcEl0ZW1XaWR0aABQdXNoSXRlbVdpZHRoAENhbGNJdGVtV2lkdGgASW1HdWlUcmVlTm9kZUZsYWdzX1NwYW5GdWxsV2lkdGgASW1HdWlUcmVlTm9kZUZsYWdzX1NwYW5BdmFpbFdpZHRoAFdpZGdldHMgV2lkdGgAUGF0aAAjVHJlZVB1c2gATG9nRmluaXNoAFRpbGVmaXNoAGdseXBoAEltRm9udEdseXBoAEZpbmRHbHlwaABhYWFhYWFhYSBiYmJiYmJiYiwgYyBjY2NjY2NjYyxkZGRkZGRkZC4gZCBlZWVlZWVlZSAgIGZmZmZmZmZmLiBnZ2dnZ2dnZyFoaGhoaGhoaABzbGlkZXIgZmxvYXQgaGlnaABzbGlkZXIgZG91YmxlIGhpZ2gAc2xpZGVyIHU2NCBoaWdoAHNsaWRlciBzNjQgaGlnaABzbGlkZXIgdTMyIGhpZ2gAc2xpZGVyIHMzMiBoaWdoAFJlc2l6YWJsZSwgc3RyZXRjaABfV2lkdGhTdHJldGNoAG15IHNhaWxvciBpcyByaWNoAFJpY2gAS08gQmxhaGJsYWgAT0sgQmxhaGJsYWgAVGhpcyBpcyB0aGUgQ3VjdW1iZXIgdGFiIQpibGFoIGJsYWggYmxhaCBibGFoIGJsYWgAVGhpcyBpcyB0aGUgQXZvY2FkbyB0YWIhCmJsYWggYmxhaCBibGFoIGJsYWggYmxhaABUaGlzIGlzIHRoZSBCcm9jY29saSB0YWIhCmJsYWggYmxhaCBibGFoIGJsYWggYmxhaABCbGFoIGJsYWggYmxhaABCbGFoIGJsYWgKQmxhaCBCbGFoAC4uL2ltc3RiX3RleHRlZGl0LmgAZmlzaF9oYXQuaABIZWxsby5oAC4uL2ltZ3VpX2ludGVybmFsLmgALi5caW1ndWkuaAAuLi9pbWd1aS5oAGFiYy5oAHNsaWRlciBmbG9hdCBsb3cgbG9nAHNsaWRlciBkb3VibGUgbG93IGxvZwBkcmFnIGZsb2F0IGxvZwBkcmFnIGRvdWJsZSBsb2cAJWkgVGhlIHF1aWNrIGJyb3duIGZveCBqdW1wcyBvdmVyIHRoZSBsYXp5IGRvZwBFeGFtcGxlOiBMb2cAQ29weSBvZiBJbWFnZTAwMS5wbmcAQ29weSBvZiBJbWFnZTAwMSAoRmluYWwyKS5wbmcAW2Vycm9yXSBzb21ldGhpbmcgd2VudCB3cm9uZwBUYWJsZUJvcmRlclN0cm9uZwB1bnNpZ25lZCBsb25nAEhvdmVyZWQvQWN0aXZlIHRlc3RzIGFmdGVyIEJlZ2luKCkgZm9yIHRpdGxlIGJhciB0ZXN0aW5nAHRhYmxlX3NvcnRpbmcAU29ydGluZwBzdGQ6OndzdHJpbmcAYmFzaWNfc3RyaW5nAHN0ZDo6c3RyaW5nAHN0ZDo6dTE2c3RyaW5nAHN0ZDo6dTMyc3RyaW5nAERhdGFUeXBlRm9ybWF0U3RyaW5nAFNob3cgSW1EcmF3Q21kIGJvdW5kaW5nIGJveGVzIHdoZW4gaG92ZXJpbmcAU2hvdyBJbURyYXdDbWQgbWVzaCB3aGVuIGhvdmVyaW5nAEZpbHRlcmluZwBFeGFtcGxlOiBDdXN0b20gcmVuZGVyaW5nAFJlbmRlcmluZwBJc1dpbmRvd0FwcGVhcmluZwBWZXJ0aWNhbCBzY3JvbGxpbmcsIHdpdGggY2xpcHBpbmcAQ2FsY0xpc3RDbGlwcGluZwB3b3JkLXdyYXBwaW5nAFdvcmQtd3JhcHBpbmcAV29yZCBXcmFwcGluZwBIb3Jpem9udGFsIHNjcm9sbGluZwAjI0hvcml6b250YWxTY3JvbGxpbmcAIyNWZXJ0aWNhbFNjcm9sbGluZwBIb3Jpem9udGFsIFNjcm9sbGluZwBMYXlvdXQgJiBTY3JvbGxpbmcARm9udEFsbG93VXNlclNjYWxpbmcAQ2FwdHVyZS9Mb2dnaW5nAElzTW91c2VEcmFnZ2luZwBXaW5kb3dSb3VuZGluZwBTY3JvbGxiYXJSb3VuZGluZwBQb3B1cFJvdW5kaW5nAEZyYW1lUm91bmRpbmcAQ2hpbGRSb3VuZGluZwBHcmFiUm91bmRpbmcAVGFiUm91bmRpbmcAIXdpbmRvdy0+REMuTWVudUJhckFwcGVuZGluZwBfUHJlZmVyU29ydERlc2NlbmRpbmcAX05vU29ydERlc2NlbmRpbmcAX1ByZWZlclNvcnRBc2NlbmRpbmcAX05vU29ydEFzY2VuZGluZwB0YWJsZV9wYWRkaW5nAERpc3BsYXlXaW5kb3dQYWRkaW5nAENlbGxQYWRkaW5nAEFsaWduVGV4dFRvRnJhbWVQYWRkaW5nAFRvdWNoRXh0cmFQYWRkaW5nAERpc3BsYXlTYWZlQXJlYVBhZGRpbmcAU2FmZSBBcmVhIFBhZGRpbmcASW5kZW50U3BhY2luZwBJdGVtSW5uZXJTcGFjaW5nAENvbHVtbnNNaW5TcGFjaW5nAEl0ZW1TcGFjaW5nAEdldFRyZWVOb2RlVG9MYWJlbFNwYWNpbmcAR2V0VGV4dExpbmVIZWlnaHRXaXRoU3BhY2luZwBHZXRGcmFtZUhlaWdodFdpdGhTcGFjaW5nAEdseXBoRXh0cmFTcGFjaW5nAFRhYmJpbmcASW1Gb250Q29uZmlnACUuMGYgZGVnAHNob3dfd2lkZ2V0X2ZyYW1lX2JnAEhvbGRpbmcgbWUgY2xlYXJzIHRoZQp0aGUga2V5Ym9hcmQgY2FwdHVyZSBmbGFnAEhvdmVyaW5nIG1lIHNldHMgdGhlCmtleWJvYXJkIGNhcHR1cmUgZmxhZwBOYXZVcGRhdGVBbnlSZXF1ZXN0RmxhZwBFdmVudEZsYWcAUG9wSXRlbUZsYWcAUHVzaEl0ZW1GbGFnAFdpbmRvd0JnAFRhYmxlUm93QmcASW1HdWlUYWJsZUZsYWdzX1Jvd0JnAFRhYmxlSGVhZGVyQmcAU2Nyb2xsYmFyQmcATWVudUJhckJnAFBvcHVwQmcATW9kYWxXaW5kb3dEaW1CZwBOYXZXaW5kb3dpbmdEaW1CZwBGcmFtZUJnAFRpdGxlQmcAQ2hpbGRCZwBUZXh0U2VsZWN0ZWRCZwAlZDogJTguNGcKJWQ6ICU4LjRnAGJ1ZgBteV9zdHItPmJlZ2luKCkgPT0gZGF0YS0+QnVmAGluZgBBbGlnbiB0byByaWdodCBlZGdlIG1pbnVzIGhhbGYAJWxmAHNhbnMtc2VyaWYAIyNvZmYAUmV2ZXJ0IFJlZgBTYXZlIFJlZgAlLjhmACBXZWlnaHQ9JS40ZgBWOiUwLjNmAFM6JTAuM2YAUjolMC4zZgBIOiUwLjNmAEc6JTAuM2YAQjolMC4zZgBBOiUwLjNmAHJhdGlvID0gJS4zZgAlczogJS4zZgBIOiAlLjNmLCBTOiAlLjNmLCBWOiAlLjNmAEg6ICUuM2YsIFM6ICUuM2YsIFY6ICUuM2YsIEE6ICUuM2YAJS4wMmYAc3R5bGUuV2luZG93UGFkZGluZzogJS4yZiwlLjJmAHN0eWxlLkZyYW1lUGFkZGluZzogJS4yZiwlLjJmAHN0eWxlLkl0ZW1Jbm5lclNwYWNpbmc6ICUuMmYsJS4yZgBzdHlsZS5JdGVtU3BhY2luZzogJS4yZiwlLjJmAGlvLkRpc3BsYXlTaXplOiAlLjJmLCUuMmYAaW8uRGlzcGxheUZyYW1lYnVmZmVyU2NhbGU6ICUuMmYsJS4yZgBPZmZzZXQgJS4yZgBTZXR0aW5nc0RpcnR5VGltZXIgJS4yZgBBdmFpbCAlLjJmAFdpZHRoICUuMmYAWyVkXSAlLjJmAG1pbl9yb3dfaGVpZ2h0ID0gJS4yZgBzdHlsZS5GcmFtZVJvdW5kaW5nOiAlLjJmAHN0eWxlLldpbmRvd0JvcmRlclNpemU6ICUuMmYAc3R5bGUuRnJhbWVCb3JkZXJTaXplOiAlLjJmAE15Q29sb3IjIzJmAFNjcm9sbCAlLjFmLyUuMWYgJS4xZi8lLjFmACUwMmQlYyBUYWIgMHglMDhYICclcycgT2Zmc2V0OiAlLjFmLCBXaWR0aDogJS4xZi8lLjFmAGlvLkNvbmZpZ01lbW9yeUNvbXBhY3RUaW1lciA9ICUuMWYATW91c2Ugd2hlZWw6ICUuMWYAQ2VsbFBhZGRpbmdYOiAlLjFmLCBDZWxsU3BhY2luZ1g6ICUuMWYvJS4xZiwgT3V0ZXJQYWRkaW5nWDogJS4xZgBBZHZhbmNlWDogJS4xZgBXOiAlLjFmACUuMTBmACooY29uc3QgZmxvYXQqKXBfbWluID49IC0zLjQwMjgyMzQ3ZSszOEYgLyAyLjBmICYmICooY29uc3QgZmxvYXQqKXBfbWF4IDw9IDMuNDAyODIzNDdlKzM4RiAvIDIuMGYAKihjb25zdCBkb3VibGUqKXBfbWluID49IC0xLjc5NzY5MzEzNDg2MjMxNTdlKzMwOCAvIDIuMGYgJiYgKihjb25zdCBkb3VibGUqKXBfbWF4IDw9IDEuNzk3NjkzMTM0ODYyMzE1N2UrMzA4IC8gMi4wZgBjZW50ZXJfeV9yYXRpbyA+PSAwLjBmICYmIGNlbnRlcl95X3JhdGlvIDw9IDEuMGYAY2VudGVyX3hfcmF0aW8gPj0gMC4wZiAmJiBjZW50ZXJfeF9yYXRpbyA8PSAxLjBmAGNvbHVtbi0+U3RyZXRjaFdlaWdodCA+IDAuMGYASXRlbXNIZWlnaHQgPiAwLjBmAHZpc2libGVfd2VpZ2h0ID4gMC4wZiAmJiB2aXNpYmxlX3dpZHRoID4gMC4wZgBjb2x1bW5fMF93aWR0aCA+IDAuMGYgJiYgY29sdW1uXzFfd2lkdGggPiAwLjBmAHRhYi0+Q29udGVudFdpZHRoID4gMC4wZgB0YWJsZS0+TWluQ29sdW1uV2lkdGggPiAwLjBmAHNjcm9sbGJhcl9zaXplID4gMC4wZgBzY2FsZSA+IDAuMGYAZm9udC0+U2NhbGUgPiAwLjBmAEltTWF4KHNpemVfY29udGVudHNfdiwgc2l6ZV9hdmFpbF92KSA+IDAuMGYAaW5uZXJfd2lkdGggPj0gMC4wZgB0YWJsZS0+SW5uZXJXaW5kb3ctPldpbmRvd1BhZGRpbmcueCA9PSAwLjBmICYmIHRhYmxlLT5Jbm5lcldpbmRvdy0+V2luZG93UGFkZGluZy55ID09IDAuMGYgJiYgdGFibGUtPklubmVyV2luZG93LT5XaW5kb3dCb3JkZXJTaXplID09IDAuMGYASXRlbXNIZWlnaHQgPD0gMC4wZgBzaXplX2FyZy54ICE9IDAuMGYgJiYgc2l6ZV9hcmcueSAhPSAwLjBmACUuMGZ4JS4wZgAlcwolLjBmLyUuMGYAUmVmU2NhbGU9JWYAYXZnICVmAEFzY2VudDogJWYsIERlc2NlbnQ6ICVmLCBIZWlnaHQ6ICVmAFVuZGVybHlpbmcgZmxvYXQgdmFsdWU6ICVmAFRhYmxlU29ydFNwZWNzU2FuaXRpemUAQXV0by1yZXNpemUATm8gcmVzaXplAEFsd2F5c0F1dG9SZXNpemUAX05vUmVzaXplAEltR3VpVGFibGVGbGFnc19Ob0JvcmRlcnNJbkJvZHlVbnRpbFJlc2l6ZQBFeGFtcGxlOiBDb25zdHJhaW5lZCBSZXNpemUAb3V0ZXJfc2l6ZQBhcHBseV9uZXdfdGV4dF9sZW5ndGggPD0gYnVmX3NpemUARXhwbGljaXQgY29udGVudCBzaXplAE91dGVyIHNpemUAYWxsb2NhdG9yPFQ+OjphbGxvY2F0ZShzaXplX3QgbikgJ24nIGV4Y2VlZHMgbWF4aW11bSBzdXBwb3J0ZWQgc2l6ZQBJbml0aWFsaXplAERpc3BsYXlTaXplAEltRHJhd0lkeFNpemUAU2V0TmV4dFdpbmRvd1NpemUAU2V0V2luZG93U2l6ZQBHZXRXaW5kb3dTaXplAENhbGNUZXh0U2l6ZQBJbURyYXdWZXJ0U2l6ZQBHZXRGb250U2l6ZQBTZXROZXh0V2luZG93Q29udGVudFNpemUAQ3VycmVudFNpemUAR2V0SXRlbVJlY3RTaXplACMjT3V0ZXJTaXplAFdpbmRvd0JvcmRlclNpemUAUG9wdXBCb3JkZXJTaXplAEZyYW1lQm9yZGVyU2l6ZQBDaGlsZEJvcmRlclNpemUAVGFiQm9yZGVyU2l6ZQBTY3JvbGxiYXJTaXplAFdpbmRvd01pblNpemUAR3JhYk1pblNpemUAQnVmU2l6ZQBTZXRXaW5kb3dOYW1lU2l6ZQBJbUd1aVN0eWxlU2l6ZQBEZXNpcmVkU2l6ZQBJbUd1aUlPU2l6ZQBJbVZlYzRTaXplAEltVmVjMlNpemUAZy5XaW5kb3dzRm9jdXNPcmRlci5TaXplID09IGcuV2luZG93cy5TaXplAGNvbHVtbl9pbmRleCA8IGNvbHVtbnMtPkNvbHVtbnMuU2l6ZQAoaW50KWRyYXdfbGlzdC0+X1Z0eEN1cnJlbnRJZHggPT0gZHJhd19saXN0LT5WdHhCdWZmZXIuU2l6ZQBkcmF3X2xpc3QtPlZ0eEJ1ZmZlci5TaXplID09IDAgfHwgZHJhd19saXN0LT5fVnR4V3JpdGVQdHIgPT0gZHJhd19saXN0LT5WdHhCdWZmZXIuRGF0YSArIGRyYXdfbGlzdC0+VnR4QnVmZmVyLlNpemUAZHJhd19saXN0LT5JZHhCdWZmZXIuU2l6ZSA9PSAwIHx8IGRyYXdfbGlzdC0+X0lkeFdyaXRlUHRyID09IGRyYXdfbGlzdC0+SWR4QnVmZmVyLkRhdGEgKyBkcmF3X2xpc3QtPklkeEJ1ZmZlci5TaXplAGcuV2luZG93cy5TaXplID09IGcuV2luZG93c1RlbXBTb3J0QnVmZmVyLlNpemUAZHN0X3RtcCA9PSBnLkRyYXdDaGFubmVsc1RlbXBNZXJnZUJ1ZmZlci5EYXRhICsgZy5EcmF3Q2hhbm5lbHNUZW1wTWVyZ2VCdWZmZXIuU2l6ZQByZW1haW5pbmcgPj0gMCAmJiByZW1haW5pbmcgPCBnLk9wZW5Qb3B1cFN0YWNrLlNpemUAdGFiLT5OYW1lT2Zmc2V0ICE9IC0xICYmIChpbnQpdGFiLT5OYW1lT2Zmc2V0IDwgVGFic05hbWVzLkJ1Zi5TaXplAG9mZiA+PSA0ICYmIG9mZiA8IEJ1Zi5TaXplAHAgPj0gQnVmLkRhdGEgJiYgcCA8IEJ1Zi5EYXRhICsgQnVmLlNpemUAdGV4dF9sZW4gPCBvYmotPlRleHRXLlNpemUAbmV3X3NpemUgPD0gU2l6ZQBpID49IDAgJiYgaSA8IFNpemUAaXQgPj0gRGF0YSAmJiBpdCA8PSBEYXRhICsgU2l6ZQBpdCA+PSBEYXRhICYmIGl0IDwgRGF0YSArIFNpemUAVGFibGVTZXR1cFNjcm9sbEZyZWV6ZQBDdXJ2ZQBQcmltVW5yZXNlcnZlAFByaW1SZXNlcnZlAE5vIG1vdmUATW92ZQBOYXZBY3RpdmUAU2VwYXJhdG9yQWN0aXZlAEhlYWRlckFjdGl2ZQBnLkFjdGl2ZUlkID09IGlkIHx8IGcuQWN0aXZlSWQgPT0gMCB8fCBnLkRyYWdEcm9wQWN0aXZlAFJlc2l6ZUdyaXBBY3RpdmUAQnV0dG9uQWN0aXZlAElzQW55SXRlbUFjdGl2ZQBJc0l0ZW1BY3RpdmUARnJhbWVCZ0FjdGl2ZQBUaXRsZUJnQWN0aXZlAFRhYlVuZm9jdXNlZEFjdGl2ZQBTbGlkZXJHcmFiQWN0aXZlAFNjcm9sbGJhckdyYWJBY3RpdmUAVGFiQWN0aXZlAHBhcmVudF93aW5kb3cgJiYgcGFyZW50X3dpbmRvdy0+QWN0aXZlAEl0ZW0gRml2ZQBTYXZlAGcuQ3VycmVudFdpbmRvdy0+SXNGYWxsYmFja1dpbmRvdyA9PSB0cnVlAE9wYXF1ZQBibHVlACMjdmFsdWUAIyNWYWx1ZQBodWUAIyNwYWxldHRlAFBhbGV0dGUAUGFzdGUASW1HdWlUYWJsZUZsYWdzX1NvcnRUcmlzdGF0ZQBJbnRlcm5hbCBzdGF0ZQBDb21wYXJlV2l0aEN1cnJlbnRTdGF0ZQBLZXlib2FyZCwgTW91c2UgJiBOYXZpZ2F0aW9uIFN0YXRlAEZyYW1lcmF0ZQBBbmltYXRlAEFic3F1YXR1bGF0ZQBJdGVyYXRlR2x5cGhUb0NyZWF0ZQBOYXZVcGRhdGUAUGF0aExpbmVUb01lcmdlRHVwbGljYXRlAEtleVJlcGVhdFJhdGUASW5pU2F2aW5nUmF0ZQBpby5Db25maWdGbGFnczogTm9Nb3VzZQBXYW50Q2FwdHVyZU1vdXNlAHNsaWRlciB1OCByZXZlcnNlAHNsaWRlciBzOCByZXZlcnNlAHNsaWRlciB1NjQgcmV2ZXJzZQBzbGlkZXIgczY0IHJldmVyc2UAc2xpZGVyIHUzMiByZXZlcnNlAHNsaWRlciBzMzIgcmV2ZXJzZQBObyBjb2xsYXBzZQBObyBjbG9zZQBDbG9zZQBnLkRyYWdEcm9wV2l0aGluVGFyZ2V0ID09IGZhbHNlAHRhYmxlLT5Jc1VuZnJvemVuUm93cyA9PSBmYWxzZQBnLldpdGhpbkVuZENoaWxkID09IGZhbHNlAHRhYmxlLT5NZW1vcnlDb21wYWN0ZWQgPT0gZmFsc2UAZy5Mb2dFbmFibGVkID09IGZhbHNlAHRhYmxlICE9IDBMICYmIHRhYmxlLT5Jc0xheW91dExvY2tlZCA9PSBmYWxzZQBlcmFzZQB1cHBlcmNhc2UAQXRsYXMgdGV4dHVyZQBBbnRpLWFsaWFzZWQgbGluZXMgdXNlIHRleHR1cmUARmlyZQBlbnRlciB0ZXh0IGhlcmUAVG9vbHRpcCBoZXJlAFNldEtleWJvYXJkRm9jdXNIZXJlAEN1c3RvbTogQWx3YXlzIFNxdWFyZQBEYXRhVHlwZUNvbXBhcmUAIyNvdXRwdXRfdHlwZQAjI3Nob3dfd2luZG93c19yZWN0X3R5cGUAIyNzaG93X3RhYmxlX3JlY3RzX3R5cGUAVGVzdCB0eXBlAHJvdyBiZyB0eXBlAGNlbGwgYmcgdHlwZQBJdGVtIFR5cGUAZy5XaXRoaW5GcmFtZVNjb3BlAExvZ1NsaWRlckRlYWR6b25lAHRhcmdldCAhPSBJbUd1aVRhYmxlQmdUYXJnZXRfTm9uZQBnLk5hdk1vdmVEaXIgIT0gSW1HdWlEaXJfTm9uZSAmJiBnLk5hdk1vdmVDbGlwRGlyICE9IEltR3VpRGlyX05vbmUAc29ydF9kaXJlY3Rpb24gIT0gSW1HdWlTb3J0RGlyZWN0aW9uX05vbmUAZy5OYXZNb3ZlUmVxdWVzdEZvcndhcmQgPT0gSW1HdWlOYXZGb3J3YXJkX05vbmUAL3BhdGgvb25lAExpa2UgdGhpcyBvbmUAUmVtb3ZlIG9uZQBBZGRQb2x5bGluZQBJbnB1dFRleHRNdWx0aWxpbmUAUmVuZGVyaW5nIG1vcmUgdGV4dCBpbnRvIHRoZSBzYW1lIGxpbmUAQnkgZGVmYXVsdCwgU2VsZWN0YWJsZXMgdXNlcyBzdHlsZS5TZWxlY3RhYmxlVGV4dEFsaWduIGJ1dCBpdCBjYW4gYmUgb3ZlcnJpZGRlbiBvbiBhIHBlci1pdGVtIGJhc2lzIHVzaW5nIFB1c2hTdHlsZVZhcigpLiBZb3UnbGwgcHJvYmFibHkgd2FudCB0byBhbHdheXMga2VlcCB5b3VyIGRlZmF1bHQgc2l0dWF0aW9uIHRvIGxlZnQtYWxpZ24gb3RoZXJ3aXNlIGl0IGJlY29tZXMgZGlmZmljdWx0IHRvIGxheW91dCBtdWx0aXBsZSBpdGVtcyBvbiBhIHNhbWUgbGluZQBCbGFpbmUASW1HdWlJbnB1dFRleHRGbGFnc19DdHJsRW50ZXJGb3JOZXdMaW5lAFNhbWVMaW5lAEFkZExpbmUAbGVmdCBwYW5lAFNpemUgY29sdW1uIHRvIGZpdCMjI1NpemVPbmUAT25lT25lT25lAEl0ZW0gT25lAERvbid0IGFzayBtZSBuZXh0IHRpbWUAR2V0VGltZQBNb3VzZURvdWJsZUNsaWNrVGltZQBEZWx0YVRpbWUAVXBkYXRlTW91c2VNb3ZpbmdXaW5kb3dOZXdGcmFtZQBOYXZFbmRGcmFtZQBCZWdpbkNoaWxkRnJhbWUARW5kQ2hpbGRGcmFtZQBJbmlGaWxlbmFtZQBMb2dGaWxlbmFtZQBJbUd1aVRhYmxlRmxhZ3NfU2l6aW5nU3RyZXRjaFNhbWUASW1HdWlUYWJsZUZsYWdzX1NpemluZ0ZpeGVkU2FtZQBGb250TmFtZQBHZXRTdHlsZUNvbG9yTmFtZQBCYWNrZW5kUmVuZGVyZXJOYW1lAFRhYmxlR2V0Q29sdW1uTmFtZQBCYWNrZW5kUGxhdGZvcm1OYW1lAEdldFRhYk5hbWUALSBvciBtZQBIb3ZlciBvdmVyIG1lAENsaWNrIG1lAEdldFN0eWxlAEltR3VpU3R5bGUAQW5pbWF0ZWQgdGl0bGUgJWMgJWQjIyNBbmltYXRlZFRpdGxlAEEgUmF0aGVyIExvbmcgVGl0bGUAUGluZWFwcGxlAEFwcGxlAENsb3NlIENvbnNvbGUARXhhbXBsZTogQ29uc29sZQBBdWRpbyBmaWxlAFN5c3RlbSBmaWxlAEltYWdlIGZpbGUAU2hvd0V4YW1wbGVNZW51RmlsZQBMb2dUb0ZpbGUATG9nIFRvIEZpbGUAQWRkVHJpYW5nbGUAc2xpZGVyIGFuZ2xlAFNsaWRlckFuZ2xlAEFkZENpcmNsZQBpbnB1dCBkb3VibGUAZHJhZyBkb3VibGUASW5wdXREb3VibGUAIWlzX3Zpc2libGUATmF2VmlzaWJsZQBJbUd1aVRhYmxlRmxhZ3NfTm9LZWVwQ29sdW1uc1Zpc2libGUAX0lzVmlzaWJsZQBJc0l0ZW1WaXNpYmxlAHRhYi0+TGFzdEZyYW1lVmlzaWJsZSA+PSB0YWJfYmFyLT5QcmV2RnJhbWVWaXNpYmxlAHRhYmxlLT5GbGFncyAmIEltR3VpVGFibGVGbGFnc19SZXNpemFibGUAdGFibGUtPkZsYWdzICYgSW1HdWlUYWJsZUZsYWdzX1NvcnRhYmxlACMjc2VsZWN0YWJsZQAzLiBJIGFtIG5vdCBzZWxlY3RhYmxlADQuIEkgYW0gc2VsZWN0YWJsZQAyLiBJIGFtIHNlbGVjdGFibGUAMS4gSSBhbSBzZWxlY3RhYmxlAFNlbGVjdGFibGUAZy5DdXJyZW50V2luZG93ID09IG91dGVyX3dpbmRvdyAmJiBnLkN1cnJlbnRUYWJsZSA9PSB0YWJsZQBfSW5kZW50RGlzYWJsZQBJbUd1aVRhYkJhckZsYWdzX1Jlb3JkZXJhYmxlAHRhYmxlLT5GbGFncyAmIEltR3VpVGFibGVGbGFnc19SZW9yZGVyYWJsZQBfSW5kZW50RW5hYmxlADUuIEkgYW0gZG91YmxlIGNsaWNrYWJsZQBJbUd1aVRhYmxlRmxhZ3NfSGlkZWFibGUAQmVnaW5UYWJsZQBFbmRUYWJsZQB3aW5kb3cgc2NhbGUARm9udCBzY2FsZQBnbG9iYWwgc2NhbGUAU2V0V2luZG93Rm9udFNjYWxlAE1vdXNlQ3Vyc29yU2NhbGUARGlzcGxheUZyYW1lYnVmZmVyU2NhbGUARm9udEdsb2JhbFNjYWxlAFBhdGhTdHJva2UAQXJ0aWNob2tlAENoYW5uZWxzTWVyZ2UAT3JhbmdlAGlvLkNvbmZpZ0ZsYWdzOiBOb01vdXNlQ3Vyc29yQ2hhbmdlAEFsaWduIHRvIHJpZ2h0IGVkZ2UAU2V0U3RhdGVTdG9yYWdlAEdldFN0YXRlU3RvcmFnZQAjaW1hZ2UAQWRkSW1hZ2UAdHJlZQAvcGF0aC90aHJlZQBUaHJlZVRocmVlVGhyZWUASXRlbSBUaHJlZQBPbmUKVHdvClRocmVlAFRyZWUATWVtRnJlZQBTbmlja2Vyc25lZQB0aGlzIGlzIGEgdHJlZSBub2RlAFRyZWUgbm9kZQBmaWxlbmFtZSAmJiBtb2RlAEZvY3VzIGZyb20gY29kZQBTY3JvbGwgZnJvbSBjb2RlAElURU06IFRyZWVOb2RlAE1lcmdlTW9kZQBEaXNwbGF5IE1vZGUAUGlja2VyIE1vZGUAU2hvd1VzZXJHdWlkZQAjI2N1cnZlc3NlZ21lbnRvdmVycmlkZQAjI2NpcmNsZXNlZ21lbnRvdmVycmlkZQBDdXJ2ZXMgc2VnbWVudHMgb3ZlcnJpZGUAQ2lyY2xlIHNlZ21lbnRzIG92ZXJyaWRlAF9EZWZhdWx0SGlkZQBfTm9IaWRlAExldHR1Y2UAIyNzb3VyY2UAVGhpcyBpcyBhIGRyYWcgYW5kIGRyb3Agc291cmNlAFRlc3QgdHJlZSBub2RlIGFzIGRyYWcgc291cmNlAEJlZ2luRHJhZ0Ryb3BTb3VyY2UARW5kRHJhZ0Ryb3BTb3VyY2UAQ3VydmUgVGVzc2VsbGF0aW9uIFRvbGVyYW5jZQBjb25kID09IEltR3VpQ29uZF9BbHdheXMgfHwgY29uZCA9PSBJbUd1aUNvbmRfT25jZQBCZWF0cmljZQBzdGJfdGV4dGVkaXRfcmVwbGFjZQBEcmFnIE1lACVlAHBhc3N3b3JkAE5hdk1vdmVSZXF1ZXN0Rm9yd2FyZABOYXZLZXlib2FyZABXYW50Q2FwdHVyZUtleWJvYXJkACBOYXZOb0NhcHR1cmVLZXlib2FyZABpby5Db25maWdGbGFnczogTmF2RW5hYmxlS2V5Ym9hcmQAQ29weSB0byBjbGlwYm9hcmQAQ29weSAiSGVsbG8sIHdvcmxkISIgdG8gY2xpcGJvYXJkAExvZ1RvQ2xpcGJvYXJkAExvZyBUbyBDbGlwYm9hcmQAQmVybmFyZABObyBiYWNrZ3JvdW5kAEJvcmRlcnMsIGJhY2tncm91bmQAVGFiSXRlbUJhY2tncm91bmQAIyNCYWNrZ3JvdW5kACMjRm9yZWdyb3VuZAAoKGNoYXIqKShzdGF0ZS0+dW5kb19yZWMgKyBzdGF0ZS0+cmVkb19wb2ludCArIDEpICsgbW92ZV9zaXplKSA8PSBidWZfZW5kAEhhbmQARGlzcGxheUVuZABHZXRTcGFuUHRyRW5kAFNlbGVjdGlvbkVuZABpdCA+PSBEYXRhICYmIGl0IDwgRGF0YUVuZABwID49IERhdGEgJiYgcCA8IERhdGFFbmQASW1EcmF3Q21kAEFkZERyYXdDbWQAaGVsbG8sIHdvcmxkAEhlbGxvCldvcmxkAElzTW91c2VEcmFnUGFzdFRocmVzaG9sZABNb3VzZURyYWdUaHJlc2hvbGQAYnV0dG9uX2ZsYWdzICYgSW1HdWlCdXR0b25GbGFnc19QcmVzc2VkT25EcmFnRHJvcEhvbGQAJWxsZABUYWJsZVNvcnRTcGVjc0J1aWxkAG91dGVyX2NoaWxkAEJlZ2luQ2hpbGQARW5kQ2hpbGQARmllbGQARW5hYmxlIGdyaWQAR3JpZAB2b2lkAEJlZ2luUG9wdXBDb250ZXh0Vm9pZABJc01vdXNlUG9zVmFsaWQAZy5BY3RpdmVJZCA9PSBpZABjb2x1bW5zLT5JRCA9PSBpZABzdGF0ZSAmJiBzdGF0ZS0+SUQgPT0gaWQAaGJsa2hkAGcuSW5pdGlhbGl6ZWQAUmVzaXphYmxlLCBtaXhlZABSZXNpemFibGUsIGZpeGVkAF9XaWR0aEZpeGVkAE5vdEFsbG93ZWQAZy5OYXZNb3ZlUmVxdWVzdEZvcndhcmQgPT0gSW1HdWlOYXZGb3J3YXJkX0ZvcndhcmRRdWV1ZWQAVGV4dFVuZm9ybWF0dGVkAGVyYXNlX3Vuc29ydGVkAF9Jc1NvcnRlZABJbmRlbnRlZABJc0l0ZW1FZGl0ZWQATWFya0l0ZW1FZGl0ZWQATm90IFNlbGVjdGVkAElzSXRlbURlYWN0aXZhdGVkAElzSXRlbUFjdGl2YXRlZABDbGVhckdseXBoQ3JlYXRlZAB1bnVzZWQAVGFiVW5mb2N1c2VkAElzV2luZG93Rm9jdXNlZABJc0FueUl0ZW1Gb2N1c2VkAElzSXRlbUZvY3VzZWQASXNLZXlQcmVzc2VkAFNldE5leHRXaW5kb3dDb2xsYXBzZWQAU2V0V2luZG93Q29sbGFwc2VkAElzV2luZG93Q29sbGFwc2VkAFRpdGxlQmdDb2xsYXBzZWQAU2V0V2luZG93TmFtZUNvbGxhcHNlZABTZXRUYWJJdGVtQ2xvc2VkAElzS2V5UmVsZWFzZWQASXNNb3VzZVJlbGVhc2VkAENvbHVtbnNDb250ZW50SGVhZGVyc1VzZWQAVGV4dENvbG9yZWQARmlyc3QgZ3JvdXAgaG92ZXJlZABJc1dpbmRvd0hvdmVyZWQAUGxvdExpbmVzSG92ZXJlZABfSXNIb3ZlcmVkAFNlcGFyYXRvckhvdmVyZWQASGVhZGVySG92ZXJlZABSZXNpemVHcmlwSG92ZXJlZABCdXR0b25Ib3ZlcmVkAElzQW55SXRlbUhvdmVyZWQASXNJdGVtSG92ZXJlZABQbG90SGlzdG9ncmFtSG92ZXJlZABGcmFtZUJnSG92ZXJlZABTY3JvbGxiYXJHcmFiSG92ZXJlZABUYWJIb3ZlcmVkAE91dGVyUmVjdENsaXBwZWQAVGV4dCB3cmFwcGVkAFRleHRXcmFwcGVkAEFsaWduZWQAKHdpbmRvdy0+RmxhZ3MgfCBnLk5hdldpbmRvdy0+RmxhZ3MpICYgSW1HdWlXaW5kb3dGbGFnc19OYXZGbGF0dGVuZWQAQnVtZnV6emxlZABBZGRDb252ZXhQb2x5RmlsbGVkAEFkZFJlY3RGaWxsZWQAQWRkTmdvbkZpbGxlZABBZGRUcmlhbmdsZUZpbGxlZABBZGRDaXJjbGVGaWxsZWQAQWRkUXVhZEZpbGxlZABUZXh0RGlzYWJsZWQAX0lzRW5hYmxlZABJc0l0ZW1DbGlja2VkAElzTW91c2VDbGlja2VkAElzTW91c2VEb3VibGVDbGlja2VkAENoZWNrZWQAQWRkSW1hZ2VSb3VuZGVkACFnLkluaXRpYWxpemVkICYmICFnLlNldHRpbmdzTG9hZGVkAHRhYmxlX2FkdmFuY2VkAEFkdmFuY2VkAFJlZABBZGRJbWFnZVF1YWQAQWRkUXVhZABOYXZHYW1lcGFkAGlvLkJhY2tlbmRGbGFnczogSGFzR2FtZXBhZABpby5Db25maWdGbGFnczogTmF2RW5hYmxlR2FtZXBhZABBY2NlcHREcmFnRHJvcFBheWxvYWQAU2V0RHJhZ0Ryb3BQYXlsb2FkAEdldERyYWdEcm9wUGF5bG9hZABnLk5hdkFjdGl2YXRlRG93bklkID09IGcuTmF2QWN0aXZhdGVJZABmb250LT5Db250YWluZXJBdGxhcy0+VGV4SUQgPT0gX0NtZEhlYWRlci5UZXh0dXJlSWQAJUk2NGQAJTA0ZAAlMDNkAFY6JTNkAFM6JTNkAFI6JTNkAEg6JTNkAEc6JTNkAEI6JTNkAEE6JTNkACMjTWVudV8lMDJkACMjVG9vbHRpcF8lMDJkACMjQ29tYm9fJTAyZABDb2x1bW4gJS0yZABOb2RlJWQAYiVkAEZpZWxkXyVkAGRlZmluZTogX19jcGx1c3BsdXM9JWQAIE9yZGVyPSVkACBXaWR0aD0lZAAgVmlzaWJsZT0lZAAweCUwOFggIiVzIiBQb3MgKCVkLCVkKSBTaXplICglZCwlZCkgQ29sbGFwc2VkPSVkAGRlZmluZTogX19HTlVDX189JWQAJWQvJWQATm9kZSVkLiVkACVzICVkLCVkAEhlbGxvICVkLCVkAFRoaXMgaXMgdGhlIHBvcHVwIGZvciBCdXR0b24oIi4uIikgaW4gQ2VsbCAlZCwlZABIZWxsbyB3b3JsZCAlZCwlZABGaXhlZCAlZCwlZABpby5Gb250czogJWQgZm9udHMsIEZsYWdzOiAweCUwOFgsIFRleFNpemU6ICVkLCVkADB4JTA4WCwlZABSb3cgJWQAU2Nyb2xsaW5nIFRleHQgJWQAU29tZSB0ZXN0ICVkAE1vcmUgY29udGVudCAlZABTb21lIGNvbnRlbnQgJWQATXlPYmplY3QgJWQAVGhpcyBpcyBhIGN1c3RvbSBwb3B1cCBmb3IgQ29sdW1uICVkAFJvdyAlZCBDb2x1bW4gJWQASXRlbSAlZAB0aGlzIGNlbGwgJWQAU2VsZWN0YWJsZSBMZWFmICVkACUqc1RoaXMgaXMgbGluZSAlZABMaW5lICVkAFN5bmNlZCBUYWJsZSAlZABTZWxlY3RhYmxlIE5vZGUgJWQAQ2hpbGQgJWQASXRlbSA9ICVkAERhdGE6ICVwClNpemU6ICVkCkNhcGFjaXR5OiAlZABBY3RpdmU6ICVkLyVkLCBXcml0ZUFjY2Vzc2VkOiAlZCwgQmVnaW5PcmRlcldpdGhpbkNvbnRleHQ6ICVkAFdhbnRUZXh0SW5wdXQ6ICVkAE15T2JqZWN0OiAlZABJdGVtIHdpdGggZm9jdXM6ICVkAFdhbnRTZXRNb3VzZVBvczogJWQAQXBwZWFyaW5nOiAlZCwgSGlkZGVuOiAlZCAoQ2FuU2tpcCAlZCBDYW5ub3QgJWQpLCBTa2lwSXRlbXM6ICVkACVzOiAlZABOYXZJZDogMHglMDhYLCBOYXZMYXllcjogJWQATmF2RGlzYWJsZUhpZ2hsaWdodDogJWQsIE5hdkRpc2FibGVNb3VzZUhvdmVyOiAlZABIb3ZlcmVkQ29sdW1uQm9keTogJWQsIEhvdmVyZWRDb2x1bW5Cb3JkZXI6ICVkAEhvdmVyZWRJZDogMHglMDhYLzB4JTA4WCAoJS4yZiBzZWMpLCBBbGxvd092ZXJsYXA6ICVkAEhvdmVyZWQgY29sdW1uOiAlZABSZXNpemVkQ29sdW1uOiAlZCwgUmVvcmRlckNvbHVtbjogJWQsIEhlbGRIZWFkZXJDb2x1bW46ICVkAFdhbnRDYXB0dXJlTW91c2U6ICVkAE5hdkFjdGl2ZTogJWQsIE5hdlZpc2libGU6ICVkAFdhbnRDYXB0dXJlS2V5Ym9hcmQ6ICVkAElzSXRlbUhvdmVyZWQ6ICVkAHNpemVvZihzaXplX3QpOiAlZCwgc2l6ZW9mKEltRHJhd0lkeCk6ICVkLCBzaXplb2YoSW1EcmF3VmVydCk6ICVkAEFzYwBNZW1BbGxvYwBmdW5jAEFkZEJlemllclF1YWRyYXRpYwBNdXNpYwBTdHlsZUNvbG9yc0NsYXNzaWMAQmFzaWMASW1HdWlTbGlkZXJGbGFnc19Mb2dhcml0aG1pYwBpbnB1dCBzY2llbnRpZmljAEFkZEJlemllckN1YmljACUuMmYKc2VjAEdldFNwZWMAYWJjAE15Q29sb3IjIzNjAGZpc2hfaGF0LmMAbWFpbi5jAGNjYzEuYwBiYmIxLmMAYWFhMS5jACBTb3J0PSVkJWMAJWMlYyVjAHJhZGlvIGMAcmIAIyNyZ2IAc2hvd19tZXNoIHx8IHNob3dfYWFiYgBTbGlkZXJHcmFiAFNjcm9sbGJhckdyYWIAVGFiQmFyQ2xvc2VUYWIAZmxvYXQgKGluZGVudGVkKSMjNWIAZmxvYXQgKGluZGVudGVkKSMjNGIATXlDb2xvciMjM2IAZmxvYXQgKGluZGVudGVkKSMjM2IAZmxvYXQgKGluZGVudGVkKSMjMmIAZmxvYXQjIzFiAGZsb2F0IChpbmRlbnRlZCkjIzFiAHJhZGlvIGIAcndhAFJlc2V0TW91c2VEcmFnRGVsdGEAR2V0TW91c2VEcmFnRGVsdGEATW91c2VEZWx0YQBHZXREcmF3RGF0YQBBZGREcmF3TGlzdFRvRHJhd0RhdGEASW1EcmF3RGF0YQBGb250RGF0YQBCYWNrZW5kUmVuZGVyZXJVc2VyRGF0YQBCYWNrZW5kUGxhdGZvcm1Vc2VyRGF0YQBCYWNrZW5kTGFuZ3VhZ2VVc2VyRGF0YQBDbGlwYm9hcmRVc2VyRGF0YQBJbUd1aUlucHV0VGV4dENhbGxiYWNrRGF0YQBJbUd1aVNpemVDYWxsYmFja0RhdGEAU2V0dGluZ3NJbmlEYXRhAENvbmZpZ0RhdGEAR2V0RHJhd0xpc3RTaGFyZWREYXRhAEJ1ZiA9PSBlZGl0X3N0YXRlLT5UZXh0QS5EYXRhAGNhbGxiYWNrX2RhdGEuQnVmID09IHN0YXRlLT5UZXh0QS5EYXRhAEJyaWFubmEAYXJlbmEAQmFuYW5hAEFiaWJsaW9waG9iaWEAYWxwaGEAU2V0TmV4dFdpbmRvd0JnQWxwaGEAR2xvYmFsIEFscGhhAFdpdGggQWxwaGEAIyNmbG9hdDVhAGZsb2F0IyM0YQBmbG9hdCMjM2EAZmxvYXQjIzJhAHJhZGlvIGEAW35dAFt4XQBbZXJyb3JdAFslZF0Ab3BlcmF0b3JbXQBbIF0AfC8tXABDVFJMK1oAIyNaAEZvY3VzIG9uIFoAR2V0U2Nyb2xsTWF4WQBTdGFydFBvc1kAU2V0Q3Vyc29yUG9zWQBHZXRDdXJzb3JQb3NZAFNldFNjcm9sbEZyb21Qb3NZAFNldFNjcm9sbFkAR2V0U2Nyb2xsWQBJbUd1aVRhYmxlRmxhZ3NfU2Nyb2xsWQBTZXRTY3JvbGxIZXJlWQBJbUd1aVRhYmxlRmxhZ3NfTm9Ib3N0RXh0ZW5kWQBMb2dUb1RUWQBMb2cgVG8gVFRZAEhJU1RPUlkAI1NDUk9MTFkAQ0xBU1NJRlkAQ1RSTCtZACMjWQBGb2N1cyBvbiBZAEdldFNjcm9sbE1heFgAU2V0Q3Vyc29yUG9zWABHZXRDdXJzb3JQb3NYAFNldFNjcm9sbEZyb21Qb3NYAEltR3VpVGFibGVGbGFnc19Ob1BhZE91dGVyWABJbUd1aVRhYmxlRmxhZ3NfUGFkT3V0ZXJYAEltR3VpVGFibGVGbGFnc19Ob1BhZElubmVyWABTZXRTY3JvbGxYAEdldFNjcm9sbFgASW1HdWlUYWJsZUZsYWdzX1Njcm9sbFgAU3RyZXRjaCArIFNjcm9sbFgAU2V0U2Nyb2xsSGVyZVgAR2x5cGhNYXhBZHZhbmNlWABHbHlwaE1pbkFkdmFuY2VYAEltR3VpVGFibGVGbGFnc19Ob0hvc3RFeHRlbmRYACNTQ1JPTExYAENvbHVtbiAlZCBPcmRlciAlZCBTb3J0T3JkZXIgJWQgJXMgVmlzICVkICVzICU3LjNmIFVzZXJJRCAweCUwOFgATmF2Rm9jdXNTY29wZUlkID0gMHglMDhYAGlvLkNvbmZpZ0ZsYWdzOiAweCUwOFgAU2F2ZUZsYWdzOiAweCUwOFgAaW8uQmFja2VuZEZsYWdzOiAweCUwOFgATmF2QWN0aXZhdGVJZDogMHglMDhYLCBOYXZJbnB1dElkOiAweCUwOFgASG92ZXJlZElkOiAweCUwOFgAJXMvJXNfJTA4WAAgVXNlcklEPSUwOFgAJXMvJTA4WABDb2x1bW5zIElkOiAweCUwOFgsIENvdW50OiAlZCwgRmxhZ3M6IDB4JTA0WABDb2RlcG9pbnQ6IFUrJTA0WAAjJTAyWCUwMlglMDJYJTAyWAAjJTAyWCUwMlglMDJYAENUUkwrWABOYXZMYXN0SWRzOiAweCUwOFgsMHglMDhYLCBOYXZMYXllckFjdGl2ZU1hc2s6ICVYACMjWABPZmZzZXQgWABGb2N1cyBvbiBYAFJlc2l6ZU5FU1cAUmVzaXplRVcAQ1RSTCtXACMjVwBJbUd1aVRhYmxlRmxhZ3NfQm9yZGVyc1YASW1HdWlUYWJsZUZsYWdzX0JvcmRlcnNPdXRlclYASW1HdWlUYWJsZUZsYWdzX0JvcmRlcnNJbm5lclYAT3ZlcnNhbXBsZVYAUHJpbVJlY3RVVgBQcmltUXVhZFVWAENvbG9yQ29udmVydFJHQnRvSFNWAENUUkwrVgBURVNUAGltZ3VpX2tleSA+PSAwICYmIGltZ3VpX2tleSA8IEltR3VpS2V5X0NPVU5UAG1vdXNlX2N1cnNvciA+IEltR3VpTW91c2VDdXJzb3JfTm9uZSAmJiBtb3VzZV9jdXJzb3IgPCBJbUd1aU1vdXNlQ3Vyc29yX0NPVU5UAGlkeCA+PSAwICYmIGlkeCA8IEltR3VpU3R5bGVWYXJfQ09VTlQAbW91c2VfYnV0dG9uID49IDAgJiYgbW91c2VfYnV0dG9uIDwgSW1HdWlNb3VzZUJ1dHRvbl9DT1VOVABkYXRhX3R5cGUgPj0gMCAmJiBkYXRhX3R5cGUgPCBJbUd1aURhdGFUeXBlX0NPVU5UAG4gPCBCSVRDT1VOVABOQVYsRk9DVVMAU1RCX1RFWFRFRElUX0lOU0VSVENIQVJTAFJlc2l6ZU5TAElURU1TAG4gPj0gMCAmJiBuIDwgQ0hVTktTICYmIEN1cnJTcGFuID09IENIVU5LUwBuID09IEN1cnJTcGFuICYmIG4gPCBDSFVOS1MAQ3RybCtTAENUUkwrUwBDaGlsZFIAV2l0aCBIRFIAQ0xFQVIASEVMUABPT09PT09PAEdldElPAEltR3VpSU8AQ3RybCtPAFJFQUNUSU9OAElNR1VJX1ZFUlNJT04ASU1HVUlfQ0hFQ0tWRVJTSU9OAGhhc19mcmVlemVfdiA9PSBmYWxzZSB8fCB0YWJsZS0+QmcyRHJhd0NoYW5uZWxVbmZyb3plbiAhPSBUQUJMRV9EUkFXX0NIQU5ORUxfQkcyX0ZST1pFTgBOQU4ATU1NTQBDVFJMK00AQ2hpbGRMACVzOiBOVUxMAExMTExMTEwARE5EX0RFTU9fQ0VMTAB3aW5kb3ctPkRDLkN1cnJlbnRDb2x1bW5zID09IDBMAGN1cnJfY21kLT5Vc2VyQ2FsbGJhY2sgPT0gMEwAZy5Mb2dGaWxlID09IDBMAGcuTmF2V2luZG93ICE9IDBMAHdpbmRvdyA9PSAwTCB8fCB3aW5kb3ctPlJvb3RXaW5kb3cgIT0gMEwAd2luZG93LT5Sb290V2luZG93Rm9yTmF2LT5QYXJlbnRXaW5kb3cgIT0gMEwAdGV4dCAhPSAwTABnLk5hdldpbmRvd2luZ1RhcmdldCAhPSAwTABjb2x1bW5zICE9IDBMAGNhbGxiYWNrICE9IDBMAEdJbUd1aSAhPSAwTABzdGF0ZSAhPSAwTAB0eXBlICE9IDBMAHRhYmxlICE9IDBMAEJ1Zi5EYXRhICE9IDBMAE9LAEtLS0tLS0sASkpKSgBMZWdhY3kgQ29sdW1ucyBBUEkAU2V0IHRvIFBJAElJSUlJSUkASW1HdWlUYWJsZUZsYWdzX0JvcmRlcnNIAEltR3VpVGFibGVGbGFnc19Cb3JkZXJzCiA9IEltR3VpVGFibGVGbGFnc19Cb3JkZXJzSW5uZXJWCiB8IEltR3VpVGFibGVGbGFnc19Cb3JkZXJzT3V0ZXJWCiB8IEltR3VpVGFibGVGbGFnc19Cb3JkZXJzSW5uZXJWCiB8IEltR3VpVGFibGVGbGFnc19Cb3JkZXJzT3V0ZXJIAEltR3VpVGFibGVGbGFnc19Cb3JkZXJzSW5uZXJIAFBpeGVsU25hcEgAT3ZlcnNhbXBsZUgASEhISABXSU5ET1dJTkcAQ1VSUkVOVExZIEFQUEVORElORwBHR0dHAElORgBGRkZGAF9DT0w0RgBfQ09MM0YAI1JFU0laRQAjTU9WRQBSZXNpemVOV1NFACNDT0xMQVBTRQAjQ0xPU0UARUVFRQBfVFJFRU5PREUAVmFsdWVfRABMRVZFUkFHRQpCVVpaV09SRABUZXhJRABTZXROYXZJRABHZXRJRABTZXRGb2N1c0lEAENvbHVtblVzZXJJRABQb3BJRABQdXNoSUQAVGFibGVHZXRDb2x1bW5SZXNpemVJRABQb3BUZXh0dXJlSUQAUHVzaFRleHR1cmVJRABfT25DaGFuZ2VkVGV4dHVyZUlEAGdyb3VwX2RhdGEuV2luZG93SUQgPT0gd2luZG93LT5JRABzZXR0aW5ncy0+SUQgPT0gd2luZG93LT5JRABlZGl0X3N0YXRlLT5JRCAhPSAwICYmIGcuQWN0aXZlSWQgPT0gZWRpdF9zdGF0ZS0+SUQAc2V0dGluZ3MtPklEID09IHRhYmxlLT5JRABEREREAFRyZWVOb2RlRXhfQwBWYWx1ZV9DAFRyZWVOb2RlX0MAR2V0Q29sb3JVMzJfQwBDQ0NDQ0NDQ0NDQ0MAQ1RSTCtDAENhdGVnb3J5IEMATGlzdEJveF9CAFRyZWVOb2RlRXhfQgBBZGRUZXh0X0IATGlzdEJveEhlYWRlcl9CAENvbGxhcHNpbmdIZWFkZXJfQgBSYWRpb0J1dHRvbl9CAE1lbnVJdGVtX0IAVHJlZVB1c2hfQgBWYWx1ZV9CAElzUmVjdFZpc2libGVfQgBTZWxlY3RhYmxlX0IAVHJlZU5vZGVfQgBHZXRDb2xvclUzMl9CAENvbG9yQ29udmVydEhTVnRvUkdCAEJCQkJCQkJCAENhdGVnb3J5IEIAY2FsbGJhY2tfZGF0YS5CdWZTaXplID09IHN0YXRlLT5CdWZDYXBhY2l0eUEAQ2FsY1dvcmRXcmFwUG9zaXRpb25BAENhbGNUZXh0U2l6ZUEATGlzdEJveF9BAFRyZWVOb2RlRXhfQQBBZGRUZXh0X0EATGlzdEJveEhlYWRlcl9BAENvbGxhcHNpbmdIZWFkZXJfQQBSYWRpb0J1dHRvbl9BAE1lbnVJdGVtX0EAVHJlZVB1c2hfQQBWYWx1ZV9BAElzUmVjdFZpc2libGVfQQBTZWxlY3RhYmxlX0EAVHJlZU5vZGVfQQBHZXRDb2xvclUzMl9BAEFBQUEATi9BAENhdGVnb3J5IEEAU2F2ZSBjaGFuZ2UgdG8gdGhlIGZvbGxvd2luZyBpdGVtcz8AU2F2ZT8ARGVsZXRlPwBlbXNjcmlwdGVuOjptZW1vcnlfdmlldzxzaG9ydD4AZW1zY3JpcHRlbjo6bWVtb3J5X3ZpZXc8dW5zaWduZWQgc2hvcnQ+AGVtc2NyaXB0ZW46Om1lbW9yeV92aWV3PGludD4AZW1zY3JpcHRlbjo6bWVtb3J5X3ZpZXc8dW5zaWduZWQgaW50PgBlbXNjcmlwdGVuOjptZW1vcnlfdmlldzxmbG9hdD4AZW1zY3JpcHRlbjo6bWVtb3J5X3ZpZXc8dWludDhfdD4AZW1zY3JpcHRlbjo6bWVtb3J5X3ZpZXc8aW50OF90PgBlbXNjcmlwdGVuOjptZW1vcnlfdmlldzx1aW50MTZfdD4AZW1zY3JpcHRlbjo6bWVtb3J5X3ZpZXc8aW50MTZfdD4AZW1zY3JpcHRlbjo6bWVtb3J5X3ZpZXc8dWludDMyX3Q+AGVtc2NyaXB0ZW46Om1lbW9yeV92aWV3PGludDMyX3Q+AGVtc2NyaXB0ZW46Om1lbW9yeV92aWV3PGNoYXI+AGVtc2NyaXB0ZW46Om1lbW9yeV92aWV3PHVuc2lnbmVkIGNoYXI+AHN0ZDo6YmFzaWNfc3RyaW5nPHVuc2lnbmVkIGNoYXI+AGVtc2NyaXB0ZW46Om1lbW9yeV92aWV3PHNpZ25lZCBjaGFyPgA8VW5rbm93bj4AZW1zY3JpcHRlbjo6bWVtb3J5X3ZpZXc8bG9uZz4AZW1zY3JpcHRlbjo6bWVtb3J5X3ZpZXc8dW5zaWduZWQgbG9uZz4ASXRlbSB3aXRoIGZvY3VzOiA8bm9uZT4ATmF2UmVjdFJlbFswXTogPE5vbmU+AGVtc2NyaXB0ZW46Om1lbW9yeV92aWV3PGRvdWJsZT4APHBhc3N3b3JkPgBNb3VzZSBQb3NpdGlvbjogPGludmFsaWQ+ADxOVUxMPgBNb3VzZSBwb3M6IDxJTlZBTElEPgA8PFBSRVNTIFNQQUNFIFRPIERJU0FCTEU+PgAjIz4APDwAIyM8AENvbG9yIGJ1dHRvbiBvbmx5OgBDb2xvciB3aWRnZXQgd2l0aCBGbG9hdCBEaXNwbGF5OgBNdWx0aS1saW5lIHRleHQ6AFZlcnQ6AENvbG9yIHdpZGdldDoASG9sZCB0byByZXBlYXQ6AExpc3RzOgBDZWxsIGNvbnRlbnRzOgBIb3ZlciB0byBzZWUgbW91c2UgY3Vyc29yczoARGVjb3JhdGlvbnM6AENvbHVtbnM6AE1pc2MgaXRlbXM6AERyYWdzOgBPdXRwdXQgZmxhZ3M6AElucHV0IGZsYWdzOgBGZWF0dXJlczoAVGFibGVzOgBDb21tYW5kczoAJXM6AENvbG9yIHBpY2tlcjoAQ29sb3IgYnV0dG9uIHdpdGggUGlja2VyOgBPdGhlcjoAV2l0aG91dCBib3JkZXI6AFdpdGggYm9yZGVyOgBDb2xvciBidXR0b24gd2l0aCBDdXN0b20gUGlja2VyIFBvcHVwOgBLZXlzIGRvd246AE5hdklucHV0cyBkb3duOgBNb3VzZSBkb3duOgBOYXZJbnB1dHMgZHVyYXRpb246AE1vdXNlIGRibGNsaWNrOgBTaXppbmc6AFNvcnRpbmc6AE1hbnVhbGx5IHdyYXBwaW5nOgBTY3JvbGxpbmc6AFBhZGRpbmc6AFVzaW5nIGV4cGxpY2l0IHNpemU6AENoYXJzIHF1ZXVlOgBLZXlzIHJlbGVhc2U6AFRleHQgYmFzZWxpbmU6AEVkaXQgbmFtZToAU2V0IGRlZmF1bHRzIGluIGNvZGU6AEtleXMgcHJlc3NlZDoATmF2SW5wdXRzIHByZXNzZWQ6AE1vdXNlIHJlbGVhc2VkOgBXaXRoIGtleWJvYXJkIG5hdmlnYXRpb24gZW5hYmxlZDoATW91c2UgY2xpY2tlZDoAVGVzdCBwYXJhZ3JhcGggJWQ6AENvbG9yIHdpZGdldCBIU1Ygd2l0aCBBbHBoYToAVXNpbmcgTm9Ib3N0RXh0ZW5kWCBhbmQgTm9Ib3N0RXh0ZW5kWToAQ29sb3Igd2lkZ2V0IHdpdGggSW5wdXRIU1Y6AEFCT1VUIFRISVMgREVNTzoAVVNFUiBHVUlERToAUFJPR1JBTU1FUiBHVUlERToASXNNb3VzZURyYWdnaW5nKCVkKToAR2V0TW91c2VEcmFnRGVsdGEoMCk6ACclcyc6AElEOiAwMTIzNDU2Nzg5AGlucHV0IHU4AGRyYWcgdTgAaW5wdXQgczgAZHJhZyBzOABHZXRUZXhEYXRhQXNBbHBoYTgAVTgAUzgAQWRkSW5wdXRDaGFyYWN0ZXJzVVRGOAByb3dzID49IDAgJiYgcm93cyA8IDEyOABzb3J0X29yZGVyX2NvdW50IDwgKGludClzaXplb2Yoc29ydF9vcmRlcl9tYXNrKSAqIDgAMTIzNDU2ADEyMy40NTYAaW5wdXQgdTE2AGRyYWcgdTE2AGlucHV0IHMxNgBkcmFnIHMxNgBVMTYAUzE2ADAuLjI1NQBpbnB1dCBpbnQ0AHNsaWRlciBpbnQ0AGRyYWcgaW50NABJbnB1dEludDQAU2xpZGVySW50NABEcmFnSW50NABJVEVNOiBDb2xvckVkaXQ0AGlucHV0IGZsb2F0NABzbGlkZXIgZmxvYXQ0AGRyYWcgZmxvYXQ0AElucHV0RmxvYXQ0AFNsaWRlckZsb2F0NABDb2xvckNvbnZlcnRVMzJUb0Zsb2F0NABEcmFnRmxvYXQ0AENvbG9yUGlja2VyNABHZXRTdHlsZUNvbG9yVmVjNABJbVZlYzQAQWx0K0Y0AGlucHV0IHU2NABkcmFnIHU2NABpbnB1dCBzNjQAZHJhZyBzNjQAVTY0AFM2NABrZXkgPCA2NABjb2x1bW5zID49IDAgJiYgY29sdW1ucyA8IDY0ADEyMzQATXlDb2xvciMjNABCdXR0b24jIzQAaW5wdXQgaW50MwBzbGlkZXIgaW50MwBkcmFnIGludDMASW5wdXRJbnQzAFNsaWRlckludDMARHJhZ0ludDMAQ29sb3JFZGl0MwBzZXQzAGlucHV0IGZsb2F0MwBzbGlkZXIgZmxvYXQzAGRyYWcgZmxvYXQzAElURU06IElucHV0RmxvYXQzAFNsaWRlckZsb2F0MwBEcmFnRmxvYXQzAG15Y29sdW1uczMAZmxhZ3MzAENvbG9yUGlja2VyMwB0YWJsZTMATXlDb2xvciMjMwBCdXR0b24jIzMASXRlbSMjMwBGb2N1cyBvbiAzAGlucHV0IGludDIAc2xpZGVyIGludDIAZHJhZyBpbnQyACMjZ3JhZGllbnQyAElucHV0SW50MgBTbGlkZXJJbnQyAERyYWdJbnQyAHNwbGl0MgBzZXQyAGlucHV0IGZsb2F0MgBzbGlkZXIgZmxvYXQyAGRyYWcgZmxvYXQyAElucHV0RmxvYXQyAFNsaWRlckZsb2F0MgBEcmFnRmxvYXQyAHRhYmxlMgBEcmFnSW50UmFuZ2UyAERyYWdGbG9hdFJhbmdlMgB0YWJsZV9uZXN0ZWQyAEltVmVjMgB0YWJsZV9jb250ZXh0X21lbnVfMgB0YWJsZV9wYWRkaW5nXzIAaW5wdXQgdTMyAGRyYWcgdTMyAGlucHV0IHMzMgBkcmFnIHMzMgBDb2xvckNvbnZlcnRGbG9hdDRUb1UzMgBTMzIAU2FtZSB0aXRsZSBhcyBhbm90aGVyIHdpbmRvdyMjMgBNeUNvbG9yIyMyAEJ1dHRvbiMjMgBDb25maWd1cmF0aW9uIyMyAEl0ZW0jIzIATm9kZSMjMgBURVNUIyMyAEhPUCMjMgBjb2xvciAyAEZvY3VzIG9uIDIAU3RhY2tlZCAyAHJvd19iZ190eXBlID49IDAgJiYgcm93X2JnX3R5cGUgPD0gMgAqKGNvbnN0IEltVTY0KilwX21heCA8PSBJTV9VNjRfTUFYIC8gMgAqKGNvbnN0IEltUzY0KilwX21pbiA+PSBJTV9TNjRfTUlOIC8gMiAmJiAqKGNvbnN0IEltUzY0KilwX21heCA8PSBJTV9TNjRfTUFYIC8gMgAqKGNvbnN0IEltVTMyKilwX21heCA8PSBJTV9VMzJfTUFYIC8gMgAqKGNvbnN0IEltUzMyKilwX21pbiA+PSBJTV9TMzJfTUlOIC8gMiAmJiAqKGNvbnN0IEltUzMyKilwX21heCA8PSBJTV9TMzJfTUFYIC8gMgAjI2dyYWRpZW50MQBzcGxpdDEAc2V0MQBmbG9hdDEAdGFibGUxAHRhYmxlX25lc3RlZDEAWTEAU3BhY2VYMQBWMQBVMQBCMQBBMQBvZmZzZXQgPj0gLTEAY29sdW1uX24gPT0gLTEAcGF5bG9hZC5EYXRhRnJhbWVDb3VudCAhPSAtMQBjb2x1bW5fd2l0aF9zbWFsbGVzdF9zb3J0X29yZGVyICE9IC0xAHRhYmxlLT5DdXJyZW50Q29sdW1uICE9IC0xAHRhYmxlLT5MZWZ0TW9zdFN0cmV0Y2hlZENvbHVtbiAhPSAtMSAmJiB0YWJsZS0+UmlnaHRNb3N0U3RyZXRjaGVkQ29sdW1uICE9IC0xAHJlb3JkZXJfZGlyID09IC0xIHx8IHJlb3JkZXJfZGlyID09ICsxAGRpciA9PSAtMSB8fCBkaXIgPT0gKzEAU2FtZSB0aXRsZSBhcyBhbm90aGVyIHdpbmRvdyMjMQBNeUNvbG9yIyMxAEJ1dHRvbiMjMQBJdGVtIyMxAE5vZGUjIzEASFNWIHNob3duIGFzIEhTViMjMQBURVNUIyMxAEhPUCMjMQBIU1Ygc2hvd24gYXMgUkdCIyMxAEJ1bGxldCBwb2ludCAxAGNvbG9yIDEAY29tYm8gMQBGb2N1cyBvbiAxAEIxIENlbGwgMQBBMSBDZWxsIDEAQjAgQ2VsbCAxAEEwIENlbGwgMQBTdGFja2VkIDEAZy5JdGVtRmxhZ3NTdGFjay5TaXplID4gMQB3aW5kb3ctPklEU3RhY2suU2l6ZSA+IDEAY29sdW1uc19jb3VudCA+PSAxAG5hdl9sYXllciA9PSAwIHx8IG5hdl9sYXllciA9PSAxAGcuTmF2TGF5ZXIgPT0gMCB8fCBnLk5hdkxheWVyID09IDEAaWR4IDw9IDEAcm93X2JnX3RhcmdldCA+PSAwICYmIHJvd19iZ190YXJnZXQgPD0gMQBjZWxsX2JnX3R5cGUgPj0gMCAmJiBjZWxsX2JnX3R5cGUgPD0gMQAwIDwgJS4xMGYgPCAxAGZsb2F0MABZMABTcGFjZVgwAFYwAFUwAEIwAEEwAERlZmF1bHQgZm9yIGNvbHVtbiA+MAA4MHg4MAAxLjgwADUweDUwAHg9MTUwAENsYW1wIGludGVnZXJzIHRvIDAuLjUwADUwMHg1MDAASGVpZ2h0IDQwMC01MDAAV2lkdGggNDAwLTUwMAB4PTMwMAA4MDB4MjAwADIwMHgyMDAAZHJhZyBpbnQgMC4uMTAwAEFsaWduIHRvIHJpZ2h0IGVkZ2UgbWludXMgMTAwAFdpZHRoID4gMTAwLCBIZWlnaHQgPiAxMDAATTowMDAATTowLjAwMAAwLjAwLi4xLjAwAERlZmF1bHQgZm9yIGNvbHVtbiAwAEIxIENlbGwgMABBMSBDZWxsIDAAQjAgQ2VsbCAwAEEwIENlbGwgMABjb2x1bW5faW5kZXggPiAwAGNvbHVtbi0+U29ydERpcmVjdGlvbnNBdmFpbENvdW50ID4gMABnLkN1cnJlbnRXaW5kb3dTdGFjay5TaXplID4gMABnLkJlZ2luUG9wdXBTdGFjay5TaXplID4gMABnLkdyb3VwU3RhY2suU2l6ZSA+IDAAdGFiX2Jhci0+TGFzdFRhYkl0ZW1JZHggPj0gMAB0YWJsZS0+UmlnaHRNb3N0RW5hYmxlZENvbHVtbiA+PSAwAGFwcGx5X25ld190ZXh0X2xlbmd0aCA+PSAwAGJ1ZiAhPSAwTCAmJiBidWZfc2l6ZSA+PSAwAHdpbmRvdy0+QmVnaW5Db3VudCA9PSAwAHdpbmRvdy0+RHJhd0xpc3QtPkNtZEJ1ZmZlci5TaXplID09IDEgJiYgd2luZG93LT5EcmF3TGlzdC0+Q21kQnVmZmVyWzBdLkVsZW1Db3VudCA9PSAwAHNwbGl0dGVyLT5fQ3VycmVudCA9PSAwAGNvbHVtbnMtPkN1cnJlbnQgPT0gMABpZCA9PSAwAHRhYl9iYXItPlJlb3JkZXJSZXF1ZXN0VGFiSWQgPT0gMAAoZmxhZ3MgJiBJbUd1aUhvdmVyZWRGbGFnc19BbGxvd1doZW5PdmVybGFwcGVkKSA9PSAwACh0YWJsZS0+RmxhZ3MgJiBJbUd1aVRhYmxlRmxhZ3NfU2Nyb2xsWCkgPT0gMAAoZmxhZ3MgJiAoSW1HdWlIb3ZlcmVkRmxhZ3NfUm9vdFdpbmRvdyB8IEltR3VpSG92ZXJlZEZsYWdzX0NoaWxkV2luZG93cykpID09IDAAbW92ZV9mbGFncyAhPSAwAHNvdXJjZV9pZCAhPSAwAHBheWxvYWQuU291cmNlSWQgIT0gMABjaGlsZF93aW5kb3ctPkNoaWxkSWQgIT0gMAAoZmxhZ3MgJiBJbUd1aVdpbmRvd0ZsYWdzX05vVGl0bGVCYXIpICE9IDAAKHBvcHVwLldpbmRvdy0+RmxhZ3MgJiBJbUd1aVdpbmRvd0ZsYWdzX1BvcHVwKSAhPSAwAFJlYWQgdGhlIEZBUSBhdCBodHRwOi8vd3d3LmRlYXJpbWd1aS5vcmcvZmFxLwBJbnN0cnVjdCBiYWNrZW5kIHRvIG5vdCBhbHRlciBtb3VzZSBjdXJzb3Igc2hhcGUgYW5kIHZpc2liaWxpdHkuAFNlY3Rpb25zIGJlbG93IGFyZSBkZW1vbnN0cmF0aW5nIG1hbnkgYXNwZWN0cyBvZiB0aGUgbGlicmFyeS4AVXNpbmcgVGFibGVOZXh0Um93KCkgKyBjYWxsaW5nIFRhYmxlTmV4dENvbHVtbigpIF9iZWZvcmVfIGVhY2ggY2VsbCwgbWFudWFsbHkuAFdoZW4gZHJhd2luZyBjaXJjbGUgcHJpbWl0aXZlcyB3aXRoICJudW1fc2VnbWVudHMgPT0gMCIgdGVzc2VsYXRpb24gd2lsbCBiZSBjYWxjdWxhdGVkIGF1dG9tYXRpY2FsbHkuAFdlIGRvbid0IHVzZSB0aGUgZHJhZyBhbmQgZHJvcCBhcGkgYXQgYWxsIGhlcmUhIEluc3RlYWQgd2UgcXVlcnkgd2hlbiB0aGUgaXRlbSBpcyBoZWxkIGJ1dCBub3QgaG92ZXJlZCwgYW5kIG9yZGVyIGl0ZW1zIGFjY29yZGluZ2x5LgBCeSBkZWZhdWx0LCByaWdodC1jbGlja2luZyBvdmVyIGEgVGFibGVIZWFkZXJzUm93KCkvVGFibGVIZWFkZXIoKSBsaW5lIHdpbGwgb3BlbiB0aGUgZGVmYXVsdCBjb250ZXh0LW1lbnUuClVzaW5nIEltR3VpVGFibGVGbGFnc19Db250ZXh0TWVudUluQm9keSB3ZSBhbHNvIGFsbG93IHJpZ2h0LWNsaWNraW5nIG92ZXIgY29sdW1ucyBib2R5LgBZb3UgY2FuIHBhc3MgYSAnbWluX3Jvd19oZWlnaHQnIHRvIFRhYmxlTmV4dFJvdygpLgoKUm93cyBhcmUgcGFkZGVkIHdpdGggJ3N0eWxlLkNlbGxQYWRkaW5nLnknIG9uIHRvcCBhbmQgYm90dG9tLCBzbyBlZmZlY3RpdmVseSB0aGUgbWluaW11bSByb3cgaGVpZ2h0IHdpbGwgYWx3YXlzIGJlID49ICdzdHlsZS5DZWxsUGFkZGluZy55ICogMi4wZicuCgpXZSBjYW5ub3QgaG9ub3IgYSBfbWF4aW11bV8gcm93IGhlaWdodCBhcyB0aGF0IHdvdWxkIHJlcXVpcmVzIGEgdW5pcXVlIGNsaXBwaW5nIHJlY3RhbmdsZSBwZXIgcm93LgBVc2UgY2hpbGQgd2luZG93cyB0byBiZWdpbiBpbnRvIGEgc2VsZi1jb250YWluZWQgaW5kZXBlbmRlbnQgc2Nyb2xsaW5nL2NsaXBwaW5nIHJlZ2lvbnMgd2l0aGluIGEgaG9zdCB3aW5kb3cuAERvdWJsZS1jbGljayBvbiB0aXRsZSBiYXIgdG8gY29sbGFwc2Ugd2luZG93LgBFc2NhcGUgdG8gZGVhY3RpdmF0ZSBhIHdpZGdldCwgY2xvc2UgcG9wdXAsIGV4aXQgY2hpbGQgd2luZG93LgBDVFJMK1RhYiB0byBzZWxlY3QgYSB3aW5kb3cuAEFsdCB0byBqdW1wIHRvIHRoZSBtZW51IGxheWVyIG9mIGEgd2luZG93LgBNb3VzZSBMZWZ0OiBkcmFnIHRvIGFkZCBsaW5lcywKTW91c2UgUmlnaHQ6IGRyYWcgdG8gc2Nyb2xsLCBjbGljayBmb3IgY29udGV4dCBtZW51LgBDbGljayBhbmQgZHJhZyBjb2x1bW4gaGVhZGVycyB0byByZW9yZGVyIGNvbHVtbnMuCgpSaWdodC1jbGljayBvbiBhIGhlYWRlciB0byBvcGVuIGEgY29udGV4dCBtZW51LgBJbiB0aGUgY29sb3IgbGlzdDoKTGVmdC1jbGljayBvbiBjb2xvciBzcXVhcmUgdG8gb3BlbiBjb2xvciBwaWNrZXIsClJpZ2h0LWNsaWNrIHRvIG9wZW4gZWRpdCBvcHRpb25zIG1lbnUuAENUUkwrQ2xpY2sgb24gYSBzbGlkZXIgb3IgZHJhZyBib3ggdG8gaW5wdXQgdmFsdWUgYXMgdGV4dC4AUHJpbnRpbmcgdW51c3VhbGx5IGxvbmcgYW1vdW50IG9mIHRleHQuAFlvdSBjYW4gYWxzbyBjYWxsIEltR3VpOjpMb2dUZXh0KCkgdG8gb3V0cHV0IGRpcmVjdGx5IHRvIHRoZSBsb2cgd2l0aG91dCBhIHZpc3VhbCBvdXRwdXQuAFVzaW5nIFRhYmxlU2V0dXBDb2x1bW4oKSB0byBzZXR1cCBleHBsaWNpdCB3aWR0aC4KClVubGVzcyBfTm9LZWVwQ29sdW1uc1Zpc2libGUgaXMgc2V0LCBmaXhlZCBjb2x1bW5zIHdpdGggc2V0IHdpZHRoIG1heSBzdGlsbCBiZSBzaHJ1bmsgZG93biBpZiB0aGVyZSdzIG5vdCBlbm91Z2ggc3BhY2UgaW4gdGhlIGhvc3QuAEVTQ0FQRSB0byByZXZlcnQuAEFsaWdubWVudCBhcHBsaWVzIHdoZW4gYSBidXR0b24gaXMgbGFyZ2VyIHRoYW4gaXRzIHRleHQgY29udGVudC4AQWxpZ25tZW50IGFwcGxpZXMgd2hlbiBhIHNlbGVjdGFibGUgaXMgbGFyZ2VyIHRoYW4gaXRzIHRleHQgY29udGVudC4AV2hlbiBhIHBvcHVwIGlzIGFjdGl2ZSwgaXQgaW5oaWJpdHMgaW50ZXJhY3Rpbmcgd2l0aCB3aW5kb3dzIHRoYXQgYXJlIGJlaGluZCB0aGUgcG9wdXAuIENsaWNraW5nIG91dHNpZGUgdGhlIHBvcHVwIGNsb3NlcyBpdC4AWW91ciBhcHBsaWNhdGlvbiBjYW4gcmVuZGVyIGEgZGlmZmVyZW50IG1vdXNlIGN1cnNvciBiYXNlZCBvbiB3aGF0IEltR3VpOjpHZXRNb3VzZUN1cnNvcigpIHJldHVybnMuIElmIHNvZnR3YXJlIGN1cnNvciByZW5kZXJpbmcgKGlvLk1vdXNlRHJhd0N1cnNvcikgaXMgc2V0IEltR3VpIHdpbGwgZHJhdyB0aGUgcmlnaHQgY3Vyc29yIGZvciB5b3UsIG90aGVyd2lzZSB5b3VyIGJhY2tlbmQgbmVlZHMgdG8gaGFuZGxlIGl0LgBIZWxsbyBmcm9tIFN0YWNrZWQgVGhlIEZpcnN0ClVzaW5nIHN0eWxlLkNvbG9yc1tJbUd1aUNvbF9Nb2RhbFdpbmRvd0RpbUJnXSBiZWhpbmQgaXQuAFlvdSBjYW4gdXNlIEltR3VpOjpHZXRNb3VzZURyYWdEZWx0YSgwKSB0byBxdWVyeSBmb3IgdGhlIGRyYWdnZWQgYW1vdW50IG9uIGFueSB3aWRnZXQuAERpc2FibGUgQ1RSTCtDbGljayBvciBFbnRlciBrZXkgYWxsb3dpbmcgdG8gaW5wdXQgdGV4dCBkaXJlY3RseSBpbnRvIHRoZSB3aWRnZXQuAFJldHVybiB0byBpbnB1dCB0ZXh0IGludG8gYSB3aWRnZXQuAFNwYWNlIHRvIGFjdGl2YXRlIGEgd2lkZ2V0LgBZb3UgY2FuIGFwcGx5IGFyaXRobWV0aWMgb3BlcmF0b3JzICssKiwvIG9uIG51bWVyaWNhbCB2YWx1ZXMuCiAgZS5nLiBbIDEwMCBdLCBpbnB1dCAnKjInLCByZXN1bHQgYmVjb21lcyBbIDIwMCBdClVzZSArLSB0byBzdWJ0cmFjdC4AWW91IGNhbiBhcHBseSBhcml0aG1ldGljIG9wZXJhdG9ycyArLCosLyBvbiBudW1lcmljYWwgdmFsdWVzLgpVc2UgKy0gdG8gc3VidHJhY3QuAFVzZSBTZXRTY3JvbGxIZXJlWCgpIG9yIFNldFNjcm9sbEZyb21Qb3NYKCkgdG8gc2Nyb2xsIHRvIGEgZ2l2ZW4gaG9yaXpvbnRhbCBwb3NpdGlvbi4KCkJlY2F1c2UgdGhlIGNsaXBwaW5nIHJlY3RhbmdsZSBvZiBtb3N0IHdpbmRvdyBoaWRlcyBoYWxmIHdvcnRoIG9mIFdpbmRvd1BhZGRpbmcgb24gdGhlIGxlZnQvcmlnaHQsIHVzaW5nIFNldFNjcm9sbEZyb21Qb3NYKCsxKSB3aWxsIHVzdWFsbHkgcmVzdWx0IGluIGNsaXBwZWQgdGV4dCB3aGVyZWFzIHRoZSBlcXVpdmFsZW50IFNldFNjcm9sbEZyb21Qb3NZKCsxKSB3b3VsZG4ndC4AVGhlIEJhY2tncm91bmQgZHJhdyBsaXN0IHdpbGwgYmUgcmVuZGVyZWQgYmVsb3cgZXZlcnkgRGVhciBJbUd1aSB3aW5kb3dzLgBUaGUgRm9yZWdyb3VuZCBkcmF3IGxpc3Qgd2lsbCBiZSByZW5kZXJlZCBvdmVyIGV2ZXJ5IERlYXIgSW1HdWkgd2luZG93cy4AQ1RSTCtNb3VzZSBXaGVlbCB0byB6b29tIHdpbmRvdyBjb250ZW50cy4AVXNpbmcgX1Jlc2l6YWJsZSArIF9TaXppbmdGaXhlZEZpdCBmbGFncy4KRml4ZWQtd2lkdGggY29sdW1ucyBnZW5lcmFsbHkgbWFrZXMgbW9yZSBzZW5zZSBpZiB5b3Ugd2FudCB0byB1c2UgaG9yaXpvbnRhbCBzY3JvbGxpbmcuCgpEb3VibGUtY2xpY2sgYSBjb2x1bW4gYm9yZGVyIHRvIGF1dG8tZml0IHRoZSBjb2x1bW4gdG8gaXRzIGNvbnRlbnRzLgBUaGUgIkV4YW1wbGVzIiBtZW51IGFib3ZlIGxlYWRzIHRvIG1vcmUgZGVtbyBjb250ZW50cy4AVGhvc2UgYXJlIG9sZCBzZXR0aW5ncyBwcm92aWRlZCBmb3IgY29udmVuaWVuY2UuCkhvd2V2ZXIsIHRoZSBfY29ycmVjdF8gd2F5IG9mIHNjYWxpbmcgeW91ciBVSSBpcyBjdXJyZW50bHkgdG8gcmVsb2FkIHlvdXIgZm9udCBhdCB0aGUgZGVzaWduZWQgc2l6ZSwgcmVidWlsZCB0aGUgZm9udCBhdGxhcywgYW5kIGNhbGwgc3R5bGUuU2NhbGVBbGxTaXplcygpIG9uIGEgcmVmZXJlbmNlIEltR3VpU3R5bGUgc3RydWN0dXJlLgpVc2luZyB0aG9zZSBzZXR0aW5ncyBoZXJlIHdpbGwgZ2l2ZSB5b3UgcG9vciBxdWFsaXR5IHJlc3VsdHMuAEhlcmUgd2UgdG9nZ2xlIHRoZSBjYXNpbmcgb2YgdGhlIGZpcnN0IGNoYXJhY3RlciBvbiBldmVyeSBlZGl0cyArIGNvdW50IGVkaXRzLgBDb2x1bW5zIGRlZmF1bHQgdG8gX1dpZHRoU3RyZXRjaCB3aXRoIHNhbWUgd2VpZ2h0cy4AQ3VycmVudGx5IGFsbCB0aGlzIGRvZXMgaXMgdG8gbGlmdCB0aGUgMC4uMSBsaW1pdHMgb24gZHJhZ2dpbmcgd2lkZ2V0cy4AVGhpcyBpcyB0ZXN0aW5nIHRoZSB2ZXJ0aWNhbCBhbGlnbm1lbnQgdGhhdCBnZXRzIGFwcGxpZWQgb24gdGV4dCB0byBrZWVwIGl0IGFsaWduZWQgd2l0aCB3aWRnZXRzLiBMaW5lcyBvbmx5IGNvbXBvc2VkIG9mIHRleHQgb3IgInNtYWxsIiB3aWRnZXRzIHVzZSBsZXNzIHZlcnRpY2FsIHNwYWNlIHRoYW4gbGluZXMgd2l0aCBmcmFtZWQgd2lkZ2V0cy4AQnkgT21hciBDb3JudXQgYW5kIGFsbCBEZWFyIEltR3VpIGNvbnRyaWJ1dG9ycy4ASW5zdHJ1Y3QgbmF2aWdhdGlvbiB0byBtb3ZlIHRoZSBtb3VzZSBjdXJzb3IuIFNlZSBjb21tZW50IGZvciBJbUd1aUNvbmZpZ0ZsYWdzX05hdkVuYWJsZVNldE1vdXNlUG9zLgBSaWdodC1jbGljayBvbiB0aGUgaW5kaXZpZHVhbCBjb2xvciB3aWRnZXQgdG8gc2hvdyBvcHRpb25zLgBBbHNvIHNlZSBTdHlsZS0+UmVuZGVyaW5nIGZvciByZW5kZXJpbmcgb3B0aW9ucy4ARGlzYWJsZSBjbGlwcGluZyByZWN0YW5nbGUgZm9yIGV2ZXJ5IGluZGl2aWR1YWwgY29sdW1ucyAocmVkdWNlIGRyYXcgY29tbWFuZCBjb3VudCwgaXRlbXMgd2lsbCBiZSBhYmxlIHRvIG92ZXJmbG93IGludG8gb3RoZXIgY29sdW1ucykuIEdlbmVyYWxseSBpbmNvbXBhdGlibGUgd2l0aCBTY3JvbGxGcmVlemUgb3B0aW9ucy4AVGhpcyBzZWN0aW9uIGFsbG93cyB5b3UgdG8gaW50ZXJhY3QgYW5kIHNlZSB0aGUgZWZmZWN0IG9mIHZhcmlvdXMgc2l6aW5nIHBvbGljaWVzIGRlcGVuZGluZyBvbiB3aGV0aGVyIFNjcm9sbCBpcyBlbmFibGVkIGFuZCB0aGUgY29udGVudHMgb2YgeW91ciBjb2x1bW5zLgBIZXJlIHdlIGFjdGl2YXRlIFNjcm9sbFksIHdoaWNoIHdpbGwgY3JlYXRlIGEgY2hpbGQgd2luZG93IGNvbnRhaW5lciB0byBhbGxvdyBob3N0aW5nIHNjcm9sbGFibGUgY29udGVudHMuCgpXZSBhbHNvIGRlbW9uc3RyYXRlIHVzaW5nIEltR3VpTGlzdENsaXBwZXIgdG8gdmlydHVhbGl6ZSB0aGUgc3VibWlzc2lvbiBvZiBtYW55IGl0ZW1zLgBIb2xkIENUUkwgYW5kIGNsaWNrIHRvIHNlbGVjdCBtdWx0aXBsZSBpdGVtcy4AU2V0ICdpby5Db25maWdGbGFncyB8PSBOYXZFbmFibGVLZXlib2FyZCcgZm9yIGtleWJvYXJkIGNvbnRyb2xzLgBFbmFibGUga2V5Ym9hcmQgY29udHJvbHMuAFNldCAnaW8uQ29uZmlnRmxhZ3MgfD0gTmF2RW5hYmxlR2FtZXBhZCcgZm9yIGdhbWVwYWQgY29udHJvbHMuAEVuYWJsZSBnYW1lcGFkIGNvbnRyb2xzLiBSZXF1aXJlIGJhY2tlbmQgdG8gc2V0IGlvLkJhY2tlbmRGbGFncyB8PSBJbUd1aUJhY2tlbmRGbGFnc19IYXNHYW1lcGFkLgoKUmVhZCBpbnN0cnVjdGlvbnMgaW4gaW1ndWkuY3BwIGZvciBkZXRhaWxzLgBDSksgdGV4dCB3aWxsIG9ubHkgYXBwZWFycyBpZiB0aGUgZm9udCB3YXMgbG9hZGVkIHdpdGggdGhlIGFwcHJvcHJpYXRlIENKSyBjaGFyYWN0ZXIgcmFuZ2VzLiBDYWxsIGlvLkZvbnQtPkFkZEZvbnRGcm9tRmlsZVRURigpIG1hbnVhbGx5IHRvIGxvYWQgZXh0cmEgY2hhcmFjdGVyIHJhbmdlcy4gUmVhZCBkb2NzL0ZPTlRTLm1kIGZvciBkZXRhaWxzLgBVc2luZyB0aGUgX1Jlc2l6YWJsZSBmbGFnIGF1dG9tYXRpY2FsbHkgZW5hYmxlcyB0aGUgX0JvcmRlcnNJbm5lclYgZmxhZyBhcyB3ZWxsLCB0aGlzIGlzIHdoeSB0aGUgcmVzaXplIGJvcmRlcnMgYXJlIHN0aWxsIHNob3dpbmcgd2hlbiB1bmNoZWNraW5nIHRoaXMuAENvbHVtbnMgZGVmYXVsdCB0byBfV2lkdGhTdHJldGNoIHdpdGggd2VpZ2h0cyBwcm9wb3J0aW9uYWwgdG8gdGhlaXIgd2lkdGhzLgBZb3UgY2FuIGRyYWcgZnJvbSB0aGUgY29sb3Igc3F1YXJlcy4AUHJlc3NlZCAlZCB0aW1lcy4AVGVzdCBvZiBkaWZmZXJlbnQgd2lkZ2V0cyByZWFjdCBhbmQgaW1wYWN0IHRoZSB3b3JrIHJlY3RhbmdsZSBncm93aW5nIHdoZW4gaG9yaXpvbnRhbCBzY3JvbGxpbmcgaXMgZW5hYmxlZC4KClVzZSAnTWV0cmljcy0+VG9vbHMtPlNob3cgd2luZG93cyByZWN0YW5nbGVzJyB0byB2aXN1YWxpemUgcmVjdGFuZ2xlcy4AVGhpcyB0ZXh0IHNob3VsZCBhdXRvbWF0aWNhbGx5IHdyYXAgb24gdGhlIGVkZ2Ugb2YgdGhlIHdpbmRvdy4gVGhlIGN1cnJlbnQgaW1wbGVtZW50YXRpb24gZm9yIHRleHQgd3JhcHBpbmcgZm9sbG93cyBzaW1wbGUgcnVsZXMgc3VpdGFibGUgZm9yIEVuZ2xpc2ggYW5kIHBvc3NpYmx5IG90aGVyIGxhbmd1YWdlcy4AVXNlIFRBQi9TSElGVCtUQUIgdG8gY3ljbGUgdGhyb3VnaCBrZXlib2FyZCBlZGl0YWJsZSBmaWVsZHMuAFVzaW5nIHRoZSBmb3JtYXQgc3RyaW5nIHBhcmFtZXRlciB0byBkaXNwbGF5IGEgbmFtZSBpbnN0ZWFkIG9mIHRoZSB1bmRlcmx5aW5nIGludGVnZXIuAFNlZSBleGFtcGxlIGFwcGxpY2F0aW9ucyBpbiB0aGUgZXhhbXBsZXMvIGZvbGRlci4AV2l0aCB0aGUgSW1HdWlDb2xvckVkaXRGbGFnc19Ob0lucHV0cyBmbGFnIHlvdSBjYW4gaGlkZSBhbGwgdGhlIHNsaWRlci90ZXh0IGlucHV0cy4KV2l0aCB0aGUgSW1HdWlDb2xvckVkaXRGbGFnc19Ob0xhYmVsIGZsYWcgeW91IGNhbiBwYXNzIGEgbm9uLWVtcHR5IGxhYmVsIHdoaWNoIHdpbGwgb25seSBiZSB1c2VkIGZvciB0aGUgdG9vbHRpcCBhbmQgcGlja2VyIHBvcHVwLgBCZWdpbkdyb3VwKCkgYmFzaWNhbGx5IGxvY2tzIHRoZSBob3Jpem9udGFsIHBvc2l0aW9uIGZvciBuZXcgbGluZS4gRW5kR3JvdXAoKSBidW5kbGVzIHRoZSB3aG9sZSBncm91cCBzbyB0aGF0IHlvdSBjYW4gdXNlICJpdGVtIiBmdW5jdGlvbnMgc3VjaCBhcyBJc0l0ZW1Ib3ZlcmVkKCkvSXNJdGVtQWN0aXZlKCkgb3IgU2FtZUxpbmUoKSBldGMuIG9uIHRoZSB3aG9sZSBncm91cC4AU2VlIGNvbW1lbnRzIGluIGltZ3VpLmNwcC4AV2luZG93IHdpbGwgcmVzaXplIGV2ZXJ5LWZyYW1lIHRvIHRoZSBzaXplIG9mIGl0cyBjb250ZW50LgpOb3RlIHRoYXQgeW91IHByb2JhYmx5IGRvbid0IHdhbnQgdG8gcXVlcnkgdGhlIHdpbmRvdyBzaXplIHRvCm91dHB1dCB5b3VyIGNvbnRlbnQgYmVjYXVzZSB0aGF0IHdvdWxkIGNyZWF0ZSBhIGZlZWRiYWNrIGxvb3AuAFVzaW5nIFRhYmxlTmV4dFJvdygpICsgY2FsbGluZyBUYWJsZVNldENvbHVtbkluZGV4KCkgX2JlZm9yZV8gZWFjaCBjZWxsLCBpbiBhIGxvb3AuAENUUkwrTGVmdC9SaWdodCB0byB3b3JkIGp1bXAuAEVudGVyICdIRUxQJyBmb3IgaGVscC4AQnkgZGVmYXVsdCwgY29sb3JzIGFyZSBnaXZlbiB0byBDb2xvckVkaXQgYW5kIENvbG9yUGlja2VyIGluIFJHQiwgYnV0IEltR3VpQ29sb3JFZGl0RmxhZ3NfSW5wdXRIU1ZhbGxvd3MgeW91IHRvIHN0b3JlIGNvbG9ycyBhcyBIU1YgYW5kIHBhc3MgdGhlbSB0byBDb2xvckVkaXQgYW5kIENvbG9yUGlja2VyIGFzIEhTVi4gVGhpcyBjb21lcyB3aXRoIHRoZWFkZGVkIGJlbmVmaXQgdGhhdCB5b3UgY2FuIG1hbmlwdWxhdGUgaHVlIHZhbHVlcyB3aXRoIHRoZSBwaWNrZXIgZXZlbiB3aGVuIHNhdHVyYXRpb24gb3IgdmFsdWUgYXJlIHplcm8uAENUUkwrWixDVFJMK1kgdG8gdW5kby9yZWRvLgBUaGUgbG9nZ2luZyBBUEkgcmVkaXJlY3RzIGFsbCB0ZXh0IG91dHB1dCBzbyB5b3UgY2FuIGVhc2lseSBjYXB0dXJlIHRoZSBjb250ZW50IG9mIGEgd2luZG93IG9yIGEgYmxvY2suIFRyZWUgbm9kZXMgY2FuIGJlIGF1dG9tYXRpY2FsbHkgZXhwYW5kZWQuClRyeSBvcGVuaW5nIGFueSBvZiB0aGUgY29udGVudHMgYmVsb3cgaW4gdGhpcyB3aW5kb3cgYW5kIHRoZW4gY2xpY2sgb25lIG9mIHRoZSAiTG9nIFRvIiBidXR0b24uAFVzZSBTZXRTY3JvbGxIZXJlWSgpIG9yIFNldFNjcm9sbEZyb21Qb3NZKCkgdG8gc2Nyb2xsIHRvIGEgZ2l2ZW4gdmVydGljYWwgcG9zaXRpb24uAE9ubHkgdXNpbmcgVGFibGVOZXh0Q29sdW1uKCksIHdoaWNoIHRlbmRzIHRvIGJlIGNvbnZlbmllbnQgZm9yIHRhYmxlcyB3aGVyZSBldmVyeSBjZWxscyBjb250YWlucyB0aGUgc2FtZSB0eXBlIG9mIGNvbnRlbnRzLgpUaGlzIGlzIGFsc28gbW9yZSBzaW1pbGFyIHRvIHRoZSBvbGQgTmV4dENvbHVtbigpIGZ1bmN0aW9uIG9mIHRoZSBDb2x1bW5zIEFQSSwgYW5kIHByb3ZpZGVkIHRvIGZhY2lsaXRhdGUgdGhlIENvbHVtbnMtPlRhYmxlcyBBUEkgdHJhbnNpdGlvbi4AVGhlIHNhbWUgY29udGVudHMgY2FuIGJlIGFjY2Vzc2VkIGluICdUb29scy0+U3R5bGUgRWRpdG9yJyBvciBieSBjYWxsaW5nIHRoZSBTaG93U3R5bGVFZGl0b3IoKSBmdW5jdGlvbi4ARGVhciBJbUd1aSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UsIHNlZSBMSUNFTlNFIGZvciBtb3JlIGluZm9ybWF0aW9uLgBUaGlzIGlzIGEgY3VzdG9tIHBvcHVwIGZvciB1bnVzZWQgc3BhY2UgYWZ0ZXIgdGhlIGxhc3QgY29sdW1uLgBUaGlzIGlzIGEgbW9yZSB0eXBpY2FsIGxvb2tpbmcgdHJlZSB3aXRoIHNlbGVjdGFibGUgbm9kZXMuCkNsaWNrIHRvIHNlbGVjdCwgQ1RSTCtDbGljayB0byB0b2dnbGUsIGNsaWNrIG9uIGFycm93cyBvciBkb3VibGUtY2xpY2sgdG8gb3Blbi4AU3BlY2lmeSBoZWlnaHQgb2YgdGhlIFNlbGVjdGFibGUgaXRlbS4AVGFyZ2V0IFJvd0JnMCB0byBvdmVycmlkZSB0aGUgYWx0ZXJuYXRpbmcgb2RkL2V2ZW4gY29sb3JzLApUYXJnZXQgUm93QmcxIHRvIGJsZW5kIHdpdGggdGhlbS4AV2hlbiBkaXNhYmxpbmcgYW50aS1hbGlhc2luZyBsaW5lcywgeW91J2xsIHByb2JhYmx5IHdhbnQgdG8gZGlzYWJsZSBib3JkZXJzIGluIHlvdXIgc3R5bGUgYXMgd2VsbC4AVGhpcyBkZW1vbnN0cmF0ZSBlbWJlZGRpbmcgYSB0YWJsZSBpbnRvIGFub3RoZXIgdGFibGUgY2VsbC4AQ1RSTCtBIG9yIGRvdWJsZS1jbGljayB0byBzZWxlY3QgYWxsLgBJbiB0aGUgQWR2YW5jZWQgZGVtbyB3ZSBvdmVycmlkZSB0aGUgcG9saWN5IG9mIGVhY2ggY29sdW1uIHNvIHRob3NlIHRhYmxlLXdpZGUgc2V0dGluZ3MgaGF2ZSBsZXNzIGVmZmVjdCB0aGF0IHR5cGljYWwuAGNhbiBmaXQgd2l0aGluIGEgdGV4dCBibG9jay4AQWx3YXlzIGNsYW1wIHZhbHVlIHRvIG1pbi9tYXggYm91bmRzIChpZiBhbnkpIHdoZW4gaW5wdXQgbWFudWFsbHkgd2l0aCBDVFJMK0NsaWNrLgBIZXJlIHdlIGFwcGVuZCAiLi4iIGVhY2ggdGltZSBUYWIgaXMgcHJlc3NlZC4gU2VlICdFeGFtcGxlcz5Db25zb2xlJyBmb3IgYSBtb3JlIG1lYW5pbmdmdWwgZGVtb25zdHJhdGlvbiBvZiB1c2luZyB0aGlzIGNhbGxiYWNrLgBIZXJlIHdlIHJlcGxhY2UgYW5kIHNlbGVjdCB0ZXh0IGVhY2ggdGltZSBVcC9Eb3duIGFyZSBwcmVzc2VkLiBTZWUgJ0V4YW1wbGVzPkNvbnNvbGUnIGZvciBhIG1vcmUgbWVhbmluZ2Z1bCBkZW1vbnN0cmF0aW9uIG9mIHVzaW5nIHRoaXMgY2FsbGJhY2suAEVuYWJsZSByZXNpemluZyBvZiB3aW5kb3dzIGZyb20gdGhlaXIgZWRnZXMgYW5kIGZyb20gdGhlIGxvd2VyLWxlZnQgY29ybmVyLgpUaGlzIHJlcXVpcmVzIChpby5CYWNrZW5kRmxhZ3MgJiBJbUd1aUJhY2tlbmRGbGFnc19IYXNNb3VzZUN1cnNvcnMpIGJlY2F1c2UgaXQgbmVlZHMgbW91c2UgY3Vyc29yIGZlZWRiYWNrLgBEaXNhYmxlIGRpc3RyaWJ1dGluZyByZW1haW5kZXIgd2lkdGggdG8gc3RyZXRjaGVkIGNvbHVtbnMgKHdpZHRoIGFsbG9jYXRpb24gb24gYSAxMDAtd2lkZSB0YWJsZSB3aXRoIDMgY29sdW1uczogV2l0aG91dCB0aGlzIGZsYWc6IDMzLDMzLDM0LiBXaXRoIHRoaXMgZmxhZzogMzMsMzMsMzMpLiBXaXRoIGxhcmdlciBudW1iZXIgb2YgY29sdW1ucywgcmVzaXppbmcgd2lsbCBhcHBlYXIgdG8gYmUgbGVzcyBzbW9vdGguAERpc2FibGUgdGhlIGluZGVudGluZyBvZiB0cmVlIG5vZGVzIHNvIGRlbW8gdGFibGVzIGNhbiB1c2UgdGhlIGZ1bGwgd2luZG93IHdpZHRoLgBVc2luZyBUYWJsZVNldHVwQ29sdW1uKCkgdG8gc2V0dXAgZGVmYXVsdCB3aWR0aC4AQmUgbWluZGZ1bCB0aGF0IHVzaW5nIHJpZ2h0LWFsaWdubWVudCAoZS5nLiBzaXplLnggPSAtRkxUX01JTikgY3JlYXRlcyBhIGZlZWRiYWNrIGxvb3Agd2hlcmUgY29udGVudHMgd2lkdGggY2FuIGZlZWQgaW50byBhdXRvLWNvbHVtbiB3aWR0aCBjYW4gZmVlZCBpbnRvIGNvbnRlbnRzIHdpZHRoLgBDb2x1bW5zIGRlZmF1bHQgdG8gX1dpZHRoRml4ZWQgKGlmIHJlc2l6YWJsZSkgb3IgX1dpZHRoQXV0byAoaWYgbm90IHJlc2l6YWJsZSksIG1hdGNoaW5nIGNvbnRlbnRzIHdpZHRoLgBGaXhlZCB3aWR0aC4AV2lsbCBjYWxsIHRoZSBJTV9ERUJVR19CUkVBSygpIG1hY3JvIHRvIGJyZWFrIGluIGRlYnVnZ2VyLgpXYXJuaW5nOiBJZiB5b3UgZG9uJ3QgaGF2ZSBhIGRlYnVnZ2VyIGF0dGFjaGVkLCB0aGlzIHdpbGwgcHJvYmFibHkgY3Jhc2guAFVzaW5nIFRhYmxlU2V0dXBDb2x1bW4oKSB0byBhbHRlciByZXNpemluZyBwb2xpY3kgb24gYSBwZXItY29sdW1uIGJhc2lzLgoKV2hlbiBjb21iaW5pbmcgRml4ZWQgYW5kIFN0cmV0Y2ggY29sdW1ucywgZ2VuZXJhbGx5IHlvdSBvbmx5IHdhbnQgb25lLCBtYXliZSB0d28gdHJhaWxpbmcgY29sdW1ucyB0byB1c2UgX1dpZHRoU3RyZXRjaC4AVGhlIGxhenkgZG9nIGlzIGEgZ29vZCBkb2cuIFRoaXMgcGFyYWdyYXBoIHNob3VsZCBmaXQgd2l0aGluICUuMGYgcGl4ZWxzLiBUZXN0aW5nIGEgMSBjaGFyYWN0ZXIgd29yZC4gVGhlIHF1aWNrIGJyb3duIGZveCBqdW1wcyBvdmVyIHRoZSBsYXp5IGRvZy4AVXNpbmcgSW1HdWlJbnB1dFRleHRGbGFnc19DYWxsYmFja1Jlc2l6ZSB0byB3aXJlIHlvdXIgY3VzdG9tIHN0cmluZyB0eXBlIHRvIElucHV0VGV4dCgpLgoKU2VlIG1pc2MvY3BwL2ltZ3VpX3N0ZGxpYi5oIGZvciBhbiBpbXBsZW1lbnRhdGlvbiBvZiB0aGlzIGZvciBzdGQ6OnN0cmluZy4AUHJlc3MgRVNDIHRvIGFib3J0IHBpY2tpbmcuAFdlIG9mdGVuIHdhbnQgb3V0ZXIgcGFkZGluZyBhY3RpdmF0ZWQgd2hlbiBhbnkgdXNpbmcgZmVhdHVyZXMgd2hpY2ggbWFrZXMgdGhlIGVkZ2VzIG9mIGEgY29sdW1uIHZpc2libGU6CmUuZy46Ci0gQm9yZGVyT3V0ZXJWCi0gYW55IGZvcm0gb2Ygcm93IHNlbGVjdGlvbgpCZWNhdXNlIG9mIHRoaXMsIGFjdGl2YXRpbmcgQm9yZGVyT3V0ZXJWIHNldHMgdGhlIGRlZmF1bHQgdG8gUGFkT3V0ZXJYLiBVc2luZyBQYWRPdXRlclggb3IgTm9QYWRPdXRlclggeW91IGNhbiBvdmVycmlkZSB0aGUgZGVmYXVsdC4KCkFjdHVhbCBwYWRkaW5nIHZhbHVlcyBhcmUgdXNpbmcgc3R5bGUuQ2VsbFBhZGRpbmcuCgpJbiB0aGlzIGRlbW8gd2UgZG9uJ3Qgc2hvdyBob3Jpem9udGFsIGJvcmRlcnMgdG8gZW1waGFzaXMgaG93IHRoZXkgZG9uJ3QgYWZmZWN0IGRlZmF1bHQgaG9yaXpvbnRhbCBwYWRkaW5nLgBSZWFkIEZBUSBhbmQgZG9jcy9GT05UUy5tZCBmb3IgZGV0YWlscyBvbiBmb250IGxvYWRpbmcuAFRoaXMgaXMgYW5vdGhlciBjaGlsZCB3aW5kb3cgZm9yIHRlc3RpbmcgdGhlIF9DaGlsZFdpbmRvd3MgZmxhZy4AVGhpcyBpcyB3aW5kb3cgMS4KTXkgdGl0bGUgaXMgdGhlIHNhbWUgYXMgd2luZG93IDIsIGJ1dCBteSBpZGVudGlmaWVyIGlzIHVuaXF1ZS4AVGhpcyBpcyB3aW5kb3cgMi4KTXkgdGl0bGUgaXMgdGhlIHNhbWUgYXMgd2luZG93IDEsIGJ1dCBteSBpZGVudGlmaWVyIGlzIHVuaXF1ZS4AQ2xpY2sgYW5kIGRyYWcgdG8gZWRpdCB2YWx1ZS4KSG9sZCBTSElGVC9BTFQgZm9yIGZhc3Rlci9zbG93ZXIgZWRpdC4KRG91YmxlLWNsaWNrIG9yIENUUkwrY2xpY2sgdG8gaW5wdXQgdmFsdWUuAFNldHRpbmcgc3R5bGUuQ2VsbFBhZGRpbmcgdG8gKDAsMCkgb3IgYSBjdXN0b20gdmFsdWUuAEFzIHdpdGggZXZlcnkgd2lkZ2V0cyBpbiBkZWFyIGltZ3VpLCB3ZSBuZXZlciBtb2RpZnkgdmFsdWVzIHVubGVzcyB0aGVyZSBpcyBhIHVzZXIgaW50ZXJhY3Rpb24uCllvdSBjYW4gb3ZlcnJpZGUgdGhlIGNsYW1waW5nIGxpbWl0cyBieSB1c2luZyBDVFJMK0NsaWNrIHRvIGlucHV0IGEgdmFsdWUuAENUUkwrWC9DL1YgdG8gdXNlIGNsaXBib2FyZCBjdXQvY29weS9wYXN0ZS4AQXJyb3cga2V5cyB0byBuYXZpZ2F0ZS4AU2hvd2Nhc2UgdXNpbmcgUHVzaEl0ZW1XaWR0aCgpIGFuZCBob3cgaXQgaXMgcHJlc2VydmVkIG9uIGEgcGVyLWNvbHVtbiBiYXNpcy4KCk5vdGUgdGhhdCBvbiBhdXRvLXJlc2l6aW5nIG5vbi1yZXNpemFibGUgZml4ZWQgY29sdW1ucywgcXVlcnlpbmcgdGhlIGNvbnRlbnQgd2lkdGggZm9yIGUuZy4gcmlnaHQtYWxpZ25tZW50IGRvZXNuJ3QgbWFrZSBzZW5zZS4AU2hvd2Nhc2UgdXNpbmcgU3RyZXRjaCBjb2x1bW5zICsgU2Nyb2xsWCB0b2dldGhlcjogdGhpcyBpcyByYXRoZXIgdW51c3VhbCBhbmQgb25seSBtYWtlcyBzZW5zZSB3aGVuIHNwZWNpZnlpbmcgYW4gJ2lubmVyX3dpZHRoJyBmb3IgdGhlIHRhYmxlIQpXaXRob3V0IGFuIGV4cGxpY2l0IHZhbHVlLCBpbm5lcl93aWR0aCBpcyA9PSBvdXRlcl9zaXplLnggYW5kIHRoZXJlZm9yZSB1c2luZyBTdHJldGNoIGNvbHVtbnMgKyBTY3JvbGxYIHRvZ2V0aGVyIGRvZXNuJ3QgbWFrZSBzZW5zZS4AVXNlIGRlZmF1bHQgc2l6aW5nIHBvbGljeToKLSBJbUd1aVRhYmxlRmxhZ3NfU2l6aW5nRml4ZWRGaXQgaWYgU2Nyb2xsWCBpcyBvbiBvciBpZiBob3N0IHdpbmRvdyBoYXMgSW1HdWlXaW5kb3dGbGFnc19BbHdheXNBdXRvUmVzaXplLgotIEltR3VpVGFibGVGbGFnc19TaXppbmdTdHJldGNoU2FtZSBvdGhlcndpc2UuAFNhdmUvUmV2ZXJ0IGluIGxvY2FsIG5vbi1wZXJzaXN0ZW50IHN0b3JhZ2UuIERlZmF1bHQgQ29sb3JzIGRlZmluaXRpb24gYXJlIG5vdCBhZmZlY3RlZC4gVXNlICJFeHBvcnQiIGJlbG93IHRvIHNhdmUgdGhlbSBzb21ld2hlcmUuAEkgYW0gdGhlIGxhc3Qgb25lIGhlcmUuAEFuIGV4dHJhIGxpbmUgaGVyZS4AV2UgYXJlIGNvbG9yaXppbmcgY2VsbHMgdG8gQjEtPkMyIGhlcmUuAFRoZSBUZXh0RGlzYWJsZWQgY29sb3IgaXMgc3RvcmVkIGluIEltR3VpU3R5bGUuAEltR3VpVGFibGVGbGFnc19Sb3dCZyBhdXRvbWF0aWNhbGx5IHNldHMgUm93QmcwIHRvIGFsdGVybmF0aXZlIGNvbG9ycyBwdWxsZWQgZnJvbSB0aGUgU3R5bGUuAFRoaXMgd2luZG93IGhhcyBhIGNoYW5naW5nIHRpdGxlLgAlKnNIZWxsbywgc2FpbG9yISBNYWtpbmcgdGhpcyBsaW5lIGxvbmcgZW5vdWdoIGZvciB0aGUgZXhhbXBsZS4AVGhpcyB0ZXh0IHNob3VsZCBhdXRvbWF0aWNhbGx5IHdyYXAgb24gdGhlIGVkZ2Ugb2YgdGhlIHdvcmsgcmVjdGFuZ2xlLgBTZXRDb2xvckVkaXRPcHRpb25zKCkgaXMgZGVzaWduZWQgdG8gYWxsb3cgeW91IHRvIHNldCBib290LXRpbWUgZGVmYXVsdC4KV2UgZG9uJ3QgaGF2ZSBQdXNoL1BvcCBmdW5jdGlvbnMgYmVjYXVzZSB5b3UgY2FuIGZvcmNlIG9wdGlvbnMgb24gYSBwZXItd2lkZ2V0IGJhc2lzIGlmIG5lZWRlZCxhbmQgdGhlIHVzZXIgY2FuIGNoYW5nZSBub24tZm9yY2VkIG9uZXMgd2l0aCB0aGUgb3B0aW9ucyBtZW51LgpXZSBkb24ndCBoYXZlIGEgZ2V0dGVyIHRvIGF2b2lkZW5jb3VyYWdpbmcgeW91IHRvIHBlcnNpc3RlbnRseSBzYXZlIHZhbHVlcyB0aGF0IGFyZW4ndCBmb3J3YXJkLWNvbXBhdGlibGUuAE1ha2Ugb3V0ZXIgaGVpZ2h0IHN0b3AgZXhhY3RseSBhdCBvdXRlcl9zaXplLnkgKHByZXZlbnQgYXV0by1leHRlbmRpbmcgdGFibGUgcGFzdCB0aGUgbGltaXQpLgoKT25seSBhdmFpbGFibGUgd2hlbiBTY3JvbGxYL1Njcm9sbFkgYXJlIGRpc2FibGVkLiBEYXRhIGJlbG93IHRoZSBsaW1pdCB3aWxsIGJlIGNsaXBwZWQgYW5kIG5vdCB2aXNpYmxlLgBDb2x1bW5zIGFyZSBhbGwgdGhlIHNhbWUgd2lkdGgsIG1hdGNoaW5nIHRoZSBtYXhpbXVtIGNvbnRlbnRzIHdpZHRoLgpJbXBsaWNpdGx5IGRpc2FibGUgSW1HdWlUYWJsZUZsYWdzX1Jlc2l6YWJsZSBhbmQgZW5hYmxlIEltR3VpVGFibGVGbGFnc19Ob0tlZXBDb2x1bW5zVmlzaWJsZS4ARXh0ZW5kIGhpdCBhcmVhIHRvIGFsbCBhdmFpbGFibGUgd2lkdGggaW5zdGVhZCBvZiBhbGxvd2luZyBtb3JlIGl0ZW1zIHRvIGJlIGxhaWQgb3V0IGFmdGVyIHRoZSBub2RlLgBVc2VyIGNhbiByaWdodC1jbGljayB0aGUgcGlja2VyIHRvIGNoYW5nZSBtb2RlLgBOQjogQ3Vyc29yICYgc2VsZWN0aW9uIGFyZSBwcmVzZXJ2ZWQgd2hlbiByZWZvY3VzaW5nIGxhc3QgdXNlZCBpdGVtIGluIGNvZGUuAE1vZGFsIHdpbmRvd3MgYXJlIGxpa2UgcG9wdXBzIGJ1dCB0aGUgdXNlciBjYW5ub3QgY2xvc2UgdGhlbSBieSBjbGlja2luZyBvdXRzaWRlLgBUaG9zZSBmbGFncyBhcmUgc2V0IGJ5IHRoZSBiYWNrZW5kcyAoaW1ndWlfaW1wbF94eHggZmlsZXMpIHRvIHNwZWNpZnkgdGhlaXIgY2FwYWJpbGl0aWVzLgpIZXJlIHdlIGV4cG9zZSB0aGVuIGFzIHJlYWQtb25seSBmaWVsZHMgdG8gYXZvaWQgYnJlYWtpbmcgaW50ZXJhY3Rpb25zIHdpdGggeW91ciBiYWNrZW5kLgBNYWtlIG91dGVyIHdpZHRoIGF1dG8tZml0IHRvIGNvbHVtbnMsIG92ZXJyaWRpbmcgb3V0ZXJfc2l6ZS54IHZhbHVlLgoKT25seSBhdmFpbGFibGUgd2hlbiBTY3JvbGxYL1Njcm9sbFkgYXJlIGRpc2FibGVkIGFuZCBTdHJldGNoIGNvbHVtbnMgYXJlIG5vdCB1c2VkLgBPbmx5IGF2YWlsYWJsZSBpZiBTY3JvbGxYIGlzIGRpc2FibGVkLgBOb3RlOiBzb21lIG1lbW9yeSBidWZmZXJzIGhhdmUgYmVlbiBjb21wYWN0ZWQvZnJlZWQuAE11bHRpcGxlIHRhYmxlcyB3aXRoIHRoZSBzYW1lIGlkZW50aWZpZXIgd2lsbCBzaGFyZSB0aGVpciBzZXR0aW5ncywgd2lkdGgsIHZpc2liaWxpdHksIG9yZGVyIGV0Yy4AVGhpcyBleGFtcGxlIGltcGxlbWVudHMgYSBjb25zb2xlIHdpdGggYmFzaWMgY29sb3JpbmcsIGNvbXBsZXRpb24gKFRBQiBrZXkpIGFuZCBoaXN0b3J5IChVcC9Eb3duIGtleXMpLiBBIG1vcmUgZWxhYm9yYXRlIGltcGxlbWVudGF0aW9uIG1heSB3YW50IHRvIHN0b3JlIGVudHJpZXMgYWxvbmcgd2l0aCBleHRyYSBkYXRhIHN1Y2ggYXMgdGltZXN0YW1wLCBlbWl0dGVyLCBldGMuAEkgYW0gYW4gb2RkIHRhYi4ATG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdCwgc2VkIGRvIGVpdXNtb2QgdGVtcG9yIGluY2lkaWR1bnQgdXQgbGFib3JlIGV0IGRvbG9yZSBtYWduYSBhbGlxdWEuAFRoaXMgZXhhbXBsZSBzaG93cyBob3cgeW91IG1heSBpbXBsZW1lbnQgYSBwcm9wZXJ0eSBlZGl0b3IgdXNpbmcgdHdvIGNvbHVtbnMuCkFsbCBvYmplY3RzL2ZpZWxkcyBkYXRhIGFyZSBkdW1taWVzIGhlcmUuClJlbWVtYmVyIHRoYXQgaW4gbWFueSBzaW1wbGUgY2FzZXMsIHlvdSBjYW4gdXNlIEltR3VpOjpTYW1lTGluZSh4eHgpIHRvIHBvc2l0aW9uCnlvdXIgY3Vyc29yIGhvcml6b250YWxseSBpbnN0ZWFkIG9mIHVzaW5nIHRoZSBDb2x1bW5zKCkgQVBJLgBGaWxlIE1lbnUuLgBCYXNlbGluZSBvZiBidXR0b24gd2lsbCBsb29rIG1pc2FsaWduZWQgd2l0aCB0ZXh0Li4AU2VsZWN0Li4AQW5kIG5vdyBzb21lIHRleHR1cmVkIGJ1dHRvbnMuLgBTdGFja2VkIG1vZGFscy4uAFNvbWUgJXMgdGV4dCAlZCwlZApPdmVyIHR3byBsaW5lcy4uAENvcHkgYXMuLgBTYXZlIEFzLi4AQ29sdW1uICVkIG9yZGVyICVkICclcyc6IG9mZnNldCAlKy4yZiB0byAlKy4yZiVzCkVuYWJsZWQ6ICVkLCBWaXNpYmxlWC9ZOiAlZC8lZCwgUmVxdWVzdE91dHB1dDogJWQsIFNraXBJdGVtczogJWQsIERyYXdDaGFubmVsczogJWQsJWQKV2lkdGhHaXZlbjogJS4xZiwgUmVxdWVzdC9BdXRvOiAlLjFmLyUuMWYsIFN0cmV0Y2hXZWlnaHQ6ICUuM2YgKCUuMWYlJSkKTWluWDogJS4xZiwgTWF4WDogJS4xZiAoJSsuMWYpLCBDbGlwUmVjdDogJS4xZiB0byAlLjFmICgrJS4xZikKQ29udGVudFdpZHRoOiAlLjFmLCUuMWYsIEhlYWRlcnNVc2VkL0lkZWFsICUuMWYvJS4xZgpTb3J0OiAlZCVzLCBVc2VySUQ6IDB4JTA4WCwgRmxhZ3M6IDB4JTA0WDogJXMlcyVzLi4ASXRlbSBQaWNrZXIuLgBBZGQgYW5vdGhlciBtb2RhbC4uAERlbGV0ZS4uAFJlY3Vyc2UuLgBNb3JlLi4AVG9nZ2xlLi4ASXRlbSAlZC4uAGFub3RoZXIgb25lIG9mIHRob3NlIHRyZWUgbm9kZS4uLgBMaW5lICVkIENvbHVtbiAlZC4uLgBEZW1vbnN0cmF0ZSBtaXhpbmcgdGFibGUgY29udGV4dCBtZW51IChvdmVyIGhlYWRlciksIGl0ZW0gY29udGV4dCBidXR0b24gKG92ZXIgYnV0dG9uKSBhbmQgY3VzdG9tIHBlci1jb2x1bSBjb250ZXh0IG1lbnUgKG92ZXIgY29sdW1uIGJvZHkpLgBJZiBzY3JvbGxpbmcgaXMgZGlzYWJsZWQgKFNjcm9sbFggYW5kIFNjcm9sbFkgbm90IHNldCk6Ci0gVGhlIHRhYmxlIGlzIG91dHB1dCBkaXJlY3RseSBpbiB0aGUgcGFyZW50IHdpbmRvdy4KLSBPdXRlclNpemUueCA8IDAuMGYgd2lsbCByaWdodC1hbGlnbiB0aGUgdGFibGUuCi0gT3V0ZXJTaXplLnggPSAwLjBmIHdpbGwgbmFycm93IGZpdCB0aGUgdGFibGUgdW5sZXNzIHRoZXJlIGFyZSBhbnkgU3RyZXRjaCBjb2x1bW4uCi0gT3V0ZXJTaXplLnkgdGhlbiBiZWNvbWVzIHRoZSBtaW5pbXVtIHNpemUgZm9yIHRoZSB0YWJsZSwgd2hpY2ggd2lsbCBleHRlbmQgdmVydGljYWxseSBpZiB0aGVyZSBhcmUgbW9yZSByb3dzICh1bmxlc3MgTm9Ib3N0RXh0ZW5kWSBpcyBzZXQpLgBDbGljayBhbmQgZHJhZyBvbiBsb3dlciBjb3JuZXIgdG8gcmVzaXplIHdpbmRvdwooZG91YmxlLWNsaWNrIHRvIGF1dG8gZml0IHdpbmRvdyB0byBpdHMgY29udGVudHMpLgBEaXNhYmxlIHJvdW5kaW5nIHVuZGVybHlpbmcgdmFsdWUgdG8gbWF0Y2ggcHJlY2lzaW9uIG9mIHRoZSBmb3JtYXQgc3RyaW5nIChlLmcuICUuM2YgdmFsdWVzIGFyZSByb3VuZGVkIHRvIHRob3NlIDMgZGlnaXRzKS4AV2hlbiBTY3JvbGxYIGlzIGVuYWJsZWQsIHRoZSBkZWZhdWx0IHNpemluZyBwb2xpY3kgYmVjb21lcyBJbUd1aVRhYmxlRmxhZ3NfU2l6aW5nRml4ZWRGaXQsIGFzIGF1dG9tYXRpY2FsbHkgc3RyZXRjaGluZyBjb2x1bW5zIGRvZXNuJ3QgbWFrZSBtdWNoIHNlbnNlIHdpdGggaG9yaXpvbnRhbCBzY3JvbGxpbmcuCgpBbHNvIG5vdGUgdGhhdCBhcyBvZiB0aGUgY3VycmVudCB2ZXJzaW9uLCB5b3Ugd2lsbCBhbG1vc3QgYWx3YXlzIHdhbnQgdG8gZW5hYmxlIFNjcm9sbFkgYWxvbmcgd2l0aCBTY3JvbGxYLGJlY2F1c2UgdGhlIGNvbnRhaW5lciB3aW5kb3cgd29uJ3QgYXV0b21hdGljYWxseSBleHRlbmQgdmVydGljYWxseSB0byBmaXggY29udGVudHMgKHRoaXMgbWF5IGJlIGltcHJvdmVkIGluIGZ1dHVyZSB2ZXJzaW9ucykuAEVuYWJsZSBsb2dhcml0aG1pYyBlZGl0aW5nIChtb3JlIHByZWNpc2lvbiBmb3Igc21hbGwgdmFsdWVzKS4AVVNFUjoKSG9sZCBTSElGVCBvciB1c2UgbW91c2UgdG8gc2VsZWN0IHRleHQuCkNUUkwrTGVmdC9SaWdodCB0byB3b3JkIGp1bXAuCkNUUkwrQSBvciBkb3VibGUtY2xpY2sgdG8gc2VsZWN0IGFsbC4KQ1RSTCtYLENUUkwrQyxDVFJMK1YgY2xpcGJvYXJkLgpDVFJMK1osQ1RSTCtZIHVuZG8vcmVkby4KRVNDQVBFIHRvIHJldmVydC4KClBST0dSQU1NRVI6CllvdSBjYW4gdXNlIHRoZSBJbUd1aUlucHV0VGV4dEZsYWdzX0NhbGxiYWNrUmVzaXplIGZhY2lsaXR5IGlmIHlvdSBuZWVkIHRvIHdpcmUgSW5wdXRUZXh0KCkgdG8gYSBkeW5hbWljIHN0cmluZyB0eXBlLiBTZWUgbWlzYy9jcHAvaW1ndWlfc3RkbGliLmggZm9yIGFuIGV4YW1wbGUgKHRoaXMgaXMgbm90IGRlbW9uc3RyYXRlZCBpbiBpbWd1aV9kZW1vLmNwcCkuAFRoZSAiVG9vbHMiIG1lbnUgYWJvdmUgZ2l2ZXMgYWNjZXNzIHRvOiBBYm91dCBCb3gsIFN0eWxlIEVkaXRvciwKYW5kIE1ldHJpY3MvRGVidWdnZXIgKGdlbmVyYWwgcHVycG9zZSBEZWFyIEltR3VpIGRlYnVnZ2luZyB0b29sKS4ARW5hYmxlIHR1cm5pbmcgRHJhZ1hYWCB3aWRnZXRzIGludG8gdGV4dCBpbnB1dCB3aXRoIGEgc2ltcGxlIG1vdXNlIGNsaWNrLXJlbGVhc2UgKHdpdGhvdXQgbW92aW5nKS4ARmFzdGVyIGxpbmVzIHVzaW5nIHRleHR1cmUgZGF0YS4gUmVxdWlyZSBiYWNrZW5kIHRvIHJlbmRlciB3aXRoIGJpbGluZWFyIGZpbHRlcmluZyAobm90IHBvaW50L25lYXJlc3QgZmlsdGVyaW5nKS4ASW5zdHJ1Y3QgRGVhciBJbUd1aSB0byByZW5kZXIgYSBtb3VzZSBjdXJzb3IgaXRzZWxmLiBOb3RlIHRoYXQgYSBtb3VzZSBjdXJzb3IgcmVuZGVyZWQgdmlhIHlvdXIgYXBwbGljYXRpb24gR1BVIHJlbmRlcmluZyBwYXRoIHdpbGwgZmVlbCBtb3JlIGxhZ2d5IHRoYW4gaGFyZHdhcmUgY3Vyc29yLCBidXQgd2lsbCBiZSBtb3JlIGluIHN5bmMgd2l0aCB5b3VyIG90aGVyIHZpc3VhbHMuCgpTb21lIGRlc2t0b3AgYXBwbGljYXRpb25zIG1heSB1c2UgYm90aCBraW5kcyBvZiBjdXJzb3JzIChlLmcuIGVuYWJsZSBzb2Z0d2FyZSBjdXJzb3Igb25seSB3aGVuIHJlc2l6aW5nL2RyYWdnaW5nIHNvbWV0aGluZykuAEFkanVzdCBpZiB5b3UgY2Fubm90IHNlZSB0aGUgZWRnZXMgb2YgeW91ciBzY3JlZW4gKGUuZy4gb24gYSBUViB3aGVyZSBzY2FsaW5nIGhhcyBub3QgYmVlbiBjb25maWd1cmVkKS4AV2hlbiBzb3J0aW5nIGlzIGVuYWJsZWQ6IGhvbGQgc2hpZnQgd2hlbiBjbGlja2luZyBoZWFkZXJzIHRvIHNvcnQgb24gbXVsdGlwbGUgY29sdW1uLiBUYWJsZUdldFNvcnRTcGVjcygpIG1heSByZXR1cm4gc3BlY3Mgd2hlcmUgKFNwZWNzQ291bnQgPiAxKS4AV2hlbiBzb3J0aW5nIGlzIGVuYWJsZWQ6IGFsbG93IG5vIHNvcnRpbmcsIGRpc2FibGUgZGVmYXVsdCBzb3J0aW5nLiBUYWJsZUdldFNvcnRTcGVjcygpIG1heSByZXR1cm4gc3BlY3Mgd2hlcmUgKFNwZWNzQ291bnQgPT0gMCkuAENvbG9yRWRpdCBkZWZhdWx0cyB0byBkaXNwbGF5aW5nIFJHQiBpbnB1dHMgaWYgeW91IGRvbid0IHNwZWNpZnkgYSBkaXNwbGF5IG1vZGUsIGJ1dCB0aGUgdXNlciBjYW4gY2hhbmdlIGl0IHdpdGggYSByaWdodC1jbGljay4KCkNvbG9yUGlja2VyIGRlZmF1bHRzIHRvIGRpc3BsYXlpbmcgUkdCK0hTVitIZXggaWYgeW91IGRvbid0IHNwZWNpZnkgYSBkaXNwbGF5IG1vZGUuCgpZb3UgY2FuIGNoYW5nZSB0aGUgZGVmYXVsdHMgdXNpbmcgU2V0Q29sb3JFZGl0T3B0aW9ucygpLgBIb3Jpem9udGFsIHNjcm9sbGluZyBmb3IgYSB3aW5kb3cgaXMgZW5hYmxlZCB2aWEgdGhlIEltR3VpV2luZG93RmxhZ3NfSG9yaXpvbnRhbFNjcm9sbGJhciBmbGFnLgoKWW91IG1heSB3YW50IHRvIGFsc28gZXhwbGljaXRseSBzcGVjaWZ5IGNvbnRlbnQgd2lkdGggYnkgdXNpbmcgU2V0TmV4dFdpbmRvd0NvbnRlbnRXaWR0aCgpIGJlZm9yZSBCZWdpbigpLgAtIExvYWQgYWRkaXRpb25hbCBmb250cyB3aXRoIGlvLkZvbnRzLT5BZGRGb250RnJvbUZpbGVUVEYoKS4KLSBUaGUgZm9udCBhdGxhcyBpcyBidWlsdCB3aGVuIGNhbGxpbmcgaW8uRm9udHMtPkdldFRleERhdGFBc1hYWFgoKSBvciBpby5Gb250cy0+QnVpbGQoKS4KLSBSZWFkIEZBUSBhbmQgZG9jcy9GT05UUy5tZCBmb3IgbW9yZSBkZXRhaWxzLgotIElmIHlvdSBuZWVkIHRvIGFkZC9yZW1vdmUgZm9udHMgYXQgcnVudGltZSAoZS5nLiBmb3IgRFBJIGNoYW5nZSksIGRvIGl0IGJlZm9yZSBjYWxsaW5nIE5ld0ZyYW1lKCkuAFRlc3RpbmcgaG93IHZhcmlvdXMgdHlwZXMgb2YgaXRlbXMgYXJlIGludGVyYWN0aW5nIHdpdGggdGhlIElzSXRlbVhYWCBmdW5jdGlvbnMuIE5vdGUgdGhhdCB0aGUgYm9vbCByZXR1cm4gdmFsdWUgb2YgbW9zdCBJbUd1aSBmdW5jdGlvbiBpcyBnZW5lcmFsbHkgZXF1aXZhbGVudCB0byBjYWxsaW5nIEltR3VpOjpJc0l0ZW1Ib3ZlcmVkKCkuAFlvdSBjYW4gaW5wdXQgdmFsdWUgdXNpbmcgdGhlIHNjaWVudGlmaWMgbm90YXRpb24sCiAgZS5nLiAiMWUrOCIgYmVjb21lcyAiMTAwMDAwMDAwIi4ALS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0AICB3LyBkZWZhdWx0IHRocmVzaG9sZDogJWQsACAgdy8gemVybyB0aHJlc2hvbGQ6ICVkLAAgIHcvIGxhcmdlIHRocmVzaG9sZDogJWQsACsAKlVua25vd24gaXRlbSoAICpJbmFjdGl2ZSoAY29tYm8gMyAoYXJyYXkpAENvbHVtbiAlMDJkOiBPZmZzZXROb3JtICUuM2YgKD0gJS4xZiBweCkAZy5BY3RpdmVJZCA9PSBjb2x1bW5zLT5JRCArIEltR3VpSUQoY29sdW1uX2luZGV4KQAoeCkAU2VsZWN0YWJsZSAoc3BhbiByb3cpADogRHJhd0NtZDogKyVkIChpbiBzYW1lIHdpbmRvdykAcGFyZW50X3dpbmRvdyAhPSAwTCB8fCAhKGZsYWdzICYgSW1HdWlXaW5kb3dGbGFnc19DaGlsZFdpbmRvdykAKGZsYWdzICYgKEltR3VpQ29tYm9GbGFnc19Ob0Fycm93QnV0dG9uIHwgSW1HdWlDb21ib0ZsYWdzX05vUHJldmlldykpICE9IChJbUd1aUNvbWJvRmxhZ3NfTm9BcnJvd0J1dHRvbiB8IEltR3VpQ29tYm9GbGFnc19Ob1ByZXZpZXcpAChkZW1vIG1lbnUpAGlucHV0IHRleHQgKHcvIGhpbnQpAHBhc3N3b3JkICh3LyBoaW50KQBwYXlsb2FkLT5EYXRhU2l6ZSA9PSBzaXplb2YoaW50KQBEaXNhYmxlIG91dGVyLW1vc3QgcGFkZGluZyAoZGVmYXVsdCBpZiBJbUd1aVRhYmxlRmxhZ3NfQm9yZGVyc091dGVyViBpcyBub3Qgc2V0KQBFbmFibGUgb3V0ZXItbW9zdCBwYWRkaW5nIChkZWZhdWx0IGlmIEltR3VpVGFibGVGbGFnc19Cb3JkZXJzT3V0ZXJWIGlzIHNldCkASGFsZiBvZiBhdmFpbGFibGUgd2lkdGguCih+IHJpZ2h0LWN1cnNvcl9wb3MpCih3b3JrcyB3aXRoaW4gYSBjb2x1bW4gc2V0KQBsaXN0Ym94CihzaW5nbGUgc2VsZWN0KQBCdXR0b24gKHcvIHJlcGVhdCkARGlzYWJsZSB2ZXJ0aWNhbCBib3JkZXJzIGluIGNvbHVtbnMgQm9keSB1bnRpbCBob3ZlcmVkIGZvciByZXNpemUgKGJvcmRlcnMgd2lsbCBhbHdheXMgYXBwZWFycyBpbiBIZWFkZXJzKQBVc2luZyBJbUd1aTo6UHVzaENsaXBSZWN0KCk6CldpbGwgYWx0ZXIgSW1HdWkgaGl0LXRlc3RpbmcgbG9naWMgKyBJbURyYXdMaXN0IHJlbmRlcmluZy4KKHVzZSB0aGlzIGlmIHlvdSB3YW50IHlvdXIgY2xpcHBpbmcgcmVjdGFuZ2xlIHRvIGFmZmVjdCBpbnRlcmFjdGlvbnMpAFNldHRpbmdzIDB4JTA4WCAoJWQgY29sdW1ucykAVXNpbmcgSW1EcmF3TGlzdDo6QWRkVGV4dCgpIHdpdGggYSBmaW5lIENsaXBSZWN0OgpXaWxsIGFsdGVyIG9ubHkgdGhpcyBzcGVjaWZpYyBJbURyYXdMaXN0OjpBZGRUZXh0KCkgcmVuZGVyaW5nLgoodGhpcyBpcyBvZnRlbiB1c2VkIGludGVybmFsbHkgdG8gYXZvaWQgYWx0ZXJpbmcgdGhlIGNsaXBwaW5nIHJlY3RhbmdsZSBhbmQgbWluaW1pemUgZHJhdyBjYWxscykAVXNpbmcgSW1EcmF3TGlzdDo6UHVzaENsaXBSZWN0KCk6CldpbGwgYWx0ZXIgSW1EcmF3TGlzdCByZW5kZXJpbmcgb25seS4KKHVzZSB0aGlzIGFzIGEgc2hvcnRjdXQgaWYgeW91IGFyZSBvbmx5IHVzaW5nIEltRHJhd0xpc3QgY2FsbHMpAEJ1bGxldCBwb2ludCAzICh0d28gY2FsbHMpAEF0bGFzIHRleHR1cmUgKCVkeCVkIHBpeGVscykARHJhZ0Ryb3A6ICVkLCBTb3VyY2VJZCA9IDB4JTA4WCwgUGF5bG9hZCAiJXMiICglZCBieXRlcykAJWQgdmVydGljZXMsICVkIGluZGljZXMgKCVkIHRyaWFuZ2xlcykAIChEZXMpAHJhbmdlIGludCAobm8gYm91bmRzKQBiJWQgKCUuMDJmIHNlY3MpACVkICgweCVYKSAoJS4wMmYgc2VjcykARm9udDogIiVzIgolLjJmIHB4LCAlZCBnbHlwaHMsICVkIGZpbGUocykAZGVhciBpbWd1aSBzYXlzIGhlbGxvLiAoJXMpAFUrJTA0WC4uVSslMDRYICglZCAlcykAd2luZG93LT5EQy5OYXZMYXllckFjdGl2ZU1hc2tOZXh0ICYgKDEgPDwgbGF5ZXIpAGNvbWJvIDIgKG9uZS1saW5lcikAcGFzc3dvcmQgKGNsZWFyKQAoTWFpbiBtZW51IGJhcikAKFBvcHVwKQA0ICh0YWIgc2tpcCkAMyAodGFiIHNraXApACAoYXV0bykASGlyYWdhbmE6IOOBi+OBjeOBj+OBkeOBkyAoa2FraWt1a2VrbykAS2FuamlzOiDml6XmnKzoqp4gKG5paG9uZ28pACFpc190YWJfYnV0dG9uIHx8ICEodGFiX2Jhci0+U2VsZWN0ZWRUYWJJZCA9PSB0YWItPklEICYmIGlzX3RhYl9idXR0b24pACFwX29wZW4gfHwgIShmbGFncyAmIEltR3VpVGFiSXRlbUZsYWdzX0J1dHRvbikAISh0YWItPkZsYWdzICYgSW1HdWlUYWJJdGVtRmxhZ3NfQnV0dG9uKQBTaW1wbGUgb3ZlcmxheQppbiB0aGUgY29ybmVyIG9mIHRoZSBzY3JlZW4uCihyaWdodC1jbGljayB0byBjaGFuZ2UgcG9zaXRpb24pAGNvbWJvIDQgKGZ1bmN0aW9uKQBpdGVtc190eXBlIChmaXJzdCBjb2x1bW4pACAoRnJvemVuKQAoVXNlIEltR3VpOjpTYW1lTGluZSgpIHRvIGtlZXAgYWRkaW5nIGl0ZW1zIHRvIHRoZSByaWdodCBvZiB0aGUgcHJlY2VkaW5nIGl0ZW0pAChudWxsKQAoQ2xpY2sgYW5kIGRyYWcgdG8gc2Nyb2xsKQBJbUlzUG93ZXJPZlR3byhmbGFncyAmIEltR3VpQ29sb3JFZGl0RmxhZ3NfX0Rpc3BsYXlNYXNrKQBJbUlzUG93ZXJPZlR3byhmbGFncyAmIEltR3VpQ29sb3JFZGl0RmxhZ3NfX0lucHV0TWFzaykASW1Jc1Bvd2VyT2ZUd28oZmxhZ3MgJiBJbUd1aUNvbG9yRWRpdEZsYWdzX19QaWNrZXJNYXNrKQBJbUlzUG93ZXJPZlR3byhmbGFncyAmIEltR3VpQ29sb3JFZGl0RmxhZ3NfX0RhdGFUeXBlTWFzaykAVHJlZU5vZGUgKHcvIGRvdWJsZS1jbGljaykAc2xpZGVyIGZsb2F0IChsb2cpAEVtYmVkIGV2ZXJ5dGhpbmcgaW5zaWRlIGEgY2hpbGQgd2luZG93IChmb3IgYWRkaXRpb25hbCB0ZXN0aW5nKQBFbmFibGUgYmxpbmtpbmcgY3Vyc29yIChvcHRpb25hbCBhcyBzb21lIHVzZXJzIGNvbnNpZGVyIGl0IHRvIGJlIGRpc3RyYWN0aW5nKQAoZmxhZ3MgJiAoSW1HdWlUYWJJdGVtRmxhZ3NfTGVhZGluZyB8IEltR3VpVGFiSXRlbUZsYWdzX1RyYWlsaW5nKSkgIT0gKEltR3VpVGFiSXRlbUZsYWdzX0xlYWRpbmcgfCBJbUd1aVRhYkl0ZW1GbGFnc19UcmFpbGluZykATW91c2UgcG9zOiAoJWcsICVnKQBNb3VzZSBkZWx0YTogKCVnLCAlZykAY2FsbGJhY2tfZGF0YS5CdWZUZXh0TGVuID09IChpbnQpc3RybGVuKGNhbGxiYWNrX2RhdGEuQnVmKQBEcmFnRmxvYXQgKC1pbmYgLT4gK2luZikARHJhZ0Zsb2F0ICgwIC0+ICtpbmYpAERpc2FibGUgaW5uZXIgcGFkZGluZyBiZXR3ZWVuIGNvbHVtbnMgKGRvdWJsZSBpbm5lciBwYWRkaW5nIGlmIEJvcmRlcnNPdXRlclYgaXMgb24sIHNpbmdsZSBpbm5lciBwYWRkaW5nIGlmIEJvcmRlcnNPdXRlclYgaXMgb2ZmKQAoJS4zZmYsICUuM2ZmLCAlLjNmZiwgJS4zZmYpAFNldE5leHRJdGVtV2lkdGgvUHVzaEl0ZW1XaWR0aCgtR2V0Q29udGVudFJlZ2lvbkF2YWlsKCkueCAqIDAuNWYpAFNldE5leHRJdGVtV2lkdGgvUHVzaEl0ZW1XaWR0aChHZXRDb250ZW50UmVnaW9uQXZhaWwoKS54ICogMC41ZikAVVY6ICglLjNmLCUuM2YpLT4oJS4zZiwlLjNmKQAjJTAyWCUwMlglMDJYClI6ICVkLCBHOiAlZCwgQjogJWQKKCUuM2YsICUuM2YsICUuM2YpACMlMDJYJTAyWCUwMlglMDJYClI6JWQsIEc6JWQsIEI6JWQsIEE6JWQKKCUuM2YsICUuM2YsICUuM2YsICUuM2YpAFBvczogKCUuMmYsJS4yZiktPiglLjJmLCUuMmYpAE1heDogKCUuMmYsICUuMmYpAE1pbjogKCUuMmYsICUuMmYpACh3OiAlNS4xZikATmF2UmVjdFJlbFswXTogKCUuMWYsJS4xZikoJS4xZiwlLjFmKQBQb3M6ICglLjFmLCUuMWYpLCBTaXplOiAoJS4xZiwlLjFmKSwgQ29udGVudFNpemUgKCUuMWYsJS4xZikgSWRlYWwgKCUuMWYsJS4xZikASW5wdXQgJWQ6ICclcycsIE92ZXJzYW1wbGU6ICglZCwlZCksIFBpeGVsU25hcEg6ICVkLCBPZmZzZXQ6ICglLjFmLCUuMWYpAE1vdXNlIFBvc2l0aW9uOiAoJS4xZiwlLjFmKQBXaWR0aDogJS4xZiAoTWluWDogJS4xZiwgTWF4WDogJS4xZikAUmV0dXJuIHZhbHVlID0gJWQKSXNJdGVtRm9jdXNlZCgpID0gJWQKSXNJdGVtSG92ZXJlZCgpID0gJWQKSXNJdGVtSG92ZXJlZChfQWxsb3dXaGVuQmxvY2tlZEJ5UG9wdXApID0gJWQKSXNJdGVtSG92ZXJlZChfQWxsb3dXaGVuQmxvY2tlZEJ5QWN0aXZlSXRlbSkgPSAlZApJc0l0ZW1Ib3ZlcmVkKF9BbGxvd1doZW5PdmVybGFwcGVkKSA9ICVkCklzSXRlbUhvdmVyZWQoX1JlY3RPbmx5KSA9ICVkCklzSXRlbUFjdGl2ZSgpID0gJWQKSXNJdGVtRWRpdGVkKCkgPSAlZApJc0l0ZW1BY3RpdmF0ZWQoKSA9ICVkCklzSXRlbURlYWN0aXZhdGVkKCkgPSAlZApJc0l0ZW1EZWFjdGl2YXRlZEFmdGVyRWRpdCgpID0gJWQKSXNJdGVtVmlzaWJsZSgpID0gJWQKSXNJdGVtQ2xpY2tlZCgpID0gJWQKSXNJdGVtVG9nZ2xlZE9wZW4oKSA9ICVkCkdldEl0ZW1SZWN0TWluKCkgPSAoJS4xZiwgJS4xZikKR2V0SXRlbVJlY3RNYXgoKSA9ICglLjFmLCAlLjFmKQpHZXRJdGVtUmVjdFNpemUoKSA9ICglLjFmLCAlLjFmKQAgIHcvIGRlZmF1bHQgdGhyZXNob2xkOiAoJS4xZiwgJS4xZikAICB3LyB6ZXJvIHRocmVzaG9sZDogKCUuMWYsICUuMWYpAGlvLk1vdXNlRGVsdGE6ICglLjFmLCAlLjFmKQBEcmF3Q21kOiU1ZCB0cmlzLCBUZXggMHglcCwgQ2xpcFJlY3QgKCU0LjBmLCU0LjBmKS0oJTQuMGYsJTQuMGYpAFJlY3Qgb2YgY2hpbGQgd2luZG93IGlzOiAoJS4wZiwlLjBmKSAoJS4wZiwlLjBmKQA6IERyYXdDbWQ6ICslZCAoaW4gY2hpbGQgd2luZG93KSwgU2Nyb2xsOiAoJS5mLyUuZikgKCUuZi8lLmYpAGlubmVyX3dpZHRoICh3aGVuIFNjcm9sbFggYWN0aXZlKQBTbGlkZXJzIChyZXZlcnNlKQBZb3UgY2FuIHVzZSB0aGUgSW1HdWlJbnB1dFRleHRGbGFnc19DYWxsYmFja1Jlc2l6ZSBmYWNpbGl0eSBpZiB5b3UgbmVlZCB0byB3aXJlIElucHV0VGV4dE11bHRpbGluZSgpIHRvIGEgZHluYW1pYyBzdHJpbmcgdHlwZS4gU2VlIG1pc2MvY3BwL2ltZ3VpX3N0ZGxpYi5oIGZvciBhbiBleGFtcGxlLiAoVGhpcyBpcyBub3QgZGVtb25zdHJhdGVkIGluIGltZ3VpX2RlbW8uY3BwIGJlY2F1c2Ugd2UgZG9uJ3Qgd2FudCB0byBpbmNsdWRlIDxzdHJpbmc+IGluIGhlcmUpAFZhbHVlID0gJS4zZiAoPC0tIHJpZ2h0LWNsaWNrIGhlcmUpACEoZmxhZ3MgJiBJbUd1aUlucHV0VGV4dEZsYWdzX011bHRpbGluZSkARHJhZyB0byByZW9yZGVyIGl0ZW1zIChzaW1wbGUpACVkIGFjdGl2ZSB3aW5kb3dzICglZCB2aXNpYmxlKQBjb25kID09IDAgfHwgSW1Jc1Bvd2VyT2ZUd28oY29uZCkAKFVudGl0bGVkKQAoJWQsJWQsJWQsJWQpAEFjdGl2ZSBEcmF3TGlzdHMgKCVkKQBDb2x1bW5zIHNldHMgKCVkKQBUYWIgQmFycyAoJWQpAFBvcHVwcyAoJWQpAEdseXBocyAoJWQpAFRhYmxlcyAoJWQpAERlYXIgSW1HdWkgJXMgKCVkKQBTZXR0aW5ncyBoYW5kbGVyczogKCVkKQBDb2x1bW5zQ291bnQ6ICVkIChtYXggJWQpAEZpbHRlciAoaW5jLC1leGMpACAoQXNjKQBJbUlzUG93ZXJPZlR3byhmbGFncyAmIEltR3VpQ29tYm9GbGFnc19IZWlnaHRNYXNrXykASW1Jc1Bvd2VyT2ZUd28oZmxhZ3MgJiBJbUd1aVRhYmxlQ29sdW1uRmxhZ3NfV2lkdGhNYXNrXykAJyVjJyAoMHglMDRYKQBFbGxpcHNpcyBjaGFyYWN0ZXI6ICclYycgKFUrJTA0WCkARmFsbGJhY2sgY2hhcmFjdGVyOiAnJWMnIChVKyUwNFgpACVkICgweCVYKQBBcHBsaWNhdGlvbiBhdmVyYWdlICUuM2YgbXMvZnJhbWUgKCUuMWYgRlBTKQBTZXROZXh0SXRlbVdpZHRoL1B1c2hJdGVtV2lkdGgoLUZMVF9NSU4pACg/KQAoSW4gZnJvbnQtdG8tYmFjayBvcmRlcjopADEzLjAuMCAoaHR0cHM6Ly9naXRodWIuY29tL2xsdm0vbGx2bS1wcm9qZWN0IDMxZTc1NTEyMTc0ZTFiZGFhMjQyZWU1YzdmMzBmZTU2ZTY4YzM3NDgpAGNoYW5uZWxfbm8gPCAoNCArIDY0ICogMikARHJhZ0Zsb2F0ICgtaW5mIC0+IDEpAFNsaWRlckZsb2F0ICgwIC0+IDEpAERyYWdGbG9hdCAoMCAtPiAxKQBTZXROZXh0SXRlbVdpZHRoL1B1c2hJdGVtV2lkdGgoLTEwMCkAU2V0TmV4dEl0ZW1XaWR0aC9QdXNoSXRlbVdpZHRoKDEwMCkAQ3VzdG9tOiBGaXhlZCBTdGVwcyAoMTAwKQBTbGlkZXJJbnQgKDAgLT4gMTAwKQBEcmFnSW50ICgwIC0+IDEwMCkAKGRhdGEgIT0gMEwgJiYgZGF0YV9zaXplID4gMCkgfHwgKGRhdGEgPT0gMEwgJiYgZGF0YV9zaXplID09IDApAChZb3UgY2FuIGFsc28gcmlnaHQtY2xpY2sgbWUgdG8gb3BlbiB0aGUgc2FtZSBwb3B1cCBhcyBhYm92ZS4pAE5vdGUgdGhhbiB0aGUgZGVmYXVsdCBlbWJlZGRlZCBmb250IGlzIE5PVCBtZWFudCB0byBiZSBzY2FsZWQuCgpGb250IGFyZSBjdXJyZW50bHkgcmVuZGVyZWQgaW50byBiaXRtYXBzIGF0IGEgZ2l2ZW4gc2l6ZSBhdCB0aGUgdGltZSBvZiBidWlsZGluZyB0aGUgYXRsYXMuIFlvdSBtYXkgb3ZlcnNhbXBsZSB0aGVtIHRvIGdldCBzb21lIGZsZXhpYmlsaXR5IHdpdGggc2NhbGluZy4gWW91IGNhbiBhbHNvIHJlbmRlciBhdCBtdWx0aXBsZSBzaXplcyBhbmQgc2VsZWN0IHdoaWNoIG9uZSB0byB1c2UgYXQgcnVudGltZS4KCihHbGltbWVyIG9mIGhvcGU6IHRoZSBhdGxhcyBzeXN0ZW0gd2lsbCBiZSByZXdyaXR0ZW4gaW4gdGhlIGZ1dHVyZSB0byBtYWtlIHNjYWxpbmcgbW9yZSBmbGV4aWJsZS4pAFF1ZXJ5aW5nIFN0YXR1cyAoRWRpdGVkL0FjdGl2ZS9Gb2N1c2VkL0hvdmVyZWQgZXRjLikARmxhZ3M6IDB4JTA4WCAoJXMlcyVzJXMlcyVzJXMlcyVzLi4pACEoKGZsYWdzICYgSW1HdWlJbnB1dFRleHRGbGFnc19DYWxsYmFja0NvbXBsZXRpb24pICYmIChmbGFncyAmIEltR3VpSW5wdXRUZXh0RmxhZ3NfQWxsb3dUYWJJbnB1dCkpAGNoYW5uZWwtPl9DbWRCdWZmZXIuU2l6ZSA9PSAxICYmIG1lcmdlX2NsaXBfcmVjdC5Db250YWlucyhJbVJlY3QoY2hhbm5lbC0+X0NtZEJ1ZmZlclswXS5DbGlwUmVjdCkpAEltSXNQb3dlck9mVHdvKGZsYWdzICYgKEltR3VpU2VwYXJhdG9yRmxhZ3NfSG9yaXpvbnRhbCB8IEltR3VpU2VwYXJhdG9yRmxhZ3NfVmVydGljYWwpKQAhKChmbGFncyAmIEltR3VpSW5wdXRUZXh0RmxhZ3NfQ2FsbGJhY2tIaXN0b3J5KSAmJiAoZmxhZ3MgJiBJbUd1aUlucHV0VGV4dEZsYWdzX011bHRpbGluZSkpAGNvdW50ID09ICgoaW50KShzaXplb2YoUG9zKSAvIHNpemVvZigqKFBvcykpKSkAdXNlcl9rZXlfaW5kZXggPj0gMCAmJiB1c2VyX2tleV9pbmRleCA8ICgoaW50KShzaXplb2YoZy5JTy5LZXlzRG93bikgLyBzaXplb2YoKihnLklPLktleXNEb3duKSkpKQBrZXlfaW5kZXggPj0gMCAmJiBrZXlfaW5kZXggPCAoKGludCkoc2l6ZW9mKGcuSU8uS2V5c0Rvd24pIC8gc2l6ZW9mKCooZy5JTy5LZXlzRG93bikpKSkAYnV0dG9uID49IDAgJiYgYnV0dG9uIDwgKChpbnQpKHNpemVvZihnLklPLk1vdXNlRG93bikgLyBzaXplb2YoKihnLklPLk1vdXNlRG93bikpKSkAZy5TZXR0aW5nc1dpbmRvd3MuZW1wdHkoKQBnLkxvZ0J1ZmZlci5lbXB0eSgpAHBhc3N3b3JkX2ZvbnQtPkdseXBocy5lbXB0eSgpICYmIHBhc3N3b3JkX2ZvbnQtPkluZGV4QWR2YW5jZVguZW1wdHkoKSAmJiBwYXNzd29yZF9mb250LT5JbmRleExvb2t1cC5lbXB0eSgpAFNob3cgVHJhaWxpbmcgVGFiSXRlbUJ1dHRvbigpAFNob3cgTGVhZGluZyBUYWJJdGVtQnV0dG9uKCkAU21hbGxCdXR0b24oKQBpdGVtX2ZsYWdzID09IGcuSXRlbUZsYWdzU3RhY2suYmFjaygpAHAgPj0gYmVnaW4oKSAmJiBwIDwgZW5kKCkAIWcuTmF2U2NvcmluZ1JlY3QuSXNJbnZlcnRlZCgpAGZvbnQgJiYgZm9udC0+SXNMb2FkZWQoKQBnLkZvbnQtPklzTG9hZGVkKCkAVGFibGUgMHglMDhYICglZCBjb2x1bW5zLCBpbiAnJXMnKQBGaWx0ZXIgKCJpbmNsLC1leGNsIikgKCJlcnJvciIpACggKQBOYXZXaW5kb3c6ICclcycASG92ZXJlZFJvb3RXaW5kb3c6ICclcycASG92ZXJlZFdpbmRvd1VuZGVyTW92aW5nV2luZG93OiAnJXMnAEhvdmVyZWRXaW5kb3c6ICclcycAQWN0aXZlSWRXaW5kb3c6ICclcycATmF2V2luZG93aW5nVGFyZ2V0OiAnJXMnAE91dGVyUmVjdDogUG9zOiAoJS4xZiwlLjFmKSBTaXplOiAoJS4xZiwlLjFmKSBTaXppbmc6ICclcycAbmFtZSAhPSAwTCAmJiBuYW1lWzBdICE9ICdcMCcAb3AgPT0gJysnIHx8IG9wID09ICctJwA3NSUAMjUlACUuMGYlJQAlZCUlAE1heDogJS4xZiAlJQBNaW46ICUuMWYgJSUAIyMjAExpbmUgIwBGaWx0ZXIgdXNhZ2U6CiAgIiIgICAgICAgICBkaXNwbGF5IGFsbCBsaW5lcwogICJ4eHgiICAgICAgZGlzcGxheSBsaW5lcyBjb250YWluaW5nICJ4eHgiCiAgInh4eCx5eXkiICBkaXNwbGF5IGxpbmVzIGNvbnRhaW5pbmcgInh4eCIgb3IgInl5eSIKICAiLXh4eCIgICAgIGhpZGUgbGluZXMgY29udGFpbmluZyAieHh4IgAoa2V5X21vZF9mbGFncyA9PSAwIHx8IGcuSU8uS2V5TW9kcyA9PSBrZXlfbW9kX2ZsYWdzKSAmJiAiTWlzbWF0Y2hpbmcgaW8uS2V5Q3RybC9pby5LZXlTaGlmdC9pby5LZXlBbHQvaW8uS2V5U3VwZXIgdnMgaW8uS2V5TW9kcyIAaW8uS2V5TW9kcyA9PSBHZXRNZXJnZWRLZXlNb2RGbGFncygpICYmICJNaXNtYXRjaGluZyBpby5LZXlDdHJsL2lvLktleVNoaWZ0L2lvLktleUFsdC9pby5LZXlTdXBlciB2cyBpby5LZXlNb2RzIgBEb2N1bWVudCAiJXMiAHN0cmxlbih0eXBlKSA8ICgoaW50KShzaXplb2YocGF5bG9hZC5EYXRhVHlwZSkgLyBzaXplb2YoKihwYXlsb2FkLkRhdGFUeXBlKSkpKSAmJiAiUGF5bG9hZCB0eXBlIGNhbiBiZSBhdCBtb3N0IDMyIGNoYXJhY3RlcnMgbG9uZyIAZHJhd19saXN0LT5fVnR4Q3VycmVudElkeCA8ICgxIDw8IDE2KSAmJiAiVG9vIG1hbnkgdmVydGljZXMgaW4gSW1EcmF3TGlzdCB1c2luZyAxNi1iaXQgaW5kaWNlcy4gUmVhZCBjb21tZW50IGFib3ZlIgB0YWJsZS0+Q29sdW1uc0NvdW50ID09IGNvbHVtbnNfY291bnQgJiYgIkJlZ2luVGFibGUoKTogQ2Fubm90IGNoYW5nZSBjb2x1bW5zIGNvdW50IG1pZC1mcmFtZSB3aGlsZSBwcmVzZXJ2aW5nIHNhbWUgSUQiAChnLkN1cnJlbnRXaW5kb3dTdGFjay5TaXplID09IDEpICYmICJNaXNtYXRjaGVkIEJlZ2luL0JlZ2luQ2hpbGQgdnMgRW5kL0VuZENoaWxkIGNhbGxzOiBkaWQgeW91IGNhbGwgRW5kL0VuZENoaWxkIHRvbyBtdWNoPyIASXRlbXNDb3VudCA9PSAtMSAmJiAiRm9yZ290IHRvIGNhbGwgRW5kKCksIG9yIHRvIFN0ZXAoKSB1bnRpbCBmYWxzZT8iAChnLkZyYW1lQ291bnQgPT0gMCB8fCBnLkZyYW1lQ291bnRFbmRlZCA9PSBnLkZyYW1lQ291bnQpICYmICJGb3Jnb3QgdG8gY2FsbCBSZW5kZXIoKSBvciBFbmRGcmFtZSgpIGF0IHRoZSBlbmQgb2YgdGhlIHByZXZpb3VzIGZyYW1lPyIAKGcuQ3VycmVudFdpbmRvd1N0YWNrLlNpemUgPT0gMSkgJiYgIk1pc21hdGNoZWQgQmVnaW4vQmVnaW5DaGlsZCB2cyBFbmQvRW5kQ2hpbGQgY2FsbHM6IGRpZCB5b3UgZm9yZ2V0IHRvIGNhbGwgRW5kL0VuZENoaWxkPyIAKHdpbmRvdy0+RmxhZ3MgJiBJbUd1aVdpbmRvd0ZsYWdzX0NoaWxkV2luZG93KSAmJiAiTWlzbWF0Y2hlZCBMaXN0Qm94SGVhZGVyL0xpc3RCb3hGb290ZXIgY2FsbHMuIERpZCB5b3UgdGVzdCB0aGUgcmV0dXJuIHZhbHVlIG9mIExpc3RCb3hIZWFkZXIoKT8iAGcuV2l0aGluRnJhbWVTY29wZSAmJiAiRm9yZ290IHRvIGNhbGwgSW1HdWk6Ok5ld0ZyYW1lKCk/IgBnLkRyYWdEcm9wV2l0aGluU291cmNlICYmICJOb3QgYWZ0ZXIgYSBCZWdpbkRyYWdEcm9wU291cmNlKCk/IgBnLklPLkZvbnRzLT5Gb250cy5TaXplID4gMCAmJiAiRm9udCBBdGxhcyBub3QgYnVpbHQuIERpZCB5b3UgY2FsbCBpby5Gb250cy0+R2V0VGV4RGF0YUFzUkdCQTMyKCkgLyBHZXRUZXhEYXRhQXNBbHBoYTgoKT8iAGcuSU8uRm9udHMtPkZvbnRzWzBdLT5Jc0xvYWRlZCgpICYmICJGb250IEF0bGFzIG5vdCBidWlsdC4gRGlkIHlvdSBjYWxsIGlvLkZvbnRzLT5HZXRUZXhEYXRhQXNSR0JBMzIoKSAvIEdldFRleERhdGFBc0FscGhhOCgpPyIAR0ltR3VpICE9IDBMICYmICJObyBjdXJyZW50IGNvbnRleHQuIERpZCB5b3UgY2FsbCBJbUd1aTo6Q3JlYXRlQ29udGV4dCgpIGFuZCBJbUd1aTo6U2V0Q3VycmVudENvbnRleHQoKSA/IgBfQ3VycmVudCA9PSAwICYmIF9Db3VudCA8PSAxICYmICJOZXN0ZWQgY2hhbm5lbCBzcGxpdHRpbmcgaXMgbm90IHN1cHBvcnRlZC4gUGxlYXNlIHVzZSBzZXBhcmF0ZSBpbnN0YW5jZXMgb2YgSW1EcmF3TGlzdFNwbGl0dGVyLiIAZy5JTy5LZXlNYXBbSW1HdWlLZXlfU3BhY2VdICE9IC0xICYmICJJbUd1aUtleV9TcGFjZSBpcyBub3QgbWFwcGVkLCByZXF1aXJlZCBmb3Iga2V5Ym9hcmQgbmF2aWdhdGlvbi4iAGluaXRfd2lkdGhfb3Jfd2VpZ2h0IDw9IDAuMGYgJiYgIkNhbiBvbmx5IHNwZWNpZnkgd2lkdGgvd2VpZ2h0IGlmIHNpemluZyBwb2xpY3kgaXMgc2V0IGV4cGxpY2l0ZWx5IGluIGVpdGhlciBUYWJsZSBvciBDb2x1bW4uIgAwICYmICJDYW5ub3QgdXNlIElzUG9wdXBPcGVuKCkgd2l0aCBhIHN0cmluZyBpZCBhbmQgSW1HdWlQb3B1cEZsYWdzX0FueVBvcHVwTGV2ZWwuIgBnLlN0eWxlLldpbmRvd01pblNpemUueCA+PSAxLjBmICYmIGcuU3R5bGUuV2luZG93TWluU2l6ZS55ID49IDEuMGYgJiYgIkludmFsaWQgc3R5bGUgc2V0dGluZy4iAChmbGFncyA9PSAxIHx8IChmbGFncyAmIEltR3VpU2xpZGVyRmxhZ3NfSW52YWxpZE1hc2tfKSA9PSAwKSAmJiAiSW52YWxpZCBJbUd1aVNsaWRlckZsYWdzIGZsYWdzISBIYXMgdGhlICdmbG9hdCBwb3dlcicgYXJndW1lbnQgYmVlbiBtaXN0YWtlbmx5IGNhc3QgdG8gZmxhZ3M/IENhbGwgZnVuY3Rpb24gd2l0aCBJbUd1aVNsaWRlckZsYWdzX0xvZ2FyaXRobWljIGZsYWdzIGluc3RlYWQuIgAoZmxhZ3MgPT0gMSB8fCAoZmxhZ3MgJiBJbUd1aVNsaWRlckZsYWdzX0ludmFsaWRNYXNrXykgPT0gMCkgJiYgIkludmFsaWQgSW1HdWlTbGlkZXJGbGFncyBmbGFnISAgSGFzIHRoZSAnZmxvYXQgcG93ZXInIGFyZ3VtZW50IGJlZW4gbWlzdGFrZW5seSBjYXN0IHRvIGZsYWdzPyBDYWxsIGZ1bmN0aW9uIHdpdGggSW1HdWlTbGlkZXJGbGFnc19Mb2dhcml0aG1pYyBmbGFncyBpbnN0ZWFkLiIAZy5JTy5LZXlNYXBbbl0gPj0gLTEgJiYgZy5JTy5LZXlNYXBbbl0gPCAoKGludCkoc2l6ZW9mKGcuSU8uS2V5c0Rvd24pIC8gc2l6ZW9mKCooZy5JTy5LZXlzRG93bikpKSkgJiYgImlvLktleU1hcFtdIGNvbnRhaW5zIGFuIG91dCBvZiBib3VuZCB2YWx1ZSAobmVlZCB0byBiZSAwLi41MTIsIG9yIC0xIGZvciB1bm1hcHBlZCBrZXkpIgAoZmxhZ3MgJiBJbUd1aVRhYmxlQ29sdW1uRmxhZ3NfU3RhdHVzTWFza18pID09IDAgJiYgIklsbGVnYWwgdG8gcGFzcyBTdGF0dXNNYXNrIHZhbHVlcyB0byBUYWJsZVNldHVwQ29sdW1uKCkiAEl0ZW1zSGVpZ2h0ID4gMC4wZiAmJiAiVW5hYmxlIHRvIGNhbGN1bGF0ZSBpdGVtIGhlaWdodCEgRmlyc3QgaXRlbSBoYXNuJ3QgbW92ZWQgdGhlIGN1cnNvciB2ZXJ0aWNhbGx5ISIAdGFibGUtPklzTGF5b3V0TG9ja2VkID09IGZhbHNlICYmICJOZWVkIHRvIGNhbGwgVGFibGVTZXR1cENvbHVtbigpIGJlZm9yZSBmaXJzdCByb3chIgB0YWJsZS0+SXNMYXlvdXRMb2NrZWQgPT0gZmFsc2UgJiYgIk5lZWQgdG8gY2FsbCBjYWxsIFRhYmxlU2V0dXBDb2x1bW4oKSBiZWZvcmUgZmlyc3Qgcm93ISIAc3pfaWR4ID09IHNpemVvZihJbURyYXdJZHgpICYmICJNaXNtYXRjaGVkIHN0cnVjdCBsYXlvdXQhIgBzel92ZXJ0ID09IHNpemVvZihJbURyYXdWZXJ0KSAmJiAiTWlzbWF0Y2hlZCBzdHJ1Y3QgbGF5b3V0ISIAc3pfc3R5bGUgPT0gc2l6ZW9mKEltR3VpU3R5bGUpICYmICJNaXNtYXRjaGVkIHN0cnVjdCBsYXlvdXQhIgBzel9pbyA9PSBzaXplb2YoSW1HdWlJTykgJiYgIk1pc21hdGNoZWQgc3RydWN0IGxheW91dCEiAHN6X3ZlYzQgPT0gc2l6ZW9mKEltVmVjNCkgJiYgIk1pc21hdGNoZWQgc3RydWN0IGxheW91dCEiAHN6X3ZlYzIgPT0gc2l6ZW9mKEltVmVjMikgJiYgIk1pc21hdGNoZWQgc3RydWN0IGxheW91dCEiADAgJiYgIkNhbGxlZCBQdXNoU3R5bGVWYXIoKSBmbG9hdCB2YXJpYW50IGJ1dCB2YXJpYWJsZSBpcyBub3QgYSBmbG9hdCEiACh0YWJsZS0+RGVjbENvbHVtbnNDb3VudCA8IHRhYmxlLT5Db2x1bW5zQ291bnQpICYmICJDYWxsZWQgVGFibGVTZXR1cENvbHVtbigpIHRvbyBtYW55IHRpbWVzISIAKGcuQ3VycmVudFdpbmRvd1N0YWNrLlNpemUgPiAxKSAmJiAiQ2FsbGluZyBFbmQoKSB0b28gbWFueSB0aW1lcyEiAEltR3VpOjpHZXRDdXJyZW50Q29udGV4dCgpICE9IDBMICYmICJNaXNzaW5nIGRlYXIgaW1ndWkgY29udGV4dC4gUmVmZXIgdG8gZXhhbXBsZXMgYXBwISIAKGcuR3JvdXBTdGFjay5TaXplID09IDApICYmICJNaXNzaW5nIEVuZEdyb3VwIGNhbGwhIgAob3V0ZXJfd2luZG93LT5EQy5JdGVtV2lkdGhTdGFjay5TaXplID49IHRhYmxlLT5Ib3N0QmFja3VwSXRlbVdpZHRoU3RhY2tTaXplKSAmJiAiVG9vIG1hbnkgUG9wSXRlbVdpZHRoISIAU2l6ZU9mQmVnaW5Qb3B1cFN0YWNrID09IGcuQmVnaW5Qb3B1cFN0YWNrLlNpemUgJiYgIkJlZ2luUG9wdXAvRW5kUG9wdXAgb3IgQmVnaW5NZW51L0VuZE1lbnUgTWlzbWF0Y2ghIgBTaXplT2ZGb250U3RhY2sgPj0gZy5Gb250U3RhY2suU2l6ZSAmJiAiUHVzaEZvbnQvUG9wRm9udCBNaXNtYXRjaCEiAFNpemVPZkNvbG9yU3RhY2sgPj0gZy5Db2xvclN0YWNrLlNpemUgJiYgIlB1c2hTdHlsZUNvbG9yL1BvcFN0eWxlQ29sb3IgTWlzbWF0Y2ghIgBTaXplT2ZTdHlsZVZhclN0YWNrID49IGcuU3R5bGVWYXJTdGFjay5TaXplICYmICJQdXNoU3R5bGVWYXIvUG9wU3R5bGVWYXIgTWlzbWF0Y2ghIgBTaXplT2ZHcm91cFN0YWNrID09IGcuR3JvdXBTdGFjay5TaXplICYmICJCZWdpbkdyb3VwL0VuZEdyb3VwIE1pc21hdGNoISIAU2l6ZU9mSURTdGFjayA9PSB3aW5kb3ctPklEU3RhY2suU2l6ZSAmJiAiUHVzaElEL1BvcElEIG9yIFRyZWVOb2RlL1RyZWVQb3AgTWlzbWF0Y2ghIgBTaXplT2ZGb2N1c1Njb3BlU3RhY2sgPT0gZy5Gb2N1c1Njb3BlU3RhY2suU2l6ZSAmJiAiUHVzaEZvY3VzU2NvcGUvUG9wRm9jdXNTY29wZSBNaXNtYXRjaCEiAGcuU3R5bGUuQWxwaGEgPj0gMC4wZiAmJiBnLlN0eWxlLkFscGhhIDw9IDEuMGYgJiYgIkludmFsaWQgc3R5bGUgc2V0dGluZyEiAGcuU3R5bGUuQ2lyY2xlU2VnbWVudE1heEVycm9yID4gMC4wZiAmJiAiSW52YWxpZCBzdHlsZSBzZXR0aW5nISIAZy5TdHlsZS5DdXJ2ZVRlc3NlbGxhdGlvblRvbCA+IDAuMGYgJiYgIkludmFsaWQgc3R5bGUgc2V0dGluZyEiAHN0cmNtcCh2ZXJzaW9uLCAiMS44MCIpID09IDAgJiYgIk1pc21hdGNoZWQgdmVyc2lvbiBzdHJpbmchIgB0YWJsZSAhPSAwTCAmJiAiT25seSBjYWxsIEVuZFRhYmxlKCkgaWYgQmVnaW5UYWJsZSgpIHJldHVybnMgdHJ1ZSEiAGcuSU8uRGlzcGxheVNpemUueCA+PSAwLjBmICYmIGcuSU8uRGlzcGxheVNpemUueSA+PSAwLjBmICYmICJJbnZhbGlkIERpc3BsYXlTaXplIHZhbHVlISIAKGcuSU8uRGVsdGFUaW1lID4gMC4wZiB8fCBnLkZyYW1lQ291bnQgPT0gMCkgJiYgIk5lZWQgYSBwb3NpdGl2ZSBEZWx0YVRpbWUhIgBjb2x1bW5zX2NvdW50ID4gMCAmJiBjb2x1bW5zX2NvdW50IDw9IDY0ICYmICJPbmx5IDEuLjY0IGNvbHVtbnMgYWxsb3dlZCEiAChpbm5lcl93aW5kb3ctPklEU3RhY2suYmFjaygpID09IHRhYmxlLT5JRCArIHRhYmxlLT5JbnN0YW5jZUN1cnJlbnQpICYmICJNaXNtYXRjaGluZyBQdXNoSUQvUG9wSUQhIgAwICYmICJDYWxsZWQgUHVzaFN0eWxlVmFyKCkgSW1WZWMyIHZhcmlhbnQgYnV0IHZhcmlhYmxlIGlzIG5vdCBhIEltVmVjMiEiACh0YWJfYmFyICE9IDBMKSAmJiAiTWlzbWF0Y2hlZCBCZWdpblRhYkJhcigpL0VuZFRhYkJhcigpISIAKHRhYl9iYXIpICYmICJOZWVkcyB0byBiZSBjYWxsZWQgYmV0d2VlbiBCZWdpblRhYkJhcigpIGFuZCBFbmRUYWJCYXIoKSEiACh0YWJfYmFyICE9IDBMKSAmJiAiTmVlZHMgdG8gYmUgY2FsbGVkIGJldHdlZW4gQmVnaW5UYWJCYXIoKSBhbmQgRW5kVGFiQmFyKCkhIgB0YWJsZSAhPSAwTCAmJiAiTmVlZCB0byBjYWxsIFRhYmxlSGVhZGVyc1JvdygpIGFmdGVyIEJlZ2luVGFibGUoKSEiAHRhYmxlICE9IDBMICYmICJOZWVkIHRvIGNhbGwgVGFibGVIZWFkZXIoKSBhZnRlciBCZWdpblRhYmxlKCkhIgB0YWJsZSAhPSAwTCAmJiAiTmVlZCB0byBjYWxsIFRhYmxlU2V0dXBDb2x1bW4oKSBhZnRlciBCZWdpblRhYmxlKCkhIgAoZy5XaXRoaW5FbmRDaGlsZCkgJiYgIk11c3QgY2FsbCBFbmRDaGlsZCgpIGFuZCBub3QgRW5kKCkhIgBCZWxvdyB3ZSBhcmUgZGlzcGxheWluZyB0aGUgZm9udCB0ZXh0dXJlICh3aGljaCBpcyB0aGUgb25seSB0ZXh0dXJlIHdlIGhhdmUgYWNjZXNzIHRvIGluIHRoaXMgZGVtbykuIFVzZSB0aGUgJ0ltVGV4dHVyZUlEJyB0eXBlIGFzIHN0b3JhZ2UgdG8gcGFzcyBwb2ludGVycyBvciBpZGVudGlmaWVyIHRvIHlvdXIgb3duIHRleHR1cmUgZGF0YS4gSG92ZXIgdGhlIHRleHR1cmUgZm9yIGEgem9vbWVkIHZpZXchAENsaWNrIHRvIGJyZWFrIGluIGRlYnVnZ2VyIQBQcmVzc2VkIFVwIQBIZWxsbyEAUHJlc3NlZCBEb3duIQBCZWxvdyB3ZSBhcmUgdGVzdGluZyBhZGRpbmcgbWVudSBpdGVtcyB0byBhIHJlZ3VsYXIgd2luZG93LiBJdCdzIHJhdGhlciB1bnVzdWFsIGJ1dCBzaG91bGQgd29yayEAV2VsY29tZSB0byBEZWFyIEltR3VpIQBTZWUgdGhlIFNob3dEZW1vV2luZG93KCkgY29kZSBpbiBpbWd1aV9kZW1vLmNwcC4gPC0geW91IGFyZSBoZXJlIQBkaXNwbGF5IHZlcnkgaW1wb3J0YW50IG1lc3NhZ2UgaGVyZSEATGluZSAxIGhlbGxvCkxpbmUgMiBjbGlwIG1lIQBUaGFua3MgZm9yIGNsaWNraW5nIG1lIQBIZWxsbyBmcm9tIFN0YWNrZWQgVGhlIFNlY29uZCEASGVsbG8sIHdvcmxkIQBXYXJuaW5nOiBvd25pbmcgV2luZG93IGlzIGluYWN0aXZlLiBUaGlzIERyYXdMaXN0IGlzIG5vdCBiZWluZyByZW5kZXJlZCEAVGhpcyBpcyB0aGUgJXMgdGFiIQBDb2x1bW5zKCkgaXMgYW4gb2xkIEFQSSEgUHJlZmVyIHVzaW5nIHRoZSBtb3JlIGZsZXhpYmxlIGFuZCBwb3dlcmZ1bCBCZWdpblRhYmxlKCkgQVBJIQBNWSBDVVNUT00gQ09MT1IgUElDS0VSIFdJVEggQU4gQU1BWklORyBQQUxFVFRFIQBDaGlsZE1lbnUgAE5vU2F2ZWRTZXR0aW5ncyAAUG9wdXAgAFRvb2x0aXAgAE1vZGFsIABXaWR0aCAAV2lkdGhTdHJldGNoIABOb1Jlc2l6ZSAAQ2hpbGQgAFdpZHRoRml4ZWQgAEFMVCAAU0hJRlQgAFNVUEVSIABDVFJMIABMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0LCBzZWQgZG8gZWl1c21vZCB0ZW1wb3IgaW5jaWRpZHVudCB1dCBsYWJvcmUgZXQgZG9sb3JlIG1hZ25hIGFsaXF1YS4gACMgACAgICAgAFRPRE86IEZvbnREYXRhICV6dSAlenUKACUzZDogJXMKAFRPRE86ICVzCgAtICVzCgAjICVzCgAlaSBUaGUgcXVpY2sgYnJvd24gZm94IGp1bXBzIG92ZXIgdGhlIGxhenkgZG9nCgBSZWZTY2FsZT0lZwoAQ29sbGFwc2VkPSVkCgBQb3M9JWQsJWQKAFNpemU9JWQsJWQKAElzV2luZG93Rm9jdXNlZCgpID0gJWQKSXNXaW5kb3dGb2N1c2VkKF9DaGlsZFdpbmRvd3MpID0gJWQKSXNXaW5kb3dGb2N1c2VkKF9DaGlsZFdpbmRvd3N8X1Jvb3RXaW5kb3cpID0gJWQKSXNXaW5kb3dGb2N1c2VkKF9Sb290V2luZG93KSA9ICVkCklzV2luZG93Rm9jdXNlZChfQW55V2luZG93KSA9ICVkCgBJc1dpbmRvd0hvdmVyZWQoKSA9ICVkCklzV2luZG93SG92ZXJlZChfQWxsb3dXaGVuQmxvY2tlZEJ5UG9wdXApID0gJWQKSXNXaW5kb3dIb3ZlcmVkKF9BbGxvd1doZW5CbG9ja2VkQnlBY3RpdmVJdGVtKSA9ICVkCklzV2luZG93SG92ZXJlZChfQ2hpbGRXaW5kb3dzKSA9ICVkCklzV2luZG93SG92ZXJlZChfQ2hpbGRXaW5kb3dzfF9Sb290V2luZG93KSA9ICVkCklzV2luZG93SG92ZXJlZChfQ2hpbGRXaW5kb3dzfF9BbGxvd1doZW5CbG9ja2VkQnlQb3B1cCkgPSAlZApJc1dpbmRvd0hvdmVyZWQoX1Jvb3RXaW5kb3cpID0gJWQKSXNXaW5kb3dIb3ZlcmVkKF9BbnlXaW5kb3cpID0gJWQKAApgYGAKAFslc11bJXNdCgBbJXNdWzB4JTA4WCwlZF0KACVzICUwNGQ6IHBvcyAoJTguMmYsJTguMmYpLCB1diAoJS42ZiwlLjZmKSwgY29sICUwOFgKAEltVmVjNCogY29sb3JzID0gSW1HdWk6OkdldFN0eWxlKCkuQ29sb3JzOwoAY29sb3JzW0ltR3VpQ29sXyVzXSUqcz0gSW1WZWM0KCUuMmZmLCAlLjJmZiwgJS4yZmYsICUuMmZmKTsKAFdoaWxlIGlucHV0aW5nIHRleHQ6CgBQb3NzaWJsZSBtYXRjaGVzOgoAUmVmZXIgdG8gdGhlICJDb21ibyIgc2VjdGlvbiBiZWxvdyBmb3IgYW4gZXhwbGFuYXRpb24gb2YgdGhlIGZ1bGwgQmVnaW5Db21iby9FbmRDb21ibyBBUEksIGFuZCBkZW1vbnN0cmF0aW9uIG9mIHZhcmlvdXMgZmxhZ3MuCgBEaXNwbGF5IGFsbCBjaGFyYWN0ZXJzIGFzICcqJy4KRGlzYWJsZSBjbGlwYm9hcmQgY3V0IGFuZCBjb3B5LgpEaXNhYmxlIGxvZ2dpbmcuCgBDbGljayBvbiB0aGUgY29sb3Igc3F1YXJlIHRvIG9wZW4gYSBjb2xvciBwaWNrZXIuCkNsaWNrIGFuZCBob2xkIHRvIHVzZSBkcmFnIGFuZCBkcm9wLgpSaWdodC1jbGljayBvbiB0aGUgY29sb3Igc3F1YXJlIHRv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ANA7AQDQOwEA0DsBAHCAAQBEYXJrAExpZ2h0AENsYXNzaWMAAE5vbmUATGVmdABSaWdodAAATGVmdABSaWdodAAAVG8gQ2xpcGJvYXJkAFRvIFRUWQAAAAAuLi0gICAgICAgICAtWFhYWFhYWC0gICAgWCAgICAtICAgICAgICAgICBYICAgICAgICAgICAtWFhYWFhYWCAgICAgICAgICAtICAgICAgICAgIFhYWFhYWFgtICAgICBYWCAgICAgICAgICAuLi0gICAgICAgICAtWC4uLi4uWC0gICBYLlggICAtICAgICAgICAgIFguWCAgICAgICAgICAtWC4uLi4uWCAgICAgICAgICAtICAgICAgICAgIFguLi4uLlgtICAgIFguLlggICAgICAgICAtLS0gICAgICAgICAtWFhYLlhYWC0gIFguLi5YICAtICAgICAgICAgWC4uLlggICAgICAgICAtWC4uLi5YICAgICAgICAgICAtICAgICAgICAgICBYLi4uLlgtICAgIFguLlggICAgICAgICBYICAgICAgICAgICAtICBYLlggIC0gWC4uLi4uWCAtICAgICAgICBYLi4uLi5YICAgICAgICAtWC4uLlggICAgICAgICAgICAtICAgICAgICAgICAgWC4uLlgtICAgIFguLlggICAgICAgICBYWCAgICAgICAgICAtICBYLlggIC1YLi4uLi4uLlgtICAgICAgIFguLi4uLi4uWCAgICAgICAtWC4uWC5YICAgICAgICAgICAtICAgICAgICAgICBYLlguLlgtICAgIFguLlggICAgICAgICBYLlggICAgICAgICAtICBYLlggIC1YWFhYLlhYWFgtICAgICAgIFhYWFguWFhYWCAgICAgICAtWC5YIFguWCAgICAgICAgICAtICAgICAgICAgIFguWCBYLlgtICAgIFguLlhYWCAgICAgICBYLi5YICAgICAgICAtICBYLlggIC0gICBYLlggICAtICAgICAgICAgIFguWCAgICAgICAgICAtWFggICBYLlggICAgICAgICAtICAgICAgICAgWC5YICAgWFgtICAgIFguLlguLlhYWCAgICBYLi4uWCAgICAgICAtICBYLlggIC0gICBYLlggICAtICAgIFhYICAgIFguWCAgICBYWCAgICAtICAgICAgWC5YICAgICAgICAtICAgICAgICBYLlggICAgICAtICAgIFguLlguLlguLlhYICBYLi4uLlggICAgICAtICBYLlggIC0gICBYLlggICAtICAgWC5YICAgIFguWCAgICBYLlggICAtICAgICAgIFguWCAgICAgICAtICAgICAgIFguWCAgICAgICAtICAgIFguLlguLlguLlguWCBYLi4uLi5YICAgICAtICBYLlggIC0gICBYLlggICAtICBYLi5YICAgIFguWCAgICBYLi5YICAtICAgICAgICBYLlggICAgICAtICAgICAgWC5YICAgICAgICAtWFhYIFguLlguLlguLlguLlhYLi4uLi4uWCAgICAtICBYLlggIC0gICBYLlggICAtIFguLi5YWFhYWFguWFhYWFhYLi4uWCAtICAgICAgICAgWC5YICAgWFgtWFggICBYLlggICAgICAgICAtWC4uWFguLi4uLi4uLlguLlhYLi4uLi4uLlggICAtICBYLlggIC0gICBYLlggICAtWC4uLi4uLi4uLi4uLi4uLi4uLi4uLlgtICAgICAgICAgIFguWCBYLlgtWC5YIFguWCAgICAgICAgICAtWC4uLlguLi4uLi4uLi4uLlhYLi4uLi4uLi5YICAtICBYLlggIC0gICBYLlggICAtIFguLi5YWFhYWFguWFhYWFhYLi4uWCAtICAgICAgICAgICBYLlguLlgtWC4uWC5YICAgICAgICAgICAtIFguLi4uLi4uLi4uLi4uLlhYLi4uLi4uLi4uWCAtWFhYLlhYWC0gICBYLlggICAtICBYLi5YICAgIFguWCAgICBYLi5YICAtICAgICAgICAgICAgWC4uLlgtWC4uLlggICAgICAgICAgICAtICBYLi4uLi4uLi4uLi4uLlhYLi4uLi4uLi4uLlgtWC4uLi4uWC0gICBYLlggICAtICAgWC5YICAgIFguWCAgICBYLlggICAtICAgICAgICAgICBYLi4uLlgtWC4uLi5YICAgICAgICAgICAtICBYLi4uLi4uLi4uLi4uLlhYLi4uLi4uWFhYWFgtWFhYWFhYWC0gICBYLlggICAtICAgIFhYICAgIFguWCAgICBYWCAgICAtICAgICAgICAgIFguLi4uLlgtWC4uLi4uWCAgICAgICAgICAtICAgWC4uLi4uLi4uLi4uLlhYLi4uWC4uWCAgICAtLS0tLS0tLS0gICBYLlggICAtICAgICAgICAgIFguWCAgICAgICAgICAtICAgICAgICAgIFhYWFhYWFgtWFhYWFhYWCAgICAgICAgICAtICAgWC4uLi4uLi4uLi4uWCBYLi5YIFguLlggICAtICAgICAgIC1YWFhYLlhYWFgtICAgICAgIFhYWFguWFhYWCAgICAgICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICAgIFguLi4uLi4uLi4uWCBYLlggIFguLlggICAtICAgICAgIC1YLi4uLi4uLlgtICAgICAgIFguLi4uLi4uWCAgICAgICAtICAgIFhYICAgICAgICAgICBYWCAgICAtICAgICAgICAgICAtICAgIFguLi4uLi4uLi4uWCBYWCAgICBYLi5YICAtICAgICAgIC0gWC4uLi4uWCAtICAgICAgICBYLi4uLi5YICAgICAgICAtICAgWC5YICAgICAgICAgICBYLlggICAtICAgICAgICAgICAtICAgICBYLi4uLi4uLi5YICAgICAgICBYLi5YICAgICAgICAgIC0gIFguLi5YICAtICAgICAgICAgWC4uLlggICAgICAgICAtICBYLi5YICAgICAgICAgICBYLi5YICAtICAgICAgICAgICAtICAgICBYLi4uLi4uLi5YICAgICAgICAgWFggICAgICAgICAgIC0gICBYLlggICAtICAgICAgICAgIFguWCAgICAgICAgICAtIFguLi5YWFhYWFhYWFhYWFhYLi4uWCAtICAgICAgICAgICAtICAgICBYWFhYWFhYWFhYICAtLS0tLS0tLS0tLS0gICAgICAgIC0gICAgWCAgICAtICAgICAgICAgICBYICAgICAgICAgICAtWC4uLi4uLi4uLi4uLi4uLi4uLi4uLlgtICAgICAgICAgICAtLS0tLS0tLS0tLS0tLS0tLS0gICAgICAgICAgICAgICAgICAgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFguLi5YWFhYWFhYWFhYWFhYLi4uWCAtICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtICBYLi5YICAgICAgICAgICBYLi5YICAtICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtICAgWC5YICAgICAgICAgICBYLlggICAtICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtICAgIFhYICAgICAgICAgICBYWCAgICAtICAgICAgICAgICAgICAgICAgICAgICAgICAgICAAAAAAAAAAAAAAAACvjQAAqIwAANKLAACXiwAAY4oAACaKAAAdigAA+okAAAiJAADmiAAA3ogAAAAAAAB4YwAA30cAAGwzAADHMwAAy2gAAPJ/AABtBAAAakcAABI7AABLbAAAwWgAAHQEAAAXPgAAAAAAAAAAAAAAAAAAr40AAKiMAADSiwAAl4sAAGOKAAAmigAAHYoAAPqJAAALiQAA5ogAAOGIAACOhwAAcocAAM+GAABhYWFhAGJiYmIAY2NjYwBkZGRkAGVlZWUAAAAAAAAAAAAAAAAAAAAAM2wAADgVAADrBAAAIj4AAFNpbgBTYXcAAEF1dG8vQ3VycmVudABOb25lAFJHQiBPbmx5AEhTViBPbmx5AEhleCBPbmx5AABBdXRvL0N1cnJlbnQASHVlIGJhciArIFNWIHJlY3QASHVlIHdoZWVsICsgU1YgdHJpYW5nbGUAAACqEAAAED4AAFbzAAAUCAAA1B4AAAwQAAC2HgAAOZcAALSVAAAnQwAAY20AAG76AADFOwAAIwgAAAAAAAAAAAAAy2gAAPJ/AABtBAAAakcAAK+NAACojAAA0osAAJeLAAAAAAA/zcxMPs3MTD+amRk/AACAPgAAAAAAAAAAAAAAAEY5AABZDwEApzMAAFUPAQDGQgAAAAAAAAAAAAAAAAAA0hsAAFkPAQCnMwAAVQ8BAGAbAAAAAAAAAAAAAAAAAAB5QwAAxkYAAHVFAAC+RgAAaUkAAFNob3cgd2lkdGgAU2hvcnQgVGV4dABMb25nIFRleHQAQnV0dG9uAEZpbGwgQnV0dG9uAElucHV0VGV4dAAATm9uZQBSZWQAR3JhZGllbnQAAFJvd0JnMABSb3dCZzEAAE5vbmUAQmx1ZQAAAEEVAABQNQAA/////wEAAAADAAAA63wAAFA1AAD/////BAAAAAIAAAB7KwAAUDUAAP////8GAAAAAwAAAKBHAAD7aAAAAAQAAP//////////Pw4AAPBoAAB44AEA//////////8zDgAA8GgAAED1BgD//////////zRMAAAHaQAAeBkDAP//////////LEwAAAdpAAD4GQMA//////////9BTAAAB2kAAPgaAwD//////////wAAAAAAAAAAAAAAAPJ/AADLaAAAbQQAABc+AACFGQAAdAQAABI7AABqRwAAS2wAAMFoAAB/BAAAuEIAAK0RAAD7NQAARhUAAAAAAACqEAAAED4AAG49AABjPQAAxmoAAAjxAAAAAAAAAAAAAAAAAABbGQAAhtMAAAAgAADLGQAAIsoAAABAAADUZwAAYtgAAABgAAABOQAALLkAAACAAACyZwAAFrIAAA5nAADCOgAA7mwAACVlAACpOgAAv2wAAAAAAAAAAAAAAAAAAIh9AACBfQAAen0AAM04AADEOAAAuzgAAKBLAADgcAAA7gkAAMIQAAC1RAAAUIYAAGaEAABbhAAAR4oAAGxwAABVcgAAWWVzAE5vAE1heWJlAAAAABw7AADLPAAAMTIAAIp1AAC3HwAAAW0AAPl/AABpYQAANjkAAIkYAABTaW5nbGUgY2FsbCB0byBUZXh0VW5mb3JtYXR0ZWQoKQBNdWx0aXBsZSBjYWxscyB0byBUZXh0KCksIGNsaXBwZWQATXVsdGlwbGUgY2FsbHMgdG8gVGV4dCgpLCBub3QgY2xpcHBlZCAoc2xvdykAAAAAACcFAAAQBQAAa54AABmeAAAKngAAr2MAAEMHAQBOU3QzX18yMTJiYXNpY19zdHJpbmdJaE5TXzExY2hhcl90cmFpdHNJaEVFTlNfOWFsbG9jYXRvckloRUVFRQAAgIEBAIxrAQAAAAAAAQAAAEg8AQAAAAAATlN0M19fMjEyYmFzaWNfc3RyaW5nSXdOU18xMWNoYXJfdHJhaXRzSXdFRU5TXzlhbGxvY2F0b3JJd0VFRUUAAICBAQDkawEAAAAAAAEAAABIPAEAAAAA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AAAAAAAAABIAAAASEhIAAAAAAAAJAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALAAAAAAAAAAAAAAAKAAAAAAoAAAAACQsAAAAAAAsAAAsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAAAAAAAAAAAAADAAAAAAMAAAAAAkMAAAAAAAMAAAMAAAwMTIzNDU2Nzg5QUJDREVGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAArwMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA//////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA0XSeAFedvSqAcFIP//8+JwoAAABkAAAA6AMAABAnAACghgEAQEIPAICWmAAA4fUFGAAAADUAAABxAAAAa////877//+Sv///AAAAAAAAAAD/////////////////////////////////////////////////////////////////AAECAwQFBgcICf////////8KCwwNDg8QERITFBUWFxgZGhscHR4fICEiI////////woLDA0ODxAREhMUFRYXGBkaGxwdHh8gISIj/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////wABAgQHAwYFAAAAAAAAAAIAAMADAADABAAAwAUAAMAGAADABwAAwAgAAMAJAADACgAAwAsAAMAMAADADQAAwA4AAMAPAADAEAAAwBEAAMASAADAEwAAwBQAAMAVAADAFgAAwBcAAMAYAADAGQAAwBoAAMAbAADAHAAAwB0AAMAeAADAHwAAwAAAALMBAADDAgAAwwMAAMMEAADDBQAAwwYAAMMHAADDCAAAwwkAAMMKAADDCwAAwwwAAMMNAADTDgAAww8AAMMAAAy7AQAMwwIADMMDAAzDBAAM0wAAAADQfQEAtAMAALUDAAC2AwAAU3Q5ZXhjZXB0aW9uAAAA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ayBjbXB4Y2hnOGIgZWF4CgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAHBhc3N3b3JkMTIzAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAQEBAQEBAABDAAAAAQAAAAAAAAAAAAAAAAAAAJqZGT/NzMw9AACAPwAAAD8fhWs/zczMPc3MTD5GAAAAAACAPwEBAQEBAQAAAAAAPzIAAAAAAAA/MgAAAAAAIEEAALRCZAAAAOgDAAB///9///8AAP//////////AAAAAP////////////////////9t5/s9AAAAAPJhkTIA+fVAAQAAAAAAAAAAAAAAAAAAAM3MzD3NzEw+mpmZPq5H4T4BAAAABQAAAGQAAAD/AAAAAAAAAJqZGT8zM7M+ZmZmPzMzMz/NzEw+AAAAAAAAAADNzEw+zcxMP83MzD4AAIA+AACAPwAAAADNzEw+AAAAAM3MzD4zMzM/AAAAAAAAAD//BQAA2G4AACwEAADkfwAAiQQAAMxvAADFRwAAmGYAACA8AAAAAAAAAAAAAAAAAAAJZwAAvToAANtsAAAnMQAAf2AAAAEAAAAAAAAAAAAAAAAAgD8AAAA/AAAAAAAAgD8BAAAAAQAAAAAAAAAAAAAAVGhpcyB3aWRnZXQgaXMgb25seSBoZXJlIHRvIGJlIGFibGUgdG8gdGFiLW91dCBvZiB0aGUgd2lkZ2V0cyBhYm92ZS4AAQAAAACAPwAAAEAAAEBA/////wAAAAAAAAAAAAAAAAEAAAACAAAAAwAAADIAAAABAAAAAABIQwcAAAABAQEBAQAAAAAAlkP/////AQAAAAAAAAAAAAA/AAAAAExhYmVsMQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAM3MzD4zMzM/AAAAAAAAAD/ABwAAIYcAACEnAAAHBwAAAAYAAMAHAAABAAAAYAcAAAAgAAAAQAAAAGAAAACAAADBBwACAwAAAEcHAAJHBwADAQAAAAEAAABghQADAAB6RAIAAAAAAAAAAQAAAIAXAADhJwEAQAAAAAEAAAABAAAAAQAAAKcHAABPDwAGzy8ABwUAAAABAAAAAQAAAB4AAAABAQAA/////wEBAAAEAAAAAACAPwAAgD8AAAAAAAAAAGhlbGxvAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY2xpY2sgb24gYSBidXR0b24gdG8gc2V0IGZvY3VzAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAPwEAAAAAAAAAAAAAAAAAAAAAAIA/+Q9JQAAAyEIAwHlEAAAAAAAAAAAKAAAACgAAAAAAEEIAAEBABgAAAAwAAAAIAAAAAQEBAQUAAAAAAAAAAAAAAKoDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKsDAACsAwAAeN4BAAAEAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAr/////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAODHAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoOIBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACw5FEA';
  if (!isDataURI(wasmBinaryFile)) {
    wasmBinaryFile = locateFile(wasmBinaryFile);
  }

function getBinary(file) {
  try {
    if (file == wasmBinaryFile && wasmBinary) {
      return new Uint8Array(wasmBinary);
    }
    var binary = tryParseAsDataURI(file);
    if (binary) {
      return binary;
    }
    if (readBinary) {
      return readBinary(file);
    } else {
      throw "both async and sync fetching of the wasm failed";
    }
  }
  catch (err) {
    abort(err);
  }
}

function getBinaryPromise() {
  // If we don't have the binary yet, try to to load it asynchronously.
  // Fetch has some additional restrictions over XHR, like it can't be used on a file:// url.
  // See https://github.com/github/fetch/pull/92#issuecomment-140665932
  // Cordova or Electron apps are typically loaded from a file:// url.
  // So use fetch if it is available and the url is not a file, otherwise fall back to XHR.
  if (!wasmBinary && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER)) {
    if (typeof fetch === 'function'
    ) {
      return fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function(response) {
        if (!response['ok']) {
          throw "failed to load wasm binary file at '" + wasmBinaryFile + "'";
        }
        return response['arrayBuffer']();
      }).catch(function () {
          return getBinary(wasmBinaryFile);
      });
    }
  }

  // Otherwise, getBinary should be able to get it synchronously
  return Promise.resolve().then(function() { return getBinary(wasmBinaryFile); });
}

// Create the wasm instance.
// Receives the wasm imports, returns the exports.
function createWasm() {
  // prepare imports
  var info = {
    'env': asmLibraryArg,
    'wasi_snapshot_preview1': asmLibraryArg,
  };
  // Load the wasm module and create an instance of using native support in the JS engine.
  // handle a generated wasm instance, receiving its exports and
  // performing other necessary setup
  /** @param {WebAssembly.Module=} module*/
  function receiveInstance(instance, module) {
    var exports = instance.exports;

    Module['asm'] = exports;

    wasmMemory = Module['asm']['memory'];
    assert(wasmMemory, "memory not found in wasm exports");
    // This assertion doesn't hold when emscripten is run in --post-link
    // mode.
    // TODO(sbc): Read INITIAL_MEMORY out of the wasm file in post-link mode.
    //assert(wasmMemory.buffer.byteLength === 16777216);
    updateGlobalBufferAndViews(wasmMemory.buffer);

    wasmTable = Module['asm']['__indirect_function_table'];
    assert(wasmTable, "table not found in wasm exports");

    addOnInit(Module['asm']['__wasm_call_ctors']);

    removeRunDependency('wasm-instantiate');
  }
  // we can't run yet (except in a pthread, where we have a custom sync instantiator)
  addRunDependency('wasm-instantiate');

  // Prefer streaming instantiation if available.
  // Async compilation can be confusing when an error on the page overwrites Module
  // (for example, if the order of elements is wrong, and the one defining Module is
  // later), so we save Module and check it later.
  var trueModule = Module;
  function receiveInstantiationResult(result) {
    // 'result' is a ResultObject object which has both the module and instance.
    // receiveInstance() will swap in the exports (to Module.asm) so they can be called
    assert(Module === trueModule, 'the Module object should not be replaced during async compilation - perhaps the order of HTML elements is wrong?');
    trueModule = null;
    // TODO: Due to Closure regression https://github.com/google/closure-compiler/issues/3193, the above line no longer optimizes out down to the following line.
    // When the regression is fixed, can restore the above USE_PTHREADS-enabled path.
    receiveInstance(result['instance']);
  }

  function instantiateArrayBuffer(receiver) {
    return getBinaryPromise().then(function(binary) {
      var result = WebAssembly.instantiate(binary, info);
      return result;
    }).then(receiver, function(reason) {
      err('failed to asynchronously prepare wasm: ' + reason);

      // Warn on some common problems.
      if (isFileURI(wasmBinaryFile)) {
        err('warning: Loading from a file URI (' + wasmBinaryFile + ') is not supported in most browsers. See https://emscripten.org/docs/getting_started/FAQ.html#how-do-i-run-a-local-webserver-for-testing-why-does-my-program-stall-in-downloading-or-preparing');
      }
      abort(reason);
    });
  }

  function instantiateAsync() {
    if (!wasmBinary &&
        typeof WebAssembly.instantiateStreaming === 'function' &&
        !isDataURI(wasmBinaryFile) &&
        typeof fetch === 'function') {
      return fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function (response) {
        var result = WebAssembly.instantiateStreaming(response, info);

        return result.then(
          receiveInstantiationResult,
          function(reason) {
            // We expect the most common failure cause to be a bad MIME type for the binary,
            // in which case falling back to ArrayBuffer instantiation should work.
            err('wasm streaming compile failed: ' + reason);
            err('falling back to ArrayBuffer instantiation');
            return instantiateArrayBuffer(receiveInstantiationResult);
          });
      });
    } else {
      return instantiateArrayBuffer(receiveInstantiationResult);
    }
  }

  // User shell pages can write their own Module.instantiateWasm = function(imports, successCallback) callback
  // to manually instantiate the Wasm module themselves. This allows pages to run the instantiation parallel
  // to any other async startup actions they are performing.
  if (Module['instantiateWasm']) {
    try {
      var exports = Module['instantiateWasm'](info, receiveInstance);
      return exports;
    } catch(e) {
      err('Module.instantiateWasm callback failed with error: ' + e);
      return false;
    }
  }

  // If instantiation fails, reject the module ready promise.
  instantiateAsync().catch(readyPromiseReject);
  return {}; // no exports yet; we'll fill them in later
}

// Globals used by JS i64 conversions (see makeSetValue)
var tempDouble;
var tempI64;

// === Body ===

var ASM_CONSTS = {
  
};






  function callRuntimeCallbacks(callbacks) {
      while (callbacks.length > 0) {
        var callback = callbacks.shift();
        if (typeof callback == 'function') {
          callback(Module); // Pass the module as the first argument.
          continue;
        }
        var func = callback.func;
        if (typeof func === 'number') {
          if (callback.arg === undefined) {
            wasmTable.get(func)();
          } else {
            wasmTable.get(func)(callback.arg);
          }
        } else {
          func(callback.arg === undefined ? null : callback.arg);
        }
      }
    }

  function demangle(func) {
      warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
      return func;
    }

  function demangleAll(text) {
      var regex =
        /\b_Z[\w\d_]+/g;
      return text.replace(regex,
        function(x) {
          var y = demangle(x);
          return x === y ? x : (y + ' [' + x + ']');
        });
    }

  function jsStackTrace() {
      var error = new Error();
      if (!error.stack) {
        // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
        // so try that as a special-case.
        try {
          throw new Error();
        } catch(e) {
          error = e;
        }
        if (!error.stack) {
          return '(no stack trace available)';
        }
      }
      return error.stack.toString();
    }

  function stackTrace() {
      var js = jsStackTrace();
      if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
      return demangleAll(js);
    }

  function ___assert_fail(condition, filename, line, func) {
      abort('Assertion failed: ' + UTF8ToString(condition) + ', at: ' + [filename ? UTF8ToString(filename) : 'unknown filename', line, func ? UTF8ToString(func) : 'unknown function']);
    }

  function ___cxa_allocate_exception(size) {
      // Thrown object is prepended by exception metadata block
      return _malloc(size + 16) + 16;
    }

  function _atexit(func, arg) {
      __ATEXIT__.unshift({ func: func, arg: arg });
    }
  function ___cxa_atexit(a0,a1
  ) {
  return _atexit(a0,a1);
  }

  function ExceptionInfo(excPtr) {
      this.excPtr = excPtr;
      this.ptr = excPtr - 16;
  
      this.set_type = function(type) {
        HEAP32[(((this.ptr)+(4))>>2)] = type;
      };
  
      this.get_type = function() {
        return HEAP32[(((this.ptr)+(4))>>2)];
      };
  
      this.set_destructor = function(destructor) {
        HEAP32[(((this.ptr)+(8))>>2)] = destructor;
      };
  
      this.get_destructor = function() {
        return HEAP32[(((this.ptr)+(8))>>2)];
      };
  
      this.set_refcount = function(refcount) {
        HEAP32[((this.ptr)>>2)] = refcount;
      };
  
      this.set_caught = function (caught) {
        caught = caught ? 1 : 0;
        HEAP8[(((this.ptr)+(12))>>0)] = caught;
      };
  
      this.get_caught = function () {
        return HEAP8[(((this.ptr)+(12))>>0)] != 0;
      };
  
      this.set_rethrown = function (rethrown) {
        rethrown = rethrown ? 1 : 0;
        HEAP8[(((this.ptr)+(13))>>0)] = rethrown;
      };
  
      this.get_rethrown = function () {
        return HEAP8[(((this.ptr)+(13))>>0)] != 0;
      };
  
      // Initialize native structure fields. Should be called once after allocated.
      this.init = function(type, destructor) {
        this.set_type(type);
        this.set_destructor(destructor);
        this.set_refcount(0);
        this.set_caught(false);
        this.set_rethrown(false);
      }
  
      this.add_ref = function() {
        var value = HEAP32[((this.ptr)>>2)];
        HEAP32[((this.ptr)>>2)] = value + 1;
      };
  
      // Returns true if last reference released.
      this.release_ref = function() {
        var prev = HEAP32[((this.ptr)>>2)];
        HEAP32[((this.ptr)>>2)] = prev - 1;
        assert(prev > 0);
        return prev === 1;
      };
    }
  
  var exceptionLast = 0;
  
  var uncaughtExceptionCount = 0;
  function ___cxa_throw(ptr, type, destructor) {
      var info = new ExceptionInfo(ptr);
      // Initialize ExceptionInfo content after it was allocated in __cxa_allocate_exception.
      info.init(type, destructor);
      exceptionLast = ptr;
      uncaughtExceptionCount++;
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s NO_DISABLE_EXCEPTION_CATCHING or -s EXCEPTION_CATCHING_ALLOWED=[..] to catch.";
    }

  function setErrNo(value) {
      HEAP32[((___errno_location())>>2)] = value;
      return value;
    }
  
  var SYSCALLS = {mappings:{},buffers:[null,[],[]],printChar:function(stream, curr) {
        var buffer = SYSCALLS.buffers[stream];
        assert(buffer);
        if (curr === 0 || curr === 10) {
          (stream === 1 ? out : err)(UTF8ArrayToString(buffer, 0));
          buffer.length = 0;
        } else {
          buffer.push(curr);
        }
      },varargs:undefined,get:function() {
        assert(SYSCALLS.varargs != undefined);
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function(ptr) {
        var ret = UTF8ToString(ptr);
        return ret;
      },get64:function(low, high) {
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      }};
  function ___sys_fcntl64(fd, cmd, varargs) {SYSCALLS.varargs = varargs;
  
      return 0;
    }

  function ___sys_ioctl(fd, op, varargs) {SYSCALLS.varargs = varargs;
  
      return 0;
    }

  function ___sys_open(path, flags, varargs) {SYSCALLS.varargs = varargs;
  
  abort('it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM');
  }

  function __embind_register_bigint(primitiveType, name, size, minRange, maxRange) {}

  function getShiftFromSize(size) {
      switch (size) {
          case 1: return 0;
          case 2: return 1;
          case 4: return 2;
          case 8: return 3;
          default:
              throw new TypeError('Unknown type size: ' + size);
      }
    }
  
  function embind_init_charCodes() {
      var codes = new Array(256);
      for (var i = 0; i < 256; ++i) {
          codes[i] = String.fromCharCode(i);
      }
      embind_charCodes = codes;
    }
  var embind_charCodes = undefined;
  function readLatin1String(ptr) {
      var ret = "";
      var c = ptr;
      while (HEAPU8[c]) {
          ret += embind_charCodes[HEAPU8[c++]];
      }
      return ret;
    }
  
  var awaitingDependencies = {};
  
  var registeredTypes = {};
  
  var typeDependencies = {};
  
  var char_0 = 48;
  
  var char_9 = 57;
  function makeLegalFunctionName(name) {
      if (undefined === name) {
          return '_unknown';
      }
      name = name.replace(/[^a-zA-Z0-9_]/g, '$');
      var f = name.charCodeAt(0);
      if (f >= char_0 && f <= char_9) {
          return '_' + name;
      } else {
          return name;
      }
    }
  function createNamedFunction(name, body) {
      name = makeLegalFunctionName(name);
      /*jshint evil:true*/
      return new Function(
          "body",
          "return function " + name + "() {\n" +
          "    \"use strict\";" +
          "    return body.apply(this, arguments);\n" +
          "};\n"
      )(body);
    }
  function extendError(baseErrorType, errorName) {
      var errorClass = createNamedFunction(errorName, function(message) {
          this.name = errorName;
          this.message = message;
  
          var stack = (new Error(message)).stack;
          if (stack !== undefined) {
              this.stack = this.toString() + '\n' +
                  stack.replace(/^Error(:[^\n]*)?\n/, '');
          }
      });
      errorClass.prototype = Object.create(baseErrorType.prototype);
      errorClass.prototype.constructor = errorClass;
      errorClass.prototype.toString = function() {
          if (this.message === undefined) {
              return this.name;
          } else {
              return this.name + ': ' + this.message;
          }
      };
  
      return errorClass;
    }
  var BindingError = undefined;
  function throwBindingError(message) {
      throw new BindingError(message);
    }
  
  var InternalError = undefined;
  function throwInternalError(message) {
      throw new InternalError(message);
    }
  function whenDependentTypesAreResolved(myTypes, dependentTypes, getTypeConverters) {
      myTypes.forEach(function(type) {
          typeDependencies[type] = dependentTypes;
      });
  
      function onComplete(typeConverters) {
          var myTypeConverters = getTypeConverters(typeConverters);
          if (myTypeConverters.length !== myTypes.length) {
              throwInternalError('Mismatched type converter count');
          }
          for (var i = 0; i < myTypes.length; ++i) {
              registerType(myTypes[i], myTypeConverters[i]);
          }
      }
  
      var typeConverters = new Array(dependentTypes.length);
      var unregisteredTypes = [];
      var registered = 0;
      dependentTypes.forEach(function(dt, i) {
          if (registeredTypes.hasOwnProperty(dt)) {
              typeConverters[i] = registeredTypes[dt];
          } else {
              unregisteredTypes.push(dt);
              if (!awaitingDependencies.hasOwnProperty(dt)) {
                  awaitingDependencies[dt] = [];
              }
              awaitingDependencies[dt].push(function() {
                  typeConverters[i] = registeredTypes[dt];
                  ++registered;
                  if (registered === unregisteredTypes.length) {
                      onComplete(typeConverters);
                  }
              });
          }
      });
      if (0 === unregisteredTypes.length) {
          onComplete(typeConverters);
      }
    }
  /** @param {Object=} options */
  function registerType(rawType, registeredInstance, options) {
      options = options || {};
  
      if (!('argPackAdvance' in registeredInstance)) {
          throw new TypeError('registerType registeredInstance requires argPackAdvance');
      }
  
      var name = registeredInstance.name;
      if (!rawType) {
          throwBindingError('type "' + name + '" must have a positive integer typeid pointer');
      }
      if (registeredTypes.hasOwnProperty(rawType)) {
          if (options.ignoreDuplicateRegistrations) {
              return;
          } else {
              throwBindingError("Cannot register type '" + name + "' twice");
          }
      }
  
      registeredTypes[rawType] = registeredInstance;
      delete typeDependencies[rawType];
  
      if (awaitingDependencies.hasOwnProperty(rawType)) {
          var callbacks = awaitingDependencies[rawType];
          delete awaitingDependencies[rawType];
          callbacks.forEach(function(cb) {
              cb();
          });
      }
    }
  function __embind_register_bool(rawType, name, size, trueValue, falseValue) {
      var shift = getShiftFromSize(size);
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(wt) {
              // ambiguous emscripten ABI: sometimes return values are
              // true or false, and sometimes integers (0 or 1)
              return !!wt;
          },
          'toWireType': function(destructors, o) {
              return o ? trueValue : falseValue;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': function(pointer) {
              // TODO: if heap is fixed (like in asm.js) this could be executed outside
              var heap;
              if (size === 1) {
                  heap = HEAP8;
              } else if (size === 2) {
                  heap = HEAP16;
              } else if (size === 4) {
                  heap = HEAP32;
              } else {
                  throw new TypeError("Unknown boolean type size: " + name);
              }
              return this['fromWireType'](heap[pointer >> shift]);
          },
          destructorFunction: null, // This type does not need a destructor
      });
    }

  function ClassHandle_isAliasOf(other) {
      if (!(this instanceof ClassHandle)) {
          return false;
      }
      if (!(other instanceof ClassHandle)) {
          return false;
      }
  
      var leftClass = this.$$.ptrType.registeredClass;
      var left = this.$$.ptr;
      var rightClass = other.$$.ptrType.registeredClass;
      var right = other.$$.ptr;
  
      while (leftClass.baseClass) {
          left = leftClass.upcast(left);
          leftClass = leftClass.baseClass;
      }
  
      while (rightClass.baseClass) {
          right = rightClass.upcast(right);
          rightClass = rightClass.baseClass;
      }
  
      return leftClass === rightClass && left === right;
    }
  
  function shallowCopyInternalPointer(o) {
      return {
          count: o.count,
          deleteScheduled: o.deleteScheduled,
          preservePointerOnDelete: o.preservePointerOnDelete,
          ptr: o.ptr,
          ptrType: o.ptrType,
          smartPtr: o.smartPtr,
          smartPtrType: o.smartPtrType,
      };
    }
  
  function throwInstanceAlreadyDeleted(obj) {
      function getInstanceTypeName(handle) {
        return handle.$$.ptrType.registeredClass.name;
      }
      throwBindingError(getInstanceTypeName(obj) + ' instance already deleted');
    }
  
  var finalizationGroup = false;
  
  function detachFinalizer(handle) {}
  
  function runDestructor($$) {
      if ($$.smartPtr) {
          $$.smartPtrType.rawDestructor($$.smartPtr);
      } else {
          $$.ptrType.registeredClass.rawDestructor($$.ptr);
      }
    }
  function releaseClassHandle($$) {
      $$.count.value -= 1;
      var toDelete = 0 === $$.count.value;
      if (toDelete) {
          runDestructor($$);
      }
    }
  function attachFinalizer(handle) {
      if ('undefined' === typeof FinalizationGroup) {
          attachFinalizer = function (handle) { return handle; };
          return handle;
      }
      // If the running environment has a FinalizationGroup (see
      // https://github.com/tc39/proposal-weakrefs), then attach finalizers
      // for class handles.  We check for the presence of FinalizationGroup
      // at run-time, not build-time.
      finalizationGroup = new FinalizationGroup(function (iter) {
          for (var result = iter.next(); !result.done; result = iter.next()) {
              var $$ = result.value;
              if (!$$.ptr) {
                  console.warn('object already deleted: ' + $$.ptr);
              } else {
                  releaseClassHandle($$);
              }
          }
      });
      attachFinalizer = function(handle) {
          finalizationGroup.register(handle, handle.$$, handle.$$);
          return handle;
      };
      detachFinalizer = function(handle) {
          finalizationGroup.unregister(handle.$$);
      };
      return attachFinalizer(handle);
    }
  function ClassHandle_clone() {
      if (!this.$$.ptr) {
          throwInstanceAlreadyDeleted(this);
      }
  
      if (this.$$.preservePointerOnDelete) {
          this.$$.count.value += 1;
          return this;
      } else {
          var clone = attachFinalizer(Object.create(Object.getPrototypeOf(this), {
              $$: {
                  value: shallowCopyInternalPointer(this.$$),
              }
          }));
  
          clone.$$.count.value += 1;
          clone.$$.deleteScheduled = false;
          return clone;
      }
    }
  
  function ClassHandle_delete() {
      if (!this.$$.ptr) {
          throwInstanceAlreadyDeleted(this);
      }
  
      if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
          throwBindingError('Object already scheduled for deletion');
      }
  
      detachFinalizer(this);
      releaseClassHandle(this.$$);
  
      if (!this.$$.preservePointerOnDelete) {
          this.$$.smartPtr = undefined;
          this.$$.ptr = undefined;
      }
    }
  
  function ClassHandle_isDeleted() {
      return !this.$$.ptr;
    }
  
  var delayFunction = undefined;
  
  var deletionQueue = [];
  
  function flushPendingDeletes() {
      while (deletionQueue.length) {
          var obj = deletionQueue.pop();
          obj.$$.deleteScheduled = false;
          obj['delete']();
      }
    }
  function ClassHandle_deleteLater() {
      if (!this.$$.ptr) {
          throwInstanceAlreadyDeleted(this);
      }
      if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
          throwBindingError('Object already scheduled for deletion');
      }
      deletionQueue.push(this);
      if (deletionQueue.length === 1 && delayFunction) {
          delayFunction(flushPendingDeletes);
      }
      this.$$.deleteScheduled = true;
      return this;
    }
  function init_ClassHandle() {
      ClassHandle.prototype['isAliasOf'] = ClassHandle_isAliasOf;
      ClassHandle.prototype['clone'] = ClassHandle_clone;
      ClassHandle.prototype['delete'] = ClassHandle_delete;
      ClassHandle.prototype['isDeleted'] = ClassHandle_isDeleted;
      ClassHandle.prototype['deleteLater'] = ClassHandle_deleteLater;
    }
  function ClassHandle() {
    }
  
  var registeredPointers = {};
  
  function ensureOverloadTable(proto, methodName, humanName) {
      if (undefined === proto[methodName].overloadTable) {
          var prevFunc = proto[methodName];
          // Inject an overload resolver function that routes to the appropriate overload based on the number of arguments.
          proto[methodName] = function() {
              // TODO This check can be removed in -O3 level "unsafe" optimizations.
              if (!proto[methodName].overloadTable.hasOwnProperty(arguments.length)) {
                  throwBindingError("Function '" + humanName + "' called with an invalid number of arguments (" + arguments.length + ") - expects one of (" + proto[methodName].overloadTable + ")!");
              }
              return proto[methodName].overloadTable[arguments.length].apply(this, arguments);
          };
          // Move the previous function into the overload table.
          proto[methodName].overloadTable = [];
          proto[methodName].overloadTable[prevFunc.argCount] = prevFunc;
      }
    }
  /** @param {number=} numArguments */
  function exposePublicSymbol(name, value, numArguments) {
      if (Module.hasOwnProperty(name)) {
          if (undefined === numArguments || (undefined !== Module[name].overloadTable && undefined !== Module[name].overloadTable[numArguments])) {
              throwBindingError("Cannot register public name '" + name + "' twice");
          }
  
          // We are exposing a function with the same name as an existing function. Create an overload table and a function selector
          // that routes between the two.
          ensureOverloadTable(Module, name, name);
          if (Module.hasOwnProperty(numArguments)) {
              throwBindingError("Cannot register multiple overloads of a function with the same number of arguments (" + numArguments + ")!");
          }
          // Add the new function into the overload table.
          Module[name].overloadTable[numArguments] = value;
      }
      else {
          Module[name] = value;
          if (undefined !== numArguments) {
              Module[name].numArguments = numArguments;
          }
      }
    }
  
  /** @constructor */
  function RegisteredClass(
      name,
      constructor,
      instancePrototype,
      rawDestructor,
      baseClass,
      getActualType,
      upcast,
      downcast
    ) {
      this.name = name;
      this.constructor = constructor;
      this.instancePrototype = instancePrototype;
      this.rawDestructor = rawDestructor;
      this.baseClass = baseClass;
      this.getActualType = getActualType;
      this.upcast = upcast;
      this.downcast = downcast;
      this.pureVirtualFunctions = [];
    }
  
  function upcastPointer(ptr, ptrClass, desiredClass) {
      while (ptrClass !== desiredClass) {
          if (!ptrClass.upcast) {
              throwBindingError("Expected null or instance of " + desiredClass.name + ", got an instance of " + ptrClass.name);
          }
          ptr = ptrClass.upcast(ptr);
          ptrClass = ptrClass.baseClass;
      }
      return ptr;
    }
  function constNoSmartPtrRawPointerToWireType(destructors, handle) {
      if (handle === null) {
          if (this.isReference) {
              throwBindingError('null is not a valid ' + this.name);
          }
          return 0;
      }
  
      if (!handle.$$) {
          throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
      }
      if (!handle.$$.ptr) {
          throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
      return ptr;
    }
  
  function genericPointerToWireType(destructors, handle) {
      var ptr;
      if (handle === null) {
          if (this.isReference) {
              throwBindingError('null is not a valid ' + this.name);
          }
  
          if (this.isSmartPointer) {
              ptr = this.rawConstructor();
              if (destructors !== null) {
                  destructors.push(this.rawDestructor, ptr);
              }
              return ptr;
          } else {
              return 0;
          }
      }
  
      if (!handle.$$) {
          throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
      }
      if (!handle.$$.ptr) {
          throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
      }
      if (!this.isConst && handle.$$.ptrType.isConst) {
          throwBindingError('Cannot convert argument of type ' + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + ' to parameter type ' + this.name);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
  
      if (this.isSmartPointer) {
          // TODO: this is not strictly true
          // We could support BY_EMVAL conversions from raw pointers to smart pointers
          // because the smart pointer can hold a reference to the handle
          if (undefined === handle.$$.smartPtr) {
              throwBindingError('Passing raw pointer to smart pointer is illegal');
          }
  
          switch (this.sharingPolicy) {
              case 0: // NONE
                  // no upcasting
                  if (handle.$$.smartPtrType === this) {
                      ptr = handle.$$.smartPtr;
                  } else {
                      throwBindingError('Cannot convert argument of type ' + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + ' to parameter type ' + this.name);
                  }
                  break;
  
              case 1: // INTRUSIVE
                  ptr = handle.$$.smartPtr;
                  break;
  
              case 2: // BY_EMVAL
                  if (handle.$$.smartPtrType === this) {
                      ptr = handle.$$.smartPtr;
                  } else {
                      var clonedHandle = handle['clone']();
                      ptr = this.rawShare(
                          ptr,
                          __emval_register(function() {
                              clonedHandle['delete']();
                          })
                      );
                      if (destructors !== null) {
                          destructors.push(this.rawDestructor, ptr);
                      }
                  }
                  break;
  
              default:
                  throwBindingError('Unsupporting sharing policy');
          }
      }
      return ptr;
    }
  
  function nonConstNoSmartPtrRawPointerToWireType(destructors, handle) {
      if (handle === null) {
          if (this.isReference) {
              throwBindingError('null is not a valid ' + this.name);
          }
          return 0;
      }
  
      if (!handle.$$) {
          throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
      }
      if (!handle.$$.ptr) {
          throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
      }
      if (handle.$$.ptrType.isConst) {
          throwBindingError('Cannot convert argument of type ' + handle.$$.ptrType.name + ' to parameter type ' + this.name);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
      return ptr;
    }
  
  function simpleReadValueFromPointer(pointer) {
      return this['fromWireType'](HEAPU32[pointer >> 2]);
    }
  
  function RegisteredPointer_getPointee(ptr) {
      if (this.rawGetPointee) {
          ptr = this.rawGetPointee(ptr);
      }
      return ptr;
    }
  
  function RegisteredPointer_destructor(ptr) {
      if (this.rawDestructor) {
          this.rawDestructor(ptr);
      }
    }
  
  function RegisteredPointer_deleteObject(handle) {
      if (handle !== null) {
          handle['delete']();
      }
    }
  
  function downcastPointer(ptr, ptrClass, desiredClass) {
      if (ptrClass === desiredClass) {
          return ptr;
      }
      if (undefined === desiredClass.baseClass) {
          return null; // no conversion
      }
  
      var rv = downcastPointer(ptr, ptrClass, desiredClass.baseClass);
      if (rv === null) {
          return null;
      }
      return desiredClass.downcast(rv);
    }
  
  function getInheritedInstanceCount() {
      return Object.keys(registeredInstances).length;
    }
  
  function getLiveInheritedInstances() {
      var rv = [];
      for (var k in registeredInstances) {
          if (registeredInstances.hasOwnProperty(k)) {
              rv.push(registeredInstances[k]);
          }
      }
      return rv;
    }
  
  function setDelayFunction(fn) {
      delayFunction = fn;
      if (deletionQueue.length && delayFunction) {
          delayFunction(flushPendingDeletes);
      }
    }
  function init_embind() {
      Module['getInheritedInstanceCount'] = getInheritedInstanceCount;
      Module['getLiveInheritedInstances'] = getLiveInheritedInstances;
      Module['flushPendingDeletes'] = flushPendingDeletes;
      Module['setDelayFunction'] = setDelayFunction;
    }
  var registeredInstances = {};
  
  function getBasestPointer(class_, ptr) {
      if (ptr === undefined) {
          throwBindingError('ptr should not be undefined');
      }
      while (class_.baseClass) {
          ptr = class_.upcast(ptr);
          class_ = class_.baseClass;
      }
      return ptr;
    }
  function getInheritedInstance(class_, ptr) {
      ptr = getBasestPointer(class_, ptr);
      return registeredInstances[ptr];
    }
  
  function makeClassHandle(prototype, record) {
      if (!record.ptrType || !record.ptr) {
          throwInternalError('makeClassHandle requires ptr and ptrType');
      }
      var hasSmartPtrType = !!record.smartPtrType;
      var hasSmartPtr = !!record.smartPtr;
      if (hasSmartPtrType !== hasSmartPtr) {
          throwInternalError('Both smartPtrType and smartPtr must be specified');
      }
      record.count = { value: 1 };
      return attachFinalizer(Object.create(prototype, {
          $$: {
              value: record,
          },
      }));
    }
  function RegisteredPointer_fromWireType(ptr) {
      // ptr is a raw pointer (or a raw smartpointer)
  
      // rawPointer is a maybe-null raw pointer
      var rawPointer = this.getPointee(ptr);
      if (!rawPointer) {
          this.destructor(ptr);
          return null;
      }
  
      var registeredInstance = getInheritedInstance(this.registeredClass, rawPointer);
      if (undefined !== registeredInstance) {
          // JS object has been neutered, time to repopulate it
          if (0 === registeredInstance.$$.count.value) {
              registeredInstance.$$.ptr = rawPointer;
              registeredInstance.$$.smartPtr = ptr;
              return registeredInstance['clone']();
          } else {
              // else, just increment reference count on existing object
              // it already has a reference to the smart pointer
              var rv = registeredInstance['clone']();
              this.destructor(ptr);
              return rv;
          }
      }
  
      function makeDefaultHandle() {
          if (this.isSmartPointer) {
              return makeClassHandle(this.registeredClass.instancePrototype, {
                  ptrType: this.pointeeType,
                  ptr: rawPointer,
                  smartPtrType: this,
                  smartPtr: ptr,
              });
          } else {
              return makeClassHandle(this.registeredClass.instancePrototype, {
                  ptrType: this,
                  ptr: ptr,
              });
          }
      }
  
      var actualType = this.registeredClass.getActualType(rawPointer);
      var registeredPointerRecord = registeredPointers[actualType];
      if (!registeredPointerRecord) {
          return makeDefaultHandle.call(this);
      }
  
      var toType;
      if (this.isConst) {
          toType = registeredPointerRecord.constPointerType;
      } else {
          toType = registeredPointerRecord.pointerType;
      }
      var dp = downcastPointer(
          rawPointer,
          this.registeredClass,
          toType.registeredClass);
      if (dp === null) {
          return makeDefaultHandle.call(this);
      }
      if (this.isSmartPointer) {
          return makeClassHandle(toType.registeredClass.instancePrototype, {
              ptrType: toType,
              ptr: dp,
              smartPtrType: this,
              smartPtr: ptr,
          });
      } else {
          return makeClassHandle(toType.registeredClass.instancePrototype, {
              ptrType: toType,
              ptr: dp,
          });
      }
    }
  function init_RegisteredPointer() {
      RegisteredPointer.prototype.getPointee = RegisteredPointer_getPointee;
      RegisteredPointer.prototype.destructor = RegisteredPointer_destructor;
      RegisteredPointer.prototype['argPackAdvance'] = 8;
      RegisteredPointer.prototype['readValueFromPointer'] = simpleReadValueFromPointer;
      RegisteredPointer.prototype['deleteObject'] = RegisteredPointer_deleteObject;
      RegisteredPointer.prototype['fromWireType'] = RegisteredPointer_fromWireType;
    }
  /** @constructor
      @param {*=} pointeeType,
      @param {*=} sharingPolicy,
      @param {*=} rawGetPointee,
      @param {*=} rawConstructor,
      @param {*=} rawShare,
      @param {*=} rawDestructor,
       */
  function RegisteredPointer(
      name,
      registeredClass,
      isReference,
      isConst,
  
      // smart pointer properties
      isSmartPointer,
      pointeeType,
      sharingPolicy,
      rawGetPointee,
      rawConstructor,
      rawShare,
      rawDestructor
    ) {
      this.name = name;
      this.registeredClass = registeredClass;
      this.isReference = isReference;
      this.isConst = isConst;
  
      // smart pointer properties
      this.isSmartPointer = isSmartPointer;
      this.pointeeType = pointeeType;
      this.sharingPolicy = sharingPolicy;
      this.rawGetPointee = rawGetPointee;
      this.rawConstructor = rawConstructor;
      this.rawShare = rawShare;
      this.rawDestructor = rawDestructor;
  
      if (!isSmartPointer && registeredClass.baseClass === undefined) {
          if (isConst) {
              this['toWireType'] = constNoSmartPtrRawPointerToWireType;
              this.destructorFunction = null;
          } else {
              this['toWireType'] = nonConstNoSmartPtrRawPointerToWireType;
              this.destructorFunction = null;
          }
      } else {
          this['toWireType'] = genericPointerToWireType;
          // Here we must leave this.destructorFunction undefined, since whether genericPointerToWireType returns
          // a pointer that needs to be freed up is runtime-dependent, and cannot be evaluated at registration time.
          // TODO: Create an alternative mechanism that allows removing the use of var destructors = []; array in
          //       craftInvokerFunction altogether.
      }
    }
  
  /** @param {number=} numArguments */
  function replacePublicSymbol(name, value, numArguments) {
      if (!Module.hasOwnProperty(name)) {
          throwInternalError('Replacing nonexistant public symbol');
      }
      // If there's an overload table for this symbol, replace the symbol in the overload table instead.
      if (undefined !== Module[name].overloadTable && undefined !== numArguments) {
          Module[name].overloadTable[numArguments] = value;
      }
      else {
          Module[name] = value;
          Module[name].argCount = numArguments;
      }
    }
  
  function dynCallLegacy(sig, ptr, args) {
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      if (args && args.length) {
        // j (64-bit integer) must be passed in as two numbers [low 32, high 32].
        assert(args.length === sig.substring(1).replace(/j/g, '--').length);
      } else {
        assert(sig.length == 1);
      }
      var f = Module["dynCall_" + sig];
      return args && args.length ? f.apply(null, [ptr].concat(args)) : f.call(null, ptr);
    }
  function dynCall(sig, ptr, args) {
      // Without WASM_BIGINT support we cannot directly call function with i64 as
      // part of thier signature, so we rely the dynCall functions generated by
      // wasm-emscripten-finalize
      if (sig.includes('j')) {
        return dynCallLegacy(sig, ptr, args);
      }
      assert(wasmTable.get(ptr), 'missing table entry in dynCall: ' + ptr);
      return wasmTable.get(ptr).apply(null, args)
    }
  function getDynCaller(sig, ptr) {
      assert(sig.includes('j'), 'getDynCaller should only be called with i64 sigs')
      var argCache = [];
      return function() {
        argCache.length = arguments.length;
        for (var i = 0; i < arguments.length; i++) {
          argCache[i] = arguments[i];
        }
        return dynCall(sig, ptr, argCache);
      };
    }
  function embind__requireFunction(signature, rawFunction) {
      signature = readLatin1String(signature);
  
      function makeDynCaller() {
        if (signature.includes('j')) {
          return getDynCaller(signature, rawFunction);
        }
        return wasmTable.get(rawFunction);
      }
  
      var fp = makeDynCaller();
      if (typeof fp !== "function") {
          throwBindingError("unknown function pointer with signature " + signature + ": " + rawFunction);
      }
      return fp;
    }
  
  var UnboundTypeError = undefined;
  
  function getTypeName(type) {
      var ptr = ___getTypeName(type);
      var rv = readLatin1String(ptr);
      _free(ptr);
      return rv;
    }
  function throwUnboundTypeError(message, types) {
      var unboundTypes = [];
      var seen = {};
      function visit(type) {
          if (seen[type]) {
              return;
          }
          if (registeredTypes[type]) {
              return;
          }
          if (typeDependencies[type]) {
              typeDependencies[type].forEach(visit);
              return;
          }
          unboundTypes.push(type);
          seen[type] = true;
      }
      types.forEach(visit);
  
      throw new UnboundTypeError(message + ': ' + unboundTypes.map(getTypeName).join([', ']));
    }
  function __embind_register_class(
      rawType,
      rawPointerType,
      rawConstPointerType,
      baseClassRawType,
      getActualTypeSignature,
      getActualType,
      upcastSignature,
      upcast,
      downcastSignature,
      downcast,
      name,
      destructorSignature,
      rawDestructor
    ) {
      name = readLatin1String(name);
      getActualType = embind__requireFunction(getActualTypeSignature, getActualType);
      if (upcast) {
          upcast = embind__requireFunction(upcastSignature, upcast);
      }
      if (downcast) {
          downcast = embind__requireFunction(downcastSignature, downcast);
      }
      rawDestructor = embind__requireFunction(destructorSignature, rawDestructor);
      var legalFunctionName = makeLegalFunctionName(name);
  
      exposePublicSymbol(legalFunctionName, function() {
          // this code cannot run if baseClassRawType is zero
          throwUnboundTypeError('Cannot construct ' + name + ' due to unbound types', [baseClassRawType]);
      });
  
      whenDependentTypesAreResolved(
          [rawType, rawPointerType, rawConstPointerType],
          baseClassRawType ? [baseClassRawType] : [],
          function(base) {
              base = base[0];
  
              var baseClass;
              var basePrototype;
              if (baseClassRawType) {
                  baseClass = base.registeredClass;
                  basePrototype = baseClass.instancePrototype;
              } else {
                  basePrototype = ClassHandle.prototype;
              }
  
              var constructor = createNamedFunction(legalFunctionName, function() {
                  if (Object.getPrototypeOf(this) !== instancePrototype) {
                      throw new BindingError("Use 'new' to construct " + name);
                  }
                  if (undefined === registeredClass.constructor_body) {
                      throw new BindingError(name + " has no accessible constructor");
                  }
                  var body = registeredClass.constructor_body[arguments.length];
                  if (undefined === body) {
                      throw new BindingError("Tried to invoke ctor of " + name + " with invalid number of parameters (" + arguments.length + ") - expected (" + Object.keys(registeredClass.constructor_body).toString() + ") parameters instead!");
                  }
                  return body.apply(this, arguments);
              });
  
              var instancePrototype = Object.create(basePrototype, {
                  constructor: { value: constructor },
              });
  
              constructor.prototype = instancePrototype;
  
              var registeredClass = new RegisteredClass(
                  name,
                  constructor,
                  instancePrototype,
                  rawDestructor,
                  baseClass,
                  getActualType,
                  upcast,
                  downcast);
  
              var referenceConverter = new RegisteredPointer(
                  name,
                  registeredClass,
                  true,
                  false,
                  false);
  
              var pointerConverter = new RegisteredPointer(
                  name + '*',
                  registeredClass,
                  false,
                  false,
                  false);
  
              var constPointerConverter = new RegisteredPointer(
                  name + ' const*',
                  registeredClass,
                  false,
                  true,
                  false);
  
              registeredPointers[rawType] = {
                  pointerType: pointerConverter,
                  constPointerType: constPointerConverter
              };
  
              replacePublicSymbol(legalFunctionName, constructor);
  
              return [referenceConverter, pointerConverter, constPointerConverter];
          }
      );
    }

  function heap32VectorToArray(count, firstElement) {
      var array = [];
      for (var i = 0; i < count; i++) {
          array.push(HEAP32[(firstElement >> 2) + i]);
      }
      return array;
    }
  
  function runDestructors(destructors) {
      while (destructors.length) {
          var ptr = destructors.pop();
          var del = destructors.pop();
          del(ptr);
      }
    }
  function __embind_register_class_constructor(
      rawClassType,
      argCount,
      rawArgTypesAddr,
      invokerSignature,
      invoker,
      rawConstructor
    ) {
      assert(argCount > 0);
      var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      invoker = embind__requireFunction(invokerSignature, invoker);
      var args = [rawConstructor];
      var destructors = [];
  
      whenDependentTypesAreResolved([], [rawClassType], function(classType) {
          classType = classType[0];
          var humanName = 'constructor ' + classType.name;
  
          if (undefined === classType.registeredClass.constructor_body) {
              classType.registeredClass.constructor_body = [];
          }
          if (undefined !== classType.registeredClass.constructor_body[argCount - 1]) {
              throw new BindingError("Cannot register multiple constructors with identical number of parameters (" + (argCount-1) + ") for class '" + classType.name + "'! Overload resolution is currently only performed using the parameter count, not actual type info!");
          }
          classType.registeredClass.constructor_body[argCount - 1] = function unboundTypeHandler() {
              throwUnboundTypeError('Cannot construct ' + classType.name + ' due to unbound types', rawArgTypes);
          };
  
          whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
              // Insert empty slot for context type (argTypes[1]).
              argTypes.splice(1, 0, null);
              classType.registeredClass.constructor_body[argCount - 1] = craftInvokerFunction(humanName, argTypes, null, invoker, rawConstructor);
              return [];
          });
          return [];
      });
    }

  function new_(constructor, argumentList) {
      if (!(constructor instanceof Function)) {
          throw new TypeError('new_ called with constructor type ' + typeof(constructor) + " which is not a function");
      }
  
      /*
       * Previously, the following line was just:
  
       function dummy() {};
  
       * Unfortunately, Chrome was preserving 'dummy' as the object's name, even though at creation, the 'dummy' has the
       * correct constructor name.  Thus, objects created with IMVU.new would show up in the debugger as 'dummy', which
       * isn't very helpful.  Using IMVU.createNamedFunction addresses the issue.  Doublely-unfortunately, there's no way
       * to write a test for this behavior.  -NRD 2013.02.22
       */
      var dummy = createNamedFunction(constructor.name || 'unknownFunctionName', function(){});
      dummy.prototype = constructor.prototype;
      var obj = new dummy;
  
      var r = constructor.apply(obj, argumentList);
      return (r instanceof Object) ? r : obj;
    }
  function craftInvokerFunction(humanName, argTypes, classType, cppInvokerFunc, cppTargetFunc) {
      // humanName: a human-readable string name for the function to be generated.
      // argTypes: An array that contains the embind type objects for all types in the function signature.
      //    argTypes[0] is the type object for the function return value.
      //    argTypes[1] is the type object for function this object/class type, or null if not crafting an invoker for a class method.
      //    argTypes[2...] are the actual function parameters.
      // classType: The embind type object for the class to be bound, or null if this is not a method of a class.
      // cppInvokerFunc: JS Function object to the C++-side function that interops into C++ code.
      // cppTargetFunc: Function pointer (an integer to FUNCTION_TABLE) to the target C++ function the cppInvokerFunc will end up calling.
      var argCount = argTypes.length;
  
      if (argCount < 2) {
          throwBindingError("argTypes array size mismatch! Must at least get return value and 'this' types!");
      }
  
      var isClassMethodFunc = (argTypes[1] !== null && classType !== null);
  
      // Free functions with signature "void function()" do not need an invoker that marshalls between wire types.
  // TODO: This omits argument count check - enable only at -O3 or similar.
  //    if (ENABLE_UNSAFE_OPTS && argCount == 2 && argTypes[0].name == "void" && !isClassMethodFunc) {
  //       return FUNCTION_TABLE[fn];
  //    }
  
      // Determine if we need to use a dynamic stack to store the destructors for the function parameters.
      // TODO: Remove this completely once all function invokers are being dynamically generated.
      var needsDestructorStack = false;
  
      for (var i = 1; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here.
          if (argTypes[i] !== null && argTypes[i].destructorFunction === undefined) { // The type does not define a destructor function - must use dynamic stack
              needsDestructorStack = true;
              break;
          }
      }
  
      var returns = (argTypes[0].name !== "void");
  
      var argsList = "";
      var argsListWired = "";
      for (var i = 0; i < argCount - 2; ++i) {
          argsList += (i!==0?", ":"")+"arg"+i;
          argsListWired += (i!==0?", ":"")+"arg"+i+"Wired";
      }
  
      var invokerFnBody =
          "return function "+makeLegalFunctionName(humanName)+"("+argsList+") {\n" +
          "if (arguments.length !== "+(argCount - 2)+") {\n" +
              "throwBindingError('function "+humanName+" called with ' + arguments.length + ' arguments, expected "+(argCount - 2)+" args!');\n" +
          "}\n";
  
      if (needsDestructorStack) {
          invokerFnBody +=
              "var destructors = [];\n";
      }
  
      var dtorStack = needsDestructorStack ? "destructors" : "null";
      var args1 = ["throwBindingError", "invoker", "fn", "runDestructors", "retType", "classParam"];
      var args2 = [throwBindingError, cppInvokerFunc, cppTargetFunc, runDestructors, argTypes[0], argTypes[1]];
  
      if (isClassMethodFunc) {
          invokerFnBody += "var thisWired = classParam.toWireType("+dtorStack+", this);\n";
      }
  
      for (var i = 0; i < argCount - 2; ++i) {
          invokerFnBody += "var arg"+i+"Wired = argType"+i+".toWireType("+dtorStack+", arg"+i+"); // "+argTypes[i+2].name+"\n";
          args1.push("argType"+i);
          args2.push(argTypes[i+2]);
      }
  
      if (isClassMethodFunc) {
          argsListWired = "thisWired" + (argsListWired.length > 0 ? ", " : "") + argsListWired;
      }
  
      invokerFnBody +=
          (returns?"var rv = ":"") + "invoker(fn"+(argsListWired.length>0?", ":"")+argsListWired+");\n";
  
      if (needsDestructorStack) {
          invokerFnBody += "runDestructors(destructors);\n";
      } else {
          for (var i = isClassMethodFunc?1:2; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here. Also skip class type if not a method.
              var paramName = (i === 1 ? "thisWired" : ("arg"+(i - 2)+"Wired"));
              if (argTypes[i].destructorFunction !== null) {
                  invokerFnBody += paramName+"_dtor("+paramName+"); // "+argTypes[i].name+"\n";
                  args1.push(paramName+"_dtor");
                  args2.push(argTypes[i].destructorFunction);
              }
          }
      }
  
      if (returns) {
          invokerFnBody += "var ret = retType.fromWireType(rv);\n" +
                           "return ret;\n";
      } else {
      }
  
      invokerFnBody += "}\n";
  
      args1.push(invokerFnBody);
  
      var invokerFunction = new_(Function, args1).apply(null, args2);
      return invokerFunction;
    }
  function __embind_register_class_function(
      rawClassType,
      methodName,
      argCount,
      rawArgTypesAddr, // [ReturnType, ThisType, Args...]
      invokerSignature,
      rawInvoker,
      context,
      isPureVirtual
    ) {
      var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      methodName = readLatin1String(methodName);
      rawInvoker = embind__requireFunction(invokerSignature, rawInvoker);
  
      whenDependentTypesAreResolved([], [rawClassType], function(classType) {
          classType = classType[0];
          var humanName = classType.name + '.' + methodName;
  
          if (methodName.startsWith("@@")) {
              methodName = Symbol[methodName.substring(2)];
          }
  
          if (isPureVirtual) {
              classType.registeredClass.pureVirtualFunctions.push(methodName);
          }
  
          function unboundTypesHandler() {
              throwUnboundTypeError('Cannot call ' + humanName + ' due to unbound types', rawArgTypes);
          }
  
          var proto = classType.registeredClass.instancePrototype;
          var method = proto[methodName];
          if (undefined === method || (undefined === method.overloadTable && method.className !== classType.name && method.argCount === argCount - 2)) {
              // This is the first overload to be registered, OR we are replacing a function in the base class with a function in the derived class.
              unboundTypesHandler.argCount = argCount - 2;
              unboundTypesHandler.className = classType.name;
              proto[methodName] = unboundTypesHandler;
          } else {
              // There was an existing function with the same name registered. Set up a function overload routing table.
              ensureOverloadTable(proto, methodName, humanName);
              proto[methodName].overloadTable[argCount - 2] = unboundTypesHandler;
          }
  
          whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
  
              var memberFunction = craftInvokerFunction(humanName, argTypes, classType, rawInvoker, context);
  
              // Replace the initial unbound-handler-stub function with the appropriate member function, now that all types
              // are resolved. If multiple overloads are registered for this function, the function goes into an overload table.
              if (undefined === proto[methodName].overloadTable) {
                  // Set argCount in case an overload is registered later
                  memberFunction.argCount = argCount - 2;
                  proto[methodName] = memberFunction;
              } else {
                  proto[methodName].overloadTable[argCount - 2] = memberFunction;
              }
  
              return [];
          });
          return [];
      });
    }

  function validateThis(this_, classType, humanName) {
      if (!(this_ instanceof Object)) {
          throwBindingError(humanName + ' with invalid "this": ' + this_);
      }
      if (!(this_ instanceof classType.registeredClass.constructor)) {
          throwBindingError(humanName + ' incompatible with "this" of type ' + this_.constructor.name);
      }
      if (!this_.$$.ptr) {
          throwBindingError('cannot call emscripten binding method ' + humanName + ' on deleted object');
      }
  
      // todo: kill this
      return upcastPointer(
          this_.$$.ptr,
          this_.$$.ptrType.registeredClass,
          classType.registeredClass);
    }
  function __embind_register_class_property(
      classType,
      fieldName,
      getterReturnType,
      getterSignature,
      getter,
      getterContext,
      setterArgumentType,
      setterSignature,
      setter,
      setterContext
    ) {
      fieldName = readLatin1String(fieldName);
      getter = embind__requireFunction(getterSignature, getter);
  
      whenDependentTypesAreResolved([], [classType], function(classType) {
          classType = classType[0];
          var humanName = classType.name + '.' + fieldName;
          var desc = {
              get: function() {
                  throwUnboundTypeError('Cannot access ' + humanName + ' due to unbound types', [getterReturnType, setterArgumentType]);
              },
              enumerable: true,
              configurable: true
          };
          if (setter) {
              desc.set = function() {
                  throwUnboundTypeError('Cannot access ' + humanName + ' due to unbound types', [getterReturnType, setterArgumentType]);
              };
          } else {
              desc.set = function(v) {
                  throwBindingError(humanName + ' is a read-only property');
              };
          }
  
          Object.defineProperty(classType.registeredClass.instancePrototype, fieldName, desc);
  
          whenDependentTypesAreResolved(
              [],
              (setter ? [getterReturnType, setterArgumentType] : [getterReturnType]),
          function(types) {
              var getterReturnType = types[0];
              var desc = {
                  get: function() {
                      var ptr = validateThis(this, classType, humanName + ' getter');
                      return getterReturnType['fromWireType'](getter(getterContext, ptr));
                  },
                  enumerable: true
              };
  
              if (setter) {
                  setter = embind__requireFunction(setterSignature, setter);
                  var setterArgumentType = types[1];
                  desc.set = function(v) {
                      var ptr = validateThis(this, classType, humanName + ' setter');
                      var destructors = [];
                      setter(setterContext, ptr, setterArgumentType['toWireType'](destructors, v));
                      runDestructors(destructors);
                  };
              }
  
              Object.defineProperty(classType.registeredClass.instancePrototype, fieldName, desc);
              return [];
          });
  
          return [];
      });
    }

  function __embind_register_constant(name, type, value) {
      name = readLatin1String(name);
      whenDependentTypesAreResolved([], [type], function(type) {
          type = type[0];
          Module[name] = type['fromWireType'](value);
          return [];
      });
    }

  var emval_free_list = [];
  
  var emval_handle_array = [{},{value:undefined},{value:null},{value:true},{value:false}];
  function __emval_decref(handle) {
      if (handle > 4 && 0 === --emval_handle_array[handle].refcount) {
          emval_handle_array[handle] = undefined;
          emval_free_list.push(handle);
      }
    }
  
  function count_emval_handles() {
      var count = 0;
      for (var i = 5; i < emval_handle_array.length; ++i) {
          if (emval_handle_array[i] !== undefined) {
              ++count;
          }
      }
      return count;
    }
  
  function get_first_emval() {
      for (var i = 5; i < emval_handle_array.length; ++i) {
          if (emval_handle_array[i] !== undefined) {
              return emval_handle_array[i];
          }
      }
      return null;
    }
  function init_emval() {
      Module['count_emval_handles'] = count_emval_handles;
      Module['get_first_emval'] = get_first_emval;
    }
  function __emval_register(value) {
      switch (value) {
        case undefined :{ return 1; }
        case null :{ return 2; }
        case true :{ return 3; }
        case false :{ return 4; }
        default:{
          var handle = emval_free_list.length ?
              emval_free_list.pop() :
              emval_handle_array.length;
  
          emval_handle_array[handle] = {refcount: 1, value: value};
          return handle;
          }
        }
    }
  function __embind_register_emval(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(handle) {
              var rv = emval_handle_array[handle].value;
              __emval_decref(handle);
              return rv;
          },
          'toWireType': function(destructors, value) {
              return __emval_register(value);
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: null, // This type does not need a destructor
  
          // TODO: do we need a deleteObject here?  write a test where
          // emval is passed into JS via an interface
      });
    }

  function _embind_repr(v) {
      if (v === null) {
          return 'null';
      }
      var t = typeof v;
      if (t === 'object' || t === 'array' || t === 'function') {
          return v.toString();
      } else {
          return '' + v;
      }
    }
  
  function floatReadValueFromPointer(name, shift) {
      switch (shift) {
          case 2: return function(pointer) {
              return this['fromWireType'](HEAPF32[pointer >> 2]);
          };
          case 3: return function(pointer) {
              return this['fromWireType'](HEAPF64[pointer >> 3]);
          };
          default:
              throw new TypeError("Unknown float type: " + name);
      }
    }
  function __embind_register_float(rawType, name, size) {
      var shift = getShiftFromSize(size);
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              return value;
          },
          'toWireType': function(destructors, value) {
              // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
              // avoid the following if() and assume value is of proper type.
              if (typeof value !== "number" && typeof value !== "boolean") {
                  throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              return value;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': floatReadValueFromPointer(name, shift),
          destructorFunction: null, // This type does not need a destructor
      });
    }

  function __embind_register_function(name, argCount, rawArgTypesAddr, signature, rawInvoker, fn) {
      var argTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      name = readLatin1String(name);
  
      rawInvoker = embind__requireFunction(signature, rawInvoker);
  
      exposePublicSymbol(name, function() {
          throwUnboundTypeError('Cannot call ' + name + ' due to unbound types', argTypes);
      }, argCount - 1);
  
      whenDependentTypesAreResolved([], argTypes, function(argTypes) {
          var invokerArgsArray = [argTypes[0] /* return value */, null /* no class 'this'*/].concat(argTypes.slice(1) /* actual params */);
          replacePublicSymbol(name, craftInvokerFunction(name, invokerArgsArray, null /* no class 'this'*/, rawInvoker, fn), argCount - 1);
          return [];
      });
    }

  function integerReadValueFromPointer(name, shift, signed) {
      // integers are quite common, so generate very specialized functions
      switch (shift) {
          case 0: return signed ?
              function readS8FromPointer(pointer) { return HEAP8[pointer]; } :
              function readU8FromPointer(pointer) { return HEAPU8[pointer]; };
          case 1: return signed ?
              function readS16FromPointer(pointer) { return HEAP16[pointer >> 1]; } :
              function readU16FromPointer(pointer) { return HEAPU16[pointer >> 1]; };
          case 2: return signed ?
              function readS32FromPointer(pointer) { return HEAP32[pointer >> 2]; } :
              function readU32FromPointer(pointer) { return HEAPU32[pointer >> 2]; };
          default:
              throw new TypeError("Unknown integer type: " + name);
      }
    }
  function __embind_register_integer(primitiveType, name, size, minRange, maxRange) {
      name = readLatin1String(name);
      if (maxRange === -1) { // LLVM doesn't have signed and unsigned 32-bit types, so u32 literals come out as 'i32 -1'. Always treat those as max u32.
          maxRange = 4294967295;
      }
  
      var shift = getShiftFromSize(size);
  
      var fromWireType = function(value) {
          return value;
      };
  
      if (minRange === 0) {
          var bitshift = 32 - 8*size;
          fromWireType = function(value) {
              return (value << bitshift) >>> bitshift;
          };
      }
  
      var isUnsignedType = (name.includes('unsigned'));
  
      registerType(primitiveType, {
          name: name,
          'fromWireType': fromWireType,
          'toWireType': function(destructors, value) {
              // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
              // avoid the following two if()s and assume value is of proper type.
              if (typeof value !== "number" && typeof value !== "boolean") {
                  throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              if (value < minRange || value > maxRange) {
                  throw new TypeError('Passing a number "' + _embind_repr(value) + '" from JS side to C/C++ side to an argument of type "' + name + '", which is outside the valid range [' + minRange + ', ' + maxRange + ']!');
              }
              return isUnsignedType ? (value >>> 0) : (value | 0);
          },
          'argPackAdvance': 8,
          'readValueFromPointer': integerReadValueFromPointer(name, shift, minRange !== 0),
          destructorFunction: null, // This type does not need a destructor
      });
    }

  function __embind_register_memory_view(rawType, dataTypeIndex, name) {
      var typeMapping = [
          Int8Array,
          Uint8Array,
          Int16Array,
          Uint16Array,
          Int32Array,
          Uint32Array,
          Float32Array,
          Float64Array,
      ];
  
      var TA = typeMapping[dataTypeIndex];
  
      function decodeMemoryView(handle) {
          handle = handle >> 2;
          var heap = HEAPU32;
          var size = heap[handle]; // in elements
          var data = heap[handle + 1]; // byte offset into emscripten heap
          return new TA(buffer, data, size);
      }
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': decodeMemoryView,
          'argPackAdvance': 8,
          'readValueFromPointer': decodeMemoryView,
      }, {
          ignoreDuplicateRegistrations: true,
      });
    }

  function __embind_register_std_string(rawType, name) {
      name = readLatin1String(name);
      var stdStringIsUTF8
      //process only std::string bindings with UTF8 support, in contrast to e.g. std::basic_string<unsigned char>
      = (name === "std::string");
  
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              var length = HEAPU32[value >> 2];
  
              var str;
              if (stdStringIsUTF8) {
                  var decodeStartPtr = value + 4;
                  // Looping here to support possible embedded '0' bytes
                  for (var i = 0; i <= length; ++i) {
                      var currentBytePtr = value + 4 + i;
                      if (i == length || HEAPU8[currentBytePtr] == 0) {
                          var maxRead = currentBytePtr - decodeStartPtr;
                          var stringSegment = UTF8ToString(decodeStartPtr, maxRead);
                          if (str === undefined) {
                              str = stringSegment;
                          } else {
                              str += String.fromCharCode(0);
                              str += stringSegment;
                          }
                          decodeStartPtr = currentBytePtr + 1;
                      }
                  }
              } else {
                  var a = new Array(length);
                  for (var i = 0; i < length; ++i) {
                      a[i] = String.fromCharCode(HEAPU8[value + 4 + i]);
                  }
                  str = a.join('');
              }
  
              _free(value);
  
              return str;
          },
          'toWireType': function(destructors, value) {
              if (value instanceof ArrayBuffer) {
                  value = new Uint8Array(value);
              }
  
              var getLength;
              var valueIsOfTypeString = (typeof value === 'string');
  
              if (!(valueIsOfTypeString || value instanceof Uint8Array || value instanceof Uint8ClampedArray || value instanceof Int8Array)) {
                  throwBindingError('Cannot pass non-string to std::string');
              }
              if (stdStringIsUTF8 && valueIsOfTypeString) {
                  getLength = function() {return lengthBytesUTF8(value);};
              } else {
                  getLength = function() {return value.length;};
              }
  
              // assumes 4-byte alignment
              var length = getLength();
              var ptr = _malloc(4 + length + 1);
              HEAPU32[ptr >> 2] = length;
              if (stdStringIsUTF8 && valueIsOfTypeString) {
                  stringToUTF8(value, ptr + 4, length + 1);
              } else {
                  if (valueIsOfTypeString) {
                      for (var i = 0; i < length; ++i) {
                          var charCode = value.charCodeAt(i);
                          if (charCode > 255) {
                              _free(ptr);
                              throwBindingError('String has UTF-16 code units that do not fit in 8 bits');
                          }
                          HEAPU8[ptr + 4 + i] = charCode;
                      }
                  } else {
                      for (var i = 0; i < length; ++i) {
                          HEAPU8[ptr + 4 + i] = value[i];
                      }
                  }
              }
  
              if (destructors !== null) {
                  destructors.push(_free, ptr);
              }
              return ptr;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: function(ptr) { _free(ptr); },
      });
    }

  function __embind_register_std_wstring(rawType, charSize, name) {
      name = readLatin1String(name);
      var decodeString, encodeString, getHeap, lengthBytesUTF, shift;
      if (charSize === 2) {
          decodeString = UTF16ToString;
          encodeString = stringToUTF16;
          lengthBytesUTF = lengthBytesUTF16;
          getHeap = function() { return HEAPU16; };
          shift = 1;
      } else if (charSize === 4) {
          decodeString = UTF32ToString;
          encodeString = stringToUTF32;
          lengthBytesUTF = lengthBytesUTF32;
          getHeap = function() { return HEAPU32; };
          shift = 2;
      }
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              // Code mostly taken from _embind_register_std_string fromWireType
              var length = HEAPU32[value >> 2];
              var HEAP = getHeap();
              var str;
  
              var decodeStartPtr = value + 4;
              // Looping here to support possible embedded '0' bytes
              for (var i = 0; i <= length; ++i) {
                  var currentBytePtr = value + 4 + i * charSize;
                  if (i == length || HEAP[currentBytePtr >> shift] == 0) {
                      var maxReadBytes = currentBytePtr - decodeStartPtr;
                      var stringSegment = decodeString(decodeStartPtr, maxReadBytes);
                      if (str === undefined) {
                          str = stringSegment;
                      } else {
                          str += String.fromCharCode(0);
                          str += stringSegment;
                      }
                      decodeStartPtr = currentBytePtr + charSize;
                  }
              }
  
              _free(value);
  
              return str;
          },
          'toWireType': function(destructors, value) {
              if (!(typeof value === 'string')) {
                  throwBindingError('Cannot pass non-string to C++ string type ' + name);
              }
  
              // assumes 4-byte alignment
              var length = lengthBytesUTF(value);
              var ptr = _malloc(4 + length + charSize);
              HEAPU32[ptr >> 2] = length >> shift;
  
              encodeString(value, ptr + 4, length + charSize);
  
              if (destructors !== null) {
                  destructors.push(_free, ptr);
              }
              return ptr;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: function(ptr) { _free(ptr); },
      });
    }

  function __embind_register_void(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          isVoid: true, // void return values can be optimized out sometimes
          name: name,
          'argPackAdvance': 0,
          'fromWireType': function() {
              return undefined;
          },
          'toWireType': function(destructors, o) {
              // TODO: assert if anything else is given?
              return undefined;
          },
      });
    }

  function requireHandle(handle) {
      if (!handle) {
          throwBindingError('Cannot use deleted val. handle = ' + handle);
      }
      return emval_handle_array[handle].value;
    }
  
  function requireRegisteredType(rawType, humanName) {
      var impl = registeredTypes[rawType];
      if (undefined === impl) {
          throwBindingError(humanName + " has unknown type " + getTypeName(rawType));
      }
      return impl;
    }
  function __emval_as(handle, returnType, destructorsRef) {
      handle = requireHandle(handle);
      returnType = requireRegisteredType(returnType, 'emval::as');
      var destructors = [];
      var rd = __emval_register(destructors);
      HEAP32[destructorsRef >> 2] = rd;
      return returnType['toWireType'](destructors, handle);
    }

  function __emval_lookupTypes(argCount, argTypes) {
      var a = new Array(argCount);
      for (var i = 0; i < argCount; ++i) {
          a[i] = requireRegisteredType(
              HEAP32[(argTypes >> 2) + i],
              "parameter " + i);
      }
      return a;
    }
  function __emval_call(handle, argCount, argTypes, argv) {
      handle = requireHandle(handle);
      var types = __emval_lookupTypes(argCount, argTypes);
  
      var args = new Array(argCount);
      for (var i = 0; i < argCount; ++i) {
          var type = types[i];
          args[i] = type['readValueFromPointer'](argv);
          argv += type['argPackAdvance'];
      }
  
      var rv = handle.apply(undefined, args);
      return __emval_register(rv);
    }

  function __emval_allocateDestructors(destructorsRef) {
      var destructors = [];
      HEAP32[destructorsRef >> 2] = __emval_register(destructors);
      return destructors;
    }
  
  var emval_symbols = {};
  function getStringOrSymbol(address) {
      var symbol = emval_symbols[address];
      if (symbol === undefined) {
          return readLatin1String(address);
      } else {
          return symbol;
      }
    }
  
  var emval_methodCallers = [];
  function __emval_call_void_method(caller, handle, methodName, args) {
      caller = emval_methodCallers[caller];
      handle = requireHandle(handle);
      methodName = getStringOrSymbol(methodName);
      caller(handle, methodName, null, args);
    }


  function __emval_addMethodCaller(caller) {
      var id = emval_methodCallers.length;
      emval_methodCallers.push(caller);
      return id;
    }
  function __emval_get_method_caller(argCount, argTypes) {
      var types = __emval_lookupTypes(argCount, argTypes);
  
      var retType = types[0];
      var signatureName = retType.name + "_$" + types.slice(1).map(function (t) { return t.name; }).join("_") + "$";
  
      var params = ["retType"];
      var args = [retType];
  
      var argsList = ""; // 'arg0, arg1, arg2, ... , argN'
      for (var i = 0; i < argCount - 1; ++i) {
          argsList += (i !== 0 ? ", " : "") + "arg" + i;
          params.push("argType" + i);
          args.push(types[1 + i]);
      }
  
      var functionName = makeLegalFunctionName("methodCaller_" + signatureName);
      var functionBody =
          "return function " + functionName + "(handle, name, destructors, args) {\n";
  
      var offset = 0;
      for (var i = 0; i < argCount - 1; ++i) {
          functionBody +=
          "    var arg" + i + " = argType" + i + ".readValueFromPointer(args" + (offset ? ("+"+offset) : "") + ");\n";
          offset += types[i + 1]['argPackAdvance'];
      }
      functionBody +=
          "    var rv = handle[name](" + argsList + ");\n";
      for (var i = 0; i < argCount - 1; ++i) {
          if (types[i + 1]['deleteObject']) {
              functionBody +=
              "    argType" + i + ".deleteObject(arg" + i + ");\n";
          }
      }
      if (!retType.isVoid) {
          functionBody +=
          "    return retType.toWireType(destructors, rv);\n";
      }
      functionBody +=
          "};\n";
  
      params.push(functionBody);
      var invokerFunction = new_(Function, params).apply(null, args);
      return __emval_addMethodCaller(invokerFunction);
    }

  function __emval_get_property(handle, key) {
      handle = requireHandle(handle);
      key = requireHandle(key);
      return __emval_register(handle[key]);
    }

  function __emval_incref(handle) {
      if (handle > 4) {
          emval_handle_array[handle].refcount += 1;
      }
    }

  function __emval_new_array() {
      return __emval_register([]);
    }

  function __emval_new_cstring(v) {
      return __emval_register(getStringOrSymbol(v));
    }

  function __emval_new_object() {
      return __emval_register({});
    }

  function __emval_run_destructors(handle) {
      var destructors = emval_handle_array[handle].value;
      runDestructors(destructors);
      __emval_decref(handle);
    }

  function __emval_set_property(handle, key, value) {
      handle = requireHandle(handle);
      key = requireHandle(key);
      value = requireHandle(value);
      handle[key] = value;
    }

  function __emval_strictly_equals(first, second) {
      first = requireHandle(first);
      second = requireHandle(second);
      return first === second;
    }

  function __emval_take_value(type, argv) {
      type = requireRegisteredType(type, '_emval_take_value');
      var v = type['readValueFromPointer'](argv);
      return __emval_register(v);
    }

  function __emval_typeof(handle) {
      handle = requireHandle(handle);
      return __emval_register(typeof handle);
    }

  function _abort() {
      abort();
    }

  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.copyWithin(dest, src, src + num);
    }

  function emscripten_realloc_buffer(size) {
      try {
        // round size grow request up to wasm page size (fixed 64KB per spec)
        wasmMemory.grow((size - buffer.byteLength + 65535) >>> 16); // .grow() takes a delta compared to the previous size
        updateGlobalBufferAndViews(wasmMemory.buffer);
        return 1 /*success*/;
      } catch(e) {
        err('emscripten_realloc_buffer: Attempted to grow heap from ' + buffer.byteLength  + ' bytes to ' + size + ' bytes, but got error: ' + e);
      }
      // implicit 0 return to save code size (caller will cast "undefined" into 0
      // anyhow)
    }
  function _emscripten_resize_heap(requestedSize) {
      var oldSize = HEAPU8.length;
      requestedSize = requestedSize >>> 0;
      // With pthreads, races can happen (another thread might increase the size in between), so return a failure, and let the caller retry.
      assert(requestedSize > oldSize);
  
      // Memory resize rules:
      // 1. Always increase heap size to at least the requested size, rounded up to next page multiple.
      // 2a. If MEMORY_GROWTH_LINEAR_STEP == -1, excessively resize the heap geometrically: increase the heap size according to 
      //                                         MEMORY_GROWTH_GEOMETRIC_STEP factor (default +20%),
      //                                         At most overreserve by MEMORY_GROWTH_GEOMETRIC_CAP bytes (default 96MB).
      // 2b. If MEMORY_GROWTH_LINEAR_STEP != -1, excessively resize the heap linearly: increase the heap size by at least MEMORY_GROWTH_LINEAR_STEP bytes.
      // 3. Max size for the heap is capped at 2048MB-WASM_PAGE_SIZE, or by MAXIMUM_MEMORY, or by ASAN limit, depending on which is smallest
      // 4. If we were unable to allocate as much memory, it may be due to over-eager decision to excessively reserve due to (3) above.
      //    Hence if an allocation fails, cut down on the amount of excess growth, in an attempt to succeed to perform a smaller allocation.
  
      // A limit is set for how much we can grow. We should not exceed that
      // (the wasm binary specifies it, so if we tried, we'd fail anyhow).
      // In CAN_ADDRESS_2GB mode, stay one Wasm page short of 4GB: while e.g. Chrome is able to allocate full 4GB Wasm memories, the size will wrap
      // back to 0 bytes in Wasm side for any code that deals with heap sizes, which would require special casing all heap size related code to treat
      // 0 specially.
      var maxHeapSize = 2147483648;
      if (requestedSize > maxHeapSize) {
        err('Cannot enlarge memory, asked to go up to ' + requestedSize + ' bytes, but the limit is ' + maxHeapSize + ' bytes!');
        return false;
      }
  
      // Loop through potential heap size increases. If we attempt a too eager reservation that fails, cut down on the
      // attempted size and reserve a smaller bump instead. (max 3 times, chosen somewhat arbitrarily)
      for (var cutDown = 1; cutDown <= 4; cutDown *= 2) {
        var overGrownHeapSize = oldSize * (1 + 0.2 / cutDown); // ensure geometric growth
        // but limit overreserving (default to capping at +96MB overgrowth at most)
        overGrownHeapSize = Math.min(overGrownHeapSize, requestedSize + 100663296 );
  
        var newSize = Math.min(maxHeapSize, alignUp(Math.max(requestedSize, overGrownHeapSize), 65536));
  
        var replacement = emscripten_realloc_buffer(newSize);
        if (replacement) {
  
          return true;
        }
      }
      err('Failed to grow the heap from ' + oldSize + ' bytes to ' + newSize + ' bytes, not enough memory!');
      return false;
    }

  function _fd_close(fd) {
      abort('it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM');
      return 0;
    }

  function _fd_read(fd, iov, iovcnt, pnum) {
      var stream = SYSCALLS.getStreamFromFD(fd);
      var num = SYSCALLS.doReadv(stream, iov, iovcnt);
      HEAP32[((pnum)>>2)] = num
      return 0;
    }

  function _fd_seek(fd, offset_low, offset_high, whence, newOffset) {
  abort('it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM');
  }

  function flush_NO_FILESYSTEM() {
      // flush anything remaining in the buffers during shutdown
      if (typeof _fflush !== 'undefined') _fflush(0);
      var buffers = SYSCALLS.buffers;
      if (buffers[1].length) SYSCALLS.printChar(1, 10);
      if (buffers[2].length) SYSCALLS.printChar(2, 10);
    }
  function _fd_write(fd, iov, iovcnt, pnum) {
      // hack to support printf in SYSCALLS_REQUIRE_FILESYSTEM=0
      var num = 0;
      for (var i = 0; i < iovcnt; i++) {
        var ptr = HEAP32[(((iov)+(i*8))>>2)];
        var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
        for (var j = 0; j < len; j++) {
          SYSCALLS.printChar(fd, HEAPU8[ptr+j]);
        }
        num += len;
      }
      HEAP32[((pnum)>>2)] = num
      return 0;
    }

  function _setTempRet0(val) {
      setTempRet0(val);
    }
embind_init_charCodes();
BindingError = Module['BindingError'] = extendError(Error, 'BindingError');;
InternalError = Module['InternalError'] = extendError(Error, 'InternalError');;
init_ClassHandle();
init_RegisteredPointer();
init_embind();;
UnboundTypeError = Module['UnboundTypeError'] = extendError(Error, 'UnboundTypeError');;
init_emval();;
var ASSERTIONS = true;



/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}


// Copied from https://github.com/strophe/strophejs/blob/e06d027/src/polyfills.js#L149

// This code was written by Tyler Akins and has been placed in the
// public domain.  It would be nice if you left this header intact.
// Base64 code from Tyler Akins -- http://rumkin.com

/**
 * Decodes a base64 string.
 * @param {string} input The string to decode.
 */
var decodeBase64 = typeof atob === 'function' ? atob : function (input) {
  var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

  var output = '';
  var chr1, chr2, chr3;
  var enc1, enc2, enc3, enc4;
  var i = 0;
  // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
  do {
    enc1 = keyStr.indexOf(input.charAt(i++));
    enc2 = keyStr.indexOf(input.charAt(i++));
    enc3 = keyStr.indexOf(input.charAt(i++));
    enc4 = keyStr.indexOf(input.charAt(i++));

    chr1 = (enc1 << 2) | (enc2 >> 4);
    chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
    chr3 = ((enc3 & 3) << 6) | enc4;

    output = output + String.fromCharCode(chr1);

    if (enc3 !== 64) {
      output = output + String.fromCharCode(chr2);
    }
    if (enc4 !== 64) {
      output = output + String.fromCharCode(chr3);
    }
  } while (i < input.length);
  return output;
};

// Converts a string of base64 into a byte array.
// Throws error on invalid input.
function intArrayFromBase64(s) {

  try {
    var decoded = decodeBase64(s);
    var bytes = new Uint8Array(decoded.length);
    for (var i = 0 ; i < decoded.length ; ++i) {
      bytes[i] = decoded.charCodeAt(i);
    }
    return bytes;
  } catch (_) {
    throw new Error('Converting base64 string to bytes failed.');
  }
}

// If filename is a base64 data URI, parses and returns data (Buffer on node,
// Uint8Array otherwise). If filename is not a base64 data URI, returns undefined.
function tryParseAsDataURI(filename) {
  if (!isDataURI(filename)) {
    return;
  }

  return intArrayFromBase64(filename.slice(dataURIPrefix.length));
}


var asmLibraryArg = {
  "__assert_fail": ___assert_fail,
  "__cxa_allocate_exception": ___cxa_allocate_exception,
  "__cxa_atexit": ___cxa_atexit,
  "__cxa_throw": ___cxa_throw,
  "__sys_fcntl64": ___sys_fcntl64,
  "__sys_ioctl": ___sys_ioctl,
  "__sys_open": ___sys_open,
  "_embind_register_bigint": __embind_register_bigint,
  "_embind_register_bool": __embind_register_bool,
  "_embind_register_class": __embind_register_class,
  "_embind_register_class_constructor": __embind_register_class_constructor,
  "_embind_register_class_function": __embind_register_class_function,
  "_embind_register_class_property": __embind_register_class_property,
  "_embind_register_constant": __embind_register_constant,
  "_embind_register_emval": __embind_register_emval,
  "_embind_register_float": __embind_register_float,
  "_embind_register_function": __embind_register_function,
  "_embind_register_integer": __embind_register_integer,
  "_embind_register_memory_view": __embind_register_memory_view,
  "_embind_register_std_string": __embind_register_std_string,
  "_embind_register_std_wstring": __embind_register_std_wstring,
  "_embind_register_void": __embind_register_void,
  "_emval_as": __emval_as,
  "_emval_call": __emval_call,
  "_emval_call_void_method": __emval_call_void_method,
  "_emval_decref": __emval_decref,
  "_emval_get_method_caller": __emval_get_method_caller,
  "_emval_get_property": __emval_get_property,
  "_emval_incref": __emval_incref,
  "_emval_new_array": __emval_new_array,
  "_emval_new_cstring": __emval_new_cstring,
  "_emval_new_object": __emval_new_object,
  "_emval_run_destructors": __emval_run_destructors,
  "_emval_set_property": __emval_set_property,
  "_emval_strictly_equals": __emval_strictly_equals,
  "_emval_take_value": __emval_take_value,
  "_emval_typeof": __emval_typeof,
  "abort": _abort,
  "emscripten_memcpy_big": _emscripten_memcpy_big,
  "emscripten_resize_heap": _emscripten_resize_heap,
  "fd_close": _fd_close,
  "fd_read": _fd_read,
  "fd_seek": _fd_seek,
  "fd_write": _fd_write,
  "setTempRet0": _setTempRet0
};
var asm = createWasm();
/** @type {function(...*):?} */
var ___wasm_call_ctors = Module["___wasm_call_ctors"] = createExportWrapper("__wasm_call_ctors");

/** @type {function(...*):?} */
var _malloc = Module["_malloc"] = createExportWrapper("malloc");

/** @type {function(...*):?} */
var _free = Module["_free"] = createExportWrapper("free");

/** @type {function(...*):?} */
var ___getTypeName = Module["___getTypeName"] = createExportWrapper("__getTypeName");

/** @type {function(...*):?} */
var ___embind_register_native_and_builtin_types = Module["___embind_register_native_and_builtin_types"] = createExportWrapper("__embind_register_native_and_builtin_types");

/** @type {function(...*):?} */
var ___errno_location = Module["___errno_location"] = createExportWrapper("__errno_location");

/** @type {function(...*):?} */
var _emscripten_stack_get_end = Module["_emscripten_stack_get_end"] = function() {
  return (_emscripten_stack_get_end = Module["_emscripten_stack_get_end"] = Module["asm"]["emscripten_stack_get_end"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var stackSave = Module["stackSave"] = createExportWrapper("stackSave");

/** @type {function(...*):?} */
var stackRestore = Module["stackRestore"] = createExportWrapper("stackRestore");

/** @type {function(...*):?} */
var stackAlloc = Module["stackAlloc"] = createExportWrapper("stackAlloc");

/** @type {function(...*):?} */
var _emscripten_stack_init = Module["_emscripten_stack_init"] = function() {
  return (_emscripten_stack_init = Module["_emscripten_stack_init"] = Module["asm"]["emscripten_stack_init"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var _emscripten_stack_get_free = Module["_emscripten_stack_get_free"] = function() {
  return (_emscripten_stack_get_free = Module["_emscripten_stack_get_free"] = Module["asm"]["emscripten_stack_get_free"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var dynCall_jiji = Module["dynCall_jiji"] = createExportWrapper("dynCall_jiji");





// === Auto-generated postamble setup entry stuff ===

if (!Object.getOwnPropertyDescriptor(Module, "intArrayFromString")) Module["intArrayFromString"] = function() { abort("'intArrayFromString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "intArrayToString")) Module["intArrayToString"] = function() { abort("'intArrayToString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ccall")) Module["ccall"] = function() { abort("'ccall' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "cwrap")) Module["cwrap"] = function() { abort("'cwrap' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setValue")) Module["setValue"] = function() { abort("'setValue' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getValue")) Module["getValue"] = function() { abort("'getValue' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "allocate")) Module["allocate"] = function() { abort("'allocate' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF8ArrayToString")) Module["UTF8ArrayToString"] = function() { abort("'UTF8ArrayToString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF8ToString")) Module["UTF8ToString"] = function() { abort("'UTF8ToString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF8Array")) Module["stringToUTF8Array"] = function() { abort("'stringToUTF8Array' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF8")) Module["stringToUTF8"] = function() { abort("'stringToUTF8' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF8")) Module["lengthBytesUTF8"] = function() { abort("'lengthBytesUTF8' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackTrace")) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPreRun")) Module["addOnPreRun"] = function() { abort("'addOnPreRun' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnInit")) Module["addOnInit"] = function() { abort("'addOnInit' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPreMain")) Module["addOnPreMain"] = function() { abort("'addOnPreMain' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnExit")) Module["addOnExit"] = function() { abort("'addOnExit' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPostRun")) Module["addOnPostRun"] = function() { abort("'addOnPostRun' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeStringToMemory")) Module["writeStringToMemory"] = function() { abort("'writeStringToMemory' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeArrayToMemory")) Module["writeArrayToMemory"] = function() { abort("'writeArrayToMemory' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeAsciiToMemory")) Module["writeAsciiToMemory"] = function() { abort("'writeAsciiToMemory' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addRunDependency")) Module["addRunDependency"] = function() { abort("'addRunDependency' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "removeRunDependency")) Module["removeRunDependency"] = function() { abort("'removeRunDependency' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createFolder")) Module["FS_createFolder"] = function() { abort("'FS_createFolder' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createPath")) Module["FS_createPath"] = function() { abort("'FS_createPath' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createDataFile")) Module["FS_createDataFile"] = function() { abort("'FS_createDataFile' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createPreloadedFile")) Module["FS_createPreloadedFile"] = function() { abort("'FS_createPreloadedFile' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createLazyFile")) Module["FS_createLazyFile"] = function() { abort("'FS_createLazyFile' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createLink")) Module["FS_createLink"] = function() { abort("'FS_createLink' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createDevice")) Module["FS_createDevice"] = function() { abort("'FS_createDevice' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_unlink")) Module["FS_unlink"] = function() { abort("'FS_unlink' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "getLEB")) Module["getLEB"] = function() { abort("'getLEB' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getFunctionTables")) Module["getFunctionTables"] = function() { abort("'getFunctionTables' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "alignFunctionTables")) Module["alignFunctionTables"] = function() { abort("'alignFunctionTables' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerFunctions")) Module["registerFunctions"] = function() { abort("'registerFunctions' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addFunction")) Module["addFunction"] = function() { abort("'addFunction' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "removeFunction")) Module["removeFunction"] = function() { abort("'removeFunction' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getFuncWrapper")) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "prettyPrint")) Module["prettyPrint"] = function() { abort("'prettyPrint' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "dynCall")) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getCompilerSetting")) Module["getCompilerSetting"] = function() { abort("'getCompilerSetting' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "print")) Module["print"] = function() { abort("'print' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "printErr")) Module["printErr"] = function() { abort("'printErr' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getTempRet0")) Module["getTempRet0"] = function() { abort("'getTempRet0' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setTempRet0")) Module["setTempRet0"] = function() { abort("'setTempRet0' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "callMain")) Module["callMain"] = function() { abort("'callMain' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "abort")) Module["abort"] = function() { abort("'abort' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "keepRuntimeAlive")) Module["keepRuntimeAlive"] = function() { abort("'keepRuntimeAlive' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "zeroMemory")) Module["zeroMemory"] = function() { abort("'zeroMemory' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToNewUTF8")) Module["stringToNewUTF8"] = function() { abort("'stringToNewUTF8' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setFileTime")) Module["setFileTime"] = function() { abort("'setFileTime' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscripten_realloc_buffer")) Module["emscripten_realloc_buffer"] = function() { abort("'emscripten_realloc_buffer' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ENV")) Module["ENV"] = function() { abort("'ENV' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ERRNO_CODES")) Module["ERRNO_CODES"] = function() { abort("'ERRNO_CODES' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ERRNO_MESSAGES")) Module["ERRNO_MESSAGES"] = function() { abort("'ERRNO_MESSAGES' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setErrNo")) Module["setErrNo"] = function() { abort("'setErrNo' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "inetPton4")) Module["inetPton4"] = function() { abort("'inetPton4' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "inetNtop4")) Module["inetNtop4"] = function() { abort("'inetNtop4' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "inetPton6")) Module["inetPton6"] = function() { abort("'inetPton6' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "inetNtop6")) Module["inetNtop6"] = function() { abort("'inetNtop6' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readSockaddr")) Module["readSockaddr"] = function() { abort("'readSockaddr' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeSockaddr")) Module["writeSockaddr"] = function() { abort("'writeSockaddr' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "DNS")) Module["DNS"] = function() { abort("'DNS' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getHostByName")) Module["getHostByName"] = function() { abort("'getHostByName' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GAI_ERRNO_MESSAGES")) Module["GAI_ERRNO_MESSAGES"] = function() { abort("'GAI_ERRNO_MESSAGES' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "Protocols")) Module["Protocols"] = function() { abort("'Protocols' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "Sockets")) Module["Sockets"] = function() { abort("'Sockets' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getRandomDevice")) Module["getRandomDevice"] = function() { abort("'getRandomDevice' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "traverseStack")) Module["traverseStack"] = function() { abort("'traverseStack' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UNWIND_CACHE")) Module["UNWIND_CACHE"] = function() { abort("'UNWIND_CACHE' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "withBuiltinMalloc")) Module["withBuiltinMalloc"] = function() { abort("'withBuiltinMalloc' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readAsmConstArgsArray")) Module["readAsmConstArgsArray"] = function() { abort("'readAsmConstArgsArray' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readAsmConstArgs")) Module["readAsmConstArgs"] = function() { abort("'readAsmConstArgs' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "mainThreadEM_ASM")) Module["mainThreadEM_ASM"] = function() { abort("'mainThreadEM_ASM' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "jstoi_q")) Module["jstoi_q"] = function() { abort("'jstoi_q' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "jstoi_s")) Module["jstoi_s"] = function() { abort("'jstoi_s' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getExecutableName")) Module["getExecutableName"] = function() { abort("'getExecutableName' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "listenOnce")) Module["listenOnce"] = function() { abort("'listenOnce' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "autoResumeAudioContext")) Module["autoResumeAudioContext"] = function() { abort("'autoResumeAudioContext' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "dynCallLegacy")) Module["dynCallLegacy"] = function() { abort("'dynCallLegacy' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getDynCaller")) Module["getDynCaller"] = function() { abort("'getDynCaller' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "dynCall")) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "callRuntimeCallbacks")) Module["callRuntimeCallbacks"] = function() { abort("'callRuntimeCallbacks' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "runtimeKeepalivePush")) Module["runtimeKeepalivePush"] = function() { abort("'runtimeKeepalivePush' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "runtimeKeepalivePop")) Module["runtimeKeepalivePop"] = function() { abort("'runtimeKeepalivePop' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "callUserCallback")) Module["callUserCallback"] = function() { abort("'callUserCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "maybeExit")) Module["maybeExit"] = function() { abort("'maybeExit' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "safeSetTimeout")) Module["safeSetTimeout"] = function() { abort("'safeSetTimeout' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "asmjsMangle")) Module["asmjsMangle"] = function() { abort("'asmjsMangle' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "asyncLoad")) Module["asyncLoad"] = function() { abort("'asyncLoad' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "alignMemory")) Module["alignMemory"] = function() { abort("'alignMemory' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "mmapAlloc")) Module["mmapAlloc"] = function() { abort("'mmapAlloc' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "reallyNegative")) Module["reallyNegative"] = function() { abort("'reallyNegative' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "unSign")) Module["unSign"] = function() { abort("'unSign' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "reSign")) Module["reSign"] = function() { abort("'reSign' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "formatString")) Module["formatString"] = function() { abort("'formatString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PATH")) Module["PATH"] = function() { abort("'PATH' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PATH_FS")) Module["PATH_FS"] = function() { abort("'PATH_FS' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SYSCALLS")) Module["SYSCALLS"] = function() { abort("'SYSCALLS' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "syscallMmap2")) Module["syscallMmap2"] = function() { abort("'syscallMmap2' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "syscallMunmap")) Module["syscallMunmap"] = function() { abort("'syscallMunmap' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getSocketFromFD")) Module["getSocketFromFD"] = function() { abort("'getSocketFromFD' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getSocketAddress")) Module["getSocketAddress"] = function() { abort("'getSocketAddress' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "JSEvents")) Module["JSEvents"] = function() { abort("'JSEvents' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerKeyEventCallback")) Module["registerKeyEventCallback"] = function() { abort("'registerKeyEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "specialHTMLTargets")) Module["specialHTMLTargets"] = function() { abort("'specialHTMLTargets' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "maybeCStringToJsString")) Module["maybeCStringToJsString"] = function() { abort("'maybeCStringToJsString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "findEventTarget")) Module["findEventTarget"] = function() { abort("'findEventTarget' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "findCanvasEventTarget")) Module["findCanvasEventTarget"] = function() { abort("'findCanvasEventTarget' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getBoundingClientRect")) Module["getBoundingClientRect"] = function() { abort("'getBoundingClientRect' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillMouseEventData")) Module["fillMouseEventData"] = function() { abort("'fillMouseEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerMouseEventCallback")) Module["registerMouseEventCallback"] = function() { abort("'registerMouseEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerWheelEventCallback")) Module["registerWheelEventCallback"] = function() { abort("'registerWheelEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerUiEventCallback")) Module["registerUiEventCallback"] = function() { abort("'registerUiEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerFocusEventCallback")) Module["registerFocusEventCallback"] = function() { abort("'registerFocusEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillDeviceOrientationEventData")) Module["fillDeviceOrientationEventData"] = function() { abort("'fillDeviceOrientationEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerDeviceOrientationEventCallback")) Module["registerDeviceOrientationEventCallback"] = function() { abort("'registerDeviceOrientationEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillDeviceMotionEventData")) Module["fillDeviceMotionEventData"] = function() { abort("'fillDeviceMotionEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerDeviceMotionEventCallback")) Module["registerDeviceMotionEventCallback"] = function() { abort("'registerDeviceMotionEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "screenOrientation")) Module["screenOrientation"] = function() { abort("'screenOrientation' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillOrientationChangeEventData")) Module["fillOrientationChangeEventData"] = function() { abort("'fillOrientationChangeEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerOrientationChangeEventCallback")) Module["registerOrientationChangeEventCallback"] = function() { abort("'registerOrientationChangeEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillFullscreenChangeEventData")) Module["fillFullscreenChangeEventData"] = function() { abort("'fillFullscreenChangeEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerFullscreenChangeEventCallback")) Module["registerFullscreenChangeEventCallback"] = function() { abort("'registerFullscreenChangeEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerRestoreOldStyle")) Module["registerRestoreOldStyle"] = function() { abort("'registerRestoreOldStyle' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "hideEverythingExceptGivenElement")) Module["hideEverythingExceptGivenElement"] = function() { abort("'hideEverythingExceptGivenElement' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "restoreHiddenElements")) Module["restoreHiddenElements"] = function() { abort("'restoreHiddenElements' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setLetterbox")) Module["setLetterbox"] = function() { abort("'setLetterbox' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "currentFullscreenStrategy")) Module["currentFullscreenStrategy"] = function() { abort("'currentFullscreenStrategy' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "restoreOldWindowedStyle")) Module["restoreOldWindowedStyle"] = function() { abort("'restoreOldWindowedStyle' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "softFullscreenResizeWebGLRenderTarget")) Module["softFullscreenResizeWebGLRenderTarget"] = function() { abort("'softFullscreenResizeWebGLRenderTarget' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "doRequestFullscreen")) Module["doRequestFullscreen"] = function() { abort("'doRequestFullscreen' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillPointerlockChangeEventData")) Module["fillPointerlockChangeEventData"] = function() { abort("'fillPointerlockChangeEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerPointerlockChangeEventCallback")) Module["registerPointerlockChangeEventCallback"] = function() { abort("'registerPointerlockChangeEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerPointerlockErrorEventCallback")) Module["registerPointerlockErrorEventCallback"] = function() { abort("'registerPointerlockErrorEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "requestPointerLock")) Module["requestPointerLock"] = function() { abort("'requestPointerLock' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillVisibilityChangeEventData")) Module["fillVisibilityChangeEventData"] = function() { abort("'fillVisibilityChangeEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerVisibilityChangeEventCallback")) Module["registerVisibilityChangeEventCallback"] = function() { abort("'registerVisibilityChangeEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerTouchEventCallback")) Module["registerTouchEventCallback"] = function() { abort("'registerTouchEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillGamepadEventData")) Module["fillGamepadEventData"] = function() { abort("'fillGamepadEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerGamepadEventCallback")) Module["registerGamepadEventCallback"] = function() { abort("'registerGamepadEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerBeforeUnloadEventCallback")) Module["registerBeforeUnloadEventCallback"] = function() { abort("'registerBeforeUnloadEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillBatteryEventData")) Module["fillBatteryEventData"] = function() { abort("'fillBatteryEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "battery")) Module["battery"] = function() { abort("'battery' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerBatteryEventCallback")) Module["registerBatteryEventCallback"] = function() { abort("'registerBatteryEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setCanvasElementSize")) Module["setCanvasElementSize"] = function() { abort("'setCanvasElementSize' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getCanvasElementSize")) Module["getCanvasElementSize"] = function() { abort("'getCanvasElementSize' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "polyfillSetImmediate")) Module["polyfillSetImmediate"] = function() { abort("'polyfillSetImmediate' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "demangle")) Module["demangle"] = function() { abort("'demangle' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "demangleAll")) Module["demangleAll"] = function() { abort("'demangleAll' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "jsStackTrace")) Module["jsStackTrace"] = function() { abort("'jsStackTrace' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackTrace")) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getEnvStrings")) Module["getEnvStrings"] = function() { abort("'getEnvStrings' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "checkWasiClock")) Module["checkWasiClock"] = function() { abort("'checkWasiClock' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "flush_NO_FILESYSTEM")) Module["flush_NO_FILESYSTEM"] = function() { abort("'flush_NO_FILESYSTEM' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToI64")) Module["writeI53ToI64"] = function() { abort("'writeI53ToI64' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToI64Clamped")) Module["writeI53ToI64Clamped"] = function() { abort("'writeI53ToI64Clamped' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToI64Signaling")) Module["writeI53ToI64Signaling"] = function() { abort("'writeI53ToI64Signaling' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToU64Clamped")) Module["writeI53ToU64Clamped"] = function() { abort("'writeI53ToU64Clamped' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToU64Signaling")) Module["writeI53ToU64Signaling"] = function() { abort("'writeI53ToU64Signaling' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readI53FromI64")) Module["readI53FromI64"] = function() { abort("'readI53FromI64' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readI53FromU64")) Module["readI53FromU64"] = function() { abort("'readI53FromU64' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "convertI32PairToI53")) Module["convertI32PairToI53"] = function() { abort("'convertI32PairToI53' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "convertU32PairToI53")) Module["convertU32PairToI53"] = function() { abort("'convertU32PairToI53' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "uncaughtExceptionCount")) Module["uncaughtExceptionCount"] = function() { abort("'uncaughtExceptionCount' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "exceptionLast")) Module["exceptionLast"] = function() { abort("'exceptionLast' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "exceptionCaught")) Module["exceptionCaught"] = function() { abort("'exceptionCaught' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ExceptionInfo")) Module["ExceptionInfo"] = function() { abort("'ExceptionInfo' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "CatchInfo")) Module["CatchInfo"] = function() { abort("'CatchInfo' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "exception_addRef")) Module["exception_addRef"] = function() { abort("'exception_addRef' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "exception_decRef")) Module["exception_decRef"] = function() { abort("'exception_decRef' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "Browser")) Module["Browser"] = function() { abort("'Browser' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "funcWrappers")) Module["funcWrappers"] = function() { abort("'funcWrappers' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getFuncWrapper")) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setMainLoop")) Module["setMainLoop"] = function() { abort("'setMainLoop' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "wget")) Module["wget"] = function() { abort("'wget' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "tempFixedLengthArray")) Module["tempFixedLengthArray"] = function() { abort("'tempFixedLengthArray' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "miniTempWebGLFloatBuffers")) Module["miniTempWebGLFloatBuffers"] = function() { abort("'miniTempWebGLFloatBuffers' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "heapObjectForWebGLType")) Module["heapObjectForWebGLType"] = function() { abort("'heapObjectForWebGLType' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "heapAccessShiftForWebGLHeap")) Module["heapAccessShiftForWebGLHeap"] = function() { abort("'heapAccessShiftForWebGLHeap' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GL")) Module["GL"] = function() { abort("'GL' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGet")) Module["emscriptenWebGLGet"] = function() { abort("'emscriptenWebGLGet' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "computeUnpackAlignedImageSize")) Module["computeUnpackAlignedImageSize"] = function() { abort("'computeUnpackAlignedImageSize' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGetTexPixelData")) Module["emscriptenWebGLGetTexPixelData"] = function() { abort("'emscriptenWebGLGetTexPixelData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGetUniform")) Module["emscriptenWebGLGetUniform"] = function() { abort("'emscriptenWebGLGetUniform' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "webglGetUniformLocation")) Module["webglGetUniformLocation"] = function() { abort("'webglGetUniformLocation' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "webglPrepareUniformLocationsBeforeFirstUse")) Module["webglPrepareUniformLocationsBeforeFirstUse"] = function() { abort("'webglPrepareUniformLocationsBeforeFirstUse' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "webglGetLeftBracePos")) Module["webglGetLeftBracePos"] = function() { abort("'webglGetLeftBracePos' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGetVertexAttrib")) Module["emscriptenWebGLGetVertexAttrib"] = function() { abort("'emscriptenWebGLGetVertexAttrib' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeGLArray")) Module["writeGLArray"] = function() { abort("'writeGLArray' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "AL")) Module["AL"] = function() { abort("'AL' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL_unicode")) Module["SDL_unicode"] = function() { abort("'SDL_unicode' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL_ttfContext")) Module["SDL_ttfContext"] = function() { abort("'SDL_ttfContext' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL_audio")) Module["SDL_audio"] = function() { abort("'SDL_audio' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL")) Module["SDL"] = function() { abort("'SDL' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL_gfx")) Module["SDL_gfx"] = function() { abort("'SDL_gfx' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLUT")) Module["GLUT"] = function() { abort("'GLUT' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "EGL")) Module["EGL"] = function() { abort("'EGL' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLFW_Window")) Module["GLFW_Window"] = function() { abort("'GLFW_Window' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLFW")) Module["GLFW"] = function() { abort("'GLFW' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLEW")) Module["GLEW"] = function() { abort("'GLEW' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "IDBStore")) Module["IDBStore"] = function() { abort("'IDBStore' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "runAndAbortIfError")) Module["runAndAbortIfError"] = function() { abort("'runAndAbortIfError' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emval_handle_array")) Module["emval_handle_array"] = function() { abort("'emval_handle_array' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emval_free_list")) Module["emval_free_list"] = function() { abort("'emval_free_list' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emval_symbols")) Module["emval_symbols"] = function() { abort("'emval_symbols' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "init_emval")) Module["init_emval"] = function() { abort("'init_emval' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "count_emval_handles")) Module["count_emval_handles"] = function() { abort("'count_emval_handles' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "get_first_emval")) Module["get_first_emval"] = function() { abort("'get_first_emval' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getStringOrSymbol")) Module["getStringOrSymbol"] = function() { abort("'getStringOrSymbol' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "requireHandle")) Module["requireHandle"] = function() { abort("'requireHandle' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emval_newers")) Module["emval_newers"] = function() { abort("'emval_newers' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "craftEmvalAllocator")) Module["craftEmvalAllocator"] = function() { abort("'craftEmvalAllocator' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emval_get_global")) Module["emval_get_global"] = function() { abort("'emval_get_global' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emval_methodCallers")) Module["emval_methodCallers"] = function() { abort("'emval_methodCallers' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "InternalError")) Module["InternalError"] = function() { abort("'InternalError' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "BindingError")) Module["BindingError"] = function() { abort("'BindingError' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UnboundTypeError")) Module["UnboundTypeError"] = function() { abort("'UnboundTypeError' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PureVirtualError")) Module["PureVirtualError"] = function() { abort("'PureVirtualError' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "init_embind")) Module["init_embind"] = function() { abort("'init_embind' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "throwInternalError")) Module["throwInternalError"] = function() { abort("'throwInternalError' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "throwBindingError")) Module["throwBindingError"] = function() { abort("'throwBindingError' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "throwUnboundTypeError")) Module["throwUnboundTypeError"] = function() { abort("'throwUnboundTypeError' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ensureOverloadTable")) Module["ensureOverloadTable"] = function() { abort("'ensureOverloadTable' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "exposePublicSymbol")) Module["exposePublicSymbol"] = function() { abort("'exposePublicSymbol' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "replacePublicSymbol")) Module["replacePublicSymbol"] = function() { abort("'replacePublicSymbol' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "extendError")) Module["extendError"] = function() { abort("'extendError' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "createNamedFunction")) Module["createNamedFunction"] = function() { abort("'createNamedFunction' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registeredInstances")) Module["registeredInstances"] = function() { abort("'registeredInstances' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getBasestPointer")) Module["getBasestPointer"] = function() { abort("'getBasestPointer' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerInheritedInstance")) Module["registerInheritedInstance"] = function() { abort("'registerInheritedInstance' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "unregisterInheritedInstance")) Module["unregisterInheritedInstance"] = function() { abort("'unregisterInheritedInstance' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getInheritedInstance")) Module["getInheritedInstance"] = function() { abort("'getInheritedInstance' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getInheritedInstanceCount")) Module["getInheritedInstanceCount"] = function() { abort("'getInheritedInstanceCount' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getLiveInheritedInstances")) Module["getLiveInheritedInstances"] = function() { abort("'getLiveInheritedInstances' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registeredTypes")) Module["registeredTypes"] = function() { abort("'registeredTypes' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "awaitingDependencies")) Module["awaitingDependencies"] = function() { abort("'awaitingDependencies' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "typeDependencies")) Module["typeDependencies"] = function() { abort("'typeDependencies' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registeredPointers")) Module["registeredPointers"] = function() { abort("'registeredPointers' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerType")) Module["registerType"] = function() { abort("'registerType' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "whenDependentTypesAreResolved")) Module["whenDependentTypesAreResolved"] = function() { abort("'whenDependentTypesAreResolved' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "embind_charCodes")) Module["embind_charCodes"] = function() { abort("'embind_charCodes' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "embind_init_charCodes")) Module["embind_init_charCodes"] = function() { abort("'embind_init_charCodes' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readLatin1String")) Module["readLatin1String"] = function() { abort("'readLatin1String' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getTypeName")) Module["getTypeName"] = function() { abort("'getTypeName' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "heap32VectorToArray")) Module["heap32VectorToArray"] = function() { abort("'heap32VectorToArray' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "requireRegisteredType")) Module["requireRegisteredType"] = function() { abort("'requireRegisteredType' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getShiftFromSize")) Module["getShiftFromSize"] = function() { abort("'getShiftFromSize' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "integerReadValueFromPointer")) Module["integerReadValueFromPointer"] = function() { abort("'integerReadValueFromPointer' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "enumReadValueFromPointer")) Module["enumReadValueFromPointer"] = function() { abort("'enumReadValueFromPointer' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "floatReadValueFromPointer")) Module["floatReadValueFromPointer"] = function() { abort("'floatReadValueFromPointer' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "simpleReadValueFromPointer")) Module["simpleReadValueFromPointer"] = function() { abort("'simpleReadValueFromPointer' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "runDestructors")) Module["runDestructors"] = function() { abort("'runDestructors' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "new_")) Module["new_"] = function() { abort("'new_' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "craftInvokerFunction")) Module["craftInvokerFunction"] = function() { abort("'craftInvokerFunction' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "embind__requireFunction")) Module["embind__requireFunction"] = function() { abort("'embind__requireFunction' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "tupleRegistrations")) Module["tupleRegistrations"] = function() { abort("'tupleRegistrations' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "structRegistrations")) Module["structRegistrations"] = function() { abort("'structRegistrations' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "genericPointerToWireType")) Module["genericPointerToWireType"] = function() { abort("'genericPointerToWireType' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "constNoSmartPtrRawPointerToWireType")) Module["constNoSmartPtrRawPointerToWireType"] = function() { abort("'constNoSmartPtrRawPointerToWireType' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "nonConstNoSmartPtrRawPointerToWireType")) Module["nonConstNoSmartPtrRawPointerToWireType"] = function() { abort("'nonConstNoSmartPtrRawPointerToWireType' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "init_RegisteredPointer")) Module["init_RegisteredPointer"] = function() { abort("'init_RegisteredPointer' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "RegisteredPointer")) Module["RegisteredPointer"] = function() { abort("'RegisteredPointer' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "RegisteredPointer_getPointee")) Module["RegisteredPointer_getPointee"] = function() { abort("'RegisteredPointer_getPointee' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "RegisteredPointer_destructor")) Module["RegisteredPointer_destructor"] = function() { abort("'RegisteredPointer_destructor' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "RegisteredPointer_deleteObject")) Module["RegisteredPointer_deleteObject"] = function() { abort("'RegisteredPointer_deleteObject' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "RegisteredPointer_fromWireType")) Module["RegisteredPointer_fromWireType"] = function() { abort("'RegisteredPointer_fromWireType' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "runDestructor")) Module["runDestructor"] = function() { abort("'runDestructor' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "releaseClassHandle")) Module["releaseClassHandle"] = function() { abort("'releaseClassHandle' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "finalizationGroup")) Module["finalizationGroup"] = function() { abort("'finalizationGroup' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "detachFinalizer_deps")) Module["detachFinalizer_deps"] = function() { abort("'detachFinalizer_deps' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "detachFinalizer")) Module["detachFinalizer"] = function() { abort("'detachFinalizer' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "attachFinalizer")) Module["attachFinalizer"] = function() { abort("'attachFinalizer' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "makeClassHandle")) Module["makeClassHandle"] = function() { abort("'makeClassHandle' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "init_ClassHandle")) Module["init_ClassHandle"] = function() { abort("'init_ClassHandle' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ClassHandle")) Module["ClassHandle"] = function() { abort("'ClassHandle' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ClassHandle_isAliasOf")) Module["ClassHandle_isAliasOf"] = function() { abort("'ClassHandle_isAliasOf' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "throwInstanceAlreadyDeleted")) Module["throwInstanceAlreadyDeleted"] = function() { abort("'throwInstanceAlreadyDeleted' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ClassHandle_clone")) Module["ClassHandle_clone"] = function() { abort("'ClassHandle_clone' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ClassHandle_delete")) Module["ClassHandle_delete"] = function() { abort("'ClassHandle_delete' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "deletionQueue")) Module["deletionQueue"] = function() { abort("'deletionQueue' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ClassHandle_isDeleted")) Module["ClassHandle_isDeleted"] = function() { abort("'ClassHandle_isDeleted' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ClassHandle_deleteLater")) Module["ClassHandle_deleteLater"] = function() { abort("'ClassHandle_deleteLater' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "flushPendingDeletes")) Module["flushPendingDeletes"] = function() { abort("'flushPendingDeletes' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "delayFunction")) Module["delayFunction"] = function() { abort("'delayFunction' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setDelayFunction")) Module["setDelayFunction"] = function() { abort("'setDelayFunction' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "RegisteredClass")) Module["RegisteredClass"] = function() { abort("'RegisteredClass' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "shallowCopyInternalPointer")) Module["shallowCopyInternalPointer"] = function() { abort("'shallowCopyInternalPointer' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "downcastPointer")) Module["downcastPointer"] = function() { abort("'downcastPointer' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "upcastPointer")) Module["upcastPointer"] = function() { abort("'upcastPointer' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "validateThis")) Module["validateThis"] = function() { abort("'validateThis' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "char_0")) Module["char_0"] = function() { abort("'char_0' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "char_9")) Module["char_9"] = function() { abort("'char_9' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "makeLegalFunctionName")) Module["makeLegalFunctionName"] = function() { abort("'makeLegalFunctionName' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "warnOnce")) Module["warnOnce"] = function() { abort("'warnOnce' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackSave")) Module["stackSave"] = function() { abort("'stackSave' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackRestore")) Module["stackRestore"] = function() { abort("'stackRestore' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackAlloc")) Module["stackAlloc"] = function() { abort("'stackAlloc' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "AsciiToString")) Module["AsciiToString"] = function() { abort("'AsciiToString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToAscii")) Module["stringToAscii"] = function() { abort("'stringToAscii' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF16ToString")) Module["UTF16ToString"] = function() { abort("'UTF16ToString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF16")) Module["stringToUTF16"] = function() { abort("'stringToUTF16' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF16")) Module["lengthBytesUTF16"] = function() { abort("'lengthBytesUTF16' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF32ToString")) Module["UTF32ToString"] = function() { abort("'UTF32ToString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF32")) Module["stringToUTF32"] = function() { abort("'stringToUTF32' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF32")) Module["lengthBytesUTF32"] = function() { abort("'lengthBytesUTF32' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "allocateUTF8")) Module["allocateUTF8"] = function() { abort("'allocateUTF8' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "allocateUTF8OnStack")) Module["allocateUTF8OnStack"] = function() { abort("'allocateUTF8OnStack' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["writeStackCookie"] = writeStackCookie;
Module["checkStackCookie"] = checkStackCookie;
if (!Object.getOwnPropertyDescriptor(Module, "intArrayFromBase64")) Module["intArrayFromBase64"] = function() { abort("'intArrayFromBase64' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "tryParseAsDataURI")) Module["tryParseAsDataURI"] = function() { abort("'tryParseAsDataURI' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_NORMAL")) Object.defineProperty(Module, "ALLOC_NORMAL", { configurable: true, get: function() { abort("'ALLOC_NORMAL' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_STACK")) Object.defineProperty(Module, "ALLOC_STACK", { configurable: true, get: function() { abort("'ALLOC_STACK' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") } });

var calledRun;

/**
 * @constructor
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
}

var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!calledRun) run();
  if (!calledRun) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
};

function stackCheckInit() {
  // This is normally called automatically during __wasm_call_ctors but need to
  // get these values before even running any of the ctors so we call it redundantly
  // here.
  // TODO(sbc): Move writeStackCookie to native to to avoid this.
  _emscripten_stack_init();
  writeStackCookie();
}

/** @type {function(Array=)} */
function run(args) {
  args = args || arguments_;

  if (runDependencies > 0) {
    return;
  }

  stackCheckInit();

  preRun();

  // a preRun added a dependency, run will be called later
  if (runDependencies > 0) {
    return;
  }

  function doRun() {
    // run may have just been called through dependencies being fulfilled just in this very frame,
    // or while the async setStatus time below was happening
    if (calledRun) return;
    calledRun = true;
    Module['calledRun'] = true;

    if (ABORT) return;

    initRuntime();

    readyPromiseResolve(Module);
    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    assert(!Module['_main'], 'compiled without a main, but one is present. if you added it from JS, use Module["onRuntimeInitialized"]');

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else
  {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = run;

/** @param {boolean|number=} implicit */
function exit(status, implicit) {
  EXITSTATUS = status;

  if (keepRuntimeAlive()) {
    // if exit() was called, we may warn the user if the runtime isn't actually being shut down
    if (!implicit) {
      var msg = 'program exited (with status: ' + status + '), but keepRuntimeAlive() is set (counter=' + runtimeKeepaliveCounter + ') due to an async operation, so halting execution but not exiting the runtime or preventing further async execution (you can use emscripten_force_exit, if you want to force a true shutdown)';
      readyPromiseReject(msg);
      err(msg);
    }
  } else {
    exitRuntime();
  }

  procExit(status);
}

function procExit(code) {
  EXITSTATUS = code;
  if (!keepRuntimeAlive()) {
    if (Module['onExit']) Module['onExit'](code);
    ABORT = true;
  }
  quit_(code, new ExitStatus(code));
}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

run();







  return Module.ready
}
);
})();
if (true)
  module.exports = Module;
else {}


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.ts");
/******/ 	
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,